{"version":3,"sources":["../../../../../../../assets/common/script/basic/rankNetwork/assets/common/script/basic/rankNetwork/network.js"],"names":["window","network","initNetwork","pomeloBuildObj","pomeloBuild","create","pomelo","isBinding","onMessage","bind","netListener","eventListener","reset","_registerNetEvent","curMsgName","routerManager","dispatch","clientEvent","receiveRouterFromServer","on","route","apply","arguments","getCurMsgName","connect","ip","port","cb","netConfig","host","log","isKicked","wsStr","setTimeout","disconnect","isConnected","guid","s4","Math","floor","random","toString","substring","send","routeStr","dataObj","uuid","console","JSON","stringify","addRouterToManager","msgOrigin","router","cc","error","Object","keys","length","setNetLoadingStatus","flag","checkNetLoadingStatus","keysLength","currentTime","Date","now","key","hasOwnProperty","routerTime","deltaTime","netLoadingCheckInterval","indexOf","index","clearCallback","isConnecting","isOpen","isClosed","isClosing","chooseNetworkMode","msgName","handler","msgContent"],"mappings":"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","sourceRoot":"../../../../../../../assets/common/script/basic/rankNetwork","sourcesContent":["window.network = {\n    initNetwork: function() {\n        this.pomeloBuildObj = pomeloBuild.create();\n        this.pomelo = this.pomeloBuildObj.pomelo;\n\n        this.isBinding = false;\n\n        if (!this.isBinding) { // 主要为了让onMessage绑定this\n            this.onMessage = this.onMessage.bind(this);\n            this.isBinding = true;\n        }\n\n        // 只能被network用，其他人不能用\n        this.netListener = eventListener.create(\"one\");\n        this.reset();\n        this._registerNetEvent();\n    },\n\n    reset: function() {\n        this.curMsgName = \"\";\n\n        // 路由管理器（暂名）重置，重置后立马刷新一次netLoading的显示\n        this.routerManager = {};\n    },\n    /**\n     内部使用的注册网络回调函数\n     */\n    _registerNetEvent: function() {\n        this.pomelo[\"on\"](\"heartbeat timeout\", function() {\n            this.pomelo[\"disconnect\"]();\n\n            this.netListener.dispatch(\"reconnect timeout\", {});\n        }.bind(this));\n\n        this.pomelo[\"on\"](\"heartbeat recv\", function() {\n            clientEvent.dispatch(\"updateNetworkState\", \"heartBeatRet\");\n        }.bind(this));\n\n        this.pomelo[\"on\"](\"close\", function() {\n            this.pomelo[\"disconnect\"]();\n\n            this.netListener.dispatch(\"network close\", {});\n        }.bind(this));\n\n        this.pomelo[\"on\"](\"onKick\", function() {\n            this.netListener.dispatch(\"kick user\", {});\n\n            // 关闭网络loading动画\n            this.receiveRouterFromServer('close all netLoading');\n        }.bind(this));\n    },\n\n    // 网络协议都是在logic注册的，不能注销\n    on: function(route) {\n        this.netListener.on.apply(this.netListener, arguments);\n        pomelo[\"on\"](route, this.onMessage);\n    },\n\n    getCurMsgName: function() {\n        return this.curMsgName;\n    },\n\n    connect: function(ip, port, cb) {\n        var netConfig = {\n            host: ip,\n            port: port,\n            log: true\n        };\n\n        this.isKicked = false;\n        netConfig.wsStr = \"wss://\";\n\n        // 解决微信上点击会崩溃的bug,网络连接不能在放在ui层,所以用timeout包装一层\n        setTimeout(function() {\n            this.pomelo[\"init\"](netConfig, function() {\n                if (cb) cb();\n            }.bind(this));\n        }.bind(this), 0);\n    },\n\n    disconnect: function() {\n        if (this.isConnected()) {\n            this.pomelo[\"disconnect\"]();\n        }\n    },\n    /**\n     *  globally-unique identifiers, 生成一个不重复的随机字符串，用于跟踪请求链\n     */\n    guid: function() {\n        function s4() {\n            return Math.floor((1 + Math.random()) * 0x10000)\n                .toString(16)\n                .substring(1);\n        }\n\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n            s4() + '-' + s4() + s4() + s4();\n    },\n\n    send: function(routeStr, dataObj) {\n        if (typeof (dataObj) === \"undefined\") {\n            dataObj = {};\n        }\n\n        // 请求参数中加入唯一标识,用于跟踪请求链。\n        dataObj.uuid = this.guid();\n        console.log(\"send route:\" + routeStr + \" data:\" + JSON.stringify(dataObj));\n\n        // 记录路由请求\n        this.addRouterToManager(routeStr);\n\n        if (this.isConnected()) {\n            this.pomelo[\"request\"](routeStr, dataObj, this.onMessage);\n        }\n    },\n\n    onMessage: function(msgOrigin) {\n        var router = msgOrigin[\"route\"];\n\n        this.receiveRouterFromServer(router);\n\n        console.log(\"receive msg from :\" + JSON.stringify(msgOrigin));\n\n        if (msgOrigin[\"body\"][\"code\"] === 500) {\n            cc.error(\"server data error, can't find the route:\" + router);\n            // pomelo异常处理都返回500，仍然需要做分发处理\n            // return;\n        }\n\n        if (!router) {\n            cc.error(\"please add the msg route in server\");\n            return;\n        }\n\n        // 空数据\n        if (Object.keys(msgOrigin[\"body\"]).length <= 0) {\n            cc.error(\"server data error, can't response no data proto\");\n            return;\n        }\n\n        this.curMsgName = msgOrigin[\"route\"];\n\n        this.netListener.dispatch(msgOrigin[\"route\"], msgOrigin[\"body\"]);\n    },\n\n    setNetLoadingStatus: function(flag) {\n        if (flag) {\n            // clientEvent.dispatch(\"showPanel\", \"netLoadingPanel\");\n        } else {\n            clientEvent.dispatch('hidePanel', \"netLoadingPanel\");\n        }\n    },\n\n    /**\n     * 检测 netLoading 的显示状态\n     * 从 routeManager 中获取每个记录的路由的请求时间，与当前时间对比\n     * 如果超出阈值就显示 netLoading\n     * 注：已返回的路由就会从 routerManager 中删掉\n     */\n    checkNetLoadingStatus: function() {\n        var keys = Object.keys(this.routerManager);\n        var keysLength = keys.length;\n        if (keysLength <= 0) {\n            this.netListener.dispatch('hidePanel', \"netLoadingPanel\");\n            return;\n        }\n\n        var currentTime = Date.now();\n        for (var key in this.routerManager) {\n            if (this.routerManager.hasOwnProperty(key)) {\n                var routerTime = this.routerManager[key];\n                var deltaTime = currentTime - routerTime;\n                if (deltaTime > this.netLoadingCheckInterval) {\n                    // 存在路由的请求时间超出了阈值，显示 netLoading\n                    // 有路由显示的话，就不再检查其他的路由\n                    return;\n                }\n            }\n        }\n    },\n\n    /**\n     * 将路由添加到路由管理器（暂名）\n     * @param {String} router 路由名\n     * 将 { 路由名 => 时间 } 作为键值对存起来，如果是已经存在的路由，则跳过\n     */\n    addRouterToManager: function(router) {\n        var keys = Object.keys(this.routerManager);\n\n        // 断线重连期间，拒绝其他的路由加入\n        if (keys.indexOf('connectTimeout') === -1) {\n            // 断线重连时，清空路由\n            if (router === 'connectTimeout') {\n                this.routerManager = {};\n            }\n\n            keys = Object.keys(this.routerManager);\n            var index = keys.indexOf(router);\n            if (index === -1) {\n                var currentTime = Date.now();\n                this.routerManager[router] = currentTime;\n            }\n        }\n    },\n\n    /**\n     * 收到网络返回，将路由管理器（暂名）中对应的路由删掉\n     * @param {String} router 路由名\n     */\n    receiveRouterFromServer: function(router) {\n        if (router === 'close all netLoading') {\n            this.routerManager = {};\n            this.checkNetLoadingStatus();\n            return;\n        }\n        var keys = Object.keys(this.routerManager);\n        var index = keys.indexOf(router);\n        if (index > -1) {\n            console.log(router, \"cost\", Date.now() - this.routerManager[router], \"ms\");\n            delete this.routerManager[router];\n\n            // 删除之后要刷新一次 netLoading 的显示\n            this.checkNetLoadingStatus();\n        }\n    },\n    /**\n     * 请客网络回调\n     */\n    clearCallback: function() {\n        if (this.pomelo) this.pomelo.clearCallback();\n    }\n};\n\nnetwork.isConnecting = function() {\n    return this.pomelo.isConnecting();\n};\n\nnetwork.isConnected = function() {\n    return this.pomelo.isOpen();\n};\n\nnetwork.isClosed = function() {\n    return this.pomelo.isClosed();\n};\n\nnetwork.isClosing = function() {\n    return this.pomelo.isClosing();\n};\n\nnetwork.chooseNetworkMode = function() {\n    this.initNetwork();\n    if (this.pomelo) {\n        for (var key in this.netListener) {\n            this.pomelo[\"on\"](key, this.onMessage);\n        }\n    }\n};\n\nnetwork.on = function(msgName, handler) {\n    this.netListener.on(msgName, handler);\n};\n\nnetwork.dispatch = function(msgName, msgContent) {\n    this.netListener.dispatch(msgName, msgContent);\n};\n"]}