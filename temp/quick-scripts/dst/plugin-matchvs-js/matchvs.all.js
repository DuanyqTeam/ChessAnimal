
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/plugin-matchvs-js/matchvs.all.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f772dTuhJVOqIdOgjNeFhPX', 'matchvs.all');
// matchvs.all.js

"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var MVS = function (e) {
  var t = {
    version: "--SDK_RELMatchvs_V3.7.8.0",
    Game: {
      id: 0,
      appkey: ""
    },
    DEBUG: !1,
    IsWss: !1,
    IsNotice: !0,
    SetWss: function SetWss(e) {
      this.IsWss = e;
    },
    Notice: function Notice() {
      this.IsNotice && (console.warn("==================================Matchvs==================================="), console.warn("             SDK_v3.7.7.+版本init接口和login接口参数做相应的调整"), console.warn("         详细请看 http://doc.matchvs.com/APIDoc/JavaScript"), console.warn("============================================================================"));
    },
    Init: function Init() {
      this.Notice(), "@MAIN_URL" === t.Host.MAIN_URL && (t.Host.MAIN_URL = "https://sdk.matchvs.com");
    },
    getNowTimeStr: function getNowTimeStr() {
      var e = new Date(),
          t = e.getMonth() + 1,
          r = e.getDate();
      return 1 <= t && t <= 9 && (t = "0" + t), 0 <= r && r <= 9 && (r = "0" + r), "[" + e.getFullYear() + "-" + t + "-" + r + " " + e.getHours() + ":" + e.getMinutes() + ":" + e.getSeconds() + "." + e.getMilliseconds() + "]";
    },
    LgFormat: function LgFormat(e) {
      return "[MatchvsSDK][" + this.getNowTimeStr() + "][" + e + "]";
    },
    Config: {
      HEART_BEAT_INTERVAL: 3e3,
      MAXPLAYER_LIMIT: 100,
      MINPLAYER_LIMIT: 2
    },
    Host: {
      MAIN_URL: "@MAIN_URL",
      HOST_GATWAY_ADDR: "",
      HOST_HOTEL_ADDR: "",
      HOST_WATCH_ADDR: "",
      CMSNS_URL: "",
      VS_USER_URL: "",
      VS_OPEN_URL: "",
      VS_PAY_URL: "",
      VS_PRODUCT_URL: ""
    },
    APIPATH: {
      HOSTLIST: "/v1/gateway/query",
      REGISTERUSER: "/wc3/regit.do"
    },
    TgRoomType: {
      NRoom: -1,
      PRoom: 0,
      WRoom: 1
    }
  };
  return t.Init(), t;
}(),
    MatchvsLog = {
  toArray: function toArray(e) {
    for (var t = [], r = 0; r < e.length; r++) {
      t.push(e[r]);
    }

    return t;
  }
};

function getNowFormatDate() {
  var e = new Date(),
      t = e.getMonth() + 1,
      r = e.getDate();
  return 1 <= t && t <= 9 && (t = "0" + t), 0 <= r && r <= 9 && (r = "0" + r), "[" + e.getFullYear() + "-" + t + "-" + r + " " + e.getHours() + ":" + e.getMinutes() + ":" + e.getSeconds() + "." + e.getMilliseconds() + "]";
}

MatchvsLog.openLog = function () {
  console.log("---- open log ----"), "undefined" == typeof wx ? (MatchvsLog.logI = console.log.bind(console, "[INFO][Matchvs] "), MatchvsLog.logE = console.error.bind(console, "[ERROR][Matchvs] ")) : (MatchvsLog.logI = function () {
    var t = "";

    try {
      throw new Error();
    } catch (e) {
      var r = e.stack.split(/\n/)[1];
      t = r.slice(r.lastIndexOf("/") + 1, r.lastIndexOf(")"));
    }

    console.log("[INFO][Matchvs] " + getNowFormatDate() + " " + this.toArray(arguments) + " " + t);
  }, MatchvsLog.logE = function () {
    var t = "";

    try {
      throw new Error();
    } catch (e) {
      var r = e.stack.split(/\n/)[1];
      t = r.slice(r.lastIndexOf("/") + 1, r.lastIndexOf(")"));
    }

    console.error("[ERROR][Matchvs] " + getNowFormatDate() + " " + this.toArray(arguments) + " " + t);
  });
}, MatchvsLog.closeLog = function () {
  console.log("---- close log ----"), MatchvsLog.logI = function () {}, MatchvsLog.logE = function () {};
}, MatchvsLog.openLog(), function (e) {
  var o = {
    NONE: 0,
    INITING: 1,
    HAVE_INIT: 2,
    LOGINING: 4,
    HAVE_LOGIN: 8,
    IN_ROOM: 16,
    CREATEROOM: 32,
    JOIN_ROOMING: 64,
    LEAVE_ROOMING: 128,
    LOGOUTING: 256,
    RECONNECTING: 512,
    IN_WATCHING: 1024,
    IN_WATCH: 2048,
    LEAVE_WATCHING: 4096,
    TEAMMATCHING: 8192,
    IN_TEAM: 16384
  };
  e.ENGE_STATE = o, e.MvsState = function () {
    var t = o.NONE;
    this.ReSet = function () {
      t = o.NONE;
    }, this.SetState = function (e) {
      t |= e;
    }, this.DelState = function (e) {
      t &= ~e;
    };

    var r = function r(e) {
      return (t & e) === e;
    };

    this.StateDoing = function () {
      return r(o.INITING) ? -3 : r(o.LOGINING) ? -5 : r(o.JOIN_ROOMING) ? -7 : r(o.CREATEROOM) ? -7 : r(o.LOGOUTING) ? -11 : r(o.IN_WATCHING) ? -12 : r(o.TEAMMATCHING) ? -13 : r(o.LEAVE_ROOMING) ? -10 : r(o.LEAVE_WATCHING) ? -14 : 0;
    }, this.SetInit = function () {
      t = o.NONE, this.SetState(o.HAVE_INIT);
    }, this.SetIniting = function () {
      t = o.NONE, this.SetState(o.INITING);
    }, this.SetLogining = function () {
      this.DelState(o.HAVE_LOGIN), this.SetState(o.LOGINING);
    }, this.SetLogin = function () {
      this.DelState(o.LOGINING), this.SetState(o.HAVE_LOGIN);
    }, this.HaveInit = function () {
      return !1 === r(o.HAVE_INIT) ? -2 : r(o.INITING) ? -3 : 0;
    }, this.HaveLogin = function () {
      var e = this.HaveInit();
      return 0 !== e ? e : r(o.HAVE_LOGIN) ? 0 : -4;
    }, this.LoginCheck = function () {
      var e = this.StateDoing();
      return e < 0 ? e : (e = this.HaveInit()) < 0 ? e : r(o.HAVE_LOGIN) ? -6 : 0;
    }, this.SetJoinRooming = function () {
      this.SetState(o.JOIN_ROOMING);
    }, this.SetInRoom = function () {
      this.SetState(o.IN_ROOM);
    }, this.SetCreateRoom = function () {
      this.DelState(o.IN_ROOM), this.SetState(o.CREATEROOM);
    }, this.DelCreateRoom = function () {
      this.DelState(o.CREATEROOM);
    }, this.IsCreateRoom = function () {
      return r(o.CREATEROOM);
    }, this.DelJoinRooming = function () {
      this.DelState(o.JOIN_ROOMING);
    }, this.IsJoinRooming = function () {
      return r(o.JOIN_ROOMING);
    }, this.DelInRoom = function () {
      this.DelState(o.CREATEROOM), this.DelState(o.JOIN_ROOMING), this.DelState(o.IN_ROOM), this.DelState(o.LEAVE_ROOMING), this.DelState(o.LEAVE_WATCHING), this.DelState(o.IN_WATCH), this.DelState(o.IN_ROOM);
    }, this.HaveInRoom = function () {
      var e = this.HaveLogin();
      return e < 0 ? e : (e = this.StateDoing()) < 0 ? e : r(o.IN_ROOM) ? 0 : -6;
    }, this.InRoomCheck = function () {
      var e = this.HaveLogin();
      return e < 0 ? e : (e = this.StateDoing()) < 0 ? e : r(o.IN_ROOM) ? -8 : r(o.IN_WATCH) ? -8 : 0;
    }, this.IsReconnecting = function () {
      return r(o.RECONNECTING) ? -9 : 0;
    }, this.ReconnectCheck = function () {
      var e = this.HaveInit();
      return e < 0 ? e : r(o.RECONNECTING) ? -9 : r(o.IN_ROOM) ? -8 : 0;
    }, this.SetReconnecting = function () {
      this.SetState(o.RECONNECTING);
    }, this.DelReconnecting = function () {
      this.DelState(o.RECONNECTING);
    }, this.LeaveRoomCheck = function () {
      var e = this.HaveLogin();
      return e < 0 ? e : (e = this.StateDoing()) < 0 ? e : 0;
    }, this.SetLeaveRooming = function () {
      this.SetState(o.LEAVE_ROOMING);
    }, this.IsLeaveRooming = function () {
      return r(o.LEAVE_ROOMING);
    }, this.SetLoginOuting = function () {
      this.SetState(o.LOGOUTING);
    }, this.IsLoginOuting = function () {
      return r(o.LOGOUTING);
    }, this.SetJoinWatching = function () {
      this.SetState(o.IN_WATCHING);
    }, this.DelJoinWatching = function () {
      this.DelState(o.IN_WATCHING);
    }, this.SetInWatch = function () {
      this.SetState(o.IN_WATCH);
    }, this.HaveInWatch = function () {
      var e = this.HaveLogin();
      return 0 !== e ? e : 0 !== (e = this.StateDoing()) ? e : r(o.IN_WATCH) ? 0 : -6;
    }, this.InWatchCheck = function () {
      var e = this.HaveLogin();
      return 0 !== e ? e : 0 !== (e = this.StateDoing()) ? e : r(o.IN_WATCH) ? -8 : 0;
    }, this.HaveInTeam = function () {
      var e = this.HaveLogin();
      return 0 !== e ? e : 0 !== (e = this.StateDoing()) ? e : r(o.IN_TEAM) ? 0 : -22;
    }, this.SetInTeam = function () {
      this.SetState(o.IN_TEAM);
    }, this.DelInTeam = function () {
      this.DelState(o.IN_TEAM);
    }, this.SetTeamMatching = function () {
      this.SetState(o.TEAMMATCHING);
    }, this.DelTeamMatching = function () {
      this.DelState(o.TEAMMATCHING);
    }, this.IsTeamMatching = function () {
      return r(o.TEAMMATCHING);
    };
  };
}(MVS || {});
var hexcase = 0,
    b64pad = "",
    chrsz = 8;

function hex_md5(e) {
  return binl2hex(core_md5(str2binl(e), e.length * chrsz));
}

function b64_md5(e) {
  return binl2b64(core_md5(str2binl(e), e.length * chrsz));
}

function str_md5(e) {
  return binl2str(core_md5(str2binl(e), e.length * chrsz));
}

function hex_hmac_md5(e, t) {
  return binl2hex(core_hmac_md5(e, t));
}

function b64_hmac_md5(e, t) {
  return binl2b64(core_hmac_md5(e, t));
}

function str_hmac_md5(e, t) {
  return binl2str(core_hmac_md5(e, t));
}

function md5_vm_test() {
  return "900150983cd24fb0d6963f7d28e17f72" == hex_md5("abc");
}

function core_md5(e, t) {
  e[t >> 5] |= 128 << t % 32, e[14 + (t + 64 >>> 9 << 4)] = t;

  for (var r = 1732584193, o = -271733879, s = -1732584194, i = 271733878, a = 0; a < e.length; a += 16) {
    var n = r,
        p = o,
        g = s,
        u = i;
    o = md5_ii(o = md5_ii(o = md5_ii(o = md5_ii(o = md5_hh(o = md5_hh(o = md5_hh(o = md5_hh(o = md5_gg(o = md5_gg(o = md5_gg(o = md5_gg(o = md5_ff(o = md5_ff(o = md5_ff(o = md5_ff(o, s = md5_ff(s, i = md5_ff(i, r = md5_ff(r, o, s, i, e[a + 0], 7, -680876936), o, s, e[a + 1], 12, -389564586), r, o, e[a + 2], 17, 606105819), i, r, e[a + 3], 22, -1044525330), s = md5_ff(s, i = md5_ff(i, r = md5_ff(r, o, s, i, e[a + 4], 7, -176418897), o, s, e[a + 5], 12, 1200080426), r, o, e[a + 6], 17, -1473231341), i, r, e[a + 7], 22, -45705983), s = md5_ff(s, i = md5_ff(i, r = md5_ff(r, o, s, i, e[a + 8], 7, 1770035416), o, s, e[a + 9], 12, -1958414417), r, o, e[a + 10], 17, -42063), i, r, e[a + 11], 22, -1990404162), s = md5_ff(s, i = md5_ff(i, r = md5_ff(r, o, s, i, e[a + 12], 7, 1804603682), o, s, e[a + 13], 12, -40341101), r, o, e[a + 14], 17, -1502002290), i, r, e[a + 15], 22, 1236535329), s = md5_gg(s, i = md5_gg(i, r = md5_gg(r, o, s, i, e[a + 1], 5, -165796510), o, s, e[a + 6], 9, -1069501632), r, o, e[a + 11], 14, 643717713), i, r, e[a + 0], 20, -373897302), s = md5_gg(s, i = md5_gg(i, r = md5_gg(r, o, s, i, e[a + 5], 5, -701558691), o, s, e[a + 10], 9, 38016083), r, o, e[a + 15], 14, -660478335), i, r, e[a + 4], 20, -405537848), s = md5_gg(s, i = md5_gg(i, r = md5_gg(r, o, s, i, e[a + 9], 5, 568446438), o, s, e[a + 14], 9, -1019803690), r, o, e[a + 3], 14, -187363961), i, r, e[a + 8], 20, 1163531501), s = md5_gg(s, i = md5_gg(i, r = md5_gg(r, o, s, i, e[a + 13], 5, -1444681467), o, s, e[a + 2], 9, -51403784), r, o, e[a + 7], 14, 1735328473), i, r, e[a + 12], 20, -1926607734), s = md5_hh(s, i = md5_hh(i, r = md5_hh(r, o, s, i, e[a + 5], 4, -378558), o, s, e[a + 8], 11, -2022574463), r, o, e[a + 11], 16, 1839030562), i, r, e[a + 14], 23, -35309556), s = md5_hh(s, i = md5_hh(i, r = md5_hh(r, o, s, i, e[a + 1], 4, -1530992060), o, s, e[a + 4], 11, 1272893353), r, o, e[a + 7], 16, -155497632), i, r, e[a + 10], 23, -1094730640), s = md5_hh(s, i = md5_hh(i, r = md5_hh(r, o, s, i, e[a + 13], 4, 681279174), o, s, e[a + 0], 11, -358537222), r, o, e[a + 3], 16, -722521979), i, r, e[a + 6], 23, 76029189), s = md5_hh(s, i = md5_hh(i, r = md5_hh(r, o, s, i, e[a + 9], 4, -640364487), o, s, e[a + 12], 11, -421815835), r, o, e[a + 15], 16, 530742520), i, r, e[a + 2], 23, -995338651), s = md5_ii(s, i = md5_ii(i, r = md5_ii(r, o, s, i, e[a + 0], 6, -198630844), o, s, e[a + 7], 10, 1126891415), r, o, e[a + 14], 15, -1416354905), i, r, e[a + 5], 21, -57434055), s = md5_ii(s, i = md5_ii(i, r = md5_ii(r, o, s, i, e[a + 12], 6, 1700485571), o, s, e[a + 3], 10, -1894986606), r, o, e[a + 10], 15, -1051523), i, r, e[a + 1], 21, -2054922799), s = md5_ii(s, i = md5_ii(i, r = md5_ii(r, o, s, i, e[a + 8], 6, 1873313359), o, s, e[a + 15], 10, -30611744), r, o, e[a + 6], 15, -1560198380), i, r, e[a + 13], 21, 1309151649), s = md5_ii(s, i = md5_ii(i, r = md5_ii(r, o, s, i, e[a + 4], 6, -145523070), o, s, e[a + 11], 10, -1120210379), r, o, e[a + 2], 15, 718787259), i, r, e[a + 9], 21, -343485551), r = safe_add(r, n), o = safe_add(o, p), s = safe_add(s, g), i = safe_add(i, u);
  }

  return Array(r, o, s, i);
}

function md5_cmn(e, t, r, o, s, i) {
  return safe_add(bit_rol(safe_add(safe_add(t, e), safe_add(o, i)), s), r);
}

function md5_ff(e, t, r, o, s, i, a) {
  return md5_cmn(t & r | ~t & o, e, t, s, i, a);
}

function md5_gg(e, t, r, o, s, i, a) {
  return md5_cmn(t & o | r & ~o, e, t, s, i, a);
}

function md5_hh(e, t, r, o, s, i, a) {
  return md5_cmn(t ^ r ^ o, e, t, s, i, a);
}

function md5_ii(e, t, r, o, s, i, a) {
  return md5_cmn(r ^ (t | ~o), e, t, s, i, a);
}

function core_hmac_md5(e, t) {
  var r = str2binl(e);
  16 < r.length && (r = core_md5(r, e.length * chrsz));

  for (var o = Array(16), s = Array(16), i = 0; i < 16; i++) {
    o[i] = 909522486 ^ r[i], s[i] = 1549556828 ^ r[i];
  }

  var a = core_md5(o.concat(str2binl(t)), 512 + t.length * chrsz);
  return core_md5(s.concat(a), 640);
}

function safe_add(e, t) {
  var r = (65535 & e) + (65535 & t);
  return (e >> 16) + (t >> 16) + (r >> 16) << 16 | 65535 & r;
}

function bit_rol(e, t) {
  return e << t | e >>> 32 - t;
}

function str2binl(e) {
  for (var t = Array(), r = (1 << chrsz) - 1, o = 0; o < e.length * chrsz; o += chrsz) {
    t[o >> 5] |= (e.charCodeAt(o / chrsz) & r) << o % 32;
  }

  return t;
}

function binl2str(e) {
  for (var t = "", r = (1 << chrsz) - 1, o = 0; o < 32 * e.length; o += chrsz) {
    t += String.fromCharCode(e[o >> 5] >>> o % 32 & r);
  }

  return t;
}

function binl2hex(e) {
  for (var t = hexcase ? "0123456789ABCDEF" : "0123456789abcdef", r = "", o = 0; o < 4 * e.length; o++) {
    r += t.charAt(e[o >> 2] >> o % 4 * 8 + 4 & 15) + t.charAt(e[o >> 2] >> o % 4 * 8 & 15);
  }

  return r;
}

function binl2b64(e) {
  for (var t = "", r = 0; r < 4 * e.length; r += 3) {
    for (var o = (e[r >> 2] >> r % 4 * 8 & 255) << 16 | (e[r + 1 >> 2] >> (r + 1) % 4 * 8 & 255) << 8 | e[r + 2 >> 2] >> (r + 2) % 4 * 8 & 255, s = 0; s < 4; s++) {
      8 * r + 6 * s > 32 * e.length ? t += b64pad : t += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(o >> 6 * (3 - s) & 63);
    }
  }

  return t;
}

var format = function format(t) {
  for (var r, e, o, s, i = 1, a = [].slice.call(arguments), n = 0, p = t.length, g = "", u = !1, l = !1, m = function m() {
    return a[i++];
  }, c = function c() {
    for (var e = ""; /\d/.test(t[n]);) {
      e += t[n++], r = t[n];
    }

    return 0 < e.length ? parseInt(e) : null;
  }; n < p; ++n) {
    if (r = t[n], u) switch (u = !1, "." == r ? (l = !1, r = t[++n]) : "0" == r && "." == t[n + 1] ? (l = !0, r = t[n += 2]) : l = !0, s = c(), r) {
      case "b":
        g += parseInt(m(), 10).toString(2);
        break;

      case "c":
        "string" == typeof (e = m()) || e instanceof String ? g += e : g += String.fromCharCode(parseInt(e, 10));
        break;

      case "d":
        g += parseInt(m(), 10);
        break;

      case "f":
        o = String(parseFloat(m()).toFixed(s || 6)), g += l ? o : o.replace(/^0/, "");
        break;

      case "j":
        g += JSON.stringify(m());
        break;

      case "o":
        g += "0" + parseInt(m(), 10).toString(8);
        break;

      case "s":
        g += m();
        break;

      case "x":
        g += "0x" + parseInt(m(), 10).toString(16);
        break;

      case "X":
        g += "0x" + parseInt(m(), 10).toString(16).toUpperCase();
        break;

      default:
        g += r;
    } else "%" === r ? u = !0 : g += r;
  }

  return g;
};

function IncludeJS(e) {
  new_element = document.createElement("script"), new_element.setAttribute("type", "text/javascript"), new_element.setAttribute("src", e), document.body.appendChild(new_element);
}

function MSExtend(e, t) {
  var r = t.prototype,
      o = e.prototype;

  for (var s in r) {
    o[s] = r[s];
  }
}

function stringToUtf8ByteArray(e) {
  if (!e || "string" != typeof e) return new Uint8Array(0);

  for (var t = [], r = 0, o = 0; o < e.length; o++) {
    var s = e.charCodeAt(o);
    s < 128 ? t[r++] = s : (s < 2048 ? t[r++] = s >> 6 | 192 : (55296 == (64512 & s) && o + 1 < e.length && 56320 == (64512 & e.charCodeAt(o + 1)) ? (s = 65536 + ((1023 & s) << 10) + (1023 & e.charCodeAt(++o)), t[r++] = s >> 18 | 240, t[r++] = s >> 12 & 63 | 128) : t[r++] = s >> 12 | 224, t[r++] = s >> 6 & 63 | 128), t[r++] = 63 & s | 128);
  }

  for (var i = new Uint8Array(t.length), a = 0; a < i.length; a++) {
    i[a] = t[a];
  }

  return i;
}

function utf8ByteArrayToString(e) {
  for (var t = [], r = 0, o = 0; r < e.length;) {
    if ((a = e[r++]) < 128) t[o++] = String.fromCharCode(a);else if (191 < a && a < 224) {
      var s = e[r++];
      t[o++] = String.fromCharCode((31 & a) << 6 | 63 & s);
    } else if (239 < a && a < 365) {
      s = e[r++];
      var i = e[r++],
          a = ((7 & a) << 18 | (63 & s) << 12 | (63 & i) << 6 | 63 & e[r++]) - 65536;
      t[o++] = String.fromCharCode(55296 + (a >> 10)), t[o++] = String.fromCharCode(56320 + (1023 & a));
    } else s = e[r++], i = e[r++], t[o++] = String.fromCharCode((15 & a) << 12 | (63 & s) << 6 | 63 & i);
  }

  return t.join("");
}

function LocalStore_Save(e, t) {
  return window.localStorage ? (localStorage.setItem(e, t), !0) : "undefined" != typeof wx && (wx.setStorageSync(e, t), !0);
}

function LocalStore_Clear() {
  return window.localStorage ? (localStorage.clear(), !0) : "undefined" != typeof wx && (wx.clearStorageSync(), !0);
}

function LocalStore_Load(e) {
  return window.localStorage ? localStorage.getItem(e) : "undefined" != typeof wx ? wx.getStorageSync(e) : null;
}

function isIE() {
  return !!window.ActiveXObject || "ActiveXObject" in window;
}

"function" != typeof String.prototype.startsWith && (String.prototype.startsWith = function (e) {
  return this.slice(0, e.length) === e;
}), "function" != typeof String.prototype.endsWith && (String.prototype.endsWith = function (e) {
  return -1 !== this.indexOf(e, this.length - e.length);
}), function (e) {
  var t = {
    isNeedUseWSS: function isNeedUseWSS() {
      return !!MVS.IsWss || "undefined" != typeof wx || "undefined" != typeof BK;
    },
    getLiveUrl: function getLiveUrl(e, t, r, o) {
      var s = "live=" + e.getHoteladdr() + "&gameID=" + t + "&roomID=" + r + "&setID=" + o;
      return MVS.IsWss ? "wss://" + e.getWssproxy() + "/watch?" + s : "ws://" + e.getHoteladdr();
    },
    getHotelUrl: function getHotelUrl(e) {
      return this.isNeedUseWSS() ? "wss://" + e.getWssproxy() + "/proxy?hotel=" + e.getHoteladdr() : "ws://" + e.getHoteladdr();
    }
  };
  e.MsUtil = t;

  var r = function () {
    var s = {},
        i = 0;

    function e() {}

    return "undefined" != typeof BK ? (e.prototype.setInterval = function (e, t) {
      var r = new BK.Ticker();
      r.interval = 6 * t / 100, r.setTickerCallBack(e);
      var o = ++i;
      return s[o] = r, o;
    }, e.prototype.clearInterval = function (e) {
      var t = s[e];
      t && (t.dispose(), delete s[e]);
    }) : (e.prototype.setInterval = function (e, t) {
      return setInterval(e, t);
    }, e.prototype.clearInterval = function (e) {
      clearInterval(e);
    }), e;
  }();

  e.MvsTicker = r, e.ticker = new r();
}(MVS || {});

var MVS = function (e) {
  var t,
      r = ((t = function t() {}).prototype.isInvailed = function (e) {
    return !0;
  }, t);
  return e.AppKeyCheck = r, e;
}(MVS || {});

!function i(a, n, p) {
  function g(t, e) {
    if (!n[t]) {
      if (!a[t]) {
        var r = "function" == typeof _require && _require;
        if (!e && r) return r(t, !0);
        if (u) return u(t, !0);
        var o = new Error("Cannot find module '" + t + "'");
        throw o.code = "MODULE_NOT_FOUND", o;
      }

      var s = n[t] = {
        exports: {}
      };
      a[t][0].call(s.exports, function (e) {
        return g(a[t][1][e] || e);
      }, s, s.exports, i, a, n, p);
    }

    return n[t].exports;
  }

  for (var u = "function" == typeof _require && _require, e = 0; e < p.length; e++) {
    g(p[e]);
  }

  return g;
}({
  1: [function (e, t, r) {
    "use strict";

    r.byteLength = function (e) {
      var t = c(e),
          r = t[0],
          o = t[1];
      return 3 * (r + o) / 4 - o;
    }, r.toByteArray = function (e) {
      for (var t, r = c(e), o = r[0], s = r[1], i = new m((g = o, u = s, 3 * (g + u) / 4 - u)), a = 0, n = 0 < s ? o - 4 : o, p = 0; p < n; p += 4) {
        t = l[e.charCodeAt(p)] << 18 | l[e.charCodeAt(p + 1)] << 12 | l[e.charCodeAt(p + 2)] << 6 | l[e.charCodeAt(p + 3)], i[a++] = t >> 16 & 255, i[a++] = t >> 8 & 255, i[a++] = 255 & t;
      }

      var g, u;
      2 === s && (t = l[e.charCodeAt(p)] << 2 | l[e.charCodeAt(p + 1)] >> 4, i[a++] = 255 & t);
      1 === s && (t = l[e.charCodeAt(p)] << 10 | l[e.charCodeAt(p + 1)] << 4 | l[e.charCodeAt(p + 2)] >> 2, i[a++] = t >> 8 & 255, i[a++] = 255 & t);
      return i;
    }, r.fromByteArray = function (e) {
      for (var t, r = e.length, o = r % 3, s = [], i = 0, a = r - o; i < a; i += 16383) {
        s.push(p(e, i, a < i + 16383 ? a : i + 16383));
      }

      1 === o ? (t = e[r - 1], s.push(n[t >> 2] + n[t << 4 & 63] + "==")) : 2 === o && (t = (e[r - 2] << 8) + e[r - 1], s.push(n[t >> 10] + n[t >> 4 & 63] + n[t << 2 & 63] + "="));
      return s.join("");
    };

    for (var n = [], l = [], m = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", s = 0, i = o.length; s < i; ++s) {
      n[s] = o[s], l[o.charCodeAt(s)] = s;
    }

    function c(e) {
      var t = e.length;
      if (0 < t % 4) throw new Error("Invalid string. Length must be a multiple of 4");
      var r = e.indexOf("=");
      return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];
    }

    function p(e, t, r) {
      for (var o, s, i = [], a = t; a < r; a += 3) {
        o = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), i.push(n[(s = o) >> 18 & 63] + n[s >> 12 & 63] + n[s >> 6 & 63] + n[63 & s]);
      }

      return i.join("");
    }

    l["-".charCodeAt(0)] = 62, l["_".charCodeAt(0)] = 63;
  }, {}],
  2: [function (e, t, r) {
    "use strict";

    var o = e("base64-js"),
        i = e("ieee754");
    r.Buffer = l, r.SlowBuffer = function (e) {
      +e != e && (e = 0);
      return l.alloc(+e);
    }, r.INSPECT_MAX_BYTES = 50;
    var s = 2147483647;

    function a(e) {
      if (s < e) throw new RangeError('The value "' + e + '" is invalid for option "size"');
      var t = new Uint8Array(e);
      return t.__proto__ = l.prototype, t;
    }

    function l(e, t, r) {
      if ("number" == typeof e) {
        if ("string" == typeof t) throw new TypeError('The "string" argument must be of type string. Received type number');
        return g(e);
      }

      return n(e, t, r);
    }

    function n(e, t, r) {
      if ("string" == typeof e) return function (e, t) {
        "string" == typeof t && "" !== t || (t = "utf8");
        if (!l.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
        var r = 0 | c(e, t),
            o = a(r),
            s = o.write(e, t);
        s !== r && (o = o.slice(0, s));
        return o;
      }(e, t);
      if (ArrayBuffer.isView(e)) return u(e);
      if (null == e) throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + _typeof(e));
      if (k(e, ArrayBuffer) || e && k(e.buffer, ArrayBuffer)) return function (e, t, r) {
        if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
        if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
        var o;
        o = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r);
        return o.__proto__ = l.prototype, o;
      }(e, t, r);
      if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type number');
      var o = e.valueOf && e.valueOf();
      if (null != o && o !== e) return l.from(o, t, r);

      var s = function (e) {
        if (l.isBuffer(e)) {
          var t = 0 | m(e.length),
              r = a(t);
          return 0 === r.length || e.copy(r, 0, 0, t), r;
        }

        if (void 0 !== e.length) return "number" != typeof e.length || P(e.length) ? a(0) : u(e);
        if ("Buffer" === e.type && Array.isArray(e.data)) return u(e.data);
      }(e);

      if (s) return s;
      if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return l.from(e[Symbol.toPrimitive]("string"), t, r);
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + _typeof(e));
    }

    function p(e) {
      if ("number" != typeof e) throw new TypeError('"size" argument must be of type number');
      if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
    }

    function g(e) {
      return p(e), a(e < 0 ? 0 : 0 | m(e));
    }

    function u(e) {
      for (var t = e.length < 0 ? 0 : 0 | m(e.length), r = a(t), o = 0; o < t; o += 1) {
        r[o] = 255 & e[o];
      }

      return r;
    }

    function m(e) {
      if (s <= e) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s.toString(16) + " bytes");
      return 0 | e;
    }

    function c(e, t) {
      if (l.isBuffer(e)) return e.length;
      if (ArrayBuffer.isView(e) || k(e, ArrayBuffer)) return e.byteLength;
      if ("string" != typeof e) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + _typeof(e));
      var r = e.length,
          o = 2 < arguments.length && !0 === arguments[2];
      if (!o && 0 === r) return 0;

      for (var s = !1;;) {
        switch (t) {
          case "ascii":
          case "latin1":
          case "binary":
            return r;

          case "utf8":
          case "utf-8":
            return C(e).length;

          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return 2 * r;

          case "hex":
            return r >>> 1;

          case "base64":
            return N(e).length;

          default:
            if (s) return o ? -1 : C(e).length;
            t = ("" + t).toLowerCase(), s = !0;
        }
      }
    }

    function d(e, t, r) {
      var o = e[t];
      e[t] = e[r], e[r] = o;
    }

    function f(e, t, r, o, s) {
      if (0 === e.length) return -1;

      if ("string" == typeof r ? (o = r, r = 0) : 2147483647 < r ? r = 2147483647 : r < -2147483648 && (r = -2147483648), P(r = +r) && (r = s ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
        if (s) return -1;
        r = e.length - 1;
      } else if (r < 0) {
        if (!s) return -1;
        r = 0;
      }

      if ("string" == typeof t && (t = l.from(t, o)), l.isBuffer(t)) return 0 === t.length ? -1 : h(e, t, r, o, s);
      if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? s ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : h(e, [t], r, o, s);
      throw new TypeError("val must be string, number or Buffer");
    }

    function h(e, t, r, o, s) {
      var i,
          a = 1,
          n = e.length,
          p = t.length;

      if (void 0 !== o && ("ucs2" === (o = String(o).toLowerCase()) || "ucs-2" === o || "utf16le" === o || "utf-16le" === o)) {
        if (e.length < 2 || t.length < 2) return -1;
        n /= a = 2, p /= 2, r /= 2;
      }

      function g(e, t) {
        return 1 === a ? e[t] : e.readUInt16BE(t * a);
      }

      if (s) {
        var u = -1;

        for (i = r; i < n; i++) {
          if (g(e, i) === g(t, -1 === u ? 0 : i - u)) {
            if (-1 === u && (u = i), i - u + 1 === p) return u * a;
          } else -1 !== u && (i -= i - u), u = -1;
        }
      } else for (n < r + p && (r = n - p), i = r; 0 <= i; i--) {
        for (var l = !0, m = 0; m < p; m++) {
          if (g(e, i + m) !== g(t, m)) {
            l = !1;
            break;
          }
        }

        if (l) return i;
      }

      return -1;
    }

    function y(e, t, r, o) {
      r = Number(r) || 0;
      var s = e.length - r;
      o ? s < (o = Number(o)) && (o = s) : o = s;
      var i = t.length;
      i / 2 < o && (o = i / 2);

      for (var a = 0; a < o; ++a) {
        var n = parseInt(t.substr(2 * a, 2), 16);
        if (P(n)) return a;
        e[r + a] = n;
      }

      return a;
    }

    function R(e, t, r, o) {
      return A(function (e) {
        for (var t = [], r = 0; r < e.length; ++r) {
          t.push(255 & e.charCodeAt(r));
        }

        return t;
      }(t), e, r, o);
    }

    function M(e, t, r) {
      return 0 === t && r === e.length ? o.fromByteArray(e) : o.fromByteArray(e.slice(t, r));
    }

    function b(e, t, r) {
      r = Math.min(e.length, r);

      for (var o = [], s = t; s < r;) {
        var i,
            a,
            n,
            p,
            g = e[s],
            u = null,
            l = 239 < g ? 4 : 223 < g ? 3 : 191 < g ? 2 : 1;
        if (s + l <= r) switch (l) {
          case 1:
            g < 128 && (u = g);
            break;

          case 2:
            128 == (192 & (i = e[s + 1])) && 127 < (p = (31 & g) << 6 | 63 & i) && (u = p);
            break;

          case 3:
            i = e[s + 1], a = e[s + 2], 128 == (192 & i) && 128 == (192 & a) && 2047 < (p = (15 & g) << 12 | (63 & i) << 6 | 63 & a) && (p < 55296 || 57343 < p) && (u = p);
            break;

          case 4:
            i = e[s + 1], a = e[s + 2], n = e[s + 3], 128 == (192 & i) && 128 == (192 & a) && 128 == (192 & n) && 65535 < (p = (15 & g) << 18 | (63 & i) << 12 | (63 & a) << 6 | 63 & n) && p < 1114112 && (u = p);
        }
        null === u ? (u = 65533, l = 1) : 65535 < u && (u -= 65536, o.push(u >>> 10 & 1023 | 55296), u = 56320 | 1023 & u), o.push(u), s += l;
      }

      return function (e) {
        var t = e.length;
        if (t <= S) return String.fromCharCode.apply(String, e);
        var r = "",
            o = 0;

        for (; o < t;) {
          r += String.fromCharCode.apply(String, e.slice(o, o += S));
        }

        return r;
      }(o);
    }

    r.kMaxLength = s, (l.TYPED_ARRAY_SUPPORT = function () {
      try {
        var e = new Uint8Array(1);
        return e.__proto__ = {
          __proto__: Uint8Array.prototype,
          foo: function foo() {
            return 42;
          }
        }, 42 === e.foo();
      } catch (e) {
        return !1;
      }
    }()) || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you _require old browser support."), Object.defineProperty(l.prototype, "parent", {
      enumerable: !0,
      get: function get() {
        if (l.isBuffer(this)) return this.buffer;
      }
    }), Object.defineProperty(l.prototype, "offset", {
      enumerable: !0,
      get: function get() {
        if (l.isBuffer(this)) return this.byteOffset;
      }
    }), "undefined" != typeof Symbol && null != Symbol.species && l[Symbol.species] === l && Object.defineProperty(l, Symbol.species, {
      value: null,
      configurable: !0,
      enumerable: !1,
      writable: !1
    }), l.poolSize = 8192, l.from = function (e, t, r) {
      return n(e, t, r);
    }, l.prototype.__proto__ = Uint8Array.prototype, l.__proto__ = Uint8Array, l.alloc = function (e, t, r) {
      return s = t, i = r, p(o = e), o <= 0 ? a(o) : void 0 !== s ? "string" == typeof i ? a(o).fill(s, i) : a(o).fill(s) : a(o);
      var o, s, i;
    }, l.allocUnsafe = function (e) {
      return g(e);
    }, l.allocUnsafeSlow = function (e) {
      return g(e);
    }, l.isBuffer = function (e) {
      return null != e && !0 === e._isBuffer && e !== l.prototype;
    }, l.compare = function (e, t) {
      if (k(e, Uint8Array) && (e = l.from(e, e.offset, e.byteLength)), k(t, Uint8Array) && (t = l.from(t, t.offset, t.byteLength)), !l.isBuffer(e) || !l.isBuffer(t)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (e === t) return 0;

      for (var r = e.length, o = t.length, s = 0, i = Math.min(r, o); s < i; ++s) {
        if (e[s] !== t[s]) {
          r = e[s], o = t[s];
          break;
        }
      }

      return r < o ? -1 : o < r ? 1 : 0;
    }, l.isEncoding = function (e) {
      switch (String(e).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return !0;

        default:
          return !1;
      }
    }, l.concat = function (e, t) {
      if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
      if (0 === e.length) return l.alloc(0);
      var r;
      if (void 0 === t) for (r = t = 0; r < e.length; ++r) {
        t += e[r].length;
      }
      var o = l.allocUnsafe(t),
          s = 0;

      for (r = 0; r < e.length; ++r) {
        var i = e[r];
        if (k(i, Uint8Array) && (i = l.from(i)), !l.isBuffer(i)) throw new TypeError('"list" argument must be an Array of Buffers');
        i.copy(o, s), s += i.length;
      }

      return o;
    }, l.byteLength = c, l.prototype._isBuffer = !0, l.prototype.swap16 = function () {
      var e = this.length;
      if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");

      for (var t = 0; t < e; t += 2) {
        d(this, t, t + 1);
      }

      return this;
    }, l.prototype.swap32 = function () {
      var e = this.length;
      if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");

      for (var t = 0; t < e; t += 4) {
        d(this, t, t + 3), d(this, t + 1, t + 2);
      }

      return this;
    }, l.prototype.swap64 = function () {
      var e = this.length;
      if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");

      for (var t = 0; t < e; t += 8) {
        d(this, t, t + 7), d(this, t + 1, t + 6), d(this, t + 2, t + 5), d(this, t + 3, t + 4);
      }

      return this;
    }, l.prototype.toLocaleString = l.prototype.toString = function () {
      var e = this.length;
      return 0 === e ? "" : 0 === arguments.length ? b(this, 0, e) : function (e, t, r) {
        var o = !1;
        if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
        if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
        if ((r >>>= 0) <= (t >>>= 0)) return "";

        for (e || (e = "utf8");;) {
          switch (e) {
            case "hex":
              return v(this, t, r);

            case "utf8":
            case "utf-8":
              return b(this, t, r);

            case "ascii":
              return E(this, t, r);

            case "latin1":
            case "binary":
              return T(this, t, r);

            case "base64":
              return M(this, t, r);

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return _(this, t, r);

            default:
              if (o) throw new TypeError("Unknown encoding: " + e);
              e = (e + "").toLowerCase(), o = !0;
          }
        }
      }.apply(this, arguments);
    }, l.prototype.equals = function (e) {
      if (!l.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
      return this === e || 0 === l.compare(this, e);
    }, l.prototype.inspect = function () {
      var e = "",
          t = r.INSPECT_MAX_BYTES;
      return e = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (e += " ... "), "<Buffer " + e + ">";
    }, l.prototype.compare = function (e, t, r, o, s) {
      if (k(e, Uint8Array) && (e = l.from(e, e.offset, e.byteLength)), !l.isBuffer(e)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + _typeof(e));
      if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === o && (o = 0), void 0 === s && (s = this.length), t < 0 || r > e.length || o < 0 || s > this.length) throw new RangeError("out of range index");
      if (s <= o && r <= t) return 0;
      if (s <= o) return -1;
      if (r <= t) return 1;
      if (this === e) return 0;

      for (var i = (s >>>= 0) - (o >>>= 0), a = (r >>>= 0) - (t >>>= 0), n = Math.min(i, a), p = this.slice(o, s), g = e.slice(t, r), u = 0; u < n; ++u) {
        if (p[u] !== g[u]) {
          i = p[u], a = g[u];
          break;
        }
      }

      return i < a ? -1 : a < i ? 1 : 0;
    }, l.prototype.includes = function (e, t, r) {
      return -1 !== this.indexOf(e, t, r);
    }, l.prototype.indexOf = function (e, t, r) {
      return f(this, e, t, r, !0);
    }, l.prototype.lastIndexOf = function (e, t, r) {
      return f(this, e, t, r, !1);
    }, l.prototype.write = function (e, t, r, o) {
      if (void 0 === t) o = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) o = t, r = this.length, t = 0;else {
        if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === o && (o = "utf8")) : (o = r, r = void 0);
      }
      var s = this.length - t;
      if ((void 0 === r || s < r) && (r = s), 0 < e.length && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
      o || (o = "utf8");

      for (var i, a, n, p, g, u, l, m, c, d = !1;;) {
        switch (o) {
          case "hex":
            return y(this, e, t, r);

          case "utf8":
          case "utf-8":
            return m = t, c = r, A(C(e, (l = this).length - m), l, m, c);

          case "ascii":
            return R(this, e, t, r);

          case "latin1":
          case "binary":
            return R(this, e, t, r);

          case "base64":
            return p = this, g = t, u = r, A(N(e), p, g, u);

          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return a = t, n = r, A(function (e, t) {
              for (var r, o, s, i = [], a = 0; a < e.length && !((t -= 2) < 0); ++a) {
                r = e.charCodeAt(a), o = r >> 8, s = r % 256, i.push(s), i.push(o);
              }

              return i;
            }(e, (i = this).length - a), i, a, n);

          default:
            if (d) throw new TypeError("Unknown encoding: " + o);
            o = ("" + o).toLowerCase(), d = !0;
        }
      }
    }, l.prototype.toJSON = function () {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    var S = 4096;

    function E(e, t, r) {
      var o = "";
      r = Math.min(e.length, r);

      for (var s = t; s < r; ++s) {
        o += String.fromCharCode(127 & e[s]);
      }

      return o;
    }

    function T(e, t, r) {
      var o = "";
      r = Math.min(e.length, r);

      for (var s = t; s < r; ++s) {
        o += String.fromCharCode(e[s]);
      }

      return o;
    }

    function v(e, t, r) {
      var o = e.length;
      (!t || t < 0) && (t = 0), (!r || r < 0 || o < r) && (r = o);

      for (var s = "", i = t; i < r; ++i) {
        s += W(e[i]);
      }

      return s;
    }

    function _(e, t, r) {
      for (var o = e.slice(t, r), s = "", i = 0; i < o.length; i += 2) {
        s += String.fromCharCode(o[i] + 256 * o[i + 1]);
      }

      return s;
    }

    function I(e, t, r) {
      if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
      if (r < e + t) throw new RangeError("Trying to access beyond buffer length");
    }

    function F(e, t, r, o, s, i) {
      if (!l.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (s < t || t < i) throw new RangeError('"value" argument is out of bounds');
      if (r + o > e.length) throw new RangeError("Index out of range");
    }

    function B(e, t, r, o, s, i) {
      if (r + o > e.length) throw new RangeError("Index out of range");
      if (r < 0) throw new RangeError("Index out of range");
    }

    function O(e, t, r, o, s) {
      return t = +t, r >>>= 0, s || B(e, 0, r, 4), i.write(e, t, r, o, 23, 4), r + 4;
    }

    function D(e, t, r, o, s) {
      return t = +t, r >>>= 0, s || B(e, 0, r, 8), i.write(e, t, r, o, 52, 8), r + 8;
    }

    l.prototype.slice = function (e, t) {
      var r = this.length;
      (e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : r < e && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : r < t && (t = r), t < e && (t = e);
      var o = this.subarray(e, t);
      return o.__proto__ = l.prototype, o;
    }, l.prototype.readUIntLE = function (e, t, r) {
      e >>>= 0, t >>>= 0, r || I(e, t, this.length);

      for (var o = this[e], s = 1, i = 0; ++i < t && (s *= 256);) {
        o += this[e + i] * s;
      }

      return o;
    }, l.prototype.readUIntBE = function (e, t, r) {
      e >>>= 0, t >>>= 0, r || I(e, t, this.length);

      for (var o = this[e + --t], s = 1; 0 < t && (s *= 256);) {
        o += this[e + --t] * s;
      }

      return o;
    }, l.prototype.readUInt8 = function (e, t) {
      return e >>>= 0, t || I(e, 1, this.length), this[e];
    }, l.prototype.readUInt16LE = function (e, t) {
      return e >>>= 0, t || I(e, 2, this.length), this[e] | this[e + 1] << 8;
    }, l.prototype.readUInt16BE = function (e, t) {
      return e >>>= 0, t || I(e, 2, this.length), this[e] << 8 | this[e + 1];
    }, l.prototype.readUInt32LE = function (e, t) {
      return e >>>= 0, t || I(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
    }, l.prototype.readUInt32BE = function (e, t) {
      return e >>>= 0, t || I(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
    }, l.prototype.readIntLE = function (e, t, r) {
      e >>>= 0, t >>>= 0, r || I(e, t, this.length);

      for (var o = this[e], s = 1, i = 0; ++i < t && (s *= 256);) {
        o += this[e + i] * s;
      }

      return (s *= 128) <= o && (o -= Math.pow(2, 8 * t)), o;
    }, l.prototype.readIntBE = function (e, t, r) {
      e >>>= 0, t >>>= 0, r || I(e, t, this.length);

      for (var o = t, s = 1, i = this[e + --o]; 0 < o && (s *= 256);) {
        i += this[e + --o] * s;
      }

      return (s *= 128) <= i && (i -= Math.pow(2, 8 * t)), i;
    }, l.prototype.readInt8 = function (e, t) {
      return e >>>= 0, t || I(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
    }, l.prototype.readInt16LE = function (e, t) {
      e >>>= 0, t || I(e, 2, this.length);
      var r = this[e] | this[e + 1] << 8;
      return 32768 & r ? 4294901760 | r : r;
    }, l.prototype.readInt16BE = function (e, t) {
      e >>>= 0, t || I(e, 2, this.length);
      var r = this[e + 1] | this[e] << 8;
      return 32768 & r ? 4294901760 | r : r;
    }, l.prototype.readInt32LE = function (e, t) {
      return e >>>= 0, t || I(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
    }, l.prototype.readInt32BE = function (e, t) {
      return e >>>= 0, t || I(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
    }, l.prototype.readFloatLE = function (e, t) {
      return e >>>= 0, t || I(e, 4, this.length), i.read(this, e, !0, 23, 4);
    }, l.prototype.readFloatBE = function (e, t) {
      return e >>>= 0, t || I(e, 4, this.length), i.read(this, e, !1, 23, 4);
    }, l.prototype.readDoubleLE = function (e, t) {
      return e >>>= 0, t || I(e, 8, this.length), i.read(this, e, !0, 52, 8);
    }, l.prototype.readDoubleBE = function (e, t) {
      return e >>>= 0, t || I(e, 8, this.length), i.read(this, e, !1, 52, 8);
    }, l.prototype.writeUIntLE = function (e, t, r, o) {
      (e = +e, t >>>= 0, r >>>= 0, o) || F(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
      var s = 1,
          i = 0;

      for (this[t] = 255 & e; ++i < r && (s *= 256);) {
        this[t + i] = e / s & 255;
      }

      return t + r;
    }, l.prototype.writeUIntBE = function (e, t, r, o) {
      (e = +e, t >>>= 0, r >>>= 0, o) || F(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
      var s = r - 1,
          i = 1;

      for (this[t + s] = 255 & e; 0 <= --s && (i *= 256);) {
        this[t + s] = e / i & 255;
      }

      return t + r;
    }, l.prototype.writeUInt8 = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;
    }, l.prototype.writeUInt16LE = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
    }, l.prototype.writeUInt16BE = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
    }, l.prototype.writeUInt32LE = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e, t + 4;
    }, l.prototype.writeUInt32BE = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
    }, l.prototype.writeIntLE = function (e, t, r, o) {
      if (e = +e, t >>>= 0, !o) {
        var s = Math.pow(2, 8 * r - 1);
        F(this, e, t, r, s - 1, -s);
      }

      var i = 0,
          a = 1,
          n = 0;

      for (this[t] = 255 & e; ++i < r && (a *= 256);) {
        e < 0 && 0 === n && 0 !== this[t + i - 1] && (n = 1), this[t + i] = (e / a >> 0) - n & 255;
      }

      return t + r;
    }, l.prototype.writeIntBE = function (e, t, r, o) {
      if (e = +e, t >>>= 0, !o) {
        var s = Math.pow(2, 8 * r - 1);
        F(this, e, t, r, s - 1, -s);
      }

      var i = r - 1,
          a = 1,
          n = 0;

      for (this[t + i] = 255 & e; 0 <= --i && (a *= 256);) {
        e < 0 && 0 === n && 0 !== this[t + i + 1] && (n = 1), this[t + i] = (e / a >> 0) - n & 255;
      }

      return t + r;
    }, l.prototype.writeInt8 = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
    }, l.prototype.writeInt16LE = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
    }, l.prototype.writeInt16BE = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
    }, l.prototype.writeInt32LE = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;
    }, l.prototype.writeInt32BE = function (e, t, r) {
      return e = +e, t >>>= 0, r || F(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
    }, l.prototype.writeFloatLE = function (e, t, r) {
      return O(this, e, t, !0, r);
    }, l.prototype.writeFloatBE = function (e, t, r) {
      return O(this, e, t, !1, r);
    }, l.prototype.writeDoubleLE = function (e, t, r) {
      return D(this, e, t, !0, r);
    }, l.prototype.writeDoubleBE = function (e, t, r) {
      return D(this, e, t, !1, r);
    }, l.prototype.copy = function (e, t, r, o) {
      if (!l.isBuffer(e)) throw new TypeError("argument should be a Buffer");
      if (r || (r = 0), o || 0 === o || (o = this.length), t >= e.length && (t = e.length), t || (t = 0), 0 < o && o < r && (o = r), o === r) return 0;
      if (0 === e.length || 0 === this.length) return 0;
      if (t < 0) throw new RangeError("targetStart out of bounds");
      if (r < 0 || r >= this.length) throw new RangeError("Index out of range");
      if (o < 0) throw new RangeError("sourceEnd out of bounds");
      o > this.length && (o = this.length), e.length - t < o - r && (o = e.length - t + r);
      var s = o - r;
      if (this === e && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t, r, o);else if (this === e && r < t && t < o) for (var i = s - 1; 0 <= i; --i) {
        e[i + t] = this[i + r];
      } else Uint8Array.prototype.set.call(e, this.subarray(r, o), t);
      return s;
    }, l.prototype.fill = function (e, t, r, o) {
      if ("string" == typeof e) {
        if ("string" == typeof t ? (o = t, t = 0, r = this.length) : "string" == typeof r && (o = r, r = this.length), void 0 !== o && "string" != typeof o) throw new TypeError("encoding must be a string");
        if ("string" == typeof o && !l.isEncoding(o)) throw new TypeError("Unknown encoding: " + o);

        if (1 === e.length) {
          var s = e.charCodeAt(0);
          ("utf8" === o && s < 128 || "latin1" === o) && (e = s);
        }
      } else "number" == typeof e && (e &= 255);

      if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
      if (r <= t) return this;
      var i;
      if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (i = t; i < r; ++i) {
        this[i] = e;
      } else {
        var a = l.isBuffer(e) ? e : l.from(e, o),
            n = a.length;
        if (0 === n) throw new TypeError('The value "' + e + '" is invalid for argument "value"');

        for (i = 0; i < r - t; ++i) {
          this[i + t] = a[i % n];
        }
      }
      return this;
    };
    var w = /[^+/0-9A-Za-z-_]/g;

    function W(e) {
      return e < 16 ? "0" + e.toString(16) : e.toString(16);
    }

    function C(e, t) {
      var r;
      t = t || 1 / 0;

      for (var o = e.length, s = null, i = [], a = 0; a < o; ++a) {
        if (55295 < (r = e.charCodeAt(a)) && r < 57344) {
          if (!s) {
            if (56319 < r) {
              -1 < (t -= 3) && i.push(239, 191, 189);
              continue;
            }

            if (a + 1 === o) {
              -1 < (t -= 3) && i.push(239, 191, 189);
              continue;
            }

            s = r;
            continue;
          }

          if (r < 56320) {
            -1 < (t -= 3) && i.push(239, 191, 189), s = r;
            continue;
          }

          r = 65536 + (s - 55296 << 10 | r - 56320);
        } else s && -1 < (t -= 3) && i.push(239, 191, 189);

        if (s = null, r < 128) {
          if ((t -= 1) < 0) break;
          i.push(r);
        } else if (r < 2048) {
          if ((t -= 2) < 0) break;
          i.push(r >> 6 | 192, 63 & r | 128);
        } else if (r < 65536) {
          if ((t -= 3) < 0) break;
          i.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
        } else {
          if (!(r < 1114112)) throw new Error("Invalid code point");
          if ((t -= 4) < 0) break;
          i.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
        }
      }

      return i;
    }

    function N(e) {
      return o.toByteArray(function (e) {
        if ((e = (e = e.split("=")[0]).trim().replace(w, "")).length < 2) return "";

        for (; e.length % 4 != 0;) {
          e += "=";
        }

        return e;
      }(e));
    }

    function A(e, t, r, o) {
      for (var s = 0; s < o && !(s + r >= t.length || s >= e.length); ++s) {
        t[s + r] = e[s];
      }

      return s;
    }

    function k(e, t) {
      return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;
    }

    function P(e) {
      return e != e;
    }
  }, {
    "base64-js": 1,
    ieee754: 3
  }],
  3: [function (e, t, r) {
    r.read = function (e, t, r, o, s) {
      var i,
          a,
          n = 8 * s - o - 1,
          p = (1 << n) - 1,
          g = p >> 1,
          u = -7,
          l = r ? s - 1 : 0,
          m = r ? -1 : 1,
          c = e[t + l];

      for (l += m, i = c & (1 << -u) - 1, c >>= -u, u += n; 0 < u; i = 256 * i + e[t + l], l += m, u -= 8) {
        ;
      }

      for (a = i & (1 << -u) - 1, i >>= -u, u += o; 0 < u; a = 256 * a + e[t + l], l += m, u -= 8) {
        ;
      }

      if (0 === i) i = 1 - g;else {
        if (i === p) return a ? NaN : 1 / 0 * (c ? -1 : 1);
        a += Math.pow(2, o), i -= g;
      }
      return (c ? -1 : 1) * a * Math.pow(2, i - o);
    }, r.write = function (e, t, r, o, s, i) {
      var a,
          n,
          p,
          g = 8 * i - s - 1,
          u = (1 << g) - 1,
          l = u >> 1,
          m = 23 === s ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
          c = o ? 0 : i - 1,
          d = o ? 1 : -1,
          f = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;

      for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (n = isNaN(t) ? 1 : 0, a = u) : (a = Math.floor(Math.log(t) / Math.LN2), t * (p = Math.pow(2, -a)) < 1 && (a--, p *= 2), 2 <= (t += 1 <= a + l ? m / p : m * Math.pow(2, 1 - l)) * p && (a++, p /= 2), u <= a + l ? (n = 0, a = u) : 1 <= a + l ? (n = (t * p - 1) * Math.pow(2, s), a += l) : (n = t * Math.pow(2, l - 1) * Math.pow(2, s), a = 0)); 8 <= s; e[r + c] = 255 & n, c += d, n /= 256, s -= 8) {
        ;
      }

      for (a = a << s | n, g += s; 0 < g; e[r + c] = 255 & a, c += d, a /= 256, g -= 8) {
        ;
      }

      e[r + c - d] |= 128 * f;
    };
  }, {}],
  4: [function (e, t, r) {
    var o = e("google-protobuf"),
        s = o,
        i = window;
    s.exportSymbol("proto.stream.Audience", null, i), s.exportSymbol("proto.stream.LiveWatchInfo", null, i), s.exportSymbol("proto.stream.WatchBookInfo", null, i), s.exportSymbol("proto.stream.WatchParams", null, i), proto.stream.Audience = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.Audience, o.Message), s.DEBUG && !COMPILED && (proto.stream.Audience.displayName = "proto.stream.Audience"), o.Message.GENERATE_TO_OBJECT && (proto.stream.Audience.prototype.toObject = function (e) {
      return proto.stream.Audience.toObject(e, this);
    }, proto.stream.Audience.toObject = function (e, t) {
      var r = {
        userid: o.Message.getFieldWithDefault(t, 1, 0),
        profile: t.getProfile_asB64(),
        entertime: o.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.Audience.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.Audience();
      return proto.stream.Audience.deserializeBinaryFromReader(r, t);
    }, proto.stream.Audience.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readBytes();
            e.setProfile(r);
            break;

          case 3:
            r = t.readUint32();
            e.setEntertime(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.Audience.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.Audience.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.Audience.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 < (r = e.getProfile_asU8()).length && t.writeBytes(2, r), 0 !== (r = e.getEntertime()) && t.writeUint32(3, r);
    }, proto.stream.Audience.prototype.getUserid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.Audience.prototype.setUserid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.Audience.prototype.getProfile = function () {
      return o.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.Audience.prototype.getProfile_asB64 = function () {
      return o.Message.bytesAsB64(this.getProfile());
    }, proto.stream.Audience.prototype.getProfile_asU8 = function () {
      return o.Message.bytesAsU8(this.getProfile());
    }, proto.stream.Audience.prototype.setProfile = function (e) {
      o.Message.setProto3BytesField(this, 2, e);
    }, proto.stream.Audience.prototype.getEntertime = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.Audience.prototype.setEntertime = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.LiveWatchInfo = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.LiveWatchInfo.repeatedFields_, null);
    }, s.inherits(proto.stream.LiveWatchInfo, o.Message), s.DEBUG && !COMPILED && (proto.stream.LiveWatchInfo.displayName = "proto.stream.LiveWatchInfo"), proto.stream.LiveWatchInfo.repeatedFields_ = [8], o.Message.GENERATE_TO_OBJECT && (proto.stream.LiveWatchInfo.prototype.toObject = function (e) {
      return proto.stream.LiveWatchInfo.toObject(e, this);
    }, proto.stream.LiveWatchInfo.toObject = function (e, t) {
      var r = {
        roomid: o.Message.getFieldWithDefault(t, 1, "0"),
        startts: o.Message.getFieldWithDefault(t, 2, "0"),
        delayms: o.Message.getFieldWithDefault(t, 3, 0),
        cachems: o.Message.getFieldWithDefault(t, 4, 0),
        maxaudiences: o.Message.getFieldWithDefault(t, 5, 0),
        curaudiences: o.Message.getFieldWithDefault(t, 6, 0),
        peakaudiences: o.Message.getFieldWithDefault(t, 7, 0),
        lastaudiencesList: o.Message.toObjectList(t.getLastaudiencesList(), proto.stream.Audience.toObject, e)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveWatchInfo.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.LiveWatchInfo();
      return proto.stream.LiveWatchInfo.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveWatchInfo.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setStartts(r);
            break;

          case 3:
            r = t.readUint32();
            e.setDelayms(r);
            break;

          case 4:
            r = t.readUint32();
            e.setCachems(r);
            break;

          case 5:
            r = t.readUint32();
            e.setMaxaudiences(r);
            break;

          case 6:
            r = t.readUint32();
            e.setCuraudiences(r);
            break;

          case 7:
            r = t.readUint32();
            e.setPeakaudiences(r);
            break;

          case 8:
            r = new proto.stream.Audience();
            t.readMessage(r, proto.stream.Audience.deserializeBinaryFromReader), e.addLastaudiences(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveWatchInfo.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.LiveWatchInfo.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveWatchInfo.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), r = e.getStartts(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getDelayms()) && t.writeUint32(3, r), 0 !== (r = e.getCachems()) && t.writeUint32(4, r), 0 !== (r = e.getMaxaudiences()) && t.writeUint32(5, r), 0 !== (r = e.getCuraudiences()) && t.writeUint32(6, r), 0 !== (r = e.getPeakaudiences()) && t.writeUint32(7, r), 0 < (r = e.getLastaudiencesList()).length && t.writeRepeatedMessage(8, r, proto.stream.Audience.serializeBinaryToWriter);
    }, proto.stream.LiveWatchInfo.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.LiveWatchInfo.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.LiveWatchInfo.prototype.getStartts = function () {
      return o.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.LiveWatchInfo.prototype.setStartts = function (e) {
      o.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.LiveWatchInfo.prototype.getDelayms = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.LiveWatchInfo.prototype.setDelayms = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.LiveWatchInfo.prototype.getCachems = function () {
      return o.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.LiveWatchInfo.prototype.setCachems = function (e) {
      o.Message.setProto3IntField(this, 4, e);
    }, proto.stream.LiveWatchInfo.prototype.getMaxaudiences = function () {
      return o.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.LiveWatchInfo.prototype.setMaxaudiences = function (e) {
      o.Message.setProto3IntField(this, 5, e);
    }, proto.stream.LiveWatchInfo.prototype.getCuraudiences = function () {
      return o.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.LiveWatchInfo.prototype.setCuraudiences = function (e) {
      o.Message.setProto3IntField(this, 6, e);
    }, proto.stream.LiveWatchInfo.prototype.getPeakaudiences = function () {
      return o.Message.getFieldWithDefault(this, 7, 0);
    }, proto.stream.LiveWatchInfo.prototype.setPeakaudiences = function (e) {
      o.Message.setProto3IntField(this, 7, e);
    }, proto.stream.LiveWatchInfo.prototype.getLastaudiencesList = function () {
      return o.Message.getRepeatedWrapperField(this, proto.stream.Audience, 8);
    }, proto.stream.LiveWatchInfo.prototype.setLastaudiencesList = function (e) {
      o.Message.setRepeatedWrapperField(this, 8, e);
    }, proto.stream.LiveWatchInfo.prototype.addLastaudiences = function (e, t) {
      return o.Message.addToRepeatedWrapperField(this, 8, e, proto.stream.Audience, t);
    }, proto.stream.LiveWatchInfo.prototype.clearLastaudiencesList = function () {
      this.setLastaudiencesList([]);
    }, proto.stream.WatchParams = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.WatchParams, o.Message), s.DEBUG && !COMPILED && (proto.stream.WatchParams.displayName = "proto.stream.WatchParams"), o.Message.GENERATE_TO_OBJECT && (proto.stream.WatchParams.prototype.toObject = function (e) {
      return proto.stream.WatchParams.toObject(e, this);
    }, proto.stream.WatchParams.toObject = function (e, t) {
      var r = {
        canwatch: o.Message.getFieldWithDefault(t, 1, !1),
        maxaudiences: o.Message.getFieldWithDefault(t, 2, 0),
        delayms: o.Message.getFieldWithDefault(t, 3, 0),
        cachems: o.Message.getFieldWithDefault(t, 4, 0),
        bufferbytes: o.Message.getFieldWithDefault(t, 5, 0),
        lastsize: o.Message.getFieldWithDefault(t, 6, 0),
        needreplay: o.Message.getFieldWithDefault(t, 7, !1)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.WatchParams.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.WatchParams();
      return proto.stream.WatchParams.deserializeBinaryFromReader(r, t);
    }, proto.stream.WatchParams.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readBool();
            e.setCanwatch(r);
            break;

          case 2:
            r = t.readUint32();
            e.setMaxaudiences(r);
            break;

          case 3:
            r = t.readUint32();
            e.setDelayms(r);
            break;

          case 4:
            r = t.readUint32();
            e.setCachems(r);
            break;

          case 5:
            r = t.readUint32();
            e.setBufferbytes(r);
            break;

          case 6:
            r = t.readUint32();
            e.setLastsize(r);
            break;

          case 7:
            r = t.readBool();
            e.setNeedreplay(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.WatchParams.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.WatchParams.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.WatchParams.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      (r = e.getCanwatch()) && t.writeBool(1, r), 0 !== (r = e.getMaxaudiences()) && t.writeUint32(2, r), 0 !== (r = e.getDelayms()) && t.writeUint32(3, r), 0 !== (r = e.getCachems()) && t.writeUint32(4, r), 0 !== (r = e.getBufferbytes()) && t.writeUint32(5, r), 0 !== (r = e.getLastsize()) && t.writeUint32(6, r), (r = e.getNeedreplay()) && t.writeBool(7, r);
    }, proto.stream.WatchParams.prototype.getCanwatch = function () {
      return o.Message.getFieldWithDefault(this, 1, !1);
    }, proto.stream.WatchParams.prototype.setCanwatch = function (e) {
      o.Message.setProto3BooleanField(this, 1, e);
    }, proto.stream.WatchParams.prototype.getMaxaudiences = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.WatchParams.prototype.setMaxaudiences = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.WatchParams.prototype.getDelayms = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.WatchParams.prototype.setDelayms = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.WatchParams.prototype.getCachems = function () {
      return o.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.WatchParams.prototype.setCachems = function (e) {
      o.Message.setProto3IntField(this, 4, e);
    }, proto.stream.WatchParams.prototype.getBufferbytes = function () {
      return o.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.WatchParams.prototype.setBufferbytes = function (e) {
      o.Message.setProto3IntField(this, 5, e);
    }, proto.stream.WatchParams.prototype.getLastsize = function () {
      return o.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.WatchParams.prototype.setLastsize = function (e) {
      o.Message.setProto3IntField(this, 6, e);
    }, proto.stream.WatchParams.prototype.getNeedreplay = function () {
      return o.Message.getFieldWithDefault(this, 7, !1);
    }, proto.stream.WatchParams.prototype.setNeedreplay = function (e) {
      o.Message.setProto3BooleanField(this, 7, e);
    }, proto.stream.WatchBookInfo = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.WatchBookInfo.repeatedFields_, null);
    }, s.inherits(proto.stream.WatchBookInfo, o.Message), s.DEBUG && !COMPILED && (proto.stream.WatchBookInfo.displayName = "proto.stream.WatchBookInfo"), proto.stream.WatchBookInfo.repeatedFields_ = [4], o.Message.GENERATE_TO_OBJECT && (proto.stream.WatchBookInfo.prototype.toObject = function (e) {
      return proto.stream.WatchBookInfo.toObject(e, this);
    }, proto.stream.WatchBookInfo.toObject = function (e, t) {
      var r = {
        bookid: o.Message.getFieldWithDefault(t, 1, ""),
        ticket: o.Message.getFieldWithDefault(t, 2, ""),
        setid: o.Message.getFieldWithDefault(t, 3, 0),
        livesList: o.Message.getRepeatedField(t, 4),
        wssproxy: o.Message.getFieldWithDefault(t, 5, "")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.WatchBookInfo.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.WatchBookInfo();
      return proto.stream.WatchBookInfo.deserializeBinaryFromReader(r, t);
    }, proto.stream.WatchBookInfo.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readString();
            e.setBookid(r);
            break;

          case 2:
            r = t.readString();
            e.setTicket(r);
            break;

          case 3:
            r = t.readUint32();
            e.setSetid(r);
            break;

          case 4:
            r = t.readString();
            e.addLives(r);
            break;

          case 5:
            r = t.readString();
            e.setWssproxy(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.WatchBookInfo.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.WatchBookInfo.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.WatchBookInfo.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 < (r = e.getBookid()).length && t.writeString(1, r), 0 < (r = e.getTicket()).length && t.writeString(2, r), 0 !== (r = e.getSetid()) && t.writeUint32(3, r), 0 < (r = e.getLivesList()).length && t.writeRepeatedString(4, r), 0 < (r = e.getWssproxy()).length && t.writeString(5, r);
    }, proto.stream.WatchBookInfo.prototype.getBookid = function () {
      return o.Message.getFieldWithDefault(this, 1, "");
    }, proto.stream.WatchBookInfo.prototype.setBookid = function (e) {
      o.Message.setProto3StringField(this, 1, e);
    }, proto.stream.WatchBookInfo.prototype.getTicket = function () {
      return o.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.WatchBookInfo.prototype.setTicket = function (e) {
      o.Message.setProto3StringField(this, 2, e);
    }, proto.stream.WatchBookInfo.prototype.getSetid = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.WatchBookInfo.prototype.setSetid = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.WatchBookInfo.prototype.getLivesList = function () {
      return o.Message.getRepeatedField(this, 4);
    }, proto.stream.WatchBookInfo.prototype.setLivesList = function (e) {
      o.Message.setField(this, 4, e || []);
    }, proto.stream.WatchBookInfo.prototype.addLives = function (e, t) {
      o.Message.addToRepeatedField(this, 4, e, t);
    }, proto.stream.WatchBookInfo.prototype.clearLivesList = function () {
      this.setLivesList([]);
    }, proto.stream.WatchBookInfo.prototype.getWssproxy = function () {
      return o.Message.getFieldWithDefault(this, 5, "");
    }, proto.stream.WatchBookInfo.prototype.setWssproxy = function (e) {
      o.Message.setProto3StringField(this, 5, e);
    }, s.object.extend(r, proto.stream);
  }, {
    "google-protobuf": 8
  }],
  5: [function (e, t, r) {
    var o = e("google-protobuf"),
        s = window;
    o.exportSymbol("proto.stream.ErrorCode", null, s), proto.stream.ErrorCode = {
      NOERROR: 0,
      OK: 200,
      ACCEPTED: 202,
      NOCONTENT: 204,
      BADREQUEST: 400,
      UNAUTHORIZED: 401,
      SIGNATUREFAILED: 402,
      FORBIDDEN: 403,
      NOTFOUND: 404,
      INTERNALSERVERERROR: 500,
      NOTIMPLEMENTED: 501,
      BADGATEWAY: 502,
      SERVICEUNAVAILABLE: 503
    }, o.object.extend(r, proto.stream);
  }, {
    "google-protobuf": 8
  }],
  6: [function (e, t, r) {
    var _t$exports;

    var o = e("./sdk_pb"),
        s = e("./gateway_pb"),
        i = e("./errorcode_pb"),
        a = e("./watchsdk_pb");
    t.exports = (_t$exports = {
      DataProto: o
    }, _defineProperty(_t$exports, "DataProto", s), _defineProperty(_t$exports, "DataProto", i), _defineProperty(_t$exports, "DataProto", a), _t$exports);
  }, {
    "./errorcode_pb": 5,
    "./gateway_pb": 7,
    "./sdk_pb": 9,
    "./watchsdk_pb": 10
  }],
  7: [function (e, t, r) {
    var s = e("google-protobuf"),
        o = s,
        i = window;
    e("./errorcode_pb.js");
    o.exportSymbol("proto.stream.BookInfo", null, i), o.exportSymbol("proto.stream.BrigadeInfo", null, i), o.exportSymbol("proto.stream.CancelTeamMatchNotify", null, i), o.exportSymbol("proto.stream.CancelTeamMatchReq", null, i), o.exportSymbol("proto.stream.CancelTeamMatchRsp", null, i), o.exportSymbol("proto.stream.ChangeRoleReq", null, i), o.exportSymbol("proto.stream.ChangeRoleRsp", null, i), o.exportSymbol("proto.stream.CmdId", null, i), o.exportSymbol("proto.stream.ConnDetailV2", null, i), o.exportSymbol("proto.stream.CreateFlag", null, i), o.exportSymbol("proto.stream.CreateRoomReq", null, i), o.exportSymbol("proto.stream.CreateRoomRsp", null, i), o.exportSymbol("proto.stream.CreateTeamReq", null, i), o.exportSymbol("proto.stream.CreateTeamRsp", null, i), o.exportSymbol("proto.stream.DestroyRoomReq", null, i), o.exportSymbol("proto.stream.DestroyRoomRsp", null, i), o.exportSymbol("proto.stream.DisconnectReq", null, i), o.exportSymbol("proto.stream.DisconnectRsp", null, i), o.exportSymbol("proto.stream.GetRoomDetailReq", null, i), o.exportSymbol("proto.stream.GetRoomDetailRsp", null, i), o.exportSymbol("proto.stream.GetRoomListExReq", null, i), o.exportSymbol("proto.stream.GetRoomListExRsp", null, i), o.exportSymbol("proto.stream.GetRoomListReq", null, i), o.exportSymbol("proto.stream.GetRoomListRsp", null, i), o.exportSymbol("proto.stream.GetWatchRoomsReq", null, i), o.exportSymbol("proto.stream.GetWatchRoomsRsp", null, i), o.exportSymbol("proto.stream.HeartbeatReq", null, i), o.exportSymbol("proto.stream.HeartbeatRsp", null, i), o.exportSymbol("proto.stream.JoinOpenNotify", null, i), o.exportSymbol("proto.stream.JoinOpenReq", null, i), o.exportSymbol("proto.stream.JoinOpenRsp", null, i), o.exportSymbol("proto.stream.JoinOverNotify", null, i), o.exportSymbol("proto.stream.JoinOverReq", null, i), o.exportSymbol("proto.stream.JoinOverRsp", null, i), o.exportSymbol("proto.stream.JoinRoomReq", null, i), o.exportSymbol("proto.stream.JoinRoomRsp", null, i), o.exportSymbol("proto.stream.JoinRoomType", null, i), o.exportSymbol("proto.stream.JoinTeamNotify", null, i), o.exportSymbol("proto.stream.JoinTeamReq", null, i), o.exportSymbol("proto.stream.JoinTeamRsp", null, i), o.exportSymbol("proto.stream.JoinWatchRoomReq", null, i), o.exportSymbol("proto.stream.JoinWatchRoomRsp", null, i), o.exportSymbol("proto.stream.KickPlayerNotify", null, i), o.exportSymbol("proto.stream.KickPlayerReq", null, i), o.exportSymbol("proto.stream.KickPlayerRsp", null, i), o.exportSymbol("proto.stream.KickTeamMemberNotify", null, i), o.exportSymbol("proto.stream.KickTeamMemberReq", null, i), o.exportSymbol("proto.stream.KickTeamMemberRsp", null, i), o.exportSymbol("proto.stream.LeaveRoomReq", null, i), o.exportSymbol("proto.stream.LeaveRoomRsp", null, i), o.exportSymbol("proto.stream.LeaveTeamNotify", null, i), o.exportSymbol("proto.stream.LeaveTeamReq", null, i), o.exportSymbol("proto.stream.LeaveTeamRsp", null, i), o.exportSymbol("proto.stream.LeaveWatchRoomReq", null, i), o.exportSymbol("proto.stream.LeaveWatchRoomRsp", null, i), o.exportSymbol("proto.stream.LoginReq", null, i), o.exportSymbol("proto.stream.LoginRsp", null, i), o.exportSymbol("proto.stream.LogoutRsp", null, i), o.exportSymbol("proto.stream.NetworkStateNotify", null, i), o.exportSymbol("proto.stream.NetworkStateReq", null, i), o.exportSymbol("proto.stream.NetworkStateRsp", null, i), o.exportSymbol("proto.stream.NoticeJoin", null, i), o.exportSymbol("proto.stream.NoticeLeave", null, i), o.exportSymbol("proto.stream.NoticeRoomProperty", null, i), o.exportSymbol("proto.stream.PlayRoom", null, i), o.exportSymbol("proto.stream.PlayerInfo", null, i), o.exportSymbol("proto.stream.RoomDetail", null, i), o.exportSymbol("proto.stream.RoomFilter", null, i), o.exportSymbol("proto.stream.RoomInfo", null, i), o.exportSymbol("proto.stream.RoomInfoEx", null, i), o.exportSymbol("proto.stream.RoomListSort", null, i), o.exportSymbol("proto.stream.RoomState", null, i), o.exportSymbol("proto.stream.RoomType", null, i), o.exportSymbol("proto.stream.SendTeamEventNotify", null, i), o.exportSymbol("proto.stream.SendTeamEventReq", null, i), o.exportSymbol("proto.stream.SendTeamEventRsp", null, i), o.exportSymbol("proto.stream.SetReconnectTimeoutReq", null, i), o.exportSymbol("proto.stream.SetReconnectTimeoutRsp", null, i), o.exportSymbol("proto.stream.SetRoomPropertyReq", null, i), o.exportSymbol("proto.stream.SetRoomPropertyRsp", null, i), o.exportSymbol("proto.stream.SortOrder", null, i), o.exportSymbol("proto.stream.TcpProtoHeader", null, i), o.exportSymbol("proto.stream.TeamDetail", null, i), o.exportSymbol("proto.stream.TeamDstType", null, i), o.exportSymbol("proto.stream.TeamInfo", null, i), o.exportSymbol("proto.stream.TeamMatchCond", null, i), o.exportSymbol("proto.stream.TeamMatchReq", null, i), o.exportSymbol("proto.stream.TeamMatchResultNotify", null, i), o.exportSymbol("proto.stream.TeamMatchRsp", null, i), o.exportSymbol("proto.stream.TeamMatchStartNotify", null, i), o.exportSymbol("proto.stream.TeamMsgType", null, i), o.exportSymbol("proto.stream.UserV2", null, i), o.exportSymbol("proto.stream.UserV2Ex", null, i), o.exportSymbol("proto.stream.WatchInfo", null, i), o.exportSymbol("proto.stream.WatchRoom", null, i), o.exportSymbol("proto.stream.WatchSetting", null, i), o.exportSymbol("proto.stream.keyValue", null, i), proto.stream.LoginReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LoginReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.LoginReq.displayName = "proto.stream.LoginReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LoginReq.prototype.toObject = function (e) {
      return proto.stream.LoginReq.toObject(e, this);
    }, proto.stream.LoginReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        appkey: s.Message.getFieldWithDefault(t, 2, ""),
        deviceid: s.Message.getFieldWithDefault(t, 3, ""),
        sign: s.Message.getFieldWithDefault(t, 4, ""),
        sdkver: s.Message.getFieldWithDefault(t, 5, ""),
        vendor: s.Message.getFieldWithDefault(t, 6, 0),
        token: s.Message.getFieldWithDefault(t, 7, "")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LoginReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LoginReq();
      return proto.stream.LoginReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.LoginReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readString();
            e.setAppkey(r);
            break;

          case 3:
            r = t.readString();
            e.setDeviceid(r);
            break;

          case 4:
            r = t.readString();
            e.setSign(r);
            break;

          case 5:
            r = t.readString();
            e.setSdkver(r);
            break;

          case 6:
            r = t.readUint32();
            e.setVendor(r);
            break;

          case 7:
            r = t.readString();
            e.setToken(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LoginReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LoginReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LoginReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), 0 < (r = e.getAppkey()).length && t.writeString(2, r), 0 < (r = e.getDeviceid()).length && t.writeString(3, r), 0 < (r = e.getSign()).length && t.writeString(4, r), 0 < (r = e.getSdkver()).length && t.writeString(5, r), 0 !== (r = e.getVendor()) && t.writeUint32(6, r), 0 < (r = e.getToken()).length && t.writeString(7, r);
    }, proto.stream.LoginReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LoginReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LoginReq.prototype.getAppkey = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.LoginReq.prototype.setAppkey = function (e) {
      s.Message.setProto3StringField(this, 2, e);
    }, proto.stream.LoginReq.prototype.getDeviceid = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.LoginReq.prototype.setDeviceid = function (e) {
      s.Message.setProto3StringField(this, 3, e);
    }, proto.stream.LoginReq.prototype.getSign = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.LoginReq.prototype.setSign = function (e) {
      s.Message.setProto3StringField(this, 4, e);
    }, proto.stream.LoginReq.prototype.getSdkver = function () {
      return s.Message.getFieldWithDefault(this, 5, "");
    }, proto.stream.LoginReq.prototype.setSdkver = function (e) {
      s.Message.setProto3StringField(this, 5, e);
    }, proto.stream.LoginReq.prototype.getVendor = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.LoginReq.prototype.setVendor = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.LoginReq.prototype.getToken = function () {
      return s.Message.getFieldWithDefault(this, 7, "");
    }, proto.stream.LoginReq.prototype.setToken = function (e) {
      s.Message.setProto3StringField(this, 7, e);
    }, proto.stream.LoginRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LoginRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.LoginRsp.displayName = "proto.stream.LoginRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LoginRsp.prototype.toObject = function (e) {
      return proto.stream.LoginRsp.toObject(e, this);
    }, proto.stream.LoginRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LoginRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LoginRsp();
      return proto.stream.LoginRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.LoginRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LoginRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LoginRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LoginRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r);
    }, proto.stream.LoginRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LoginRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.LoginRsp.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.LoginRsp.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.HeartbeatReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.HeartbeatReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.HeartbeatReq.displayName = "proto.stream.HeartbeatReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.HeartbeatReq.prototype.toObject = function (e) {
      return proto.stream.HeartbeatReq.toObject(e, this);
    }, proto.stream.HeartbeatReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.HeartbeatReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.HeartbeatReq();
      return proto.stream.HeartbeatReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.HeartbeatReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.HeartbeatReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.HeartbeatReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.HeartbeatReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r);
    }, proto.stream.HeartbeatReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.HeartbeatReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.HeartbeatReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.HeartbeatReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.HeartbeatRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.HeartbeatRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.HeartbeatRsp.displayName = "proto.stream.HeartbeatRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.HeartbeatRsp.prototype.toObject = function (e) {
      return proto.stream.HeartbeatRsp.toObject(e, this);
    }, proto.stream.HeartbeatRsp.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        gsexist: s.Message.getFieldWithDefault(t, 2, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.HeartbeatRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.HeartbeatRsp();
      return proto.stream.HeartbeatRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.HeartbeatRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readInt32();
            e.setGsexist(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.HeartbeatRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.HeartbeatRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.HeartbeatRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), 0 !== (r = e.getGsexist()) && t.writeInt32(2, r);
    }, proto.stream.HeartbeatRsp.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.HeartbeatRsp.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.HeartbeatRsp.prototype.getGsexist = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.HeartbeatRsp.prototype.setGsexist = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.DisconnectReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.DisconnectReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.DisconnectReq.displayName = "proto.stream.DisconnectReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.DisconnectReq.prototype.toObject = function (e) {
      return proto.stream.DisconnectReq.toObject(e, this);
    }, proto.stream.DisconnectReq.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        gameid: s.Message.getFieldWithDefault(t, 2, 0),
        roomid: s.Message.getFieldWithDefault(t, 3, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.DisconnectReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.DisconnectReq();
      return proto.stream.DisconnectReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.DisconnectReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameid(r);
            break;

          case 3:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.DisconnectReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.DisconnectReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.DisconnectReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 !== (r = e.getGameid()) && t.writeUint32(2, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(3, r);
    }, proto.stream.DisconnectReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.DisconnectReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.DisconnectReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.DisconnectReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.DisconnectReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 3, "0");
    }, proto.stream.DisconnectReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 3, e);
    }, proto.stream.DisconnectRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.DisconnectRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.DisconnectRsp.displayName = "proto.stream.DisconnectRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.DisconnectRsp.prototype.toObject = function (e) {
      return proto.stream.DisconnectRsp.toObject(e, this);
    }, proto.stream.DisconnectRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.DisconnectRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.DisconnectRsp();
      return proto.stream.DisconnectRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.DisconnectRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.DisconnectRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.DisconnectRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.DisconnectRsp.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r);
    }, proto.stream.DisconnectRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.DisconnectRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.LogoutRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LogoutRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.LogoutRsp.displayName = "proto.stream.LogoutRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LogoutRsp.prototype.toObject = function (e) {
      return proto.stream.LogoutRsp.toObject(e, this);
    }, proto.stream.LogoutRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LogoutRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LogoutRsp();
      return proto.stream.LogoutRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.LogoutRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LogoutRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LogoutRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LogoutRsp.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r);
    }, proto.stream.LogoutRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LogoutRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.SetReconnectTimeoutReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.SetReconnectTimeoutReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.SetReconnectTimeoutReq.displayName = "proto.stream.SetReconnectTimeoutReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.SetReconnectTimeoutReq.prototype.toObject = function (e) {
      return proto.stream.SetReconnectTimeoutReq.toObject(e, this);
    }, proto.stream.SetReconnectTimeoutReq.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        timeout: s.Message.getFieldWithDefault(t, 2, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetReconnectTimeoutReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SetReconnectTimeoutReq();
      return proto.stream.SetReconnectTimeoutReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetReconnectTimeoutReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readInt32();
            e.setTimeout(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetReconnectTimeoutReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SetReconnectTimeoutReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetReconnectTimeoutReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 !== (r = e.getTimeout()) && t.writeInt32(2, r);
    }, proto.stream.SetReconnectTimeoutReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetReconnectTimeoutReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetReconnectTimeoutReq.prototype.getTimeout = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.SetReconnectTimeoutReq.prototype.setTimeout = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.SetReconnectTimeoutRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.SetReconnectTimeoutRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.SetReconnectTimeoutRsp.displayName = "proto.stream.SetReconnectTimeoutRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.SetReconnectTimeoutRsp.prototype.toObject = function (e) {
      return proto.stream.SetReconnectTimeoutRsp.toObject(e, this);
    }, proto.stream.SetReconnectTimeoutRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetReconnectTimeoutRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SetReconnectTimeoutRsp();
      return proto.stream.SetReconnectTimeoutRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetReconnectTimeoutRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetReconnectTimeoutRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SetReconnectTimeoutRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetReconnectTimeoutRsp.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r);
    }, proto.stream.SetReconnectTimeoutRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetReconnectTimeoutRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.keyValue = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.keyValue, s.Message), o.DEBUG && !COMPILED && (proto.stream.keyValue.displayName = "proto.stream.keyValue"), s.Message.GENERATE_TO_OBJECT && (proto.stream.keyValue.prototype.toObject = function (e) {
      return proto.stream.keyValue.toObject(e, this);
    }, proto.stream.keyValue.toObject = function (e, t) {
      var r = {
        key: s.Message.getFieldWithDefault(t, 1, ""),
        value: s.Message.getFieldWithDefault(t, 2, "")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.keyValue.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.keyValue();
      return proto.stream.keyValue.deserializeBinaryFromReader(r, t);
    }, proto.stream.keyValue.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readString();
            e.setKey(r);
            break;

          case 2:
            r = t.readString();
            e.setValue(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.keyValue.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.keyValue.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.keyValue.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 < (r = e.getKey()).length && t.writeString(1, r), 0 < (r = e.getValue()).length && t.writeString(2, r);
    }, proto.stream.keyValue.prototype.getKey = function () {
      return s.Message.getFieldWithDefault(this, 1, "");
    }, proto.stream.keyValue.prototype.setKey = function (e) {
      s.Message.setProto3StringField(this, 1, e);
    }, proto.stream.keyValue.prototype.getValue = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.keyValue.prototype.setValue = function (e) {
      s.Message.setProto3StringField(this, 2, e);
    }, proto.stream.JoinRoomReq = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.JoinRoomReq.repeatedFields_, null);
    }, o.inherits(proto.stream.JoinRoomReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinRoomReq.displayName = "proto.stream.JoinRoomReq"), proto.stream.JoinRoomReq.repeatedFields_ = [5], s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinRoomReq.prototype.toObject = function (e) {
      return proto.stream.JoinRoomReq.toObject(e, this);
    }, proto.stream.JoinRoomReq.toObject = function (e, t) {
      var r,
          o = {
        jointype: s.Message.getFieldWithDefault(t, 1, 0),
        playerinfo: (r = t.getPlayerinfo()) && proto.stream.PlayerInfo.toObject(e, r),
        gameid: s.Message.getFieldWithDefault(t, 3, 0),
        roominfo: (r = t.getRoominfo()) && proto.stream.RoomInfo.toObject(e, r),
        tagsList: s.Message.toObjectList(t.getTagsList(), proto.stream.keyValue.toObject, e),
        cpproto: t.getCpproto_asB64(),
        watchsetting: (r = t.getWatchsetting()) && proto.stream.WatchSetting.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.JoinRoomReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinRoomReq();
      return proto.stream.JoinRoomReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinRoomReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setJointype(r);
            break;

          case 2:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.setPlayerinfo(r);
            break;

          case 3:
            r = t.readUint32();
            e.setGameid(r);
            break;

          case 4:
            r = new proto.stream.RoomInfo();
            t.readMessage(r, proto.stream.RoomInfo.deserializeBinaryFromReader), e.setRoominfo(r);
            break;

          case 5:
            r = new proto.stream.keyValue();
            t.readMessage(r, proto.stream.keyValue.deserializeBinaryFromReader), e.addTags(r);
            break;

          case 6:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          case 7:
            r = new proto.stream.WatchSetting();
            t.readMessage(r, proto.stream.WatchSetting.deserializeBinaryFromReader), e.setWatchsetting(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinRoomReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinRoomReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinRoomReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getJointype()) && t.writeEnum(1, r), null != (r = e.getPlayerinfo()) && t.writeMessage(2, r, proto.stream.PlayerInfo.serializeBinaryToWriter), 0 !== (r = e.getGameid()) && t.writeUint32(3, r), null != (r = e.getRoominfo()) && t.writeMessage(4, r, proto.stream.RoomInfo.serializeBinaryToWriter), 0 < (r = e.getTagsList()).length && t.writeRepeatedMessage(5, r, proto.stream.keyValue.serializeBinaryToWriter), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(6, r), null != (r = e.getWatchsetting()) && t.writeMessage(7, r, proto.stream.WatchSetting.serializeBinaryToWriter);
    }, proto.stream.JoinRoomReq.prototype.getJointype = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinRoomReq.prototype.setJointype = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.JoinRoomReq.prototype.getPlayerinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.PlayerInfo, 2);
    }, proto.stream.JoinRoomReq.prototype.setPlayerinfo = function (e) {
      s.Message.setWrapperField(this, 2, e);
    }, proto.stream.JoinRoomReq.prototype.clearPlayerinfo = function () {
      this.setPlayerinfo(void 0);
    }, proto.stream.JoinRoomReq.prototype.hasPlayerinfo = function () {
      return null != s.Message.getField(this, 2);
    }, proto.stream.JoinRoomReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.JoinRoomReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.JoinRoomReq.prototype.getRoominfo = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomInfo, 4);
    }, proto.stream.JoinRoomReq.prototype.setRoominfo = function (e) {
      s.Message.setWrapperField(this, 4, e);
    }, proto.stream.JoinRoomReq.prototype.clearRoominfo = function () {
      this.setRoominfo(void 0);
    }, proto.stream.JoinRoomReq.prototype.hasRoominfo = function () {
      return null != s.Message.getField(this, 4);
    }, proto.stream.JoinRoomReq.prototype.getTagsList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.keyValue, 5);
    }, proto.stream.JoinRoomReq.prototype.setTagsList = function (e) {
      s.Message.setRepeatedWrapperField(this, 5, e);
    }, proto.stream.JoinRoomReq.prototype.addTags = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 5, e, proto.stream.keyValue, t);
    }, proto.stream.JoinRoomReq.prototype.clearTagsList = function () {
      this.setTagsList([]);
    }, proto.stream.JoinRoomReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 6, "");
    }, proto.stream.JoinRoomReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.JoinRoomReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.JoinRoomReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 6, e);
    }, proto.stream.JoinRoomReq.prototype.getWatchsetting = function () {
      return s.Message.getWrapperField(this, proto.stream.WatchSetting, 7);
    }, proto.stream.JoinRoomReq.prototype.setWatchsetting = function (e) {
      s.Message.setWrapperField(this, 7, e);
    }, proto.stream.JoinRoomReq.prototype.clearWatchsetting = function () {
      this.setWatchsetting(void 0);
    }, proto.stream.JoinRoomReq.prototype.hasWatchsetting = function () {
      return null != s.Message.getField(this, 7);
    }, proto.stream.JoinRoomRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.JoinRoomRsp.repeatedFields_, null);
    }, o.inherits(proto.stream.JoinRoomRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinRoomRsp.displayName = "proto.stream.JoinRoomRsp"), proto.stream.JoinRoomRsp.repeatedFields_ = [2], s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinRoomRsp.prototype.toObject = function (e) {
      return proto.stream.JoinRoomRsp.toObject(e, this);
    }, proto.stream.JoinRoomRsp.toObject = function (e, t) {
      var r,
          o = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        usersList: s.Message.toObjectList(t.getUsersList(), proto.stream.PlayerInfo.toObject, e),
        roominfo: (r = t.getRoominfo()) && proto.stream.RoomInfo.toObject(e, r),
        bookinfo: (r = t.getBookinfo()) && proto.stream.BookInfo.toObject(e, r),
        cpproto: t.getCpproto_asB64()
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.JoinRoomRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinRoomRsp();
      return proto.stream.JoinRoomRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinRoomRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.addUsers(r);
            break;

          case 3:
            r = new proto.stream.RoomInfo();
            t.readMessage(r, proto.stream.RoomInfo.deserializeBinaryFromReader), e.setRoominfo(r);
            break;

          case 4:
            r = new proto.stream.BookInfo();
            t.readMessage(r, proto.stream.BookInfo.deserializeBinaryFromReader), e.setBookinfo(r);
            break;

          case 5:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinRoomRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinRoomRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinRoomRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 < (r = e.getUsersList()).length && t.writeRepeatedMessage(2, r, proto.stream.PlayerInfo.serializeBinaryToWriter), null != (r = e.getRoominfo()) && t.writeMessage(3, r, proto.stream.RoomInfo.serializeBinaryToWriter), null != (r = e.getBookinfo()) && t.writeMessage(4, r, proto.stream.BookInfo.serializeBinaryToWriter), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(5, r);
    }, proto.stream.JoinRoomRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinRoomRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.JoinRoomRsp.prototype.getUsersList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 2);
    }, proto.stream.JoinRoomRsp.prototype.setUsersList = function (e) {
      s.Message.setRepeatedWrapperField(this, 2, e);
    }, proto.stream.JoinRoomRsp.prototype.addUsers = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 2, e, proto.stream.PlayerInfo, t);
    }, proto.stream.JoinRoomRsp.prototype.clearUsersList = function () {
      this.setUsersList([]);
    }, proto.stream.JoinRoomRsp.prototype.getRoominfo = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomInfo, 3);
    }, proto.stream.JoinRoomRsp.prototype.setRoominfo = function (e) {
      s.Message.setWrapperField(this, 3, e);
    }, proto.stream.JoinRoomRsp.prototype.clearRoominfo = function () {
      this.setRoominfo(void 0);
    }, proto.stream.JoinRoomRsp.prototype.hasRoominfo = function () {
      return null != s.Message.getField(this, 3);
    }, proto.stream.JoinRoomRsp.prototype.getBookinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.BookInfo, 4);
    }, proto.stream.JoinRoomRsp.prototype.setBookinfo = function (e) {
      s.Message.setWrapperField(this, 4, e);
    }, proto.stream.JoinRoomRsp.prototype.clearBookinfo = function () {
      this.setBookinfo(void 0);
    }, proto.stream.JoinRoomRsp.prototype.hasBookinfo = function () {
      return null != s.Message.getField(this, 4);
    }, proto.stream.JoinRoomRsp.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 5, "");
    }, proto.stream.JoinRoomRsp.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.JoinRoomRsp.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.JoinRoomRsp.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 5, e);
    }, proto.stream.PlayerInfo = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.PlayerInfo, s.Message), o.DEBUG && !COMPILED && (proto.stream.PlayerInfo.displayName = "proto.stream.PlayerInfo"), s.Message.GENERATE_TO_OBJECT && (proto.stream.PlayerInfo.prototype.toObject = function (e) {
      return proto.stream.PlayerInfo.toObject(e, this);
    }, proto.stream.PlayerInfo.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        userprofile: t.getUserprofile_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.PlayerInfo.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.PlayerInfo();
      return proto.stream.PlayerInfo.deserializeBinaryFromReader(r, t);
    }, proto.stream.PlayerInfo.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readBytes();
            e.setUserprofile(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.PlayerInfo.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.PlayerInfo.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.PlayerInfo.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 < (r = e.getUserprofile_asU8()).length && t.writeBytes(2, r);
    }, proto.stream.PlayerInfo.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.PlayerInfo.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.PlayerInfo.prototype.getUserprofile = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.PlayerInfo.prototype.getUserprofile_asB64 = function () {
      return s.Message.bytesAsB64(this.getUserprofile());
    }, proto.stream.PlayerInfo.prototype.getUserprofile_asU8 = function () {
      return s.Message.bytesAsU8(this.getUserprofile());
    }, proto.stream.PlayerInfo.prototype.setUserprofile = function (e) {
      s.Message.setProto3BytesField(this, 2, e);
    }, proto.stream.BookInfo = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.BookInfo, s.Message), o.DEBUG && !COMPILED && (proto.stream.BookInfo.displayName = "proto.stream.BookInfo"), s.Message.GENERATE_TO_OBJECT && (proto.stream.BookInfo.prototype.toObject = function (e) {
      return proto.stream.BookInfo.toObject(e, this);
    }, proto.stream.BookInfo.toObject = function (e, t) {
      var r = {
        bookid: s.Message.getFieldWithDefault(t, 1, ""),
        bookkey: s.Message.getFieldWithDefault(t, 2, ""),
        hoteladdr: s.Message.getFieldWithDefault(t, 3, ""),
        wssproxy: s.Message.getFieldWithDefault(t, 4, "")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.BookInfo.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.BookInfo();
      return proto.stream.BookInfo.deserializeBinaryFromReader(r, t);
    }, proto.stream.BookInfo.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readString();
            e.setBookid(r);
            break;

          case 2:
            r = t.readString();
            e.setBookkey(r);
            break;

          case 3:
            r = t.readString();
            e.setHoteladdr(r);
            break;

          case 4:
            r = t.readString();
            e.setWssproxy(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.BookInfo.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.BookInfo.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.BookInfo.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 < (r = e.getBookid()).length && t.writeString(1, r), 0 < (r = e.getBookkey()).length && t.writeString(2, r), 0 < (r = e.getHoteladdr()).length && t.writeString(3, r), 0 < (r = e.getWssproxy()).length && t.writeString(4, r);
    }, proto.stream.BookInfo.prototype.getBookid = function () {
      return s.Message.getFieldWithDefault(this, 1, "");
    }, proto.stream.BookInfo.prototype.setBookid = function (e) {
      s.Message.setProto3StringField(this, 1, e);
    }, proto.stream.BookInfo.prototype.getBookkey = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.BookInfo.prototype.setBookkey = function (e) {
      s.Message.setProto3StringField(this, 2, e);
    }, proto.stream.BookInfo.prototype.getHoteladdr = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.BookInfo.prototype.setHoteladdr = function (e) {
      s.Message.setProto3StringField(this, 3, e);
    }, proto.stream.BookInfo.prototype.getWssproxy = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.BookInfo.prototype.setWssproxy = function (e) {
      s.Message.setProto3StringField(this, 4, e);
    }, proto.stream.RoomInfo = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.RoomInfo, s.Message), o.DEBUG && !COMPILED && (proto.stream.RoomInfo.displayName = "proto.stream.RoomInfo"), s.Message.GENERATE_TO_OBJECT && (proto.stream.RoomInfo.prototype.toObject = function (e) {
      return proto.stream.RoomInfo.toObject(e, this);
    }, proto.stream.RoomInfo.toObject = function (e, t) {
      var r = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        roomname: s.Message.getFieldWithDefault(t, 2, ""),
        maxplayer: s.Message.getFieldWithDefault(t, 3, 0),
        mode: s.Message.getFieldWithDefault(t, 4, 0),
        canwatch: s.Message.getFieldWithDefault(t, 5, 0),
        visibility: s.Message.getFieldWithDefault(t, 6, 0),
        roomproperty: t.getRoomproperty_asB64(),
        owner: s.Message.getFieldWithDefault(t, 8, 0),
        state: s.Message.getFieldWithDefault(t, 9, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.RoomInfo.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.RoomInfo();
      return proto.stream.RoomInfo.deserializeBinaryFromReader(r, t);
    }, proto.stream.RoomInfo.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readString();
            e.setRoomname(r);
            break;

          case 3:
            r = t.readUint32();
            e.setMaxplayer(r);
            break;

          case 4:
            r = t.readInt32();
            e.setMode(r);
            break;

          case 5:
            r = t.readInt32();
            e.setCanwatch(r);
            break;

          case 6:
            r = t.readInt32();
            e.setVisibility(r);
            break;

          case 7:
            r = t.readBytes();
            e.setRoomproperty(r);
            break;

          case 8:
            r = t.readUint32();
            e.setOwner(r);
            break;

          case 9:
            r = t.readEnum();
            e.setState(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.RoomInfo.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.RoomInfo.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.RoomInfo.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 < (r = e.getRoomname()).length && t.writeString(2, r), 0 !== (r = e.getMaxplayer()) && t.writeUint32(3, r), 0 !== (r = e.getMode()) && t.writeInt32(4, r), 0 !== (r = e.getCanwatch()) && t.writeInt32(5, r), 0 !== (r = e.getVisibility()) && t.writeInt32(6, r), 0 < (r = e.getRoomproperty_asU8()).length && t.writeBytes(7, r), 0 !== (r = e.getOwner()) && t.writeUint32(8, r), 0 !== (r = e.getState()) && t.writeEnum(9, r);
    }, proto.stream.RoomInfo.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.RoomInfo.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.RoomInfo.prototype.getRoomname = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.RoomInfo.prototype.setRoomname = function (e) {
      s.Message.setProto3StringField(this, 2, e);
    }, proto.stream.RoomInfo.prototype.getMaxplayer = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.RoomInfo.prototype.setMaxplayer = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.RoomInfo.prototype.getMode = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.RoomInfo.prototype.setMode = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.RoomInfo.prototype.getCanwatch = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.RoomInfo.prototype.setCanwatch = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.RoomInfo.prototype.getVisibility = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.RoomInfo.prototype.setVisibility = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.RoomInfo.prototype.getRoomproperty = function () {
      return s.Message.getFieldWithDefault(this, 7, "");
    }, proto.stream.RoomInfo.prototype.getRoomproperty_asB64 = function () {
      return s.Message.bytesAsB64(this.getRoomproperty());
    }, proto.stream.RoomInfo.prototype.getRoomproperty_asU8 = function () {
      return s.Message.bytesAsU8(this.getRoomproperty());
    }, proto.stream.RoomInfo.prototype.setRoomproperty = function (e) {
      s.Message.setProto3BytesField(this, 7, e);
    }, proto.stream.RoomInfo.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 8, 0);
    }, proto.stream.RoomInfo.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 8, e);
    }, proto.stream.RoomInfo.prototype.getState = function () {
      return s.Message.getFieldWithDefault(this, 9, 0);
    }, proto.stream.RoomInfo.prototype.setState = function (e) {
      s.Message.setProto3EnumField(this, 9, e);
    }, proto.stream.NoticeJoin = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.NoticeJoin, s.Message), o.DEBUG && !COMPILED && (proto.stream.NoticeJoin.displayName = "proto.stream.NoticeJoin"), s.Message.GENERATE_TO_OBJECT && (proto.stream.NoticeJoin.prototype.toObject = function (e) {
      return proto.stream.NoticeJoin.toObject(e, this);
    }, proto.stream.NoticeJoin.toObject = function (e, t) {
      var r,
          o = {
        user: (r = t.getUser()) && proto.stream.PlayerInfo.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.NoticeJoin.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.NoticeJoin();
      return proto.stream.NoticeJoin.deserializeBinaryFromReader(r, t);
    }, proto.stream.NoticeJoin.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.setUser(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.NoticeJoin.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.NoticeJoin.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.NoticeJoin.serializeBinaryToWriter = function (e, t) {
      var r;
      null != (r = e.getUser()) && t.writeMessage(1, r, proto.stream.PlayerInfo.serializeBinaryToWriter);
    }, proto.stream.NoticeJoin.prototype.getUser = function () {
      return s.Message.getWrapperField(this, proto.stream.PlayerInfo, 1);
    }, proto.stream.NoticeJoin.prototype.setUser = function (e) {
      s.Message.setWrapperField(this, 1, e);
    }, proto.stream.NoticeJoin.prototype.clearUser = function () {
      this.setUser(void 0);
    }, proto.stream.NoticeJoin.prototype.hasUser = function () {
      return null != s.Message.getField(this, 1);
    }, proto.stream.NoticeLeave = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.NoticeLeave, s.Message), o.DEBUG && !COMPILED && (proto.stream.NoticeLeave.displayName = "proto.stream.NoticeLeave"), s.Message.GENERATE_TO_OBJECT && (proto.stream.NoticeLeave.prototype.toObject = function (e) {
      return proto.stream.NoticeLeave.toObject(e, this);
    }, proto.stream.NoticeLeave.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        owner: s.Message.getFieldWithDefault(t, 3, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.NoticeLeave.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.NoticeLeave();
      return proto.stream.NoticeLeave.deserializeBinaryFromReader(r, t);
    }, proto.stream.NoticeLeave.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setOwner(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.NoticeLeave.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.NoticeLeave.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.NoticeLeave.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getOwner()) && t.writeUint32(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.NoticeLeave.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.NoticeLeave.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.NoticeLeave.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.NoticeLeave.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.NoticeLeave.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.NoticeLeave.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.NoticeLeave.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.NoticeLeave.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.NoticeLeave.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.NoticeLeave.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.JoinOverReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinOverReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinOverReq.displayName = "proto.stream.JoinOverReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinOverReq.prototype.toObject = function (e) {
      return proto.stream.JoinOverReq.toObject(e, this);
    }, proto.stream.JoinOverReq.toObject = function (e, t) {
      var r = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        gameid: s.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64(),
        userid: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.JoinOverReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinOverReq();
      return proto.stream.JoinOverReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinOverReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameid(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          case 4:
            r = t.readUint32();
            e.setUserid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinOverReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinOverReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinOverReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getGameid()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r), 0 !== (r = e.getUserid()) && t.writeUint32(4, r);
    }, proto.stream.JoinOverReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.JoinOverReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.JoinOverReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.JoinOverReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.JoinOverReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.JoinOverReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.JoinOverReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.JoinOverReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.JoinOverReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.JoinOverReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.JoinOverRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinOverRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinOverRsp.displayName = "proto.stream.JoinOverRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinOverRsp.prototype.toObject = function (e) {
      return proto.stream.JoinOverRsp.toObject(e, this);
    }, proto.stream.JoinOverRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.JoinOverRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinOverRsp();
      return proto.stream.JoinOverRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinOverRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinOverRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinOverRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinOverRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(2, r);
    }, proto.stream.JoinOverRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinOverRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.JoinOverRsp.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.JoinOverRsp.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.JoinOverRsp.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.JoinOverRsp.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 2, e);
    }, proto.stream.JoinOverNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinOverNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinOverNotify.displayName = "proto.stream.JoinOverNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinOverNotify.prototype.toObject = function (e) {
      return proto.stream.JoinOverNotify.toObject(e, this);
    }, proto.stream.JoinOverNotify.toObject = function (e, t) {
      var r = {
        srcuserid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.JoinOverNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinOverNotify();
      return proto.stream.JoinOverNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinOverNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setSrcuserid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinOverNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinOverNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinOverNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getSrcuserid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r);
    }, proto.stream.JoinOverNotify.prototype.getSrcuserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinOverNotify.prototype.setSrcuserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.JoinOverNotify.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.JoinOverNotify.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.JoinOverNotify.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.JoinOverNotify.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.JoinOverNotify.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.JoinOverNotify.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.JoinOpenReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinOpenReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinOpenReq.displayName = "proto.stream.JoinOpenReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinOpenReq.prototype.toObject = function (e) {
      return proto.stream.JoinOpenReq.toObject(e, this);
    }, proto.stream.JoinOpenReq.toObject = function (e, t) {
      var r = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        gameid: s.Message.getFieldWithDefault(t, 2, 0),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.JoinOpenReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinOpenReq();
      return proto.stream.JoinOpenReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinOpenReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinOpenReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinOpenReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinOpenReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getGameid()) && t.writeUint32(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.JoinOpenReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.JoinOpenReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.JoinOpenReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.JoinOpenReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.JoinOpenReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.JoinOpenReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.JoinOpenReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.JoinOpenReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.JoinOpenReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.JoinOpenReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.JoinOpenRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinOpenRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinOpenRsp.displayName = "proto.stream.JoinOpenRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinOpenRsp.prototype.toObject = function (e) {
      return proto.stream.JoinOpenRsp.toObject(e, this);
    }, proto.stream.JoinOpenRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.JoinOpenRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinOpenRsp();
      return proto.stream.JoinOpenRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinOpenRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinOpenRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinOpenRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinOpenRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(2, r);
    }, proto.stream.JoinOpenRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinOpenRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.JoinOpenRsp.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.JoinOpenRsp.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.JoinOpenRsp.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.JoinOpenRsp.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 2, e);
    }, proto.stream.JoinOpenNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinOpenNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinOpenNotify.displayName = "proto.stream.JoinOpenNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinOpenNotify.prototype.toObject = function (e) {
      return proto.stream.JoinOpenNotify.toObject(e, this);
    }, proto.stream.JoinOpenNotify.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.JoinOpenNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinOpenNotify();
      return proto.stream.JoinOpenNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinOpenNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinOpenNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinOpenNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinOpenNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r);
    }, proto.stream.JoinOpenNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinOpenNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.JoinOpenNotify.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.JoinOpenNotify.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.JoinOpenNotify.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.JoinOpenNotify.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.JoinOpenNotify.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.JoinOpenNotify.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.LeaveRoomReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LeaveRoomReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.LeaveRoomReq.displayName = "proto.stream.LeaveRoomReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LeaveRoomReq.prototype.toObject = function (e) {
      return proto.stream.LeaveRoomReq.toObject(e, this);
    }, proto.stream.LeaveRoomReq.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        gameid: s.Message.getFieldWithDefault(t, 2, 0),
        roomid: s.Message.getFieldWithDefault(t, 3, "0"),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LeaveRoomReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LeaveRoomReq();
      return proto.stream.LeaveRoomReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.LeaveRoomReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameid(r);
            break;

          case 3:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LeaveRoomReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LeaveRoomReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LeaveRoomReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 !== (r = e.getGameid()) && t.writeUint32(2, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.LeaveRoomReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LeaveRoomReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LeaveRoomReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.LeaveRoomReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.LeaveRoomReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 3, "0");
    }, proto.stream.LeaveRoomReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 3, e);
    }, proto.stream.LeaveRoomReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.LeaveRoomReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.LeaveRoomReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.LeaveRoomReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.LeaveRoomRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LeaveRoomRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.LeaveRoomRsp.displayName = "proto.stream.LeaveRoomRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LeaveRoomRsp.prototype.toObject = function (e) {
      return proto.stream.LeaveRoomRsp.toObject(e, this);
    }, proto.stream.LeaveRoomRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LeaveRoomRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LeaveRoomRsp();
      return proto.stream.LeaveRoomRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.LeaveRoomRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LeaveRoomRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LeaveRoomRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LeaveRoomRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.LeaveRoomRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LeaveRoomRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.LeaveRoomRsp.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.LeaveRoomRsp.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.LeaveRoomRsp.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.LeaveRoomRsp.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.LeaveRoomRsp.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.LeaveRoomRsp.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.LeaveRoomRsp.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.LeaveRoomRsp.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.TcpProtoHeader = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.TcpProtoHeader, s.Message), o.DEBUG && !COMPILED && (proto.stream.TcpProtoHeader.displayName = "proto.stream.TcpProtoHeader"), s.Message.GENERATE_TO_OBJECT && (proto.stream.TcpProtoHeader.prototype.toObject = function (e) {
      return proto.stream.TcpProtoHeader.toObject(e, this);
    }, proto.stream.TcpProtoHeader.toObject = function (e, t) {
      var r = {
        size: s.Message.getFieldWithDefault(t, 1, 0),
        seq: s.Message.getFieldWithDefault(t, 2, 0),
        cmd: s.Message.getFieldWithDefault(t, 3, 0),
        version: s.Message.getFieldWithDefault(t, 4, 0),
        userid: s.Message.getFieldWithDefault(t, 5, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.TcpProtoHeader.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.TcpProtoHeader();
      return proto.stream.TcpProtoHeader.deserializeBinaryFromReader(r, t);
    }, proto.stream.TcpProtoHeader.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setSize(r);
            break;

          case 2:
            r = t.readUint32();
            e.setSeq(r);
            break;

          case 3:
            r = t.readUint32();
            e.setCmd(r);
            break;

          case 4:
            r = t.readUint32();
            e.setVersion(r);
            break;

          case 5:
            r = t.readUint32();
            e.setUserid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.TcpProtoHeader.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.TcpProtoHeader.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.TcpProtoHeader.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getSize()) && t.writeUint32(1, r), 0 !== (r = e.getSeq()) && t.writeUint32(2, r), 0 !== (r = e.getCmd()) && t.writeUint32(3, r), 0 !== (r = e.getVersion()) && t.writeUint32(4, r), 0 !== (r = e.getUserid()) && t.writeUint32(5, r);
    }, proto.stream.TcpProtoHeader.prototype.getSize = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.TcpProtoHeader.prototype.setSize = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.TcpProtoHeader.prototype.getSeq = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.TcpProtoHeader.prototype.setSeq = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.TcpProtoHeader.prototype.getCmd = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.TcpProtoHeader.prototype.setCmd = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.TcpProtoHeader.prototype.getVersion = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.TcpProtoHeader.prototype.setVersion = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.TcpProtoHeader.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.TcpProtoHeader.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.ConnDetailV2 = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.ConnDetailV2, s.Message), o.DEBUG && !COMPILED && (proto.stream.ConnDetailV2.displayName = "proto.stream.ConnDetailV2"), s.Message.GENERATE_TO_OBJECT && (proto.stream.ConnDetailV2.prototype.toObject = function (e) {
      return proto.stream.ConnDetailV2.toObject(e, this);
    }, proto.stream.ConnDetailV2.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        gameid: s.Message.getFieldWithDefault(t, 2, 0),
        fieldid: s.Message.getFieldWithDefault(t, 3, 0),
        roomid: s.Message.getFieldWithDefault(t, 4, "0"),
        heartbeattime: s.Message.getFieldWithDefault(t, 5, "0"),
        version: s.Message.getFieldWithDefault(t, 6, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.ConnDetailV2.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.ConnDetailV2();
      return proto.stream.ConnDetailV2.deserializeBinaryFromReader(r, t);
    }, proto.stream.ConnDetailV2.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setFieldid(r);
            break;

          case 4:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 5:
            r = t.readUint64String();
            e.setHeartbeattime(r);
            break;

          case 6:
            r = t.readUint32();
            e.setVersion(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.ConnDetailV2.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.ConnDetailV2.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.ConnDetailV2.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 !== (r = e.getGameid()) && t.writeUint32(2, r), 0 !== (r = e.getFieldid()) && t.writeUint32(3, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(4, r), r = e.getHeartbeattime(), 0 !== parseInt(r, 10) && t.writeUint64String(5, r), 0 !== (r = e.getVersion()) && t.writeUint32(6, r);
    }, proto.stream.ConnDetailV2.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.ConnDetailV2.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.ConnDetailV2.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.ConnDetailV2.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.ConnDetailV2.prototype.getFieldid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.ConnDetailV2.prototype.setFieldid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.ConnDetailV2.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 4, "0");
    }, proto.stream.ConnDetailV2.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 4, e);
    }, proto.stream.ConnDetailV2.prototype.getHeartbeattime = function () {
      return s.Message.getFieldWithDefault(this, 5, "0");
    }, proto.stream.ConnDetailV2.prototype.setHeartbeattime = function (e) {
      s.Message.setProto3StringIntField(this, 5, e);
    }, proto.stream.ConnDetailV2.prototype.getVersion = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.ConnDetailV2.prototype.setVersion = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.UserV2 = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.UserV2, s.Message), o.DEBUG && !COMPILED && (proto.stream.UserV2.displayName = "proto.stream.UserV2"), s.Message.GENERATE_TO_OBJECT && (proto.stream.UserV2.prototype.toObject = function (e) {
      return proto.stream.UserV2.toObject(e, this);
    }, proto.stream.UserV2.toObject = function (e, t) {
      var r = {
        userId: s.Message.getFieldWithDefault(t, 1, 0),
        gameId: s.Message.getFieldWithDefault(t, 2, 0),
        versionSdk: s.Message.getFieldWithDefault(t, 3, 0),
        connectionId: s.Message.getFieldWithDefault(t, 4, "0"),
        serviceId: s.Message.getFieldWithDefault(t, 5, 0),
        roomId: s.Message.getFieldWithDefault(t, 6, "0"),
        deviceId: s.Message.getFieldWithDefault(t, 7, ""),
        connStatus: s.Message.getFieldWithDefault(t, 8, 0),
        reconnectTimeout: s.Message.getFieldWithDefault(t, 9, 0),
        teamId: s.Message.getFieldWithDefault(t, 10, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.UserV2.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.UserV2();
      return proto.stream.UserV2.deserializeBinaryFromReader(r, t);
    }, proto.stream.UserV2.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserId(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameId(r);
            break;

          case 3:
            r = t.readUint32();
            e.setVersionSdk(r);
            break;

          case 4:
            r = t.readUint64String();
            e.setConnectionId(r);
            break;

          case 5:
            r = t.readUint32();
            e.setServiceId(r);
            break;

          case 6:
            r = t.readUint64String();
            e.setRoomId(r);
            break;

          case 7:
            r = t.readString();
            e.setDeviceId(r);
            break;

          case 8:
            r = t.readUint32();
            e.setConnStatus(r);
            break;

          case 9:
            r = t.readUint32();
            e.setReconnectTimeout(r);
            break;

          case 10:
            r = t.readUint64String();
            e.setTeamId(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.UserV2.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.UserV2.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.UserV2.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserId()) && t.writeUint32(1, r), 0 !== (r = e.getGameId()) && t.writeUint32(2, r), 0 !== (r = e.getVersionSdk()) && t.writeUint32(3, r), r = e.getConnectionId(), 0 !== parseInt(r, 10) && t.writeUint64String(4, r), 0 !== (r = e.getServiceId()) && t.writeUint32(5, r), r = e.getRoomId(), 0 !== parseInt(r, 10) && t.writeUint64String(6, r), 0 < (r = e.getDeviceId()).length && t.writeString(7, r), 0 !== (r = e.getConnStatus()) && t.writeUint32(8, r), 0 !== (r = e.getReconnectTimeout()) && t.writeUint32(9, r), r = e.getTeamId(), 0 !== parseInt(r, 10) && t.writeUint64String(10, r);
    }, proto.stream.UserV2.prototype.getUserId = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.UserV2.prototype.setUserId = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.UserV2.prototype.getGameId = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.UserV2.prototype.setGameId = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.UserV2.prototype.getVersionSdk = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.UserV2.prototype.setVersionSdk = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.UserV2.prototype.getConnectionId = function () {
      return s.Message.getFieldWithDefault(this, 4, "0");
    }, proto.stream.UserV2.prototype.setConnectionId = function (e) {
      s.Message.setProto3StringIntField(this, 4, e);
    }, proto.stream.UserV2.prototype.getServiceId = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.UserV2.prototype.setServiceId = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.UserV2.prototype.getRoomId = function () {
      return s.Message.getFieldWithDefault(this, 6, "0");
    }, proto.stream.UserV2.prototype.setRoomId = function (e) {
      s.Message.setProto3StringIntField(this, 6, e);
    }, proto.stream.UserV2.prototype.getDeviceId = function () {
      return s.Message.getFieldWithDefault(this, 7, "");
    }, proto.stream.UserV2.prototype.setDeviceId = function (e) {
      s.Message.setProto3StringField(this, 7, e);
    }, proto.stream.UserV2.prototype.getConnStatus = function () {
      return s.Message.getFieldWithDefault(this, 8, 0);
    }, proto.stream.UserV2.prototype.setConnStatus = function (e) {
      s.Message.setProto3IntField(this, 8, e);
    }, proto.stream.UserV2.prototype.getReconnectTimeout = function () {
      return s.Message.getFieldWithDefault(this, 9, 0);
    }, proto.stream.UserV2.prototype.setReconnectTimeout = function (e) {
      s.Message.setProto3IntField(this, 9, e);
    }, proto.stream.UserV2.prototype.getTeamId = function () {
      return s.Message.getFieldWithDefault(this, 10, "0");
    }, proto.stream.UserV2.prototype.setTeamId = function (e) {
      s.Message.setProto3StringIntField(this, 10, e);
    }, proto.stream.UserV2Ex = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.UserV2Ex, s.Message), o.DEBUG && !COMPILED && (proto.stream.UserV2Ex.displayName = "proto.stream.UserV2Ex"), s.Message.GENERATE_TO_OBJECT && (proto.stream.UserV2Ex.prototype.toObject = function (e) {
      return proto.stream.UserV2Ex.toObject(e, this);
    }, proto.stream.UserV2Ex.toObject = function (e, t) {
      var r = {
        userId: s.Message.getFieldWithDefault(t, 1, 0),
        gameId: s.Message.getFieldWithDefault(t, 2, 0),
        sdkver: s.Message.getFieldWithDefault(t, 3, ""),
        vendor: s.Message.getFieldWithDefault(t, 4, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.UserV2Ex.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.UserV2Ex();
      return proto.stream.UserV2Ex.deserializeBinaryFromReader(r, t);
    }, proto.stream.UserV2Ex.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserId(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameId(r);
            break;

          case 3:
            r = t.readString();
            e.setSdkver(r);
            break;

          case 4:
            r = t.readUint32();
            e.setVendor(r);
            break;

          case 5:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.UserV2Ex.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.UserV2Ex.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.UserV2Ex.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserId()) && t.writeUint32(1, r), 0 !== (r = e.getGameId()) && t.writeUint32(2, r), 0 < (r = e.getSdkver()).length && t.writeString(3, r), 0 !== (r = e.getVendor()) && t.writeUint32(4, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(5, r);
    }, proto.stream.UserV2Ex.prototype.getUserId = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.UserV2Ex.prototype.setUserId = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.UserV2Ex.prototype.getGameId = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.UserV2Ex.prototype.setGameId = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.UserV2Ex.prototype.getSdkver = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.UserV2Ex.prototype.setSdkver = function (e) {
      s.Message.setProto3StringField(this, 3, e);
    }, proto.stream.UserV2Ex.prototype.getVendor = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.UserV2Ex.prototype.setVendor = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.UserV2Ex.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 5, "");
    }, proto.stream.UserV2Ex.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.UserV2Ex.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.UserV2Ex.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 5, e);
    }, proto.stream.NetworkStateReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.NetworkStateReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.NetworkStateReq.displayName = "proto.stream.NetworkStateReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.NetworkStateReq.prototype.toObject = function (e) {
      return proto.stream.NetworkStateReq.toObject(e, this);
    }, proto.stream.NetworkStateReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        state: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.NetworkStateReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.NetworkStateReq();
      return proto.stream.NetworkStateReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.NetworkStateReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readUint32();
            e.setState(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.NetworkStateReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.NetworkStateReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.NetworkStateReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 !== (r = e.getState()) && t.writeUint32(4, r);
    }, proto.stream.NetworkStateReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.NetworkStateReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.NetworkStateReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.NetworkStateReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.NetworkStateReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.NetworkStateReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.NetworkStateReq.prototype.getState = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.NetworkStateReq.prototype.setState = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.NetworkStateRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.NetworkStateRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.NetworkStateRsp.displayName = "proto.stream.NetworkStateRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.NetworkStateRsp.prototype.toObject = function (e) {
      return proto.stream.NetworkStateRsp.toObject(e, this);
    }, proto.stream.NetworkStateRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.NetworkStateRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.NetworkStateRsp();
      return proto.stream.NetworkStateRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.NetworkStateRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.NetworkStateRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.NetworkStateRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.NetworkStateRsp.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r);
    }, proto.stream.NetworkStateRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.NetworkStateRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.NetworkStateNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.NetworkStateNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.NetworkStateNotify.displayName = "proto.stream.NetworkStateNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.NetworkStateNotify.prototype.toObject = function (e) {
      return proto.stream.NetworkStateNotify.toObject(e, this);
    }, proto.stream.NetworkStateNotify.toObject = function (e, t) {
      var r = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        state: s.Message.getFieldWithDefault(t, 3, 0),
        owner: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.NetworkStateNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.NetworkStateNotify();
      return proto.stream.NetworkStateNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.NetworkStateNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setState(r);
            break;

          case 4:
            r = t.readUint32();
            e.setOwner(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.NetworkStateNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.NetworkStateNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.NetworkStateNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), 0 !== (r = e.getState()) && t.writeUint32(3, r), 0 !== (r = e.getOwner()) && t.writeUint32(4, r);
    }, proto.stream.NetworkStateNotify.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.NetworkStateNotify.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.NetworkStateNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.NetworkStateNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.NetworkStateNotify.prototype.getState = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.NetworkStateNotify.prototype.setState = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.NetworkStateNotify.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.NetworkStateNotify.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.CreateRoomReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.CreateRoomReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.CreateRoomReq.displayName = "proto.stream.CreateRoomReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.CreateRoomReq.prototype.toObject = function (e) {
      return proto.stream.CreateRoomReq.toObject(e, this);
    }, proto.stream.CreateRoomReq.toObject = function (e, t) {
      var r,
          o = {
        playerinfo: (r = t.getPlayerinfo()) && proto.stream.PlayerInfo.toObject(e, r),
        gameid: s.Message.getFieldWithDefault(t, 2, 0),
        roominfo: (r = t.getRoominfo()) && proto.stream.RoomInfo.toObject(e, r),
        watchsetting: (r = t.getWatchsetting()) && proto.stream.WatchSetting.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.CreateRoomReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.CreateRoomReq();
      return proto.stream.CreateRoomReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.CreateRoomReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.setPlayerinfo(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameid(r);
            break;

          case 3:
            r = new proto.stream.RoomInfo();
            t.readMessage(r, proto.stream.RoomInfo.deserializeBinaryFromReader), e.setRoominfo(r);
            break;

          case 4:
            r = new proto.stream.WatchSetting();
            t.readMessage(r, proto.stream.WatchSetting.deserializeBinaryFromReader), e.setWatchsetting(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CreateRoomReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.CreateRoomReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CreateRoomReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      null != (r = e.getPlayerinfo()) && t.writeMessage(1, r, proto.stream.PlayerInfo.serializeBinaryToWriter), 0 !== (r = e.getGameid()) && t.writeUint32(2, r), null != (r = e.getRoominfo()) && t.writeMessage(3, r, proto.stream.RoomInfo.serializeBinaryToWriter), null != (r = e.getWatchsetting()) && t.writeMessage(4, r, proto.stream.WatchSetting.serializeBinaryToWriter);
    }, proto.stream.CreateRoomReq.prototype.getPlayerinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.PlayerInfo, 1);
    }, proto.stream.CreateRoomReq.prototype.setPlayerinfo = function (e) {
      s.Message.setWrapperField(this, 1, e);
    }, proto.stream.CreateRoomReq.prototype.clearPlayerinfo = function () {
      this.setPlayerinfo(void 0);
    }, proto.stream.CreateRoomReq.prototype.hasPlayerinfo = function () {
      return null != s.Message.getField(this, 1);
    }, proto.stream.CreateRoomReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.CreateRoomReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.CreateRoomReq.prototype.getRoominfo = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomInfo, 3);
    }, proto.stream.CreateRoomReq.prototype.setRoominfo = function (e) {
      s.Message.setWrapperField(this, 3, e);
    }, proto.stream.CreateRoomReq.prototype.clearRoominfo = function () {
      this.setRoominfo(void 0);
    }, proto.stream.CreateRoomReq.prototype.hasRoominfo = function () {
      return null != s.Message.getField(this, 3);
    }, proto.stream.CreateRoomReq.prototype.getWatchsetting = function () {
      return s.Message.getWrapperField(this, proto.stream.WatchSetting, 4);
    }, proto.stream.CreateRoomReq.prototype.setWatchsetting = function (e) {
      s.Message.setWrapperField(this, 4, e);
    }, proto.stream.CreateRoomReq.prototype.clearWatchsetting = function () {
      this.setWatchsetting(void 0);
    }, proto.stream.CreateRoomReq.prototype.hasWatchsetting = function () {
      return null != s.Message.getField(this, 4);
    }, proto.stream.CreateRoomRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.CreateRoomRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.CreateRoomRsp.displayName = "proto.stream.CreateRoomRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.CreateRoomRsp.prototype.toObject = function (e) {
      return proto.stream.CreateRoomRsp.toObject(e, this);
    }, proto.stream.CreateRoomRsp.toObject = function (e, t) {
      var r,
          o = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        bookinfo: (r = t.getBookinfo()) && proto.stream.BookInfo.toObject(e, r),
        owner: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.CreateRoomRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.CreateRoomRsp();
      return proto.stream.CreateRoomRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.CreateRoomRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = new proto.stream.BookInfo();
            t.readMessage(r, proto.stream.BookInfo.deserializeBinaryFromReader), e.setBookinfo(r);
            break;

          case 4:
            r = t.readUint32();
            e.setOwner(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CreateRoomRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.CreateRoomRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CreateRoomRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), null != (r = e.getBookinfo()) && t.writeMessage(3, r, proto.stream.BookInfo.serializeBinaryToWriter), 0 !== (r = e.getOwner()) && t.writeUint32(4, r);
    }, proto.stream.CreateRoomRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.CreateRoomRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.CreateRoomRsp.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.CreateRoomRsp.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.CreateRoomRsp.prototype.getBookinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.BookInfo, 3);
    }, proto.stream.CreateRoomRsp.prototype.setBookinfo = function (e) {
      s.Message.setWrapperField(this, 3, e);
    }, proto.stream.CreateRoomRsp.prototype.clearBookinfo = function () {
      this.setBookinfo(void 0);
    }, proto.stream.CreateRoomRsp.prototype.hasBookinfo = function () {
      return null != s.Message.getField(this, 3);
    }, proto.stream.CreateRoomRsp.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.CreateRoomRsp.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.GetRoomListReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.GetRoomListReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.GetRoomListReq.displayName = "proto.stream.GetRoomListReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.GetRoomListReq.prototype.toObject = function (e) {
      return proto.stream.GetRoomListReq.toObject(e, this);
    }, proto.stream.GetRoomListReq.toObject = function (e, t) {
      var r,
          o = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomfilter: (r = t.getRoomfilter()) && proto.stream.RoomFilter.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.GetRoomListReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.GetRoomListReq();
      return proto.stream.GetRoomListReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetRoomListReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = new proto.stream.RoomFilter();
            t.readMessage(r, proto.stream.RoomFilter.deserializeBinaryFromReader), e.setRoomfilter(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetRoomListReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.GetRoomListReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetRoomListReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), null != (r = e.getRoomfilter()) && t.writeMessage(2, r, proto.stream.RoomFilter.serializeBinaryToWriter);
    }, proto.stream.GetRoomListReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetRoomListReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.GetRoomListReq.prototype.getRoomfilter = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomFilter, 2);
    }, proto.stream.GetRoomListReq.prototype.setRoomfilter = function (e) {
      s.Message.setWrapperField(this, 2, e);
    }, proto.stream.GetRoomListReq.prototype.clearRoomfilter = function () {
      this.setRoomfilter(void 0);
    }, proto.stream.GetRoomListReq.prototype.hasRoomfilter = function () {
      return null != s.Message.getField(this, 2);
    }, proto.stream.RoomFilter = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.RoomFilter, s.Message), o.DEBUG && !COMPILED && (proto.stream.RoomFilter.displayName = "proto.stream.RoomFilter"), s.Message.GENERATE_TO_OBJECT && (proto.stream.RoomFilter.prototype.toObject = function (e) {
      return proto.stream.RoomFilter.toObject(e, this);
    }, proto.stream.RoomFilter.toObject = function (e, t) {
      var r = {
        maxplayer: s.Message.getFieldWithDefault(t, 1, 0),
        mode: s.Message.getFieldWithDefault(t, 2, 0),
        canwatch: s.Message.getFieldWithDefault(t, 3, 0),
        roomproperty: t.getRoomproperty_asB64(),
        full: s.Message.getFieldWithDefault(t, 5, 0),
        state: s.Message.getFieldWithDefault(t, 6, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.RoomFilter.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.RoomFilter();
      return proto.stream.RoomFilter.deserializeBinaryFromReader(r, t);
    }, proto.stream.RoomFilter.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setMaxplayer(r);
            break;

          case 2:
            r = t.readInt32();
            e.setMode(r);
            break;

          case 3:
            r = t.readInt32();
            e.setCanwatch(r);
            break;

          case 4:
            r = t.readBytes();
            e.setRoomproperty(r);
            break;

          case 5:
            r = t.readInt32();
            e.setFull(r);
            break;

          case 6:
            r = t.readEnum();
            e.setState(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.RoomFilter.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.RoomFilter.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.RoomFilter.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getMaxplayer()) && t.writeUint32(1, r), 0 !== (r = e.getMode()) && t.writeInt32(2, r), 0 !== (r = e.getCanwatch()) && t.writeInt32(3, r), 0 < (r = e.getRoomproperty_asU8()).length && t.writeBytes(4, r), 0 !== (r = e.getFull()) && t.writeInt32(5, r), 0 !== (r = e.getState()) && t.writeEnum(6, r);
    }, proto.stream.RoomFilter.prototype.getMaxplayer = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.RoomFilter.prototype.setMaxplayer = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.RoomFilter.prototype.getMode = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.RoomFilter.prototype.setMode = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.RoomFilter.prototype.getCanwatch = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.RoomFilter.prototype.setCanwatch = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.RoomFilter.prototype.getRoomproperty = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.RoomFilter.prototype.getRoomproperty_asB64 = function () {
      return s.Message.bytesAsB64(this.getRoomproperty());
    }, proto.stream.RoomFilter.prototype.getRoomproperty_asU8 = function () {
      return s.Message.bytesAsU8(this.getRoomproperty());
    }, proto.stream.RoomFilter.prototype.setRoomproperty = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.RoomFilter.prototype.getFull = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.RoomFilter.prototype.setFull = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.RoomFilter.prototype.getState = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.RoomFilter.prototype.setState = function (e) {
      s.Message.setProto3EnumField(this, 6, e);
    }, proto.stream.GetRoomListRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.GetRoomListRsp.repeatedFields_, null);
    }, o.inherits(proto.stream.GetRoomListRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.GetRoomListRsp.displayName = "proto.stream.GetRoomListRsp"), proto.stream.GetRoomListRsp.repeatedFields_ = [2], s.Message.GENERATE_TO_OBJECT && (proto.stream.GetRoomListRsp.prototype.toObject = function (e) {
      return proto.stream.GetRoomListRsp.toObject(e, this);
    }, proto.stream.GetRoomListRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        roominfoList: s.Message.toObjectList(t.getRoominfoList(), proto.stream.RoomInfo.toObject, e)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.GetRoomListRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.GetRoomListRsp();
      return proto.stream.GetRoomListRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetRoomListRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = new proto.stream.RoomInfo();
            t.readMessage(r, proto.stream.RoomInfo.deserializeBinaryFromReader), e.addRoominfo(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetRoomListRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.GetRoomListRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetRoomListRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 < (r = e.getRoominfoList()).length && t.writeRepeatedMessage(2, r, proto.stream.RoomInfo.serializeBinaryToWriter);
    }, proto.stream.GetRoomListRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetRoomListRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.GetRoomListRsp.prototype.getRoominfoList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.RoomInfo, 2);
    }, proto.stream.GetRoomListRsp.prototype.setRoominfoList = function (e) {
      s.Message.setRepeatedWrapperField(this, 2, e);
    }, proto.stream.GetRoomListRsp.prototype.addRoominfo = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 2, e, proto.stream.RoomInfo, t);
    }, proto.stream.GetRoomListRsp.prototype.clearRoominfoList = function () {
      this.setRoominfoList([]);
    }, proto.stream.GetRoomListExReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.GetRoomListExReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.GetRoomListExReq.displayName = "proto.stream.GetRoomListExReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.GetRoomListExReq.prototype.toObject = function (e) {
      return proto.stream.GetRoomListExReq.toObject(e, this);
    }, proto.stream.GetRoomListExReq.toObject = function (e, t) {
      var r,
          o = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomfilter: (r = t.getRoomfilter()) && proto.stream.RoomFilter.toObject(e, r),
        sort: s.Message.getFieldWithDefault(t, 3, 0),
        order: s.Message.getFieldWithDefault(t, 4, 0),
        pageno: s.Message.getFieldWithDefault(t, 5, 0),
        pagesize: s.Message.getFieldWithDefault(t, 6, 0)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.GetRoomListExReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.GetRoomListExReq();
      return proto.stream.GetRoomListExReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetRoomListExReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = new proto.stream.RoomFilter();
            t.readMessage(r, proto.stream.RoomFilter.deserializeBinaryFromReader), e.setRoomfilter(r);
            break;

          case 3:
            r = t.readEnum();
            e.setSort(r);
            break;

          case 4:
            r = t.readEnum();
            e.setOrder(r);
            break;

          case 5:
            r = t.readInt32();
            e.setPageno(r);
            break;

          case 6:
            r = t.readInt32();
            e.setPagesize(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetRoomListExReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.GetRoomListExReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetRoomListExReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), null != (r = e.getRoomfilter()) && t.writeMessage(2, r, proto.stream.RoomFilter.serializeBinaryToWriter), 0 !== (r = e.getSort()) && t.writeEnum(3, r), 0 !== (r = e.getOrder()) && t.writeEnum(4, r), 0 !== (r = e.getPageno()) && t.writeInt32(5, r), 0 !== (r = e.getPagesize()) && t.writeInt32(6, r);
    }, proto.stream.GetRoomListExReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetRoomListExReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.GetRoomListExReq.prototype.getRoomfilter = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomFilter, 2);
    }, proto.stream.GetRoomListExReq.prototype.setRoomfilter = function (e) {
      s.Message.setWrapperField(this, 2, e);
    }, proto.stream.GetRoomListExReq.prototype.clearRoomfilter = function () {
      this.setRoomfilter(void 0);
    }, proto.stream.GetRoomListExReq.prototype.hasRoomfilter = function () {
      return null != s.Message.getField(this, 2);
    }, proto.stream.GetRoomListExReq.prototype.getSort = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.GetRoomListExReq.prototype.setSort = function (e) {
      s.Message.setProto3EnumField(this, 3, e);
    }, proto.stream.GetRoomListExReq.prototype.getOrder = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.GetRoomListExReq.prototype.setOrder = function (e) {
      s.Message.setProto3EnumField(this, 4, e);
    }, proto.stream.GetRoomListExReq.prototype.getPageno = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.GetRoomListExReq.prototype.setPageno = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.GetRoomListExReq.prototype.getPagesize = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.GetRoomListExReq.prototype.setPagesize = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.RoomInfoEx = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.RoomInfoEx, s.Message), o.DEBUG && !COMPILED && (proto.stream.RoomInfoEx.displayName = "proto.stream.RoomInfoEx"), s.Message.GENERATE_TO_OBJECT && (proto.stream.RoomInfoEx.prototype.toObject = function (e) {
      return proto.stream.RoomInfoEx.toObject(e, this);
    }, proto.stream.RoomInfoEx.toObject = function (e, t) {
      var r,
          o = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        roomname: s.Message.getFieldWithDefault(t, 2, ""),
        maxplayer: s.Message.getFieldWithDefault(t, 3, 0),
        gameplayer: s.Message.getFieldWithDefault(t, 4, 0),
        watchplayer: s.Message.getFieldWithDefault(t, 5, 0),
        mode: s.Message.getFieldWithDefault(t, 6, 0),
        canwatch: s.Message.getFieldWithDefault(t, 7, 0),
        roomproperty: t.getRoomproperty_asB64(),
        owner: s.Message.getFieldWithDefault(t, 9, 0),
        state: s.Message.getFieldWithDefault(t, 10, 0),
        createtime: s.Message.getFieldWithDefault(t, 11, "0"),
        watchinfo: (r = t.getWatchinfo()) && proto.stream.WatchInfo.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.RoomInfoEx.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.RoomInfoEx();
      return proto.stream.RoomInfoEx.deserializeBinaryFromReader(r, t);
    }, proto.stream.RoomInfoEx.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readString();
            e.setRoomname(r);
            break;

          case 3:
            r = t.readUint32();
            e.setMaxplayer(r);
            break;

          case 4:
            r = t.readUint32();
            e.setGameplayer(r);
            break;

          case 5:
            r = t.readUint32();
            e.setWatchplayer(r);
            break;

          case 6:
            r = t.readInt32();
            e.setMode(r);
            break;

          case 7:
            r = t.readInt32();
            e.setCanwatch(r);
            break;

          case 8:
            r = t.readBytes();
            e.setRoomproperty(r);
            break;

          case 9:
            r = t.readUint32();
            e.setOwner(r);
            break;

          case 10:
            r = t.readEnum();
            e.setState(r);
            break;

          case 11:
            r = t.readUint64String();
            e.setCreatetime(r);
            break;

          case 12:
            r = new proto.stream.WatchInfo();
            t.readMessage(r, proto.stream.WatchInfo.deserializeBinaryFromReader), e.setWatchinfo(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.RoomInfoEx.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.RoomInfoEx.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.RoomInfoEx.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 < (r = e.getRoomname()).length && t.writeString(2, r), 0 !== (r = e.getMaxplayer()) && t.writeUint32(3, r), 0 !== (r = e.getGameplayer()) && t.writeUint32(4, r), 0 !== (r = e.getWatchplayer()) && t.writeUint32(5, r), 0 !== (r = e.getMode()) && t.writeInt32(6, r), 0 !== (r = e.getCanwatch()) && t.writeInt32(7, r), 0 < (r = e.getRoomproperty_asU8()).length && t.writeBytes(8, r), 0 !== (r = e.getOwner()) && t.writeUint32(9, r), 0 !== (r = e.getState()) && t.writeEnum(10, r), r = e.getCreatetime(), 0 !== parseInt(r, 10) && t.writeUint64String(11, r), null != (r = e.getWatchinfo()) && t.writeMessage(12, r, proto.stream.WatchInfo.serializeBinaryToWriter);
    }, proto.stream.RoomInfoEx.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.RoomInfoEx.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.RoomInfoEx.prototype.getRoomname = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.RoomInfoEx.prototype.setRoomname = function (e) {
      s.Message.setProto3StringField(this, 2, e);
    }, proto.stream.RoomInfoEx.prototype.getMaxplayer = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.RoomInfoEx.prototype.setMaxplayer = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.RoomInfoEx.prototype.getGameplayer = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.RoomInfoEx.prototype.setGameplayer = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.RoomInfoEx.prototype.getWatchplayer = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.RoomInfoEx.prototype.setWatchplayer = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.RoomInfoEx.prototype.getMode = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.RoomInfoEx.prototype.setMode = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.RoomInfoEx.prototype.getCanwatch = function () {
      return s.Message.getFieldWithDefault(this, 7, 0);
    }, proto.stream.RoomInfoEx.prototype.setCanwatch = function (e) {
      s.Message.setProto3IntField(this, 7, e);
    }, proto.stream.RoomInfoEx.prototype.getRoomproperty = function () {
      return s.Message.getFieldWithDefault(this, 8, "");
    }, proto.stream.RoomInfoEx.prototype.getRoomproperty_asB64 = function () {
      return s.Message.bytesAsB64(this.getRoomproperty());
    }, proto.stream.RoomInfoEx.prototype.getRoomproperty_asU8 = function () {
      return s.Message.bytesAsU8(this.getRoomproperty());
    }, proto.stream.RoomInfoEx.prototype.setRoomproperty = function (e) {
      s.Message.setProto3BytesField(this, 8, e);
    }, proto.stream.RoomInfoEx.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 9, 0);
    }, proto.stream.RoomInfoEx.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 9, e);
    }, proto.stream.RoomInfoEx.prototype.getState = function () {
      return s.Message.getFieldWithDefault(this, 10, 0);
    }, proto.stream.RoomInfoEx.prototype.setState = function (e) {
      s.Message.setProto3EnumField(this, 10, e);
    }, proto.stream.RoomInfoEx.prototype.getCreatetime = function () {
      return s.Message.getFieldWithDefault(this, 11, "0");
    }, proto.stream.RoomInfoEx.prototype.setCreatetime = function (e) {
      s.Message.setProto3StringIntField(this, 11, e);
    }, proto.stream.RoomInfoEx.prototype.getWatchinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.WatchInfo, 12);
    }, proto.stream.RoomInfoEx.prototype.setWatchinfo = function (e) {
      s.Message.setWrapperField(this, 12, e);
    }, proto.stream.RoomInfoEx.prototype.clearWatchinfo = function () {
      this.setWatchinfo(void 0);
    }, proto.stream.RoomInfoEx.prototype.hasWatchinfo = function () {
      return null != s.Message.getField(this, 12);
    }, proto.stream.GetRoomListExRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.GetRoomListExRsp.repeatedFields_, null);
    }, o.inherits(proto.stream.GetRoomListExRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.GetRoomListExRsp.displayName = "proto.stream.GetRoomListExRsp"), proto.stream.GetRoomListExRsp.repeatedFields_ = [3], s.Message.GENERATE_TO_OBJECT && (proto.stream.GetRoomListExRsp.prototype.toObject = function (e) {
      return proto.stream.GetRoomListExRsp.toObject(e, this);
    }, proto.stream.GetRoomListExRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        total: s.Message.getFieldWithDefault(t, 2, 0),
        roominfoexList: s.Message.toObjectList(t.getRoominfoexList(), proto.stream.RoomInfoEx.toObject, e)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.GetRoomListExRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.GetRoomListExRsp();
      return proto.stream.GetRoomListExRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetRoomListExRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readInt32();
            e.setTotal(r);
            break;

          case 3:
            r = new proto.stream.RoomInfoEx();
            t.readMessage(r, proto.stream.RoomInfoEx.deserializeBinaryFromReader), e.addRoominfoex(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetRoomListExRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.GetRoomListExRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetRoomListExRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 !== (r = e.getTotal()) && t.writeInt32(2, r), 0 < (r = e.getRoominfoexList()).length && t.writeRepeatedMessage(3, r, proto.stream.RoomInfoEx.serializeBinaryToWriter);
    }, proto.stream.GetRoomListExRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetRoomListExRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.GetRoomListExRsp.prototype.getTotal = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.GetRoomListExRsp.prototype.setTotal = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.GetRoomListExRsp.prototype.getRoominfoexList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.RoomInfoEx, 3);
    }, proto.stream.GetRoomListExRsp.prototype.setRoominfoexList = function (e) {
      s.Message.setRepeatedWrapperField(this, 3, e);
    }, proto.stream.GetRoomListExRsp.prototype.addRoominfoex = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 3, e, proto.stream.RoomInfoEx, t);
    }, proto.stream.GetRoomListExRsp.prototype.clearRoominfoexList = function () {
      this.setRoominfoexList([]);
    }, proto.stream.KickPlayerReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.KickPlayerReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.KickPlayerReq.displayName = "proto.stream.KickPlayerReq");
    s.Message.GENERATE_TO_OBJECT && (proto.stream.KickPlayerReq.prototype.toObject = function (e) {
      return proto.stream.KickPlayerReq.toObject(e, this);
    }, proto.stream.KickPlayerReq.toObject = function (e, t) {
      var r = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        srcuserid: s.Message.getFieldWithDefault(t, 2, 0),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.KickPlayerReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.KickPlayerReq();
      return proto.stream.KickPlayerReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.KickPlayerReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setSrcuserid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.KickPlayerReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.KickPlayerReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.KickPlayerReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getSrcuserid()) && t.writeUint32(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.KickPlayerReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.KickPlayerReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.KickPlayerReq.prototype.getSrcuserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.KickPlayerReq.prototype.setSrcuserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.KickPlayerReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.KickPlayerReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.KickPlayerReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.KickPlayerReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.KickPlayerReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.KickPlayerReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.KickPlayerRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.KickPlayerRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.KickPlayerRsp.displayName = "proto.stream.KickPlayerRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.KickPlayerRsp.prototype.toObject = function (e) {
      return proto.stream.KickPlayerRsp.toObject(e, this);
    }, proto.stream.KickPlayerRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        roomid: s.Message.getFieldWithDefault(t, 3, "0"),
        owner: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.KickPlayerRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.KickPlayerRsp();
      return proto.stream.KickPlayerRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.KickPlayerRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 4:
            r = t.readUint32();
            e.setOwner(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.KickPlayerRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.KickPlayerRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.KickPlayerRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(3, r), 0 !== (r = e.getOwner()) && t.writeUint32(4, r);
    }, proto.stream.KickPlayerRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.KickPlayerRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.KickPlayerRsp.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.KickPlayerRsp.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.KickPlayerRsp.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 3, "0");
    }, proto.stream.KickPlayerRsp.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 3, e);
    }, proto.stream.KickPlayerRsp.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.KickPlayerRsp.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.KickPlayerNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.KickPlayerNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.KickPlayerNotify.displayName = "proto.stream.KickPlayerNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.KickPlayerNotify.prototype.toObject = function (e) {
      return proto.stream.KickPlayerNotify.toObject(e, this);
    }, proto.stream.KickPlayerNotify.toObject = function (e, t) {
      var r = {
        srcuserid: s.Message.getFieldWithDefault(t, 1, 0),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64(),
        owner: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.KickPlayerNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.KickPlayerNotify();
      return proto.stream.KickPlayerNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.KickPlayerNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setSrcuserid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          case 4:
            r = t.readUint32();
            e.setOwner(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.KickPlayerNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.KickPlayerNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.KickPlayerNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getSrcuserid()) && t.writeUint32(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r), 0 !== (r = e.getOwner()) && t.writeUint32(4, r);
    }, proto.stream.KickPlayerNotify.prototype.getSrcuserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.KickPlayerNotify.prototype.setSrcuserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.KickPlayerNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.KickPlayerNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.KickPlayerNotify.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.KickPlayerNotify.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.KickPlayerNotify.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.KickPlayerNotify.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.KickPlayerNotify.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.KickPlayerNotify.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.GetRoomDetailReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.GetRoomDetailReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.GetRoomDetailReq.displayName = "proto.stream.GetRoomDetailReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.GetRoomDetailReq.prototype.toObject = function (e) {
      return proto.stream.GetRoomDetailReq.toObject(e, this);
    }, proto.stream.GetRoomDetailReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        latestwatchernum: s.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.GetRoomDetailReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.GetRoomDetailReq();
      return proto.stream.GetRoomDetailReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetRoomDetailReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setLatestwatchernum(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetRoomDetailReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.GetRoomDetailReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetRoomDetailReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getLatestwatchernum()) && t.writeUint32(3, r);
    }, proto.stream.GetRoomDetailReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetRoomDetailReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.GetRoomDetailReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.GetRoomDetailReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.GetRoomDetailReq.prototype.getLatestwatchernum = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.GetRoomDetailReq.prototype.setLatestwatchernum = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.GetRoomDetailRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.GetRoomDetailRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.GetRoomDetailRsp.displayName = "proto.stream.GetRoomDetailRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.GetRoomDetailRsp.prototype.toObject = function (e) {
      return proto.stream.GetRoomDetailRsp.toObject(e, this);
    }, proto.stream.GetRoomDetailRsp.toObject = function (e, t) {
      var r,
          o = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        roomdetail: (r = t.getRoomdetail()) && proto.stream.RoomDetail.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.GetRoomDetailRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.GetRoomDetailRsp();
      return proto.stream.GetRoomDetailRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetRoomDetailRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = new proto.stream.RoomDetail();
            t.readMessage(r, proto.stream.RoomDetail.deserializeBinaryFromReader), e.setRoomdetail(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetRoomDetailRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.GetRoomDetailRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetRoomDetailRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), null != (r = e.getRoomdetail()) && t.writeMessage(2, r, proto.stream.RoomDetail.serializeBinaryToWriter);
    }, proto.stream.GetRoomDetailRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetRoomDetailRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.GetRoomDetailRsp.prototype.getRoomdetail = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomDetail, 2);
    }, proto.stream.GetRoomDetailRsp.prototype.setRoomdetail = function (e) {
      s.Message.setWrapperField(this, 2, e);
    }, proto.stream.GetRoomDetailRsp.prototype.clearRoomdetail = function () {
      this.setRoomdetail(void 0);
    }, proto.stream.GetRoomDetailRsp.prototype.hasRoomdetail = function () {
      return null != s.Message.getField(this, 2);
    }, proto.stream.RoomDetail = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.RoomDetail.repeatedFields_, null);
    }, o.inherits(proto.stream.RoomDetail, s.Message), o.DEBUG && !COMPILED && (proto.stream.RoomDetail.displayName = "proto.stream.RoomDetail"), proto.stream.RoomDetail.repeatedFields_ = [9, 11], s.Message.GENERATE_TO_OBJECT && (proto.stream.RoomDetail.prototype.toObject = function (e) {
      return proto.stream.RoomDetail.toObject(e, this);
    }, proto.stream.RoomDetail.toObject = function (e, t) {
      var r,
          o = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        state: s.Message.getFieldWithDefault(t, 2, 0),
        maxplayer: s.Message.getFieldWithDefault(t, 3, 0),
        mode: s.Message.getFieldWithDefault(t, 4, 0),
        canwatch: s.Message.getFieldWithDefault(t, 5, 0),
        roomproperty: t.getRoomproperty_asB64(),
        owner: s.Message.getFieldWithDefault(t, 7, 0),
        createflag: s.Message.getFieldWithDefault(t, 8, 0),
        playerinfosList: s.Message.toObjectList(t.getPlayerinfosList(), proto.stream.PlayerInfo.toObject, e),
        watchroom: (r = t.getWatchroom()) && proto.stream.WatchRoom.toObject(e, r),
        brigadesList: s.Message.toObjectList(t.getBrigadesList(), proto.stream.BrigadeInfo.toObject, e)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.RoomDetail.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.RoomDetail();
      return proto.stream.RoomDetail.deserializeBinaryFromReader(r, t);
    }, proto.stream.RoomDetail.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readEnum();
            e.setState(r);
            break;

          case 3:
            r = t.readUint32();
            e.setMaxplayer(r);
            break;

          case 4:
            r = t.readInt32();
            e.setMode(r);
            break;

          case 5:
            r = t.readInt32();
            e.setCanwatch(r);
            break;

          case 6:
            r = t.readBytes();
            e.setRoomproperty(r);
            break;

          case 7:
            r = t.readUint32();
            e.setOwner(r);
            break;

          case 8:
            r = t.readUint32();
            e.setCreateflag(r);
            break;

          case 9:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.addPlayerinfos(r);
            break;

          case 10:
            r = new proto.stream.WatchRoom();
            t.readMessage(r, proto.stream.WatchRoom.deserializeBinaryFromReader), e.setWatchroom(r);
            break;

          case 11:
            r = new proto.stream.BrigadeInfo();
            t.readMessage(r, proto.stream.BrigadeInfo.deserializeBinaryFromReader), e.addBrigades(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.RoomDetail.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.RoomDetail.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.RoomDetail.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getState()) && t.writeEnum(2, r), 0 !== (r = e.getMaxplayer()) && t.writeUint32(3, r), 0 !== (r = e.getMode()) && t.writeInt32(4, r), 0 !== (r = e.getCanwatch()) && t.writeInt32(5, r), 0 < (r = e.getRoomproperty_asU8()).length && t.writeBytes(6, r), 0 !== (r = e.getOwner()) && t.writeUint32(7, r), 0 !== (r = e.getCreateflag()) && t.writeUint32(8, r), 0 < (r = e.getPlayerinfosList()).length && t.writeRepeatedMessage(9, r, proto.stream.PlayerInfo.serializeBinaryToWriter), null != (r = e.getWatchroom()) && t.writeMessage(10, r, proto.stream.WatchRoom.serializeBinaryToWriter), 0 < (r = e.getBrigadesList()).length && t.writeRepeatedMessage(11, r, proto.stream.BrigadeInfo.serializeBinaryToWriter);
    }, proto.stream.RoomDetail.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.RoomDetail.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.RoomDetail.prototype.getState = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.RoomDetail.prototype.setState = function (e) {
      s.Message.setProto3EnumField(this, 2, e);
    }, proto.stream.RoomDetail.prototype.getMaxplayer = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.RoomDetail.prototype.setMaxplayer = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.RoomDetail.prototype.getMode = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.RoomDetail.prototype.setMode = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.RoomDetail.prototype.getCanwatch = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.RoomDetail.prototype.setCanwatch = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.RoomDetail.prototype.getRoomproperty = function () {
      return s.Message.getFieldWithDefault(this, 6, "");
    }, proto.stream.RoomDetail.prototype.getRoomproperty_asB64 = function () {
      return s.Message.bytesAsB64(this.getRoomproperty());
    }, proto.stream.RoomDetail.prototype.getRoomproperty_asU8 = function () {
      return s.Message.bytesAsU8(this.getRoomproperty());
    }, proto.stream.RoomDetail.prototype.setRoomproperty = function (e) {
      s.Message.setProto3BytesField(this, 6, e);
    }, proto.stream.RoomDetail.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 7, 0);
    }, proto.stream.RoomDetail.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 7, e);
    }, proto.stream.RoomDetail.prototype.getCreateflag = function () {
      return s.Message.getFieldWithDefault(this, 8, 0);
    }, proto.stream.RoomDetail.prototype.setCreateflag = function (e) {
      s.Message.setProto3IntField(this, 8, e);
    }, proto.stream.RoomDetail.prototype.getPlayerinfosList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 9);
    }, proto.stream.RoomDetail.prototype.setPlayerinfosList = function (e) {
      s.Message.setRepeatedWrapperField(this, 9, e);
    }, proto.stream.RoomDetail.prototype.addPlayerinfos = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 9, e, proto.stream.PlayerInfo, t);
    }, proto.stream.RoomDetail.prototype.clearPlayerinfosList = function () {
      this.setPlayerinfosList([]);
    }, proto.stream.RoomDetail.prototype.getWatchroom = function () {
      return s.Message.getWrapperField(this, proto.stream.WatchRoom, 10);
    }, proto.stream.RoomDetail.prototype.setWatchroom = function (e) {
      s.Message.setWrapperField(this, 10, e);
    }, proto.stream.RoomDetail.prototype.clearWatchroom = function () {
      this.setWatchroom(void 0);
    }, proto.stream.RoomDetail.prototype.hasWatchroom = function () {
      return null != s.Message.getField(this, 10);
    }, proto.stream.RoomDetail.prototype.getBrigadesList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.BrigadeInfo, 11);
    }, proto.stream.RoomDetail.prototype.setBrigadesList = function (e) {
      s.Message.setRepeatedWrapperField(this, 11, e);
    }, proto.stream.RoomDetail.prototype.addBrigades = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 11, e, proto.stream.BrigadeInfo, t);
    }, proto.stream.RoomDetail.prototype.clearBrigadesList = function () {
      this.setBrigadesList([]);
    }, proto.stream.SetRoomPropertyReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.SetRoomPropertyReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.SetRoomPropertyReq.displayName = "proto.stream.SetRoomPropertyReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.SetRoomPropertyReq.prototype.toObject = function (e) {
      return proto.stream.SetRoomPropertyReq.toObject(e, this);
    }, proto.stream.SetRoomPropertyReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        roomproperty: t.getRoomproperty_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetRoomPropertyReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SetRoomPropertyReq();
      return proto.stream.SetRoomPropertyReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetRoomPropertyReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setRoomproperty(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetRoomPropertyReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SetRoomPropertyReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetRoomPropertyReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 < (r = e.getRoomproperty_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.SetRoomPropertyReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetRoomPropertyReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetRoomPropertyReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.SetRoomPropertyReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.SetRoomPropertyReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.SetRoomPropertyReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.SetRoomPropertyReq.prototype.getRoomproperty = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.SetRoomPropertyReq.prototype.getRoomproperty_asB64 = function () {
      return s.Message.bytesAsB64(this.getRoomproperty());
    }, proto.stream.SetRoomPropertyReq.prototype.getRoomproperty_asU8 = function () {
      return s.Message.bytesAsU8(this.getRoomproperty());
    }, proto.stream.SetRoomPropertyReq.prototype.setRoomproperty = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.SetRoomPropertyRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.SetRoomPropertyRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.SetRoomPropertyRsp.displayName = "proto.stream.SetRoomPropertyRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.SetRoomPropertyRsp.prototype.toObject = function (e) {
      return proto.stream.SetRoomPropertyRsp.toObject(e, this);
    }, proto.stream.SetRoomPropertyRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        roomproperty: t.getRoomproperty_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetRoomPropertyRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SetRoomPropertyRsp();
      return proto.stream.SetRoomPropertyRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetRoomPropertyRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setRoomproperty(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetRoomPropertyRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SetRoomPropertyRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetRoomPropertyRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 < (r = e.getRoomproperty_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.SetRoomPropertyRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetRoomPropertyRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.SetRoomPropertyRsp.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.SetRoomPropertyRsp.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.SetRoomPropertyRsp.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.SetRoomPropertyRsp.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.SetRoomPropertyRsp.prototype.getRoomproperty = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.SetRoomPropertyRsp.prototype.getRoomproperty_asB64 = function () {
      return s.Message.bytesAsB64(this.getRoomproperty());
    }, proto.stream.SetRoomPropertyRsp.prototype.getRoomproperty_asU8 = function () {
      return s.Message.bytesAsU8(this.getRoomproperty());
    }, proto.stream.SetRoomPropertyRsp.prototype.setRoomproperty = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.NoticeRoomProperty = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.NoticeRoomProperty, s.Message), o.DEBUG && !COMPILED && (proto.stream.NoticeRoomProperty.displayName = "proto.stream.NoticeRoomProperty"), s.Message.GENERATE_TO_OBJECT && (proto.stream.NoticeRoomProperty.prototype.toObject = function (e) {
      return proto.stream.NoticeRoomProperty.toObject(e, this);
    }, proto.stream.NoticeRoomProperty.toObject = function (e, t) {
      var r = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        roomproperty: t.getRoomproperty_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.NoticeRoomProperty.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.NoticeRoomProperty();
      return proto.stream.NoticeRoomProperty.deserializeBinaryFromReader(r, t);
    }, proto.stream.NoticeRoomProperty.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readBytes();
            e.setRoomproperty(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.NoticeRoomProperty.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.NoticeRoomProperty.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.NoticeRoomProperty.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), 0 < (r = e.getRoomproperty_asU8()).length && t.writeBytes(3, r);
    }, proto.stream.NoticeRoomProperty.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.NoticeRoomProperty.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.NoticeRoomProperty.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.NoticeRoomProperty.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.NoticeRoomProperty.prototype.getRoomproperty = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.NoticeRoomProperty.prototype.getRoomproperty_asB64 = function () {
      return s.Message.bytesAsB64(this.getRoomproperty());
    }, proto.stream.NoticeRoomProperty.prototype.getRoomproperty_asU8 = function () {
      return s.Message.bytesAsU8(this.getRoomproperty());
    }, proto.stream.NoticeRoomProperty.prototype.setRoomproperty = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.DestroyRoomReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.DestroyRoomReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.DestroyRoomReq.displayName = "proto.stream.DestroyRoomReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.DestroyRoomReq.prototype.toObject = function (e) {
      return proto.stream.DestroyRoomReq.toObject(e, this);
    }, proto.stream.DestroyRoomReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.DestroyRoomReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.DestroyRoomReq();
      return proto.stream.DestroyRoomReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.DestroyRoomReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.DestroyRoomReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.DestroyRoomReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.DestroyRoomReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r);
    }, proto.stream.DestroyRoomReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.DestroyRoomReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.DestroyRoomReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.DestroyRoomReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.DestroyRoomRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.DestroyRoomRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.DestroyRoomRsp.displayName = "proto.stream.DestroyRoomRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.DestroyRoomRsp.prototype.toObject = function (e) {
      return proto.stream.DestroyRoomRsp.toObject(e, this);
    }, proto.stream.DestroyRoomRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.DestroyRoomRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.DestroyRoomRsp();
      return proto.stream.DestroyRoomRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.DestroyRoomRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.DestroyRoomRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.DestroyRoomRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.DestroyRoomRsp.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r);
    }, proto.stream.DestroyRoomRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.DestroyRoomRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.WatchSetting = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.WatchSetting, s.Message), o.DEBUG && !COMPILED && (proto.stream.WatchSetting.displayName = "proto.stream.WatchSetting"), s.Message.GENERATE_TO_OBJECT && (proto.stream.WatchSetting.prototype.toObject = function (e) {
      return proto.stream.WatchSetting.toObject(e, this);
    }, proto.stream.WatchSetting.toObject = function (e, t) {
      var r = {
        maxwatch: s.Message.getFieldWithDefault(t, 1, 0),
        watchpersistent: s.Message.getFieldWithDefault(t, 2, !1),
        watchdelayms: s.Message.getFieldWithDefault(t, 3, 0),
        cachetime: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.WatchSetting.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.WatchSetting();
      return proto.stream.WatchSetting.deserializeBinaryFromReader(r, t);
    }, proto.stream.WatchSetting.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setMaxwatch(r);
            break;

          case 2:
            r = t.readBool();
            e.setWatchpersistent(r);
            break;

          case 3:
            r = t.readUint32();
            e.setWatchdelayms(r);
            break;

          case 4:
            r = t.readUint32();
            e.setCachetime(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.WatchSetting.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.WatchSetting.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.WatchSetting.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getMaxwatch()) && t.writeUint32(1, r), (r = e.getWatchpersistent()) && t.writeBool(2, r), 0 !== (r = e.getWatchdelayms()) && t.writeUint32(3, r), 0 !== (r = e.getCachetime()) && t.writeUint32(4, r);
    }, proto.stream.WatchSetting.prototype.getMaxwatch = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.WatchSetting.prototype.setMaxwatch = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.WatchSetting.prototype.getWatchpersistent = function () {
      return s.Message.getFieldWithDefault(this, 2, !1);
    }, proto.stream.WatchSetting.prototype.setWatchpersistent = function (e) {
      s.Message.setProto3BooleanField(this, 2, e);
    }, proto.stream.WatchSetting.prototype.getWatchdelayms = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.WatchSetting.prototype.setWatchdelayms = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.WatchSetting.prototype.getCachetime = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.WatchSetting.prototype.setCachetime = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.WatchInfo = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.WatchInfo, s.Message), o.DEBUG && !COMPILED && (proto.stream.WatchInfo.displayName = "proto.stream.WatchInfo"), s.Message.GENERATE_TO_OBJECT && (proto.stream.WatchInfo.prototype.toObject = function (e) {
      return proto.stream.WatchInfo.toObject(e, this);
    }, proto.stream.WatchInfo.toObject = function (e, t) {
      var r,
          o = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        state: s.Message.getFieldWithDefault(t, 2, 0),
        watchsetting: (r = t.getWatchsetting()) && proto.stream.WatchSetting.toObject(e, r),
        curwatch: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.WatchInfo.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.WatchInfo();
      return proto.stream.WatchInfo.deserializeBinaryFromReader(r, t);
    }, proto.stream.WatchInfo.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setState(r);
            break;

          case 3:
            r = new proto.stream.WatchSetting();
            t.readMessage(r, proto.stream.WatchSetting.deserializeBinaryFromReader), e.setWatchsetting(r);
            break;

          case 4:
            r = t.readUint32();
            e.setCurwatch(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.WatchInfo.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.WatchInfo.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.WatchInfo.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getState()) && t.writeUint32(2, r), null != (r = e.getWatchsetting()) && t.writeMessage(3, r, proto.stream.WatchSetting.serializeBinaryToWriter), 0 !== (r = e.getCurwatch()) && t.writeUint32(4, r);
    }, proto.stream.WatchInfo.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.WatchInfo.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.WatchInfo.prototype.getState = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.WatchInfo.prototype.setState = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.WatchInfo.prototype.getWatchsetting = function () {
      return s.Message.getWrapperField(this, proto.stream.WatchSetting, 3);
    }, proto.stream.WatchInfo.prototype.setWatchsetting = function (e) {
      s.Message.setWrapperField(this, 3, e);
    }, proto.stream.WatchInfo.prototype.clearWatchsetting = function () {
      this.setWatchsetting(void 0);
    }, proto.stream.WatchInfo.prototype.hasWatchsetting = function () {
      return null != s.Message.getField(this, 3);
    }, proto.stream.WatchInfo.prototype.getCurwatch = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.WatchInfo.prototype.setCurwatch = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.WatchRoom = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.WatchRoom.repeatedFields_, null);
    }, o.inherits(proto.stream.WatchRoom, s.Message), o.DEBUG && !COMPILED && (proto.stream.WatchRoom.displayName = "proto.stream.WatchRoom"), proto.stream.WatchRoom.repeatedFields_ = [2], s.Message.GENERATE_TO_OBJECT && (proto.stream.WatchRoom.prototype.toObject = function (e) {
      return proto.stream.WatchRoom.toObject(e, this);
    }, proto.stream.WatchRoom.toObject = function (e, t) {
      var r,
          o = {
        watchinfo: (r = t.getWatchinfo()) && proto.stream.WatchInfo.toObject(e, r),
        watchplayersList: s.Message.toObjectList(t.getWatchplayersList(), proto.stream.PlayerInfo.toObject, e)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.WatchRoom.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.WatchRoom();
      return proto.stream.WatchRoom.deserializeBinaryFromReader(r, t);
    }, proto.stream.WatchRoom.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = new proto.stream.WatchInfo();
            t.readMessage(r, proto.stream.WatchInfo.deserializeBinaryFromReader), e.setWatchinfo(r);
            break;

          case 2:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.addWatchplayers(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.WatchRoom.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.WatchRoom.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.WatchRoom.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      null != (r = e.getWatchinfo()) && t.writeMessage(1, r, proto.stream.WatchInfo.serializeBinaryToWriter), 0 < (r = e.getWatchplayersList()).length && t.writeRepeatedMessage(2, r, proto.stream.PlayerInfo.serializeBinaryToWriter);
    }, proto.stream.WatchRoom.prototype.getWatchinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.WatchInfo, 1);
    }, proto.stream.WatchRoom.prototype.setWatchinfo = function (e) {
      s.Message.setWrapperField(this, 1, e);
    }, proto.stream.WatchRoom.prototype.clearWatchinfo = function () {
      this.setWatchinfo(void 0);
    }, proto.stream.WatchRoom.prototype.hasWatchinfo = function () {
      return null != s.Message.getField(this, 1);
    }, proto.stream.WatchRoom.prototype.getWatchplayersList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 2);
    }, proto.stream.WatchRoom.prototype.setWatchplayersList = function (e) {
      s.Message.setRepeatedWrapperField(this, 2, e);
    }, proto.stream.WatchRoom.prototype.addWatchplayers = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 2, e, proto.stream.PlayerInfo, t);
    }, proto.stream.WatchRoom.prototype.clearWatchplayersList = function () {
      this.setWatchplayersList([]);
    }, proto.stream.PlayRoom = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.PlayRoom.repeatedFields_, null);
    }, o.inherits(proto.stream.PlayRoom, s.Message), o.DEBUG && !COMPILED && (proto.stream.PlayRoom.displayName = "proto.stream.PlayRoom"), proto.stream.PlayRoom.repeatedFields_ = [2], s.Message.GENERATE_TO_OBJECT && (proto.stream.PlayRoom.prototype.toObject = function (e) {
      return proto.stream.PlayRoom.toObject(e, this);
    }, proto.stream.PlayRoom.toObject = function (e, t) {
      var r,
          o = {
        roominfo: (r = t.getRoominfo()) && proto.stream.RoomInfo.toObject(e, r),
        playerList: s.Message.toObjectList(t.getPlayerList(), proto.stream.PlayerInfo.toObject, e)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.PlayRoom.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.PlayRoom();
      return proto.stream.PlayRoom.deserializeBinaryFromReader(r, t);
    }, proto.stream.PlayRoom.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = new proto.stream.RoomInfo();
            t.readMessage(r, proto.stream.RoomInfo.deserializeBinaryFromReader), e.setRoominfo(r);
            break;

          case 2:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.addPlayer(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.PlayRoom.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.PlayRoom.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.PlayRoom.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      null != (r = e.getRoominfo()) && t.writeMessage(1, r, proto.stream.RoomInfo.serializeBinaryToWriter), 0 < (r = e.getPlayerList()).length && t.writeRepeatedMessage(2, r, proto.stream.PlayerInfo.serializeBinaryToWriter);
    }, proto.stream.PlayRoom.prototype.getRoominfo = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomInfo, 1);
    }, proto.stream.PlayRoom.prototype.setRoominfo = function (e) {
      s.Message.setWrapperField(this, 1, e);
    }, proto.stream.PlayRoom.prototype.clearRoominfo = function () {
      this.setRoominfo(void 0);
    }, proto.stream.PlayRoom.prototype.hasRoominfo = function () {
      return null != s.Message.getField(this, 1);
    }, proto.stream.PlayRoom.prototype.getPlayerList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 2);
    }, proto.stream.PlayRoom.prototype.setPlayerList = function (e) {
      s.Message.setRepeatedWrapperField(this, 2, e);
    }, proto.stream.PlayRoom.prototype.addPlayer = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 2, e, proto.stream.PlayerInfo, t);
    }, proto.stream.PlayRoom.prototype.clearPlayerList = function () {
      this.setPlayerList([]);
    }, proto.stream.JoinWatchRoomReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinWatchRoomReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinWatchRoomReq.displayName = "proto.stream.JoinWatchRoomReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinWatchRoomReq.prototype.toObject = function (e) {
      return proto.stream.JoinWatchRoomReq.toObject(e, this);
    }, proto.stream.JoinWatchRoomReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        userprofile: t.getUserprofile_asB64(),
        roomid: s.Message.getFieldWithDefault(t, 4, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.JoinWatchRoomReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinWatchRoomReq();
      return proto.stream.JoinWatchRoomReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinWatchRoomReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readBytes();
            e.setUserprofile(r);
            break;

          case 4:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinWatchRoomReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinWatchRoomReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinWatchRoomReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), 0 < (r = e.getUserprofile_asU8()).length && t.writeBytes(3, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(4, r);
    }, proto.stream.JoinWatchRoomReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinWatchRoomReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.JoinWatchRoomReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.JoinWatchRoomReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.JoinWatchRoomReq.prototype.getUserprofile = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.JoinWatchRoomReq.prototype.getUserprofile_asB64 = function () {
      return s.Message.bytesAsB64(this.getUserprofile());
    }, proto.stream.JoinWatchRoomReq.prototype.getUserprofile_asU8 = function () {
      return s.Message.bytesAsU8(this.getUserprofile());
    }, proto.stream.JoinWatchRoomReq.prototype.setUserprofile = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.JoinWatchRoomReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 4, "0");
    }, proto.stream.JoinWatchRoomReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 4, e);
    }, proto.stream.JoinWatchRoomRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinWatchRoomRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinWatchRoomRsp.displayName = "proto.stream.JoinWatchRoomRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinWatchRoomRsp.prototype.toObject = function (e) {
      return proto.stream.JoinWatchRoomRsp.toObject(e, this);
    }, proto.stream.JoinWatchRoomRsp.toObject = function (e, t) {
      var r,
          o = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        bookinfo: (r = t.getBookinfo()) && proto.stream.BookInfo.toObject(e, r),
        setid: s.Message.getFieldWithDefault(t, 3, 0),
        roomid: s.Message.getFieldWithDefault(t, 4, "0")
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.JoinWatchRoomRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinWatchRoomRsp();
      return proto.stream.JoinWatchRoomRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinWatchRoomRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = new proto.stream.BookInfo();
            t.readMessage(r, proto.stream.BookInfo.deserializeBinaryFromReader), e.setBookinfo(r);
            break;

          case 3:
            r = t.readUint32();
            e.setSetid(r);
            break;

          case 4:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinWatchRoomRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinWatchRoomRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinWatchRoomRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), null != (r = e.getBookinfo()) && t.writeMessage(2, r, proto.stream.BookInfo.serializeBinaryToWriter), 0 !== (r = e.getSetid()) && t.writeUint32(3, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(4, r);
    }, proto.stream.JoinWatchRoomRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinWatchRoomRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.JoinWatchRoomRsp.prototype.getBookinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.BookInfo, 2);
    }, proto.stream.JoinWatchRoomRsp.prototype.setBookinfo = function (e) {
      s.Message.setWrapperField(this, 2, e);
    }, proto.stream.JoinWatchRoomRsp.prototype.clearBookinfo = function () {
      this.setBookinfo(void 0);
    }, proto.stream.JoinWatchRoomRsp.prototype.hasBookinfo = function () {
      return null != s.Message.getField(this, 2);
    }, proto.stream.JoinWatchRoomRsp.prototype.getSetid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.JoinWatchRoomRsp.prototype.setSetid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.JoinWatchRoomRsp.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 4, "0");
    }, proto.stream.JoinWatchRoomRsp.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 4, e);
    }, proto.stream.LeaveWatchRoomReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LeaveWatchRoomReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.LeaveWatchRoomReq.displayName = "proto.stream.LeaveWatchRoomReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LeaveWatchRoomReq.prototype.toObject = function (e) {
      return proto.stream.LeaveWatchRoomReq.toObject(e, this);
    }, proto.stream.LeaveWatchRoomReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        roomid: s.Message.getFieldWithDefault(t, 3, "0"),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LeaveWatchRoomReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LeaveWatchRoomReq();
      return proto.stream.LeaveWatchRoomReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.LeaveWatchRoomReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LeaveWatchRoomReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LeaveWatchRoomReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LeaveWatchRoomReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.LeaveWatchRoomReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LeaveWatchRoomReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LeaveWatchRoomReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.LeaveWatchRoomReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.LeaveWatchRoomReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 3, "0");
    }, proto.stream.LeaveWatchRoomReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 3, e);
    }, proto.stream.LeaveWatchRoomReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.LeaveWatchRoomReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.LeaveWatchRoomReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.LeaveWatchRoomReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.LeaveWatchRoomRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LeaveWatchRoomRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.LeaveWatchRoomRsp.displayName = "proto.stream.LeaveWatchRoomRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LeaveWatchRoomRsp.prototype.toObject = function (e) {
      return proto.stream.LeaveWatchRoomRsp.toObject(e, this);
    }, proto.stream.LeaveWatchRoomRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LeaveWatchRoomRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LeaveWatchRoomRsp();
      return proto.stream.LeaveWatchRoomRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.LeaveWatchRoomRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LeaveWatchRoomRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LeaveWatchRoomRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LeaveWatchRoomRsp.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r);
    }, proto.stream.LeaveWatchRoomRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LeaveWatchRoomRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.ChangeRoleReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.ChangeRoleReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.ChangeRoleReq.displayName = "proto.stream.ChangeRoleReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.ChangeRoleReq.prototype.toObject = function (e) {
      return proto.stream.ChangeRoleReq.toObject(e, this);
    }, proto.stream.ChangeRoleReq.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        gameid: s.Message.getFieldWithDefault(t, 2, 0),
        roomid: s.Message.getFieldWithDefault(t, 3, "0"),
        targetroomtype: s.Message.getFieldWithDefault(t, 4, 0),
        userprofile: t.getUserprofile_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.ChangeRoleReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.ChangeRoleReq();
      return proto.stream.ChangeRoleReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.ChangeRoleReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setGameid(r);
            break;

          case 3:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 4:
            r = t.readEnum();
            e.setTargetroomtype(r);
            break;

          case 5:
            r = t.readBytes();
            e.setUserprofile(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.ChangeRoleReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.ChangeRoleReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.ChangeRoleReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 !== (r = e.getGameid()) && t.writeUint32(2, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(3, r), 0 !== (r = e.getTargetroomtype()) && t.writeEnum(4, r), 0 < (r = e.getUserprofile_asU8()).length && t.writeBytes(5, r);
    }, proto.stream.ChangeRoleReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.ChangeRoleReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.ChangeRoleReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.ChangeRoleReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.ChangeRoleReq.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 3, "0");
    }, proto.stream.ChangeRoleReq.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 3, e);
    }, proto.stream.ChangeRoleReq.prototype.getTargetroomtype = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.ChangeRoleReq.prototype.setTargetroomtype = function (e) {
      s.Message.setProto3EnumField(this, 4, e);
    }, proto.stream.ChangeRoleReq.prototype.getUserprofile = function () {
      return s.Message.getFieldWithDefault(this, 5, "");
    }, proto.stream.ChangeRoleReq.prototype.getUserprofile_asB64 = function () {
      return s.Message.bytesAsB64(this.getUserprofile());
    }, proto.stream.ChangeRoleReq.prototype.getUserprofile_asU8 = function () {
      return s.Message.bytesAsU8(this.getUserprofile());
    }, proto.stream.ChangeRoleReq.prototype.setUserprofile = function (e) {
      s.Message.setProto3BytesField(this, 5, e);
    }, proto.stream.ChangeRoleRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.ChangeRoleRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.ChangeRoleRsp.displayName = "proto.stream.ChangeRoleRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.ChangeRoleRsp.prototype.toObject = function (e) {
      return proto.stream.ChangeRoleRsp.toObject(e, this);
    }, proto.stream.ChangeRoleRsp.toObject = function (e, t) {
      var r,
          o = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        targetroomtype: s.Message.getFieldWithDefault(t, 2, 0),
        playroom: (r = t.getPlayroom()) && proto.stream.PlayRoom.toObject(e, r),
        bookinfo: (r = t.getBookinfo()) && proto.stream.BookInfo.toObject(e, r),
        roomid: s.Message.getFieldWithDefault(t, 5, "0"),
        setid: s.Message.getFieldWithDefault(t, 6, 0)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.ChangeRoleRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.ChangeRoleRsp();
      return proto.stream.ChangeRoleRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.ChangeRoleRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readEnum();
            e.setTargetroomtype(r);
            break;

          case 3:
            r = new proto.stream.PlayRoom();
            t.readMessage(r, proto.stream.PlayRoom.deserializeBinaryFromReader), e.setPlayroom(r);
            break;

          case 4:
            r = new proto.stream.BookInfo();
            t.readMessage(r, proto.stream.BookInfo.deserializeBinaryFromReader), e.setBookinfo(r);
            break;

          case 5:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 6:
            r = t.readUint32();
            e.setSetid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.ChangeRoleRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.ChangeRoleRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.ChangeRoleRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 !== (r = e.getTargetroomtype()) && t.writeEnum(2, r), null != (r = e.getPlayroom()) && t.writeMessage(3, r, proto.stream.PlayRoom.serializeBinaryToWriter), null != (r = e.getBookinfo()) && t.writeMessage(4, r, proto.stream.BookInfo.serializeBinaryToWriter), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(5, r), 0 !== (r = e.getSetid()) && t.writeUint32(6, r);
    }, proto.stream.ChangeRoleRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.ChangeRoleRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.ChangeRoleRsp.prototype.getTargetroomtype = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.ChangeRoleRsp.prototype.setTargetroomtype = function (e) {
      s.Message.setProto3EnumField(this, 2, e);
    }, proto.stream.ChangeRoleRsp.prototype.getPlayroom = function () {
      return s.Message.getWrapperField(this, proto.stream.PlayRoom, 3);
    }, proto.stream.ChangeRoleRsp.prototype.setPlayroom = function (e) {
      s.Message.setWrapperField(this, 3, e);
    }, proto.stream.ChangeRoleRsp.prototype.clearPlayroom = function () {
      this.setPlayroom(void 0);
    }, proto.stream.ChangeRoleRsp.prototype.hasPlayroom = function () {
      return null != s.Message.getField(this, 3);
    }, proto.stream.ChangeRoleRsp.prototype.getBookinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.BookInfo, 4);
    }, proto.stream.ChangeRoleRsp.prototype.setBookinfo = function (e) {
      s.Message.setWrapperField(this, 4, e);
    }, proto.stream.ChangeRoleRsp.prototype.clearBookinfo = function () {
      this.setBookinfo(void 0);
    }, proto.stream.ChangeRoleRsp.prototype.hasBookinfo = function () {
      return null != s.Message.getField(this, 4);
    }, proto.stream.ChangeRoleRsp.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 5, "0");
    }, proto.stream.ChangeRoleRsp.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 5, e);
    }, proto.stream.ChangeRoleRsp.prototype.getSetid = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.ChangeRoleRsp.prototype.setSetid = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.GetWatchRoomsReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.GetWatchRoomsReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.GetWatchRoomsReq.displayName = "proto.stream.GetWatchRoomsReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.GetWatchRoomsReq.prototype.toObject = function (e) {
      return proto.stream.GetWatchRoomsReq.toObject(e, this);
    }, proto.stream.GetWatchRoomsReq.toObject = function (e, t) {
      var r,
          o = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomfilter: (r = t.getRoomfilter()) && proto.stream.RoomFilter.toObject(e, r),
        sort: s.Message.getFieldWithDefault(t, 3, 0),
        order: s.Message.getFieldWithDefault(t, 4, 0),
        pageno: s.Message.getFieldWithDefault(t, 5, 0),
        pagesize: s.Message.getFieldWithDefault(t, 6, 0)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.GetWatchRoomsReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.GetWatchRoomsReq();
      return proto.stream.GetWatchRoomsReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetWatchRoomsReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = new proto.stream.RoomFilter();
            t.readMessage(r, proto.stream.RoomFilter.deserializeBinaryFromReader), e.setRoomfilter(r);
            break;

          case 3:
            r = t.readEnum();
            e.setSort(r);
            break;

          case 4:
            r = t.readEnum();
            e.setOrder(r);
            break;

          case 5:
            r = t.readInt32();
            e.setPageno(r);
            break;

          case 6:
            r = t.readInt32();
            e.setPagesize(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetWatchRoomsReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.GetWatchRoomsReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetWatchRoomsReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), null != (r = e.getRoomfilter()) && t.writeMessage(2, r, proto.stream.RoomFilter.serializeBinaryToWriter), 0 !== (r = e.getSort()) && t.writeEnum(3, r), 0 !== (r = e.getOrder()) && t.writeEnum(4, r), 0 !== (r = e.getPageno()) && t.writeInt32(5, r), 0 !== (r = e.getPagesize()) && t.writeInt32(6, r);
    }, proto.stream.GetWatchRoomsReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetWatchRoomsReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.GetWatchRoomsReq.prototype.getRoomfilter = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomFilter, 2);
    }, proto.stream.GetWatchRoomsReq.prototype.setRoomfilter = function (e) {
      s.Message.setWrapperField(this, 2, e);
    }, proto.stream.GetWatchRoomsReq.prototype.clearRoomfilter = function () {
      this.setRoomfilter(void 0);
    }, proto.stream.GetWatchRoomsReq.prototype.hasRoomfilter = function () {
      return null != s.Message.getField(this, 2);
    }, proto.stream.GetWatchRoomsReq.prototype.getSort = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.GetWatchRoomsReq.prototype.setSort = function (e) {
      s.Message.setProto3EnumField(this, 3, e);
    }, proto.stream.GetWatchRoomsReq.prototype.getOrder = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.GetWatchRoomsReq.prototype.setOrder = function (e) {
      s.Message.setProto3EnumField(this, 4, e);
    }, proto.stream.GetWatchRoomsReq.prototype.getPageno = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.GetWatchRoomsReq.prototype.setPageno = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.GetWatchRoomsReq.prototype.getPagesize = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.GetWatchRoomsReq.prototype.setPagesize = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.GetWatchRoomsRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.GetWatchRoomsRsp.repeatedFields_, null);
    }, o.inherits(proto.stream.GetWatchRoomsRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.GetWatchRoomsRsp.displayName = "proto.stream.GetWatchRoomsRsp"), proto.stream.GetWatchRoomsRsp.repeatedFields_ = [3], s.Message.GENERATE_TO_OBJECT && (proto.stream.GetWatchRoomsRsp.prototype.toObject = function (e) {
      return proto.stream.GetWatchRoomsRsp.toObject(e, this);
    }, proto.stream.GetWatchRoomsRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        total: s.Message.getFieldWithDefault(t, 2, 0),
        roominfoexList: s.Message.toObjectList(t.getRoominfoexList(), proto.stream.RoomInfoEx.toObject, e)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.GetWatchRoomsRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.GetWatchRoomsRsp();
      return proto.stream.GetWatchRoomsRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetWatchRoomsRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readInt32();
            e.setTotal(r);
            break;

          case 3:
            r = new proto.stream.RoomInfoEx();
            t.readMessage(r, proto.stream.RoomInfoEx.deserializeBinaryFromReader), e.addRoominfoex(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetWatchRoomsRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.GetWatchRoomsRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetWatchRoomsRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 !== (r = e.getTotal()) && t.writeInt32(2, r), 0 < (r = e.getRoominfoexList()).length && t.writeRepeatedMessage(3, r, proto.stream.RoomInfoEx.serializeBinaryToWriter);
    }, proto.stream.GetWatchRoomsRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetWatchRoomsRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.GetWatchRoomsRsp.prototype.getTotal = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.GetWatchRoomsRsp.prototype.setTotal = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.GetWatchRoomsRsp.prototype.getRoominfoexList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.RoomInfoEx, 3);
    }, proto.stream.GetWatchRoomsRsp.prototype.setRoominfoexList = function (e) {
      s.Message.setRepeatedWrapperField(this, 3, e);
    }, proto.stream.GetWatchRoomsRsp.prototype.addRoominfoex = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 3, e, proto.stream.RoomInfoEx, t);
    }, proto.stream.GetWatchRoomsRsp.prototype.clearRoominfoexList = function () {
      this.setRoominfoexList([]);
    }, proto.stream.TeamInfo = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.TeamInfo, s.Message), o.DEBUG && !COMPILED && (proto.stream.TeamInfo.displayName = "proto.stream.TeamInfo"), s.Message.GENERATE_TO_OBJECT && (proto.stream.TeamInfo.prototype.toObject = function (e) {
      return proto.stream.TeamInfo.toObject(e, this);
    }, proto.stream.TeamInfo.toObject = function (e, t) {
      var r = {
        teamid: s.Message.getFieldWithDefault(t, 1, "0"),
        password: s.Message.getFieldWithDefault(t, 2, ""),
        capacity: s.Message.getFieldWithDefault(t, 3, 0),
        mode: s.Message.getFieldWithDefault(t, 4, 0),
        visibility: s.Message.getFieldWithDefault(t, 5, 0),
        owner: s.Message.getFieldWithDefault(t, 6, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.TeamInfo.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.TeamInfo();
      return proto.stream.TeamInfo.deserializeBinaryFromReader(r, t);
    }, proto.stream.TeamInfo.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 2:
            r = t.readString();
            e.setPassword(r);
            break;

          case 3:
            r = t.readUint32();
            e.setCapacity(r);
            break;

          case 4:
            r = t.readInt32();
            e.setMode(r);
            break;

          case 5:
            r = t.readInt32();
            e.setVisibility(r);
            break;

          case 6:
            r = t.readUint32();
            e.setOwner(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.TeamInfo.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.TeamInfo.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.TeamInfo.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 < (r = e.getPassword()).length && t.writeString(2, r), 0 !== (r = e.getCapacity()) && t.writeUint32(3, r), 0 !== (r = e.getMode()) && t.writeInt32(4, r), 0 !== (r = e.getVisibility()) && t.writeInt32(5, r), 0 !== (r = e.getOwner()) && t.writeUint32(6, r);
    }, proto.stream.TeamInfo.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.TeamInfo.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.TeamInfo.prototype.getPassword = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.TeamInfo.prototype.setPassword = function (e) {
      s.Message.setProto3StringField(this, 2, e);
    }, proto.stream.TeamInfo.prototype.getCapacity = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.TeamInfo.prototype.setCapacity = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.TeamInfo.prototype.getMode = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.TeamInfo.prototype.setMode = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.TeamInfo.prototype.getVisibility = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.TeamInfo.prototype.setVisibility = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.TeamInfo.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.TeamInfo.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.CreateTeamReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.CreateTeamReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.CreateTeamReq.displayName = "proto.stream.CreateTeamReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.CreateTeamReq.prototype.toObject = function (e) {
      return proto.stream.CreateTeamReq.toObject(e, this);
    }, proto.stream.CreateTeamReq.toObject = function (e, t) {
      var r,
          o = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        teaminfo: (r = t.getTeaminfo()) && proto.stream.TeamInfo.toObject(e, r),
        playerinfo: (r = t.getPlayerinfo()) && proto.stream.PlayerInfo.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.CreateTeamReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.CreateTeamReq();
      return proto.stream.CreateTeamReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.CreateTeamReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = new proto.stream.TeamInfo();
            t.readMessage(r, proto.stream.TeamInfo.deserializeBinaryFromReader), e.setTeaminfo(r);
            break;

          case 3:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.setPlayerinfo(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CreateTeamReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.CreateTeamReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CreateTeamReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), null != (r = e.getTeaminfo()) && t.writeMessage(2, r, proto.stream.TeamInfo.serializeBinaryToWriter), null != (r = e.getPlayerinfo()) && t.writeMessage(3, r, proto.stream.PlayerInfo.serializeBinaryToWriter);
    }, proto.stream.CreateTeamReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.CreateTeamReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.CreateTeamReq.prototype.getTeaminfo = function () {
      return s.Message.getWrapperField(this, proto.stream.TeamInfo, 2);
    }, proto.stream.CreateTeamReq.prototype.setTeaminfo = function (e) {
      s.Message.setWrapperField(this, 2, e);
    }, proto.stream.CreateTeamReq.prototype.clearTeaminfo = function () {
      this.setTeaminfo(void 0);
    }, proto.stream.CreateTeamReq.prototype.hasTeaminfo = function () {
      return null != s.Message.getField(this, 2);
    }, proto.stream.CreateTeamReq.prototype.getPlayerinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.PlayerInfo, 3);
    }, proto.stream.CreateTeamReq.prototype.setPlayerinfo = function (e) {
      s.Message.setWrapperField(this, 3, e);
    }, proto.stream.CreateTeamReq.prototype.clearPlayerinfo = function () {
      this.setPlayerinfo(void 0);
    }, proto.stream.CreateTeamReq.prototype.hasPlayerinfo = function () {
      return null != s.Message.getField(this, 3);
    }, proto.stream.CreateTeamRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.CreateTeamRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.CreateTeamRsp.displayName = "proto.stream.CreateTeamRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.CreateTeamRsp.prototype.toObject = function (e) {
      return proto.stream.CreateTeamRsp.toObject(e, this);
    }, proto.stream.CreateTeamRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        owner: s.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.CreateTeamRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.CreateTeamRsp();
      return proto.stream.CreateTeamRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.CreateTeamRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setOwner(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CreateTeamRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.CreateTeamRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CreateTeamRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getOwner()) && t.writeUint32(3, r);
    }, proto.stream.CreateTeamRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.CreateTeamRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.CreateTeamRsp.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.CreateTeamRsp.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.CreateTeamRsp.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.CreateTeamRsp.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.JoinTeamReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinTeamReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinTeamReq.displayName = "proto.stream.JoinTeamReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinTeamReq.prototype.toObject = function (e) {
      return proto.stream.JoinTeamReq.toObject(e, this);
    }, proto.stream.JoinTeamReq.toObject = function (e, t) {
      var r,
          o = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        playerinfo: (r = t.getPlayerinfo()) && proto.stream.PlayerInfo.toObject(e, r),
        password: s.Message.getFieldWithDefault(t, 4, "")
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.JoinTeamReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinTeamReq();
      return proto.stream.JoinTeamReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinTeamReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.setPlayerinfo(r);
            break;

          case 4:
            r = t.readString();
            e.setPassword(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinTeamReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinTeamReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinTeamReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), null != (r = e.getPlayerinfo()) && t.writeMessage(3, r, proto.stream.PlayerInfo.serializeBinaryToWriter), 0 < (r = e.getPassword()).length && t.writeString(4, r);
    }, proto.stream.JoinTeamReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinTeamReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.JoinTeamReq.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.JoinTeamReq.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.JoinTeamReq.prototype.getPlayerinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.PlayerInfo, 3);
    }, proto.stream.JoinTeamReq.prototype.setPlayerinfo = function (e) {
      s.Message.setWrapperField(this, 3, e);
    }, proto.stream.JoinTeamReq.prototype.clearPlayerinfo = function () {
      this.setPlayerinfo(void 0);
    }, proto.stream.JoinTeamReq.prototype.hasPlayerinfo = function () {
      return null != s.Message.getField(this, 3);
    }, proto.stream.JoinTeamReq.prototype.getPassword = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.JoinTeamReq.prototype.setPassword = function (e) {
      s.Message.setProto3StringField(this, 4, e);
    }, proto.stream.JoinTeamRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.JoinTeamRsp.repeatedFields_, null);
    }, o.inherits(proto.stream.JoinTeamRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinTeamRsp.displayName = "proto.stream.JoinTeamRsp"), proto.stream.JoinTeamRsp.repeatedFields_ = [3], s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinTeamRsp.prototype.toObject = function (e) {
      return proto.stream.JoinTeamRsp.toObject(e, this);
    }, proto.stream.JoinTeamRsp.toObject = function (e, t) {
      var r,
          o = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        teaminfo: (r = t.getTeaminfo()) && proto.stream.TeamInfo.toObject(e, r),
        usersList: s.Message.toObjectList(t.getUsersList(), proto.stream.PlayerInfo.toObject, e)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.JoinTeamRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinTeamRsp();
      return proto.stream.JoinTeamRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinTeamRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = new proto.stream.TeamInfo();
            t.readMessage(r, proto.stream.TeamInfo.deserializeBinaryFromReader), e.setTeaminfo(r);
            break;

          case 3:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.addUsers(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinTeamRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinTeamRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinTeamRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), null != (r = e.getTeaminfo()) && t.writeMessage(2, r, proto.stream.TeamInfo.serializeBinaryToWriter), 0 < (r = e.getUsersList()).length && t.writeRepeatedMessage(3, r, proto.stream.PlayerInfo.serializeBinaryToWriter);
    }, proto.stream.JoinTeamRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.JoinTeamRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.JoinTeamRsp.prototype.getTeaminfo = function () {
      return s.Message.getWrapperField(this, proto.stream.TeamInfo, 2);
    }, proto.stream.JoinTeamRsp.prototype.setTeaminfo = function (e) {
      s.Message.setWrapperField(this, 2, e);
    }, proto.stream.JoinTeamRsp.prototype.clearTeaminfo = function () {
      this.setTeaminfo(void 0);
    }, proto.stream.JoinTeamRsp.prototype.hasTeaminfo = function () {
      return null != s.Message.getField(this, 2);
    }, proto.stream.JoinTeamRsp.prototype.getUsersList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 3);
    }, proto.stream.JoinTeamRsp.prototype.setUsersList = function (e) {
      s.Message.setRepeatedWrapperField(this, 3, e);
    }, proto.stream.JoinTeamRsp.prototype.addUsers = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 3, e, proto.stream.PlayerInfo, t);
    }, proto.stream.JoinTeamRsp.prototype.clearUsersList = function () {
      this.setUsersList([]);
    }, proto.stream.JoinTeamNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.JoinTeamNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.JoinTeamNotify.displayName = "proto.stream.JoinTeamNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.JoinTeamNotify.prototype.toObject = function (e) {
      return proto.stream.JoinTeamNotify.toObject(e, this);
    }, proto.stream.JoinTeamNotify.toObject = function (e, t) {
      var r,
          o = {
        user: (r = t.getUser()) && proto.stream.PlayerInfo.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.JoinTeamNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.JoinTeamNotify();
      return proto.stream.JoinTeamNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.JoinTeamNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.setUser(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.JoinTeamNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.JoinTeamNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.JoinTeamNotify.serializeBinaryToWriter = function (e, t) {
      var r;
      null != (r = e.getUser()) && t.writeMessage(1, r, proto.stream.PlayerInfo.serializeBinaryToWriter);
    }, proto.stream.JoinTeamNotify.prototype.getUser = function () {
      return s.Message.getWrapperField(this, proto.stream.PlayerInfo, 1);
    }, proto.stream.JoinTeamNotify.prototype.setUser = function (e) {
      s.Message.setWrapperField(this, 1, e);
    }, proto.stream.JoinTeamNotify.prototype.clearUser = function () {
      this.setUser(void 0);
    }, proto.stream.JoinTeamNotify.prototype.hasUser = function () {
      return null != s.Message.getField(this, 1);
    }, proto.stream.LeaveTeamReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LeaveTeamReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.LeaveTeamReq.displayName = "proto.stream.LeaveTeamReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LeaveTeamReq.prototype.toObject = function (e) {
      return proto.stream.LeaveTeamReq.toObject(e, this);
    }, proto.stream.LeaveTeamReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LeaveTeamReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LeaveTeamReq();
      return proto.stream.LeaveTeamReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.LeaveTeamReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LeaveTeamReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LeaveTeamReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LeaveTeamReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r);
    }, proto.stream.LeaveTeamReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LeaveTeamReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LeaveTeamReq.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.LeaveTeamReq.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.LeaveTeamReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.LeaveTeamReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.LeaveTeamRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LeaveTeamRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.LeaveTeamRsp.displayName = "proto.stream.LeaveTeamRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LeaveTeamRsp.prototype.toObject = function (e) {
      return proto.stream.LeaveTeamRsp.toObject(e, this);
    }, proto.stream.LeaveTeamRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LeaveTeamRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LeaveTeamRsp();
      return proto.stream.LeaveTeamRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.LeaveTeamRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LeaveTeamRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LeaveTeamRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LeaveTeamRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r);
    }, proto.stream.LeaveTeamRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LeaveTeamRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.LeaveTeamRsp.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.LeaveTeamRsp.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.LeaveTeamRsp.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.LeaveTeamRsp.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.LeaveTeamNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LeaveTeamNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.LeaveTeamNotify.displayName = "proto.stream.LeaveTeamNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LeaveTeamNotify.prototype.toObject = function (e) {
      return proto.stream.LeaveTeamNotify.toObject(e, this);
    }, proto.stream.LeaveTeamNotify.toObject = function (e, t) {
      var r = {
        teamid: s.Message.getFieldWithDefault(t, 1, "0"),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        owner: s.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LeaveTeamNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LeaveTeamNotify();
      return proto.stream.LeaveTeamNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.LeaveTeamNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setOwner(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LeaveTeamNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LeaveTeamNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LeaveTeamNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), 0 !== (r = e.getOwner()) && t.writeUint32(3, r);
    }, proto.stream.LeaveTeamNotify.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.LeaveTeamNotify.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.LeaveTeamNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.LeaveTeamNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.LeaveTeamNotify.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.LeaveTeamNotify.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.TeamMatchCond = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.TeamMatchCond, s.Message), o.DEBUG && !COMPILED && (proto.stream.TeamMatchCond.displayName = "proto.stream.TeamMatchCond"), s.Message.GENERATE_TO_OBJECT && (proto.stream.TeamMatchCond.prototype.toObject = function (e) {
      return proto.stream.TeamMatchCond.toObject(e, this);
    }, proto.stream.TeamMatchCond.toObject = function (e, t) {
      var r = {
        teamnum: s.Message.getFieldWithDefault(t, 1, 0),
        teammembernum: s.Message.getFieldWithDefault(t, 2, 0),
        timeout: s.Message.getFieldWithDefault(t, 3, 0),
        weight: s.Message.getFieldWithDefault(t, 4, 0),
        weightrange: s.Message.getFieldWithDefault(t, 5, 0),
        weightrule: s.Message.getFieldWithDefault(t, 6, 0),
        full: s.Message.getFieldWithDefault(t, 7, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.TeamMatchCond.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.TeamMatchCond();
      return proto.stream.TeamMatchCond.deserializeBinaryFromReader(r, t);
    }, proto.stream.TeamMatchCond.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setTeamnum(r);
            break;

          case 2:
            r = t.readUint32();
            e.setTeammembernum(r);
            break;

          case 3:
            r = t.readUint32();
            e.setTimeout(r);
            break;

          case 4:
            r = t.readUint32();
            e.setWeight(r);
            break;

          case 5:
            r = t.readUint32();
            e.setWeightrange(r);
            break;

          case 6:
            r = t.readUint32();
            e.setWeightrule(r);
            break;

          case 7:
            r = t.readUint32();
            e.setFull(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.TeamMatchCond.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.TeamMatchCond.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.TeamMatchCond.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getTeamnum()) && t.writeUint32(1, r), 0 !== (r = e.getTeammembernum()) && t.writeUint32(2, r), 0 !== (r = e.getTimeout()) && t.writeUint32(3, r), 0 !== (r = e.getWeight()) && t.writeUint32(4, r), 0 !== (r = e.getWeightrange()) && t.writeUint32(5, r), 0 !== (r = e.getWeightrule()) && t.writeUint32(6, r), 0 !== (r = e.getFull()) && t.writeUint32(7, r);
    }, proto.stream.TeamMatchCond.prototype.getTeamnum = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.TeamMatchCond.prototype.setTeamnum = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.TeamMatchCond.prototype.getTeammembernum = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.TeamMatchCond.prototype.setTeammembernum = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.TeamMatchCond.prototype.getTimeout = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.TeamMatchCond.prototype.setTimeout = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.TeamMatchCond.prototype.getWeight = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.TeamMatchCond.prototype.setWeight = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.TeamMatchCond.prototype.getWeightrange = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.TeamMatchCond.prototype.setWeightrange = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.TeamMatchCond.prototype.getWeightrule = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.TeamMatchCond.prototype.setWeightrule = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.TeamMatchCond.prototype.getFull = function () {
      return s.Message.getFieldWithDefault(this, 7, 0);
    }, proto.stream.TeamMatchCond.prototype.setFull = function (e) {
      s.Message.setProto3IntField(this, 7, e);
    }, proto.stream.TeamMatchReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.TeamMatchReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.TeamMatchReq.displayName = "proto.stream.TeamMatchReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.TeamMatchReq.prototype.toObject = function (e) {
      return proto.stream.TeamMatchReq.toObject(e, this);
    }, proto.stream.TeamMatchReq.toObject = function (e, t) {
      var r,
          o = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        cond: (r = t.getCond()) && proto.stream.TeamMatchCond.toObject(e, r),
        roominfo: (r = t.getRoominfo()) && proto.stream.RoomInfo.toObject(e, r),
        watchsetting: (r = t.getWatchsetting()) && proto.stream.WatchSetting.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.TeamMatchReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.TeamMatchReq();
      return proto.stream.TeamMatchReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.TeamMatchReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = new proto.stream.TeamMatchCond();
            t.readMessage(r, proto.stream.TeamMatchCond.deserializeBinaryFromReader), e.setCond(r);
            break;

          case 5:
            r = new proto.stream.RoomInfo();
            t.readMessage(r, proto.stream.RoomInfo.deserializeBinaryFromReader), e.setRoominfo(r);
            break;

          case 6:
            r = new proto.stream.WatchSetting();
            t.readMessage(r, proto.stream.WatchSetting.deserializeBinaryFromReader), e.setWatchsetting(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.TeamMatchReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.TeamMatchReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.TeamMatchReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), null != (r = e.getCond()) && t.writeMessage(4, r, proto.stream.TeamMatchCond.serializeBinaryToWriter), null != (r = e.getRoominfo()) && t.writeMessage(5, r, proto.stream.RoomInfo.serializeBinaryToWriter), null != (r = e.getWatchsetting()) && t.writeMessage(6, r, proto.stream.WatchSetting.serializeBinaryToWriter);
    }, proto.stream.TeamMatchReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.TeamMatchReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.TeamMatchReq.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.TeamMatchReq.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.TeamMatchReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.TeamMatchReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.TeamMatchReq.prototype.getCond = function () {
      return s.Message.getWrapperField(this, proto.stream.TeamMatchCond, 4);
    }, proto.stream.TeamMatchReq.prototype.setCond = function (e) {
      s.Message.setWrapperField(this, 4, e);
    }, proto.stream.TeamMatchReq.prototype.clearCond = function () {
      this.setCond(void 0);
    }, proto.stream.TeamMatchReq.prototype.hasCond = function () {
      return null != s.Message.getField(this, 4);
    }, proto.stream.TeamMatchReq.prototype.getRoominfo = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomInfo, 5);
    }, proto.stream.TeamMatchReq.prototype.setRoominfo = function (e) {
      s.Message.setWrapperField(this, 5, e);
    }, proto.stream.TeamMatchReq.prototype.clearRoominfo = function () {
      this.setRoominfo(void 0);
    }, proto.stream.TeamMatchReq.prototype.hasRoominfo = function () {
      return null != s.Message.getField(this, 5);
    }, proto.stream.TeamMatchReq.prototype.getWatchsetting = function () {
      return s.Message.getWrapperField(this, proto.stream.WatchSetting, 6);
    }, proto.stream.TeamMatchReq.prototype.setWatchsetting = function (e) {
      s.Message.setWrapperField(this, 6, e);
    }, proto.stream.TeamMatchReq.prototype.clearWatchsetting = function () {
      this.setWatchsetting(void 0);
    }, proto.stream.TeamMatchReq.prototype.hasWatchsetting = function () {
      return null != s.Message.getField(this, 6);
    }, proto.stream.TeamMatchRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.TeamMatchRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.TeamMatchRsp.displayName = "proto.stream.TeamMatchRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.TeamMatchRsp.prototype.toObject = function (e) {
      return proto.stream.TeamMatchRsp.toObject(e, this);
    }, proto.stream.TeamMatchRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.TeamMatchRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.TeamMatchRsp();
      return proto.stream.TeamMatchRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.TeamMatchRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.TeamMatchRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.TeamMatchRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.TeamMatchRsp.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r);
    }, proto.stream.TeamMatchRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.TeamMatchRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.TeamDetail = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.TeamDetail.repeatedFields_, null);
    }, o.inherits(proto.stream.TeamDetail, s.Message), o.DEBUG && !COMPILED && (proto.stream.TeamDetail.displayName = "proto.stream.TeamDetail"), proto.stream.TeamDetail.repeatedFields_ = [2], s.Message.GENERATE_TO_OBJECT && (proto.stream.TeamDetail.prototype.toObject = function (e) {
      return proto.stream.TeamDetail.toObject(e, this);
    }, proto.stream.TeamDetail.toObject = function (e, t) {
      var r,
          o = {
        teaminfo: (r = t.getTeaminfo()) && proto.stream.TeamInfo.toObject(e, r),
        playerList: s.Message.toObjectList(t.getPlayerList(), proto.stream.PlayerInfo.toObject, e)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.TeamDetail.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.TeamDetail();
      return proto.stream.TeamDetail.deserializeBinaryFromReader(r, t);
    }, proto.stream.TeamDetail.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = new proto.stream.TeamInfo();
            t.readMessage(r, proto.stream.TeamInfo.deserializeBinaryFromReader), e.setTeaminfo(r);
            break;

          case 2:
            r = new proto.stream.PlayerInfo();
            t.readMessage(r, proto.stream.PlayerInfo.deserializeBinaryFromReader), e.addPlayer(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.TeamDetail.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.TeamDetail.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.TeamDetail.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      null != (r = e.getTeaminfo()) && t.writeMessage(1, r, proto.stream.TeamInfo.serializeBinaryToWriter), 0 < (r = e.getPlayerList()).length && t.writeRepeatedMessage(2, r, proto.stream.PlayerInfo.serializeBinaryToWriter);
    }, proto.stream.TeamDetail.prototype.getTeaminfo = function () {
      return s.Message.getWrapperField(this, proto.stream.TeamInfo, 1);
    }, proto.stream.TeamDetail.prototype.setTeaminfo = function (e) {
      s.Message.setWrapperField(this, 1, e);
    }, proto.stream.TeamDetail.prototype.clearTeaminfo = function () {
      this.setTeaminfo(void 0);
    }, proto.stream.TeamDetail.prototype.hasTeaminfo = function () {
      return null != s.Message.getField(this, 1);
    }, proto.stream.TeamDetail.prototype.getPlayerList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.PlayerInfo, 2);
    }, proto.stream.TeamDetail.prototype.setPlayerList = function (e) {
      s.Message.setRepeatedWrapperField(this, 2, e);
    }, proto.stream.TeamDetail.prototype.addPlayer = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 2, e, proto.stream.PlayerInfo, t);
    }, proto.stream.TeamDetail.prototype.clearPlayerList = function () {
      this.setPlayerList([]);
    }, proto.stream.BrigadeInfo = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.BrigadeInfo.repeatedFields_, null);
    }, o.inherits(proto.stream.BrigadeInfo, s.Message), o.DEBUG && !COMPILED && (proto.stream.BrigadeInfo.displayName = "proto.stream.BrigadeInfo"), proto.stream.BrigadeInfo.repeatedFields_ = [2], s.Message.GENERATE_TO_OBJECT && (proto.stream.BrigadeInfo.prototype.toObject = function (e) {
      return proto.stream.BrigadeInfo.toObject(e, this);
    }, proto.stream.BrigadeInfo.toObject = function (e, t) {
      var r = {
        brigadeid: s.Message.getFieldWithDefault(t, 1, 0),
        teamsList: s.Message.toObjectList(t.getTeamsList(), proto.stream.TeamDetail.toObject, e)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.BrigadeInfo.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.BrigadeInfo();
      return proto.stream.BrigadeInfo.deserializeBinaryFromReader(r, t);
    }, proto.stream.BrigadeInfo.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setBrigadeid(r);
            break;

          case 2:
            r = new proto.stream.TeamDetail();
            t.readMessage(r, proto.stream.TeamDetail.deserializeBinaryFromReader), e.addTeams(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.BrigadeInfo.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.BrigadeInfo.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.BrigadeInfo.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getBrigadeid()) && t.writeUint32(1, r), 0 < (r = e.getTeamsList()).length && t.writeRepeatedMessage(2, r, proto.stream.TeamDetail.serializeBinaryToWriter);
    }, proto.stream.BrigadeInfo.prototype.getBrigadeid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.BrigadeInfo.prototype.setBrigadeid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.BrigadeInfo.prototype.getTeamsList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.TeamDetail, 2);
    }, proto.stream.BrigadeInfo.prototype.setTeamsList = function (e) {
      s.Message.setRepeatedWrapperField(this, 2, e);
    }, proto.stream.BrigadeInfo.prototype.addTeams = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 2, e, proto.stream.TeamDetail, t);
    }, proto.stream.BrigadeInfo.prototype.clearTeamsList = function () {
      this.setTeamsList([]);
    }, proto.stream.TeamMatchResultNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.TeamMatchResultNotify.repeatedFields_, null);
    }, o.inherits(proto.stream.TeamMatchResultNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.TeamMatchResultNotify.displayName = "proto.stream.TeamMatchResultNotify"), proto.stream.TeamMatchResultNotify.repeatedFields_ = [2], s.Message.GENERATE_TO_OBJECT && (proto.stream.TeamMatchResultNotify.prototype.toObject = function (e) {
      return proto.stream.TeamMatchResultNotify.toObject(e, this);
    }, proto.stream.TeamMatchResultNotify.toObject = function (e, t) {
      var r,
          o = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        brigadesList: s.Message.toObjectList(t.getBrigadesList(), proto.stream.BrigadeInfo.toObject, e),
        roominfo: (r = t.getRoominfo()) && proto.stream.RoomInfo.toObject(e, r),
        bookinfo: (r = t.getBookinfo()) && proto.stream.BookInfo.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.TeamMatchResultNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.TeamMatchResultNotify();
      return proto.stream.TeamMatchResultNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.TeamMatchResultNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = new proto.stream.BrigadeInfo();
            t.readMessage(r, proto.stream.BrigadeInfo.deserializeBinaryFromReader), e.addBrigades(r);
            break;

          case 3:
            r = new proto.stream.RoomInfo();
            t.readMessage(r, proto.stream.RoomInfo.deserializeBinaryFromReader), e.setRoominfo(r);
            break;

          case 4:
            r = new proto.stream.BookInfo();
            t.readMessage(r, proto.stream.BookInfo.deserializeBinaryFromReader), e.setBookinfo(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.TeamMatchResultNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.TeamMatchResultNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.TeamMatchResultNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 < (r = e.getBrigadesList()).length && t.writeRepeatedMessage(2, r, proto.stream.BrigadeInfo.serializeBinaryToWriter), null != (r = e.getRoominfo()) && t.writeMessage(3, r, proto.stream.RoomInfo.serializeBinaryToWriter), null != (r = e.getBookinfo()) && t.writeMessage(4, r, proto.stream.BookInfo.serializeBinaryToWriter);
    }, proto.stream.TeamMatchResultNotify.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.TeamMatchResultNotify.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.TeamMatchResultNotify.prototype.getBrigadesList = function () {
      return s.Message.getRepeatedWrapperField(this, proto.stream.BrigadeInfo, 2);
    }, proto.stream.TeamMatchResultNotify.prototype.setBrigadesList = function (e) {
      s.Message.setRepeatedWrapperField(this, 2, e);
    }, proto.stream.TeamMatchResultNotify.prototype.addBrigades = function (e, t) {
      return s.Message.addToRepeatedWrapperField(this, 2, e, proto.stream.BrigadeInfo, t);
    }, proto.stream.TeamMatchResultNotify.prototype.clearBrigadesList = function () {
      this.setBrigadesList([]);
    }, proto.stream.TeamMatchResultNotify.prototype.getRoominfo = function () {
      return s.Message.getWrapperField(this, proto.stream.RoomInfo, 3);
    }, proto.stream.TeamMatchResultNotify.prototype.setRoominfo = function (e) {
      s.Message.setWrapperField(this, 3, e);
    }, proto.stream.TeamMatchResultNotify.prototype.clearRoominfo = function () {
      this.setRoominfo(void 0);
    }, proto.stream.TeamMatchResultNotify.prototype.hasRoominfo = function () {
      return null != s.Message.getField(this, 3);
    }, proto.stream.TeamMatchResultNotify.prototype.getBookinfo = function () {
      return s.Message.getWrapperField(this, proto.stream.BookInfo, 4);
    }, proto.stream.TeamMatchResultNotify.prototype.setBookinfo = function (e) {
      s.Message.setWrapperField(this, 4, e);
    }, proto.stream.TeamMatchResultNotify.prototype.clearBookinfo = function () {
      this.setBookinfo(void 0);
    }, proto.stream.TeamMatchResultNotify.prototype.hasBookinfo = function () {
      return null != s.Message.getField(this, 4);
    }, proto.stream.TeamMatchStartNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.TeamMatchStartNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.TeamMatchStartNotify.displayName = "proto.stream.TeamMatchStartNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.TeamMatchStartNotify.prototype.toObject = function (e) {
      return proto.stream.TeamMatchStartNotify.toObject(e, this);
    }, proto.stream.TeamMatchStartNotify.toObject = function (e, t) {
      var r = {
        teamid: s.Message.getFieldWithDefault(t, 1, "0"),
        userid: s.Message.getFieldWithDefault(t, 2, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.TeamMatchStartNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.TeamMatchStartNotify();
      return proto.stream.TeamMatchStartNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.TeamMatchStartNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.TeamMatchStartNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.TeamMatchStartNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.TeamMatchStartNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r);
    }, proto.stream.TeamMatchStartNotify.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.TeamMatchStartNotify.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.TeamMatchStartNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.TeamMatchStartNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.CancelTeamMatchReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.CancelTeamMatchReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.CancelTeamMatchReq.displayName = "proto.stream.CancelTeamMatchReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.CancelTeamMatchReq.prototype.toObject = function (e) {
      return proto.stream.CancelTeamMatchReq.toObject(e, this);
    }, proto.stream.CancelTeamMatchReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.CancelTeamMatchReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.CancelTeamMatchReq();
      return proto.stream.CancelTeamMatchReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.CancelTeamMatchReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CancelTeamMatchReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.CancelTeamMatchReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CancelTeamMatchReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.CancelTeamMatchReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.CancelTeamMatchReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.CancelTeamMatchReq.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.CancelTeamMatchReq.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.CancelTeamMatchReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.CancelTeamMatchReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.CancelTeamMatchReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.CancelTeamMatchReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.CancelTeamMatchReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.CancelTeamMatchReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.CancelTeamMatchRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.CancelTeamMatchRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.CancelTeamMatchRsp.displayName = "proto.stream.CancelTeamMatchRsp"), s.Message.GENERATE_TO_OBJECT && (proto.stream.CancelTeamMatchRsp.prototype.toObject = function (e) {
      return proto.stream.CancelTeamMatchRsp.toObject(e, this);
    }, proto.stream.CancelTeamMatchRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.CancelTeamMatchRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.CancelTeamMatchRsp();
      return proto.stream.CancelTeamMatchRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.CancelTeamMatchRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CancelTeamMatchRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.CancelTeamMatchRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CancelTeamMatchRsp.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r);
    }, proto.stream.CancelTeamMatchRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.CancelTeamMatchRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.CancelTeamMatchNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.CancelTeamMatchNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.CancelTeamMatchNotify.displayName = "proto.stream.CancelTeamMatchNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.CancelTeamMatchNotify.prototype.toObject = function (e) {
      return proto.stream.CancelTeamMatchNotify.toObject(e, this);
    }, proto.stream.CancelTeamMatchNotify.toObject = function (e, t) {
      var r = {
        teamid: s.Message.getFieldWithDefault(t, 1, "0"),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.CancelTeamMatchNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.CancelTeamMatchNotify();
      return proto.stream.CancelTeamMatchNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.CancelTeamMatchNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CancelTeamMatchNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.CancelTeamMatchNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CancelTeamMatchNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r);
    }, proto.stream.CancelTeamMatchNotify.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.CancelTeamMatchNotify.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.CancelTeamMatchNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.CancelTeamMatchNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.CancelTeamMatchNotify.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.CancelTeamMatchNotify.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.CancelTeamMatchNotify.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.CancelTeamMatchNotify.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.SendTeamEventReq = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.SendTeamEventReq.repeatedFields_, null);
    }, o.inherits(proto.stream.SendTeamEventReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.SendTeamEventReq.displayName = "proto.stream.SendTeamEventReq"), proto.stream.SendTeamEventReq.repeatedFields_ = [6], s.Message.GENERATE_TO_OBJECT && (proto.stream.SendTeamEventReq.prototype.toObject = function (e) {
      return proto.stream.SendTeamEventReq.toObject(e, this);
    }, proto.stream.SendTeamEventReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        dsttype: s.Message.getFieldWithDefault(t, 4, 0),
        msgtype: s.Message.getFieldWithDefault(t, 5, 0),
        dstuidsList: s.Message.getRepeatedField(t, 6),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SendTeamEventReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SendTeamEventReq();
      return proto.stream.SendTeamEventReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.SendTeamEventReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readEnum();
            e.setDsttype(r);
            break;

          case 5:
            r = t.readEnum();
            e.setMsgtype(r);
            break;

          case 6:
            r = t.readPackedUint32();
            e.setDstuidsList(r);
            break;

          case 7:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SendTeamEventReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SendTeamEventReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SendTeamEventReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 !== (r = e.getDsttype()) && t.writeEnum(4, r), 0 !== (r = e.getMsgtype()) && t.writeEnum(5, r), 0 < (r = e.getDstuidsList()).length && t.writePackedUint32(6, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(7, r);
    }, proto.stream.SendTeamEventReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SendTeamEventReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SendTeamEventReq.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.SendTeamEventReq.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.SendTeamEventReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.SendTeamEventReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.SendTeamEventReq.prototype.getDsttype = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.SendTeamEventReq.prototype.setDsttype = function (e) {
      s.Message.setProto3EnumField(this, 4, e);
    }, proto.stream.SendTeamEventReq.prototype.getMsgtype = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.SendTeamEventReq.prototype.setMsgtype = function (e) {
      s.Message.setProto3EnumField(this, 5, e);
    }, proto.stream.SendTeamEventReq.prototype.getDstuidsList = function () {
      return s.Message.getRepeatedField(this, 6);
    }, proto.stream.SendTeamEventReq.prototype.setDstuidsList = function (e) {
      s.Message.setField(this, 6, e || []);
    }, proto.stream.SendTeamEventReq.prototype.addDstuids = function (e, t) {
      s.Message.addToRepeatedField(this, 6, e, t);
    }, proto.stream.SendTeamEventReq.prototype.clearDstuidsList = function () {
      this.setDstuidsList([]);
    }, proto.stream.SendTeamEventReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 7, "");
    }, proto.stream.SendTeamEventReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.SendTeamEventReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.SendTeamEventReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 7, e);
    }, proto.stream.SendTeamEventRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.SendTeamEventRsp.repeatedFields_, null);
    }, o.inherits(proto.stream.SendTeamEventRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.SendTeamEventRsp.displayName = "proto.stream.SendTeamEventRsp"), proto.stream.SendTeamEventRsp.repeatedFields_ = [2], s.Message.GENERATE_TO_OBJECT && (proto.stream.SendTeamEventRsp.prototype.toObject = function (e) {
      return proto.stream.SendTeamEventRsp.toObject(e, this);
    }, proto.stream.SendTeamEventRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        dstuseridsList: s.Message.getRepeatedField(t, 2)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SendTeamEventRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SendTeamEventRsp();
      return proto.stream.SendTeamEventRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.SendTeamEventRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readPackedUint32();
            e.setDstuseridsList(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SendTeamEventRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SendTeamEventRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SendTeamEventRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), 0 < (r = e.getDstuseridsList()).length && t.writePackedUint32(2, r);
    }, proto.stream.SendTeamEventRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SendTeamEventRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.SendTeamEventRsp.prototype.getDstuseridsList = function () {
      return s.Message.getRepeatedField(this, 2);
    }, proto.stream.SendTeamEventRsp.prototype.setDstuseridsList = function (e) {
      s.Message.setField(this, 2, e || []);
    }, proto.stream.SendTeamEventRsp.prototype.addDstuserids = function (e, t) {
      s.Message.addToRepeatedField(this, 2, e, t);
    }, proto.stream.SendTeamEventRsp.prototype.clearDstuseridsList = function () {
      this.setDstuseridsList([]);
    }, proto.stream.SendTeamEventNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.SendTeamEventNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.SendTeamEventNotify.displayName = "proto.stream.SendTeamEventNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.SendTeamEventNotify.prototype.toObject = function (e) {
      return proto.stream.SendTeamEventNotify.toObject(e, this);
    }, proto.stream.SendTeamEventNotify.toObject = function (e, t) {
      var r = {
        teamid: s.Message.getFieldWithDefault(t, 1, "0"),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SendTeamEventNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SendTeamEventNotify();
      return proto.stream.SendTeamEventNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.SendTeamEventNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SendTeamEventNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SendTeamEventNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SendTeamEventNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r);
    }, proto.stream.SendTeamEventNotify.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.SendTeamEventNotify.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.SendTeamEventNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.SendTeamEventNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.SendTeamEventNotify.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.SendTeamEventNotify.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.SendTeamEventNotify.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.SendTeamEventNotify.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.KickTeamMemberReq = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.KickTeamMemberReq, s.Message), o.DEBUG && !COMPILED && (proto.stream.KickTeamMemberReq.displayName = "proto.stream.KickTeamMemberReq"), s.Message.GENERATE_TO_OBJECT && (proto.stream.KickTeamMemberReq.prototype.toObject = function (e) {
      return proto.stream.KickTeamMemberReq.toObject(e, this);
    }, proto.stream.KickTeamMemberReq.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        dstuserid: s.Message.getFieldWithDefault(t, 4, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.KickTeamMemberReq.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.KickTeamMemberReq();
      return proto.stream.KickTeamMemberReq.deserializeBinaryFromReader(r, t);
    }, proto.stream.KickTeamMemberReq.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readUint32();
            e.setDstuserid(r);
            break;

          case 5:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.KickTeamMemberReq.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.KickTeamMemberReq.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.KickTeamMemberReq.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 !== (r = e.getDstuserid()) && t.writeUint32(4, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(5, r);
    }, proto.stream.KickTeamMemberReq.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.KickTeamMemberReq.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.KickTeamMemberReq.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.KickTeamMemberReq.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.KickTeamMemberReq.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.KickTeamMemberReq.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.KickTeamMemberReq.prototype.getDstuserid = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.KickTeamMemberReq.prototype.setDstuserid = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.KickTeamMemberReq.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 5, "");
    }, proto.stream.KickTeamMemberReq.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.KickTeamMemberReq.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.KickTeamMemberReq.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 5, e);
    }, proto.stream.KickTeamMemberRsp = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.KickTeamMemberRsp.repeatedFields_, null);
    }, o.inherits(proto.stream.KickTeamMemberRsp, s.Message), o.DEBUG && !COMPILED && (proto.stream.KickTeamMemberRsp.displayName = "proto.stream.KickTeamMemberRsp"), proto.stream.KickTeamMemberRsp.repeatedFields_ = [4], s.Message.GENERATE_TO_OBJECT && (proto.stream.KickTeamMemberRsp.prototype.toObject = function (e) {
      return proto.stream.KickTeamMemberRsp.toObject(e, this);
    }, proto.stream.KickTeamMemberRsp.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        teamid: s.Message.getFieldWithDefault(t, 2, "0"),
        owner: s.Message.getFieldWithDefault(t, 3, 0),
        membersList: s.Message.getRepeatedField(t, 4)
      };
      return e && (r.$jspbMessageInstance = t), r;
    });
    proto.stream.KickTeamMemberRsp.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.KickTeamMemberRsp();
      return proto.stream.KickTeamMemberRsp.deserializeBinaryFromReader(r, t);
    }, proto.stream.KickTeamMemberRsp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readEnum();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setOwner(r);
            break;

          case 4:
            r = t.readPackedUint32();
            e.setMembersList(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.KickTeamMemberRsp.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.KickTeamMemberRsp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.KickTeamMemberRsp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeEnum(1, r), r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getOwner()) && t.writeUint32(3, r), 0 < (r = e.getMembersList()).length && t.writePackedUint32(4, r);
    }, proto.stream.KickTeamMemberRsp.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.KickTeamMemberRsp.prototype.setStatus = function (e) {
      s.Message.setProto3EnumField(this, 1, e);
    }, proto.stream.KickTeamMemberRsp.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.KickTeamMemberRsp.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.KickTeamMemberRsp.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.KickTeamMemberRsp.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.KickTeamMemberRsp.prototype.getMembersList = function () {
      return s.Message.getRepeatedField(this, 4);
    }, proto.stream.KickTeamMemberRsp.prototype.setMembersList = function (e) {
      s.Message.setField(this, 4, e || []);
    }, proto.stream.KickTeamMemberRsp.prototype.addMembers = function (e, t) {
      s.Message.addToRepeatedField(this, 4, e, t);
    }, proto.stream.KickTeamMemberRsp.prototype.clearMembersList = function () {
      this.setMembersList([]);
    }, proto.stream.KickTeamMemberNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.KickTeamMemberNotify.repeatedFields_, null);
    }, o.inherits(proto.stream.KickTeamMemberNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.KickTeamMemberNotify.displayName = "proto.stream.KickTeamMemberNotify"), proto.stream.KickTeamMemberNotify.repeatedFields_ = [5], s.Message.GENERATE_TO_OBJECT && (proto.stream.KickTeamMemberNotify.prototype.toObject = function (e) {
      return proto.stream.KickTeamMemberNotify.toObject(e, this);
    }, proto.stream.KickTeamMemberNotify.toObject = function (e, t) {
      var r = {
        teamid: s.Message.getFieldWithDefault(t, 1, "0"),
        userid: s.Message.getFieldWithDefault(t, 2, 0),
        dstuserid: s.Message.getFieldWithDefault(t, 3, 0),
        owner: s.Message.getFieldWithDefault(t, 4, 0),
        membersList: s.Message.getRepeatedField(t, 5),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.KickTeamMemberNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.KickTeamMemberNotify();
      return proto.stream.KickTeamMemberNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.KickTeamMemberNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setTeamid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setDstuserid(r);
            break;

          case 4:
            r = t.readUint32();
            e.setOwner(r);
            break;

          case 5:
            r = t.readPackedUint32();
            e.setMembersList(r);
            break;

          case 6:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.KickTeamMemberNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.KickTeamMemberNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.KickTeamMemberNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getTeamid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getUserid()) && t.writeUint32(2, r), 0 !== (r = e.getDstuserid()) && t.writeUint32(3, r), 0 !== (r = e.getOwner()) && t.writeUint32(4, r), 0 < (r = e.getMembersList()).length && t.writePackedUint32(5, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(6, r);
    }, proto.stream.KickTeamMemberNotify.prototype.getTeamid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.KickTeamMemberNotify.prototype.setTeamid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.KickTeamMemberNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.KickTeamMemberNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.KickTeamMemberNotify.prototype.getDstuserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.KickTeamMemberNotify.prototype.setDstuserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.KickTeamMemberNotify.prototype.getOwner = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.KickTeamMemberNotify.prototype.setOwner = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.KickTeamMemberNotify.prototype.getMembersList = function () {
      return s.Message.getRepeatedField(this, 5);
    }, proto.stream.KickTeamMemberNotify.prototype.setMembersList = function (e) {
      s.Message.setField(this, 5, e || []);
    }, proto.stream.KickTeamMemberNotify.prototype.addMembers = function (e, t) {
      s.Message.addToRepeatedField(this, 5, e, t);
    }, proto.stream.KickTeamMemberNotify.prototype.clearMembersList = function () {
      this.setMembersList([]);
    }, proto.stream.KickTeamMemberNotify.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 6, "");
    }, proto.stream.KickTeamMemberNotify.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.KickTeamMemberNotify.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.KickTeamMemberNotify.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 6, e);
    }, proto.stream.CmdId = {
      NOCMD: 0,
      LOGINREQ: 1101,
      LOGINRSP: 1102,
      HEARTBEATREQ: 1103,
      LOGOUTREQ: 1105,
      LOGOUTRSP: 1106,
      SETRECONNECTTIMEOUTREQ: 1109,
      SETRECONNECTTIMEOUTRSP: 1110,
      NETWORKSTATEREQ: 1120,
      NETWORKSTATERSP: 1121,
      NOTICENETWORKSTATEREQ: 1122,
      JOINROOMREQ: 1201,
      JOINROOMRSP: 1202,
      NOTICEUSERJOINREQ: 1301,
      CREATEROOMREQ: 1203,
      CREATEROOMRSP: 1204,
      LEAVEROOMREQ: 1205,
      LEAVEROOMRSP: 1206,
      NOTICEUSERLEAVEREQ: 1302,
      GETROOMLISTREQ: 1207,
      GETROOMLISTRSP: 1208,
      GETROOMDETAILREQ: 1209,
      GETROOMDETAILRSP: 1210,
      ROOMDETAILUPDATENOTIFY: 1211,
      JOINOVERREQ: 1213,
      JOINOVERRSP: 1214,
      JOINOVERNOTIFY: 1306,
      ROOMLISTEXREQ: 1215,
      ROOMLISTEXRSP: 1216,
      MVSSTARTEDREQ: 1217,
      MVSSTARTEDRSP: 1218,
      SETROOMPROPERTYREQ: 1219,
      SETROOMPROPERTYRSP: 1220,
      NOTICEROOMPROPERTY: 1307,
      JOINOPENREQ: 1221,
      JOINOPENRSP: 1222,
      JOINOPENNOTIFY: 1308,
      DESTROYROOMREQ: 1223,
      DESTROYROOMRSP: 1224,
      JOINWATCHROOMREQ: 1225,
      JOINWATCHROOMRSP: 1226,
      LEAVEWATCHROOMREQ: 1227,
      LEAVEWATCHROOMRSP: 1228,
      GETWATCHROOMSREQ: 1229,
      GETWATCHROOMSRSP: 1230,
      CHANGEROLEREQ: 1231,
      CHANGEROLERSP: 1232,
      KICKPLAYERREQ: 1303,
      KICKPLAYERRSP: 1304,
      KICKPLAYERNOTIFY: 1305,
      CREATETEAMREQ: 1233,
      CREATETEAMRSP: 1234,
      JOINTEAMREQ: 1235,
      JOINTEAMRSP: 1236,
      JOINTEAMNOTIFY: 1309,
      LEAVETEAMREQ: 1237,
      LEAVETEAMRSP: 1238,
      LEAVETEAMNOTIFY: 1310,
      TEAMMATCHREQ: 1239,
      TEAMMATCHRSP: 1240,
      TEAMMATCHRESULTNOTIFY: 1311,
      TEAMMATCHSTARTNOTIFY: 1312,
      CANCELTEAMMATCHREQ: 1241,
      CANCELTEAMMATCHRSP: 1242,
      CANCELTEAMMATCHNOTIFY: 1313,
      SENDTEAMEVENTREQ: 1243,
      SENDTEAMEVENTRSP: 1244,
      SENDTEAMEVENTNOTIFY: 1314,
      KICKTEAMMEMBERREQ: 1245,
      KICKTEAMMEMBERRSP: 1246,
      KICKTEAMMEMBERNOTIFY: 1315
    }, proto.stream.JoinRoomType = {
      NOJOIN: 0,
      JOINSPECIALROOM: 1,
      JOINROOMWITHPROPERTY: 2,
      JOINRANDOMROOM: 3,
      REJOINROOM: 4,
      CREATEJOINROOM: 5,
      WATCHERJOIN: 6
    }, proto.stream.RoomState = {
      ROOMSTATENIL: 0,
      ROOMSTATEOPEN: 1,
      ROOMSTATECLOSED: 2
    }, proto.stream.CreateFlag = {
      CREATEROOMUNKNOWN: 0,
      CREATEROOMSYSTEM: 1,
      CREATEROOMPLAYER: 2,
      CREATEROOMGS: 3
    }, proto.stream.RoomListSort = {
      NIL: 0,
      CREATETIME: 1,
      PLAYERNUM: 2,
      STATE: 3
    }, proto.stream.SortOrder = {
      ASC: 0,
      DESC: 1
    }, proto.stream.RoomType = {
      GAMEROOM: 0,
      WATCHROOMTYPE: 1
    }, proto.stream.TeamDstType = {
      DST_TYPE_INCLUSIVE: 0,
      DST_TYPE_EXCLUSIVE: 1
    }, proto.stream.TeamMsgType = {
      MSG_TYPE_SDK1_GS0: 0,
      MSG_TYPE_SDK0_GS1: 1,
      MSG_TYPE_SDK1_GS1: 2
    }, o.object.extend(r, proto.stream);
  }, {
    "./errorcode_pb.js": 5,
    "google-protobuf": 8
  }],
  8: [function (_require, module, exports) {
    (function (global, Buffer) {
      var $jscomp = {
        scope: {},
        getGlobal: function getGlobal(e) {
          return "undefined" != typeof window && window === e ? e : void 0 !== global ? global : e;
        }
      };
      $jscomp.global = $jscomp.getGlobal(this), $jscomp.initSymbol = function () {
        $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol), $jscomp.initSymbol = function () {};
      }, $jscomp.symbolCounter_ = 0, $jscomp.Symbol = function (e) {
        return "jscomp_symbol_" + e + $jscomp.symbolCounter_++;
      }, $jscomp.initSymbolIterator = function () {
        $jscomp.initSymbol(), $jscomp.global.Symbol.iterator || ($jscomp.global.Symbol.iterator = $jscomp.global.Symbol("iterator")), $jscomp.initSymbolIterator = function () {};
      }, $jscomp.makeIterator = function (e) {
        $jscomp.initSymbolIterator(), $jscomp.initSymbol(), $jscomp.initSymbolIterator();
        var t = e[Symbol.iterator];
        if (t) return t.call(e);
        var r = 0;
        return {
          next: function next() {
            return r < e.length ? {
              done: !1,
              value: e[r++]
            } : {
              done: !0
            };
          }
        };
      }, $jscomp.arrayFromIterator = function (e) {
        for (var t, r = []; !(t = e.next()).done;) {
          r.push(t.value);
        }

        return r;
      }, $jscomp.arrayFromIterable = function (e) {
        return e instanceof Array ? e : $jscomp.arrayFromIterator($jscomp.makeIterator(e));
      }, $jscomp.inherits = function (e, t) {
        function r() {}

        for (var o in r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e, t) {
          if (Object.defineProperties) {
            var s = Object.getOwnPropertyDescriptor(t, o);
            s && Object.defineProperty(e, o, s);
          } else e[o] = t[o];
        }
      }, $jscomp.array = $jscomp.array || {}, $jscomp.iteratorFromArray = function (t, r) {
        $jscomp.initSymbolIterator(), t instanceof String && (t += "");
        var o = 0,
            s = {
          next: function next() {
            if (o < t.length) {
              var e = o++;
              return {
                value: r(e, t[e]),
                done: !1
              };
            }

            return s.next = function () {
              return {
                done: !0,
                value: void 0
              };
            }, s.next();
          }
        };
        return $jscomp.initSymbol(), $jscomp.initSymbolIterator(), s[Symbol.iterator] = function () {
          return s;
        }, s;
      }, $jscomp.findInternal = function (e, t, r) {
        e instanceof String && (e = String(e));

        for (var o = e.length, s = 0; s < o; s++) {
          var i = e[s];
          if (t.call(r, i, s, e)) return {
            i: s,
            v: i
          };
        }

        return {
          i: -1,
          v: void 0
        };
      }, $jscomp.array.from = function (e, t, r) {
        $jscomp.initSymbolIterator(), t = null != t ? t : function (e) {
          return e;
        };
        var o = [];
        if ($jscomp.initSymbol(), $jscomp.initSymbolIterator(), "function" == typeof (s = e[Symbol.iterator]) && (e = s.call(e)), "function" == typeof e.next) for (; !(s = e.next()).done;) {
          o.push(t.call(r, s.value));
        } else for (var s = e.length, i = 0; i < s; i++) {
          o.push(t.call(r, e[i]));
        }
        return o;
      }, $jscomp.array.of = function (e) {
        return $jscomp.array.from(arguments);
      }, $jscomp.array.entries = function () {
        return $jscomp.iteratorFromArray(this, function (e, t) {
          return [e, t];
        });
      }, $jscomp.array.installHelper_ = function (e, t) {
        !Array.prototype[e] && Object.defineProperties && Object.defineProperty && Object.defineProperty(Array.prototype, e, {
          configurable: !0,
          enumerable: !1,
          writable: !0,
          value: t
        });
      }, $jscomp.array.entries$install = function () {
        $jscomp.array.installHelper_("entries", $jscomp.array.entries);
      }, $jscomp.array.keys = function () {
        return $jscomp.iteratorFromArray(this, function (e) {
          return e;
        });
      }, $jscomp.array.keys$install = function () {
        $jscomp.array.installHelper_("keys", $jscomp.array.keys);
      }, $jscomp.array.values = function () {
        return $jscomp.iteratorFromArray(this, function (e, t) {
          return t;
        });
      }, $jscomp.array.values$install = function () {
        $jscomp.array.installHelper_("values", $jscomp.array.values);
      }, $jscomp.array.copyWithin = function (e, t, r) {
        var o = this.length;
        if (e = Number(e), t = Number(t), r = Number(null != r ? r : o), e < t) for (r = Math.min(r, o); t < r;) {
          t in this ? this[e++] = this[t++] : (delete this[e++], t++);
        } else for (e += (r = Math.min(r, o + t - e)) - t; t < r;) {
          --r in this ? this[--e] = this[r] : delete this[e];
        }
        return this;
      }, $jscomp.array.copyWithin$install = function () {
        $jscomp.array.installHelper_("copyWithin", $jscomp.array.copyWithin);
      }, $jscomp.array.fill = function (e, t, r) {
        var o = this.length || 0;

        for (t < 0 && (t = Math.max(0, o + t)), (null == r || o < r) && (r = o), (r = Number(r)) < 0 && (r = Math.max(0, o + r)), t = Number(t || 0); t < r; t++) {
          this[t] = e;
        }

        return this;
      }, $jscomp.array.fill$install = function () {
        $jscomp.array.installHelper_("fill", $jscomp.array.fill);
      }, $jscomp.array.find = function (e, t) {
        return $jscomp.findInternal(this, e, t).v;
      }, $jscomp.array.find$install = function () {
        $jscomp.array.installHelper_("find", $jscomp.array.find);
      }, $jscomp.array.findIndex = function (e, t) {
        return $jscomp.findInternal(this, e, t).i;
      }, $jscomp.array.findIndex$install = function () {
        $jscomp.array.installHelper_("findIndex", $jscomp.array.findIndex);
      }, $jscomp.ASSUME_NO_NATIVE_MAP = !1, $jscomp.Map$isConformant = function () {
        if ($jscomp.ASSUME_NO_NATIVE_MAP) return !1;
        var e = $jscomp.global.Map;
        if (!e || !e.prototype.entries || "function" != typeof Object.seal) return !1;

        try {
          var t = Object.seal({
            x: 4
          }),
              r = new e($jscomp.makeIterator([[t, "s"]]));
          if ("s" != r.get(t) || 1 != r.size || r.get({
            x: 4
          }) || r.set({
            x: 4
          }, "t") != r || 2 != r.size) return !1;
          var o = r.entries(),
              s = o.next();
          return !s.done && s.value[0] == t && "s" == s.value[1] && !((s = o.next()).done || 4 != s.value[0].x || "t" != s.value[1] || !o.next().done);
        } catch (e) {
          return !1;
        }
      }, $jscomp.Map = function (e) {
        if (this.data_ = {}, this.head_ = $jscomp.Map.createHead(), this.size = 0, e) {
          e = $jscomp.makeIterator(e);

          for (var t; !(t = e.next()).done;) {
            t = t.value, this.set(t[0], t[1]);
          }
        }
      }, $jscomp.Map.prototype.set = function (e, t) {
        var r = $jscomp.Map.maybeGetEntry(this, e);
        return r.list || (r.list = this.data_[r.id] = []), r.entry ? r.entry.value = t : (r.entry = {
          next: this.head_,
          previous: this.head_.previous,
          head: this.head_,
          key: e,
          value: t
        }, r.list.push(r.entry), this.head_.previous.next = r.entry, this.head_.previous = r.entry, this.size++), this;
      }, $jscomp.Map.prototype["delete"] = function (e) {
        return !(!(e = $jscomp.Map.maybeGetEntry(this, e)).entry || !e.list) && (e.list.splice(e.index, 1), e.list.length || delete this.data_[e.id], e.entry.previous.next = e.entry.next, e.entry.next.previous = e.entry.previous, e.entry.head = null, this.size--, !0);
      }, $jscomp.Map.prototype.clear = function () {
        this.data_ = {}, this.head_ = this.head_.previous = $jscomp.Map.createHead(), this.size = 0;
      }, $jscomp.Map.prototype.has = function (e) {
        return !!$jscomp.Map.maybeGetEntry(this, e).entry;
      }, $jscomp.Map.prototype.get = function (e) {
        return (e = $jscomp.Map.maybeGetEntry(this, e).entry) && e.value;
      }, $jscomp.Map.prototype.entries = function () {
        return $jscomp.Map.makeIterator_(this, function (e) {
          return [e.key, e.value];
        });
      }, $jscomp.Map.prototype.keys = function () {
        return $jscomp.Map.makeIterator_(this, function (e) {
          return e.key;
        });
      }, $jscomp.Map.prototype.values = function () {
        return $jscomp.Map.makeIterator_(this, function (e) {
          return e.value;
        });
      }, $jscomp.Map.prototype.forEach = function (e, t) {
        for (var r, o = this.entries(); !(r = o.next()).done;) {
          r = r.value, e.call(t, r[1], r[0], this);
        }
      }, $jscomp.Map.maybeGetEntry = function (e, t) {
        var r = $jscomp.Map.getId(t),
            o = e.data_[r];
        if (o && Object.prototype.hasOwnProperty.call(e.data_, r)) for (var s = 0; s < o.length; s++) {
          var i = o[s];
          if (t != t && i.key != i.key || t === i.key) return {
            id: r,
            list: o,
            index: s,
            entry: i
          };
        }
        return {
          id: r,
          list: o,
          index: -1,
          entry: void 0
        };
      }, $jscomp.Map.makeIterator_ = function (e, t) {
        var r = e.head_,
            o = {
          next: function next() {
            if (r) {
              for (; r.head != e.head_;) {
                r = r.previous;
              }

              for (; r.next != r.head;) {
                return r = r.next, {
                  done: !1,
                  value: t(r)
                };
              }

              r = null;
            }

            return {
              done: !0,
              value: void 0
            };
          }
        };
        return $jscomp.initSymbol(), $jscomp.initSymbolIterator(), o[Symbol.iterator] = function () {
          return o;
        }, o;
      }, $jscomp.Map.mapIndex_ = 0, $jscomp.Map.createHead = function () {
        var e = {};
        return e.previous = e.next = e.head = e;
      }, $jscomp.Map.getId = function (e) {
        if (!(e instanceof Object)) return "p_" + e;
        if (!($jscomp.Map.idKey in e)) try {
          $jscomp.Map.defineProperty(e, $jscomp.Map.idKey, {
            value: ++$jscomp.Map.mapIndex_
          });
        } catch (e) {}
        return $jscomp.Map.idKey in e ? e[$jscomp.Map.idKey] : "o_ " + e;
      }, $jscomp.Map.defineProperty = Object.defineProperty ? function (e, t, r) {
        Object.defineProperty(e, t, {
          value: String(r)
        });
      } : function (e, t, r) {
        e[t] = String(r);
      }, $jscomp.Map.Entry = function () {}, $jscomp.Map$install = function () {
        $jscomp.initSymbol(), $jscomp.initSymbolIterator(), $jscomp.Map$isConformant() ? $jscomp.Map = $jscomp.global.Map : ($jscomp.initSymbol(), $jscomp.initSymbolIterator(), $jscomp.Map.prototype[Symbol.iterator] = $jscomp.Map.prototype.entries, $jscomp.initSymbol(), $jscomp.Map.idKey = Symbol("map-id-key"), $jscomp.Map$install = function () {});
      }, $jscomp.math = $jscomp.math || {}, $jscomp.math.clz32 = function (e) {
        if (0 === (e = Number(e) >>> 0)) return 32;
        var t = 0;
        return 0 == (4294901760 & e) && (e <<= 16, t += 16), 0 == (4278190080 & e) && (e <<= 8, t += 8), 0 == (4026531840 & e) && (e <<= 4, t += 4), 0 == (3221225472 & e) && (e <<= 2, t += 2), 0 == (2147483648 & e) && t++, t;
      }, $jscomp.math.imul = function (e, t) {
        var r = 65535 & (e = Number(e)),
            o = 65535 & (t = Number(t));
        return r * o + ((e >>> 16 & 65535) * o + r * (t >>> 16 & 65535) << 16 >>> 0) | 0;
      }, $jscomp.math.sign = function (e) {
        return 0 === (e = Number(e)) || isNaN(e) ? e : 0 < e ? 1 : -1;
      }, $jscomp.math.log10 = function (e) {
        return Math.log(e) / Math.LN10;
      }, $jscomp.math.log2 = function (e) {
        return Math.log(e) / Math.LN2;
      }, $jscomp.math.log1p = function (e) {
        if ((e = Number(e)) < .25 && -.25 < e) {
          for (var t = e, r = 1, o = e, s = 0, i = 1; s != o;) {
            o = (s = o) + (i *= -1) * (t *= e) / ++r;
          }

          return o;
        }

        return Math.log(1 + e);
      }, $jscomp.math.expm1 = function (e) {
        if ((e = Number(e)) < .25 && -.25 < e) {
          for (var t = e, r = 1, o = e, s = 0; s != o;) {
            o = (s = o) + (t *= e / ++r);
          }

          return o;
        }

        return Math.exp(e) - 1;
      }, $jscomp.math.cosh = function (e) {
        return e = Number(e), (Math.exp(e) + Math.exp(-e)) / 2;
      }, $jscomp.math.sinh = function (e) {
        return 0 === (e = Number(e)) ? e : (Math.exp(e) - Math.exp(-e)) / 2;
      }, $jscomp.math.tanh = function (e) {
        if (0 === (e = Number(e))) return e;
        var t = (1 - (t = Math.exp(-2 * Math.abs(e)))) / (1 + t);
        return e < 0 ? -t : t;
      }, $jscomp.math.acosh = function (e) {
        return e = Number(e), Math.log(e + Math.sqrt(e * e - 1));
      }, $jscomp.math.asinh = function (e) {
        if (0 === (e = Number(e))) return e;
        var t = Math.log(Math.abs(e) + Math.sqrt(e * e + 1));
        return e < 0 ? -t : t;
      }, $jscomp.math.atanh = function (e) {
        return e = Number(e), ($jscomp.math.log1p(e) - $jscomp.math.log1p(-e)) / 2;
      }, $jscomp.math.hypot = function (e, t, r) {
        e = Number(e), t = Number(t);
        var o,
            s,
            i,
            a = Math.max(Math.abs(e), Math.abs(t));

        for (o = 2; o < arguments.length; o++) {
          a = Math.max(a, Math.abs(arguments[o]));
        }

        if (1e100 < a || a < 1e-100) {
          for (i = (e /= a) * e + (t /= a) * t, o = 2; o < arguments.length; o++) {
            i += (s = Number(arguments[o]) / a) * s;
          }

          return Math.sqrt(i) * a;
        }

        for (i = e * e + t * t, o = 2; o < arguments.length; o++) {
          i += (s = Number(arguments[o])) * s;
        }

        return Math.sqrt(i);
      }, $jscomp.math.trunc = function (e) {
        if (e = Number(e), isNaN(e) || 1 / 0 === e || -1 / 0 === e || 0 === e) return e;
        var t = Math.floor(Math.abs(e));
        return e < 0 ? -t : t;
      }, $jscomp.math.cbrt = function (e) {
        if (0 === e) return e;
        e = Number(e);
        var t = Math.pow(Math.abs(e), 1 / 3);
        return e < 0 ? -t : t;
      }, $jscomp.number = $jscomp.number || {}, $jscomp.number.isFinite = function (e) {
        return "number" == typeof e && !isNaN(e) && 1 / 0 !== e && -1 / 0 !== e;
      }, $jscomp.number.isInteger = function (e) {
        return !!$jscomp.number.isFinite(e) && e === Math.floor(e);
      }, $jscomp.number.isNaN = function (e) {
        return "number" == typeof e && isNaN(e);
      }, $jscomp.number.isSafeInteger = function (e) {
        return $jscomp.number.isInteger(e) && Math.abs(e) <= $jscomp.number.MAX_SAFE_INTEGER;
      }, $jscomp.number.EPSILON = Math.pow(2, -52), $jscomp.number.MAX_SAFE_INTEGER = 9007199254740991, $jscomp.number.MIN_SAFE_INTEGER = -9007199254740991, $jscomp.object = $jscomp.object || {}, $jscomp.object.assign = function (e, t) {
        for (var r = 1; r < arguments.length; r++) {
          var o = arguments[r];
          if (o) for (var s in o) {
            Object.prototype.hasOwnProperty.call(o, s) && (e[s] = o[s]);
          }
        }

        return e;
      }, $jscomp.object.is = function (e, t) {
        return e === t ? 0 !== e || 1 / e == 1 / t : e != e && t != t;
      }, $jscomp.ASSUME_NO_NATIVE_SET = !1, $jscomp.Set$isConformant = function () {
        if ($jscomp.ASSUME_NO_NATIVE_SET) return !1;
        var e = $jscomp.global.Set;
        if (!e || !e.prototype.entries || "function" != typeof Object.seal) return !1;

        try {
          var t = Object.seal({
            x: 4
          }),
              r = new e($jscomp.makeIterator([t]));
          if (!r.has(t) || 1 != r.size || r.add(t) != r || 1 != r.size || r.add({
            x: 4
          }) != r || 2 != r.size) return !1;
          var o = r.entries(),
              s = o.next();
          return !s.done && s.value[0] == t && s.value[1] == t && !(s = o.next()).done && s.value[0] != t && 4 == s.value[0].x && s.value[1] == s.value[0] && o.next().done;
        } catch (e) {
          return !1;
        }
      }, $jscomp.Set = function (e) {
        if (this.map_ = new $jscomp.Map(), e) {
          e = $jscomp.makeIterator(e);

          for (var t; !(t = e.next()).done;) {
            this.add(t.value);
          }
        }

        this.size = this.map_.size;
      }, $jscomp.Set.prototype.add = function (e) {
        return this.map_.set(e, e), this.size = this.map_.size, this;
      }, $jscomp.Set.prototype["delete"] = function (e) {
        return e = this.map_["delete"](e), this.size = this.map_.size, e;
      }, $jscomp.Set.prototype.clear = function () {
        this.map_.clear(), this.size = 0;
      }, $jscomp.Set.prototype.has = function (e) {
        return this.map_.has(e);
      }, $jscomp.Set.prototype.entries = function () {
        return this.map_.entries();
      }, $jscomp.Set.prototype.values = function () {
        return this.map_.values();
      }, $jscomp.Set.prototype.forEach = function (t, r) {
        var o = this;
        this.map_.forEach(function (e) {
          return t.call(r, e, e, o);
        });
      }, $jscomp.Set$install = function () {
        $jscomp.Map$install(), $jscomp.Set$isConformant() ? $jscomp.Set = $jscomp.global.Set : ($jscomp.initSymbol(), $jscomp.initSymbolIterator(), $jscomp.Set.prototype[Symbol.iterator] = $jscomp.Set.prototype.values, $jscomp.Set$install = function () {});
      }, $jscomp.string = $jscomp.string || {}, $jscomp.checkStringArgs = function (e, t, r) {
        if (null == e) throw new TypeError("The 'this' value for String.prototype." + r + " must not be null or undefined");
        if (t instanceof RegExp) throw new TypeError("First argument to String.prototype." + r + " must not be a regular expression");
        return e + "";
      }, $jscomp.string.fromCodePoint = function (e) {
        for (var t = "", r = 0; r < arguments.length; r++) {
          var o = Number(arguments[r]);
          if (o < 0 || 1114111 < o || o !== Math.floor(o)) throw new RangeError("invalid_code_point " + o);
          o <= 65535 ? t += String.fromCharCode(o) : (o -= 65536, t += String.fromCharCode(o >>> 10 & 1023 | 55296), t += String.fromCharCode(1023 & o | 56320));
        }

        return t;
      }, $jscomp.string.repeat = function (e) {
        var t = $jscomp.checkStringArgs(this, null, "repeat");
        if (e < 0 || 1342177279 < e) throw new RangeError("Invalid count value");
        e |= 0;

        for (var r = ""; e;) {
          1 & e && (r += t), (e >>>= 1) && (t += t);
        }

        return r;
      }, $jscomp.string.repeat$install = function () {
        String.prototype.repeat || (String.prototype.repeat = $jscomp.string.repeat);
      }, $jscomp.string.codePointAt = function (e) {
        var t = $jscomp.checkStringArgs(this, null, "codePointAt"),
            r = t.length;

        if (0 <= (e = Number(e) || 0) && e < r) {
          e |= 0;
          var o = t.charCodeAt(e);
          return o < 55296 || 56319 < o || e + 1 === r ? o : (e = t.charCodeAt(e + 1)) < 56320 || 57343 < e ? o : 1024 * (o - 55296) + e + 9216;
        }
      }, $jscomp.string.codePointAt$install = function () {
        String.prototype.codePointAt || (String.prototype.codePointAt = $jscomp.string.codePointAt);
      }, $jscomp.string.includes = function (e, t) {
        return -1 !== $jscomp.checkStringArgs(this, e, "includes").indexOf(e, t || 0);
      }, $jscomp.string.includes$install = function () {
        String.prototype.includes || (String.prototype.includes = $jscomp.string.includes);
      }, $jscomp.string.startsWith = function (e, t) {
        var r = $jscomp.checkStringArgs(this, e, "startsWith");
        e += "";

        for (var o = r.length, s = e.length, i = Math.max(0, Math.min(0 | t, r.length)), a = 0; a < s && i < o;) {
          if (r[i++] != e[a++]) return !1;
        }

        return s <= a;
      }, $jscomp.string.startsWith$install = function () {
        String.prototype.startsWith || (String.prototype.startsWith = $jscomp.string.startsWith);
      }, $jscomp.string.endsWith = function (e, t) {
        var r = $jscomp.checkStringArgs(this, e, "endsWith");
        e += "", void 0 === t && (t = r.length);

        for (var o = Math.max(0, Math.min(0 | t, r.length)), s = e.length; 0 < s && 0 < o;) {
          if (r[--o] != e[--s]) return !1;
        }

        return s <= 0;
      }, $jscomp.string.endsWith$install = function () {
        String.prototype.endsWith || (String.prototype.endsWith = $jscomp.string.endsWith);
      };
      var COMPILED = !0,
          goog = goog || {};
      goog.global = this, goog.isDef = function (e) {
        return void 0 !== e;
      }, goog.exportPath_ = function (e, t, r) {
        e = e.split("."), r = r || goog.global, e[0] in r || !r.execScript || r.execScript("var " + e[0]);

        for (var o; e.length && (o = e.shift());) {
          !e.length && goog.isDef(t) ? r[o] = t : r = r[o] ? r[o] : r[o] = {};
        }
      }, goog.define = function (e, t) {
        var r = t;
        COMPILED || (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, e) ? r = goog.global.CLOSURE_UNCOMPILED_DEFINES[e] : goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, e) && (r = goog.global.CLOSURE_DEFINES[e])), goog.exportPath_(e, r);
      }, goog.DEBUG = !0, goog.LOCALE = "en", goog.TRUSTED_SITE = !0, goog.STRICT_MODE_COMPATIBLE = !1, goog.DISALLOW_TEST_ONLY_CODE = COMPILED && !goog.DEBUG, goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = !1, goog.provide = function (e) {
        if (!COMPILED && goog.isProvided_(e)) throw Error('Namespace "' + e + '" already declared.');
        goog.constructNamespace_(e);
      }, goog.constructNamespace_ = function (e, t) {
        if (!COMPILED) {
          delete goog.implicitNamespaces_[e];

          for (var r = e; (r = r.substring(0, r.lastIndexOf("."))) && !goog.getObjectByName(r);) {
            goog.implicitNamespaces_[r] = !0;
          }
        }

        goog.exportPath_(e, t);
      }, goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/, goog.module = function (e) {
        if (!goog.isString(e) || !e || -1 == e.search(goog.VALID_MODULE_RE_)) throw Error("Invalid module identifier");
        if (!goog.isInModuleLoader_()) throw Error("Module " + e + " has been loaded incorrectly.");
        if (goog.moduleLoaderState_.moduleName) throw Error("goog.module may only be called once per module.");

        if (goog.moduleLoaderState_.moduleName = e, !COMPILED) {
          if (goog.isProvided_(e)) throw Error('Namespace "' + e + '" already declared.');
          delete goog.implicitNamespaces_[e];
        }
      }, goog.module.get = function (e) {
        return goog.module.getInternal_(e);
      }, goog.module.getInternal_ = function (e) {
        if (!COMPILED) return goog.isProvided_(e) ? e in goog.loadedModules_ ? goog.loadedModules_[e] : goog.getObjectByName(e) : null;
      }, goog.moduleLoaderState_ = null, goog.isInModuleLoader_ = function () {
        return null != goog.moduleLoaderState_;
      }, goog.module.declareLegacyNamespace = function () {
        if (!COMPILED && !goog.isInModuleLoader_()) throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");
        if (!COMPILED && !goog.moduleLoaderState_.moduleName) throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");
        goog.moduleLoaderState_.declareLegacyNamespace = !0;
      }, goog.setTestOnly = function (e) {
        if (goog.DISALLOW_TEST_ONLY_CODE) throw e = e || "", Error("Importing test-only code into non-debug environment" + (e ? ": " + e : "."));
      }, goog.forwardDeclare = function (e) {}, COMPILED || (goog.isProvided_ = function (e) {
        return e in goog.loadedModules_ || !goog.implicitNamespaces_[e] && goog.isDefAndNotNull(goog.getObjectByName(e));
      }, goog.implicitNamespaces_ = {
        "goog.module": !0
      }), goog.getObjectByName = function (e, t) {
        for (var r, o = e.split("."), s = t || goog.global; r = o.shift();) {
          if (!goog.isDefAndNotNull(s[r])) return null;
          s = s[r];
        }

        return s;
      }, goog.globalize = function (e, t) {
        var r,
            o = t || goog.global;

        for (r in e) {
          o[r] = e[r];
        }
      }, goog.addDependency = function (e, t, r, o) {
        if (goog.DEPENDENCIES_ENABLED) {
          var s;
          e = e.replace(/\\/g, "/");

          for (var i = goog.dependencies_, a = 0; s = t[a]; a++) {
            i.nameToPath[s] = e, i.pathIsModule[e] = !!o;
          }

          for (o = 0; t = r[o]; o++) {
            e in i.requires || (i.requires[e] = {}), i.requires[e][t] = !0;
          }
        }
      }, goog.ENABLE_DEBUG_LOADER = !0, goog.logToConsole_ = function (e) {
        goog.global.console && goog.global.console.error(e);
      }, goog.require = function (e) {
        if (!COMPILED) {
          if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_ && goog.maybeProcessDeferredDep_(e), goog.isProvided_(e)) return goog.isInModuleLoader_() ? goog.module.getInternal_(e) : null;

          if (goog.ENABLE_DEBUG_LOADER) {
            var t = goog.getPathFromDeps_(e);
            if (t) return goog.writeScripts_(t), null;
          }

          throw e = "goog.require could not find: " + e, goog.logToConsole_(e), Error(e);
        }
      }, goog.basePath = "", goog.nullFunction = function () {}, goog.abstractMethod = function () {
        throw Error("unimplemented abstract method");
      }, goog.addSingletonGetter = function (e) {
        e.getInstance = function () {
          return e.instance_ ? e.instance_ : (goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = e), e.instance_ = new e());
        };
      }, goog.instantiatedSingletons_ = [], goog.LOAD_MODULE_USING_EVAL = !0, goog.SEAL_MODULE_EXPORTS = goog.DEBUG, goog.loadedModules_ = {}, goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER, goog.DEPENDENCIES_ENABLED && (goog.dependencies_ = {
        pathIsModule: {},
        nameToPath: {},
        requires: {},
        visited: {},
        written: {},
        deferred: {}
      }, goog.inHtmlDocument_ = function () {
        var e = goog.global.document;
        return null != e && "write" in e;
      }, goog.findBasePath_ = function () {
        if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) goog.basePath = goog.global.CLOSURE_BASE_PATH;else if (goog.inHtmlDocument_()) for (var e = goog.global.document.getElementsByTagName("SCRIPT"), t = e.length - 1; 0 <= t; --t) {
          var r = e[t].src,
              o = -1 == (o = r.lastIndexOf("?")) ? r.length : o;

          if ("base.js" == r.substr(o - 7, 7)) {
            goog.basePath = r.substr(0, o - 7);
            break;
          }
        }
      }, goog.importScript_ = function (e, t) {
        (goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_)(e, t) && (goog.dependencies_.written[e] = !0);
      }, goog.IS_OLD_IE_ = !(goog.global.atob || !goog.global.document || !goog.global.document.all), goog.importModule_ = function (e) {
        goog.importScript_("", 'goog.retrieveAndExecModule_("' + e + '");') && (goog.dependencies_.written[e] = !0);
      }, goog.queuedModules_ = [], goog.wrapModule_ = function (e, t) {
        return goog.LOAD_MODULE_USING_EVAL && goog.isDef(goog.global.JSON) ? "goog.loadModule(" + goog.global.JSON.stringify(t + "\n//# sourceURL=" + e + "\n") + ");" : 'goog.loadModule(function(exports) {"use strict";' + t + "\n;return exports});\n//# sourceURL=" + e + "\n";
      }, goog.loadQueuedModules_ = function () {
        var e = goog.queuedModules_.length;

        if (0 < e) {
          var t = goog.queuedModules_;
          goog.queuedModules_ = [];

          for (var r = 0; r < e; r++) {
            goog.maybeProcessDeferredPath_(t[r]);
          }
        }
      }, goog.maybeProcessDeferredDep_ = function (e) {
        goog.isDeferredModule_(e) && goog.allDepsAreAvailable_(e) && (e = goog.getPathFromDeps_(e), goog.maybeProcessDeferredPath_(goog.basePath + e));
      }, goog.isDeferredModule_ = function (e) {
        return !(!(e = goog.getPathFromDeps_(e)) || !goog.dependencies_.pathIsModule[e]) && goog.basePath + e in goog.dependencies_.deferred;
      }, goog.allDepsAreAvailable_ = function (e) {
        if ((e = goog.getPathFromDeps_(e)) && e in goog.dependencies_.requires) for (var t in goog.dependencies_.requires[e]) {
          if (!goog.isProvided_(t) && !goog.isDeferredModule_(t)) return !1;
        }
        return !0;
      }, goog.maybeProcessDeferredPath_ = function (e) {
        if (e in goog.dependencies_.deferred) {
          var t = goog.dependencies_.deferred[e];
          delete goog.dependencies_.deferred[e], goog.globalEval(t);
        }
      }, goog.loadModuleFromUrl = function (e) {
        goog.retrieveAndExecModule_(e);
      }, goog.loadModule = function (e) {
        var t = goog.moduleLoaderState_;

        try {
          var r;
          if (goog.moduleLoaderState_ = {
            moduleName: void 0,
            declareLegacyNamespace: !1
          }, goog.isFunction(e)) r = e.call(goog.global, {});else {
            if (!goog.isString(e)) throw Error("Invalid module definition");
            r = goog.loadModuleFromSource_.call(goog.global, e);
          }
          var o = goog.moduleLoaderState_.moduleName;
          if (!goog.isString(o) || !o) throw Error('Invalid module name "' + o + '"');
          goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(o, r) : goog.SEAL_MODULE_EXPORTS && Object.seal && Object.seal(r), goog.loadedModules_[o] = r;
        } finally {
          goog.moduleLoaderState_ = t;
        }
      }, goog.loadModuleFromSource_ = function (a) {
        return eval(a), {};
      }, goog.writeScriptSrcNode_ = function (e) {
        goog.global.document.write('<script type="text/javascript" src="' + e + '"><\/script>');
      }, goog.appendScriptSrcNode_ = function (e) {
        var t = goog.global.document,
            r = t.createElement("script");
        r.type = "text/javascript", r.src = e, r.defer = !1, r.async = !1, t.head.appendChild(r);
      }, goog.writeScriptTag_ = function (e, t) {
        if (goog.inHtmlDocument_()) {
          var r = goog.global.document;

          if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && "complete" == r.readyState) {
            if (/\bdeps.js$/.test(e)) return !1;
            throw Error('Cannot write "' + e + '" after document load');
          }

          var o = goog.IS_OLD_IE_;
          return void 0 === t ? o ? (o = " onreadystatechange='goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ", r.write('<script type="text/javascript" src="' + e + '"' + o + "><\/script>")) : goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING ? goog.appendScriptSrcNode_(e) : goog.writeScriptSrcNode_(e) : r.write('<script type="text/javascript">' + t + "<\/script>"), !0;
        }

        return !1;
      }, goog.lastNonModuleScriptIndex_ = 0, goog.onScriptLoad_ = function (e, t) {
        return "complete" == e.readyState && goog.lastNonModuleScriptIndex_ == t && goog.loadQueuedModules_(), !0;
      }, goog.writeScripts_ = function (e) {
        var o = [],
            s = {},
            i = goog.dependencies_;

        for (function e(t) {
          if (!((t in i.written) || (t in i.visited))) {
            if (i.visited[t] = !0, (t in i.requires)) for (var r in i.requires[t]) {
              if (!goog.isProvided_(r)) {
                if (!(r in i.nameToPath)) throw Error("Undefined nameToPath for " + r);
                e(i.nameToPath[r]);
              }
            }
            (t in s) || (s[t] = !0, o.push(t));
          }
        }(e), e = 0; e < o.length; e++) {
          var t = o[e];
          goog.dependencies_.written[t] = !0;
        }

        var r = goog.moduleLoaderState_;

        for (goog.moduleLoaderState_ = null, e = 0; e < o.length; e++) {
          if (!(t = o[e])) throw goog.moduleLoaderState_ = r, Error("Undefined script input");
          i.pathIsModule[t] ? goog.importModule_(goog.basePath + t) : goog.importScript_(goog.basePath + t);
        }

        goog.moduleLoaderState_ = r;
      }, goog.getPathFromDeps_ = function (e) {
        return e in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[e] : null;
      }, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + "deps.js")), goog.normalizePath_ = function (e) {
        e = e.split("/");

        for (var t = 0; t < e.length;) {
          "." == e[t] ? e.splice(t, 1) : t && ".." == e[t] && e[t - 1] && ".." != e[t - 1] ? e.splice(--t, 2) : t++;
        }

        return e.join("/");
      }, goog.loadFileSync_ = function (e) {
        if (goog.global.CLOSURE_LOAD_FILE_SYNC) return goog.global.CLOSURE_LOAD_FILE_SYNC(e);
        var t = new goog.global.XMLHttpRequest();
        return t.open("get", e, !1), t.send(), t.responseText;
      }, goog.retrieveAndExecModule_ = function (e) {
        if (!COMPILED) {
          var t = e;
          e = goog.normalizePath_(e);
          var r = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_,
              o = goog.loadFileSync_(e);
          if (null == o) throw Error("load of " + e + "failed");
          o = goog.wrapModule_(e, o), goog.IS_OLD_IE_ ? (goog.dependencies_.deferred[t] = o, goog.queuedModules_.push(t)) : r(e, o);
        }
      }, goog.typeOf = function (e) {
        var t = _typeof(e);

        if ("object" == t) {
          if (!e) return "null";
          if (e instanceof Array) return "array";
          if (e instanceof Object) return t;
          var r = Object.prototype.toString.call(e);
          if ("[object Window]" == r) return "object";
          if ("[object Array]" == r || "number" == typeof e.length && void 0 !== e.splice && void 0 !== e.propertyIsEnumerable && !e.propertyIsEnumerable("splice")) return "array";
          if ("[object Function]" == r || void 0 !== e.call && void 0 !== e.propertyIsEnumerable && !e.propertyIsEnumerable("call")) return "function";
        } else if ("function" == t && void 0 === e.call) return "object";

        return t;
      }, goog.isNull = function (e) {
        return null === e;
      }, goog.isDefAndNotNull = function (e) {
        return null != e;
      }, goog.isArray = function (e) {
        return "array" == goog.typeOf(e);
      }, goog.isArrayLike = function (e) {
        var t = goog.typeOf(e);
        return "array" == t || "object" == t && "number" == typeof e.length;
      }, goog.isDateLike = function (e) {
        return goog.isObject(e) && "function" == typeof e.getFullYear;
      }, goog.isString = function (e) {
        return "string" == typeof e;
      }, goog.isBoolean = function (e) {
        return "boolean" == typeof e;
      }, goog.isNumber = function (e) {
        return "number" == typeof e;
      }, goog.isFunction = function (e) {
        return "function" == goog.typeOf(e);
      }, goog.isObject = function (e) {
        var t = _typeof(e);

        return "object" == t && null != e || "function" == t;
      }, goog.getUid = function (e) {
        return e[goog.UID_PROPERTY_] || (e[goog.UID_PROPERTY_] = ++goog.uidCounter_);
      }, goog.hasUid = function (e) {
        return !!e[goog.UID_PROPERTY_];
      }, goog.removeUid = function (e) {
        null !== e && "removeAttribute" in e && e.removeAttribute(goog.UID_PROPERTY_);

        try {
          delete e[goog.UID_PROPERTY_];
        } catch (e) {}
      }, goog.UID_PROPERTY_ = "closure_uid_" + (1e9 * Math.random() >>> 0), goog.uidCounter_ = 0, goog.getHashCode = goog.getUid, goog.removeHashCode = goog.removeUid, goog.cloneObject = function (e) {
        if ("object" == (r = goog.typeOf(e)) || "array" == r) {
          if (e.clone) return e.clone();
          var t,
              r = "array" == r ? [] : {};

          for (t in e) {
            r[t] = goog.cloneObject(e[t]);
          }

          return r;
        }

        return e;
      }, goog.bindNative_ = function (e, t, r) {
        return e.call.apply(e.bind, arguments);
      }, goog.bindJs_ = function (t, r, e) {
        if (!t) throw Error();

        if (2 < arguments.length) {
          var o = Array.prototype.slice.call(arguments, 2);
          return function () {
            var e = Array.prototype.slice.call(arguments);
            return Array.prototype.unshift.apply(e, o), t.apply(r, e);
          };
        }

        return function () {
          return t.apply(r, arguments);
        };
      }, goog.bind = function (e, t, r) {
        return Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_, goog.bind.apply(null, arguments);
      }, goog.partial = function (t, e) {
        var r = Array.prototype.slice.call(arguments, 1);
        return function () {
          var e = r.slice();
          return e.push.apply(e, arguments), t.apply(this, e);
        };
      }, goog.mixin = function (e, t) {
        for (var r in t) {
          e[r] = t[r];
        }
      }, goog.now = goog.TRUSTED_SITE && Date.now || function () {
        return +new Date();
      }, goog.globalEval = function (e) {
        if (goog.global.execScript) goog.global.execScript(e, "JavaScript");else {
          if (!goog.global.eval) throw Error("goog.globalEval not available");
          if (null == goog.evalWorksForGlobals_) if (goog.global.eval("var _evalTest_ = 1;"), void 0 !== goog.global._evalTest_) {
            try {
              delete goog.global._evalTest_;
            } catch (e) {}

            goog.evalWorksForGlobals_ = !0;
          } else goog.evalWorksForGlobals_ = !1;
          if (goog.evalWorksForGlobals_) goog.global.eval(e);else {
            var t = goog.global.document,
                r = t.createElement("SCRIPT");
            r.type = "text/javascript", r.defer = !1, r.appendChild(t.createTextNode(e)), t.body.appendChild(r), t.body.removeChild(r);
          }
        }
      }, goog.evalWorksForGlobals_ = null, goog.getCssName = function (e, t) {
        var o = function o(e) {
          return goog.cssNameMapping_[e] || e;
        },
            r = function r(e) {
          e = e.split("-");

          for (var t = [], r = 0; r < e.length; r++) {
            t.push(o(e[r]));
          }

          return t.join("-");
        };

        r = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? o : r : function (e) {
          return e;
        };
        return t ? e + "-" + r(t) : r(e);
      }, goog.setCssNameMapping = function (e, t) {
        goog.cssNameMapping_ = e, goog.cssNameMappingStyle_ = t;
      }, !COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING), goog.getMsg = function (e, r) {
        return r && (e = e.replace(/\{\$([^}]+)}/g, function (e, t) {
          return null != r && t in r ? r[t] : e;
        })), e;
      }, goog.getMsgWithFallback = function (e, t) {
        return e;
      }, goog.exportSymbol = function (e, t, r) {
        goog.exportPath_(e, t, r);
      }, goog.exportProperty = function (e, t, r) {
        e[t] = r;
      }, goog.inherits = function (e, i) {
        function t() {}

        t.prototype = i.prototype, e.superClass_ = i.prototype, e.prototype = new t(), (e.prototype.constructor = e).base = function (e, t, r) {
          for (var o = Array(arguments.length - 2), s = 2; s < arguments.length; s++) {
            o[s - 2] = arguments[s];
          }

          return i.prototype[t].apply(e, o);
        };
      }, goog.base = function (e, t, r) {
        var o = arguments.callee.caller;
        if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !o) throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");

        if (o.superClass_) {
          for (var s = Array(arguments.length - 1), i = 1; i < arguments.length; i++) {
            s[i - 1] = arguments[i];
          }

          return o.superClass_.constructor.apply(e, s);
        }

        for (s = Array(arguments.length - 2), i = 2; i < arguments.length; i++) {
          s[i - 2] = arguments[i];
        }

        i = !1;

        for (var a = e.constructor; a; a = a.superClass_ && a.superClass_.constructor) {
          if (a.prototype[t] === o) i = !0;else if (i) return a.prototype[t].apply(e, s);
        }

        if (e[t] === o) return e.constructor.prototype[t].apply(e, s);
        throw Error("goog.base called from a method of one name to a method of a different name");
      }, goog.scope = function (e) {
        e.call(goog.global);
      }, COMPILED || (goog.global.COMPILED = COMPILED), goog.defineClass = function (e, t) {
        var r = t.constructor,
            o = t.statics;
        return r && r != Object.prototype.constructor || (r = function r() {
          throw Error("cannot instantiate an interface (no constructor defined).");
        }), r = goog.defineClass.createSealingConstructor_(r, e), e && goog.inherits(r, e), delete t.constructor, delete t.statics, goog.defineClass.applyProperties_(r.prototype, t), null != o && (o instanceof Function ? o(r) : goog.defineClass.applyProperties_(r, o)), r;
      }, goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG, goog.defineClass.createSealingConstructor_ = function (t, e) {
        if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
          if (e && e.prototype && e.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) return t;

          var r = function r() {
            var e = t.apply(this, arguments) || this;
            return e[goog.UID_PROPERTY_] = e[goog.UID_PROPERTY_], this.constructor === r && Object.seal(e), e;
          };

          return r;
        }

        return t;
      }, goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "), goog.defineClass.applyProperties_ = function (e, t) {
        for (var r in t) {
          Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
        }

        for (var o = 0; o < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; o++) {
          r = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[o], Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
        }
      }, goog.tagUnsealableClass = function (e) {
        !COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES && (e.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = !0);
      }, goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable", goog.dom = {}, goog.dom.NodeType = {
        ELEMENT: 1,
        ATTRIBUTE: 2,
        TEXT: 3,
        CDATA_SECTION: 4,
        ENTITY_REFERENCE: 5,
        ENTITY: 6,
        PROCESSING_INSTRUCTION: 7,
        COMMENT: 8,
        DOCUMENT: 9,
        DOCUMENT_TYPE: 10,
        DOCUMENT_FRAGMENT: 11,
        NOTATION: 12
      }, goog.debug = {}, goog.debug.Error = function (e) {
        if (Error.captureStackTrace) Error.captureStackTrace(this, goog.debug.Error);else {
          var t = Error().stack;
          t && (this.stack = t);
        }
        e && (this.message = String(e)), this.reportErrorToServer = !0;
      }, goog.inherits(goog.debug.Error, Error), goog.debug.Error.prototype.name = "CustomError", goog.string = {}, goog.string.DETECT_DOUBLE_ESCAPING = !1, goog.string.FORCE_NON_DOM_HTML_UNESCAPING = !1, goog.string.Unicode = {
        NBSP: " "
      }, goog.string.startsWith = function (e, t) {
        return 0 == e.lastIndexOf(t, 0);
      }, goog.string.endsWith = function (e, t) {
        var r = e.length - t.length;
        return 0 <= r && e.indexOf(t, r) == r;
      }, goog.string.caseInsensitiveStartsWith = function (e, t) {
        return 0 == goog.string.caseInsensitiveCompare(t, e.substr(0, t.length));
      }, goog.string.caseInsensitiveEndsWith = function (e, t) {
        return 0 == goog.string.caseInsensitiveCompare(t, e.substr(e.length - t.length, t.length));
      }, goog.string.caseInsensitiveEquals = function (e, t) {
        return e.toLowerCase() == t.toLowerCase();
      }, goog.string.subs = function (e, t) {
        for (var r = e.split("%s"), o = "", s = Array.prototype.slice.call(arguments, 1); s.length && 1 < r.length;) {
          o += r.shift() + s.shift();
        }

        return o + r.join("%s");
      }, goog.string.collapseWhitespace = function (e) {
        return e.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
      }, goog.string.isEmptyOrWhitespace = function (e) {
        return /^[\s\xa0]*$/.test(e);
      }, goog.string.isEmptyString = function (e) {
        return 0 == e.length;
      }, goog.string.isEmpty = goog.string.isEmptyOrWhitespace, goog.string.isEmptyOrWhitespaceSafe = function (e) {
        return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(e));
      }, goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe, goog.string.isBreakingWhitespace = function (e) {
        return !/[^\t\n\r ]/.test(e);
      }, goog.string.isAlpha = function (e) {
        return !/[^a-zA-Z]/.test(e);
      }, goog.string.isNumeric = function (e) {
        return !/[^0-9]/.test(e);
      }, goog.string.isAlphaNumeric = function (e) {
        return !/[^a-zA-Z0-9]/.test(e);
      }, goog.string.isSpace = function (e) {
        return " " == e;
      }, goog.string.isUnicodeChar = function (e) {
        return 1 == e.length && " " <= e && e <= "~" || "" <= e && e <= "�";
      }, goog.string.stripNewlines = function (e) {
        return e.replace(/(\r\n|\r|\n)+/g, " ");
      }, goog.string.canonicalizeNewlines = function (e) {
        return e.replace(/(\r\n|\r|\n)/g, "\n");
      }, goog.string.normalizeWhitespace = function (e) {
        return e.replace(/\xa0|\s/g, " ");
      }, goog.string.normalizeSpaces = function (e) {
        return e.replace(/\xa0|[ \t]+/g, " ");
      }, goog.string.collapseBreakingSpaces = function (e) {
        return e.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
      }, goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function (e) {
        return e.trim();
      } : function (e) {
        return e.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
      }, goog.string.trimLeft = function (e) {
        return e.replace(/^[\s\xa0]+/, "");
      }, goog.string.trimRight = function (e) {
        return e.replace(/[\s\xa0]+$/, "");
      }, goog.string.caseInsensitiveCompare = function (e, t) {
        var r = String(e).toLowerCase(),
            o = String(t).toLowerCase();
        return r < o ? -1 : r == o ? 0 : 1;
      }, goog.string.numberAwareCompare_ = function (e, t, r) {
        if (e == t) return 0;
        if (!e) return -1;
        if (!t) return 1;

        for (var o = e.toLowerCase().match(r), s = t.toLowerCase().match(r), i = Math.min(o.length, s.length), a = 0; a < i; a++) {
          r = o[a];
          var n = s[a];
          if (r != n) return e = parseInt(r, 10), !isNaN(e) && (t = parseInt(n, 10), !isNaN(t) && e - t) ? e - t : r < n ? -1 : 1;
        }

        return o.length != s.length ? o.length - s.length : e < t ? -1 : 1;
      }, goog.string.intAwareCompare = function (e, t) {
        return goog.string.numberAwareCompare_(e, t, /\d+|\D+/g);
      }, goog.string.floatAwareCompare = function (e, t) {
        return goog.string.numberAwareCompare_(e, t, /\d+|\.\d+|\D+/g);
      }, goog.string.numerateCompare = goog.string.floatAwareCompare, goog.string.urlEncode = function (e) {
        return encodeURIComponent(String(e));
      }, goog.string.urlDecode = function (e) {
        return decodeURIComponent(e.replace(/\+/g, " "));
      }, goog.string.newLineToBr = function (e, t) {
        return e.replace(/(\r\n|\r|\n)/g, t ? "<br />" : "<br>");
      }, goog.string.htmlEscape = function (e, t) {
        if (t) e = e.replace(goog.string.AMP_RE_, "&amp;").replace(goog.string.LT_RE_, "&lt;").replace(goog.string.GT_RE_, "&gt;").replace(goog.string.QUOT_RE_, "&quot;").replace(goog.string.SINGLE_QUOTE_RE_, "&#39;").replace(goog.string.NULL_RE_, "&#0;"), goog.string.DETECT_DOUBLE_ESCAPING && (e = e.replace(goog.string.E_RE_, "&#101;"));else {
          if (!goog.string.ALL_RE_.test(e)) return e;
          -1 != e.indexOf("&") && (e = e.replace(goog.string.AMP_RE_, "&amp;")), -1 != e.indexOf("<") && (e = e.replace(goog.string.LT_RE_, "&lt;")), -1 != e.indexOf(">") && (e = e.replace(goog.string.GT_RE_, "&gt;")), -1 != e.indexOf('"') && (e = e.replace(goog.string.QUOT_RE_, "&quot;")), -1 != e.indexOf("'") && (e = e.replace(goog.string.SINGLE_QUOTE_RE_, "&#39;")), -1 != e.indexOf("\0") && (e = e.replace(goog.string.NULL_RE_, "&#0;")), goog.string.DETECT_DOUBLE_ESCAPING && -1 != e.indexOf("e") && (e = e.replace(goog.string.E_RE_, "&#101;"));
        }
        return e;
      }, goog.string.AMP_RE_ = /&/g, goog.string.LT_RE_ = /</g, goog.string.GT_RE_ = />/g, goog.string.QUOT_RE_ = /"/g, goog.string.SINGLE_QUOTE_RE_ = /'/g, goog.string.NULL_RE_ = /\x00/g, goog.string.E_RE_ = /e/g, goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/, goog.string.unescapeEntities = function (e) {
        return goog.string.contains(e, "&") ? !goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global ? goog.string.unescapeEntitiesUsingDom_(e) : goog.string.unescapePureXmlEntities_(e) : e;
      }, goog.string.unescapeEntitiesWithDocument = function (e, t) {
        return goog.string.contains(e, "&") ? goog.string.unescapeEntitiesUsingDom_(e, t) : e;
      }, goog.string.unescapeEntitiesUsingDom_ = function (e, t) {
        var s,
            i = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"'
        };
        return s = t ? t.createElement("div") : goog.global.document.createElement("div"), e.replace(goog.string.HTML_ENTITY_PATTERN_, function (e, t) {
          var r = i[e];
          if (r) return r;

          if ("#" == t.charAt(0)) {
            var o = Number("0" + t.substr(1));
            isNaN(o) || (r = String.fromCharCode(o));
          }

          return r || (s.innerHTML = e + " ", r = s.firstChild.nodeValue.slice(0, -1)), i[e] = r;
        });
      }, goog.string.unescapePureXmlEntities_ = function (e) {
        return e.replace(/&([^;]+);/g, function (e, t) {
          switch (t) {
            case "amp":
              return "&";

            case "lt":
              return "<";

            case "gt":
              return ">";

            case "quot":
              return '"';

            default:
              if ("#" == t.charAt(0)) {
                var r = Number("0" + t.substr(1));
                if (!isNaN(r)) return String.fromCharCode(r);
              }

              return e;
          }
        });
      }, goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g, goog.string.whitespaceEscape = function (e, t) {
        return goog.string.newLineToBr(e.replace(/  /g, " &#160;"), t);
      }, goog.string.preserveSpaces = function (e) {
        return e.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
      }, goog.string.stripQuotes = function (e, t) {
        for (var r = t.length, o = 0; o < r; o++) {
          var s = 1 == r ? t : t.charAt(o);
          if (e.charAt(0) == s && e.charAt(e.length - 1) == s) return e.substring(1, e.length - 1);
        }

        return e;
      }, goog.string.truncate = function (e, t, r) {
        return r && (e = goog.string.unescapeEntities(e)), e.length > t && (e = e.substring(0, t - 3) + "..."), r && (e = goog.string.htmlEscape(e)), e;
      }, goog.string.truncateMiddle = function (e, t, r, o) {
        if (r && (e = goog.string.unescapeEntities(e)), o && e.length > t) {
          t < o && (o = t);
          var s = e.length - o;
          e = e.substring(0, t - o) + "..." + e.substring(s);
        } else e.length > t && (o = Math.floor(t / 2), s = e.length - o, e = e.substring(0, o + t % 2) + "..." + e.substring(s));

        return r && (e = goog.string.htmlEscape(e)), e;
      }, goog.string.specialEscapeChars_ = {
        "\0": "\\0",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "\t": "\\t",
        "\v": "\\x0B",
        '"': '\\"',
        "\\": "\\\\",
        "<": "<"
      }, goog.string.jsEscapeCache_ = {
        "'": "\\'"
      }, goog.string.quote = function (e) {
        e = String(e);

        for (var t = ['"'], r = 0; r < e.length; r++) {
          var o = e.charAt(r),
              s = o.charCodeAt(0);
          t[r + 1] = goog.string.specialEscapeChars_[o] || (31 < s && s < 127 ? o : goog.string.escapeChar(o));
        }

        return t.push('"'), t.join("");
      }, goog.string.escapeString = function (e) {
        for (var t = [], r = 0; r < e.length; r++) {
          t[r] = goog.string.escapeChar(e.charAt(r));
        }

        return t.join("");
      }, goog.string.escapeChar = function (e) {
        if (e in goog.string.jsEscapeCache_) return goog.string.jsEscapeCache_[e];
        if (e in goog.string.specialEscapeChars_) return goog.string.jsEscapeCache_[e] = goog.string.specialEscapeChars_[e];
        var t,
            r = e.charCodeAt(0);
        return 31 < r && r < 127 ? t = e : (r < 256 ? (t = "\\x", (r < 16 || 256 < r) && (t += "0")) : (t = "\\u", r < 4096 && (t += "0")), t += r.toString(16).toUpperCase()), goog.string.jsEscapeCache_[e] = t;
      }, goog.string.contains = function (e, t) {
        return -1 != e.indexOf(t);
      }, goog.string.caseInsensitiveContains = function (e, t) {
        return goog.string.contains(e.toLowerCase(), t.toLowerCase());
      }, goog.string.countOf = function (e, t) {
        return e && t ? e.split(t).length - 1 : 0;
      }, goog.string.removeAt = function (e, t, r) {
        var o = e;
        return 0 <= t && t < e.length && 0 < r && (o = e.substr(0, t) + e.substr(t + r, e.length - t - r)), o;
      }, goog.string.remove = function (e, t) {
        var r = new RegExp(goog.string.regExpEscape(t), "");
        return e.replace(r, "");
      }, goog.string.removeAll = function (e, t) {
        var r = new RegExp(goog.string.regExpEscape(t), "g");
        return e.replace(r, "");
      }, goog.string.regExpEscape = function (e) {
        return String(e).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
      }, goog.string.repeat = String.prototype.repeat ? function (e, t) {
        return e.repeat(t);
      } : function (e, t) {
        return Array(t + 1).join(e);
      }, goog.string.padNumber = function (e, t, r) {
        return -1 == (r = (e = goog.isDef(r) ? e.toFixed(r) : String(e)).indexOf(".")) && (r = e.length), goog.string.repeat("0", Math.max(0, t - r)) + e;
      }, goog.string.makeSafe = function (e) {
        return null == e ? "" : String(e);
      }, goog.string.buildString = function (e) {
        return Array.prototype.join.call(arguments, "");
      }, goog.string.getRandomString = function () {
        return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);
      }, goog.string.compareVersions = function (e, t) {
        for (var r = 0, o = goog.string.trim(String(e)).split("."), s = goog.string.trim(String(t)).split("."), i = Math.max(o.length, s.length), a = 0; 0 == r && a < i; a++) {
          var n = o[a] || "",
              p = s[a] || "",
              g = RegExp("(\\d*)(\\D*)", "g"),
              u = RegExp("(\\d*)(\\D*)", "g");

          do {
            var l = g.exec(n) || ["", "", ""],
                m = u.exec(p) || ["", "", ""];
            if (0 == l[0].length && 0 == m[0].length) break;
            r = 0 == l[1].length ? 0 : parseInt(l[1], 10);
            var c = 0 == m[1].length ? 0 : parseInt(m[1], 10);
            r = goog.string.compareElements_(r, c) || goog.string.compareElements_(0 == l[2].length, 0 == m[2].length) || goog.string.compareElements_(l[2], m[2]);
          } while (0 == r);
        }

        return r;
      }, goog.string.compareElements_ = function (e, t) {
        return e < t ? -1 : t < e ? 1 : 0;
      }, goog.string.hashCode = function (e) {
        for (var t = 0, r = 0; r < e.length; ++r) {
          t = 31 * t + e.charCodeAt(r) >>> 0;
        }

        return t;
      }, goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0, goog.string.createUniqueString = function () {
        return "goog_" + goog.string.uniqueStringCounter_++;
      }, goog.string.toNumber = function (e) {
        var t = Number(e);
        return 0 == t && goog.string.isEmptyOrWhitespace(e) ? NaN : t;
      }, goog.string.isLowerCamelCase = function (e) {
        return /^[a-z]+([A-Z][a-z]*)*$/.test(e);
      }, goog.string.isUpperCamelCase = function (e) {
        return /^([A-Z][a-z]*)+$/.test(e);
      }, goog.string.toCamelCase = function (e) {
        return String(e).replace(/\-([a-z])/g, function (e, t) {
          return t.toUpperCase();
        });
      }, goog.string.toSelectorCase = function (e) {
        return String(e).replace(/([A-Z])/g, "-$1").toLowerCase();
      }, goog.string.toTitleCase = function (e, t) {
        var r = goog.isString(t) ? goog.string.regExpEscape(t) : "\\s";
        return e.replace(new RegExp("(^" + (r ? "|[" + r + "]+" : "") + ")([a-z])", "g"), function (e, t, r) {
          return t + r.toUpperCase();
        });
      }, goog.string.capitalize = function (e) {
        return String(e.charAt(0)).toUpperCase() + String(e.substr(1)).toLowerCase();
      }, goog.string.parseInt = function (e) {
        return isFinite(e) && (e = String(e)), goog.isString(e) ? /^\s*-?0x/i.test(e) ? parseInt(e, 16) : parseInt(e, 10) : NaN;
      }, goog.string.splitLimit = function (e, t, r) {
        e = e.split(t);

        for (var o = []; 0 < r && e.length;) {
          o.push(e.shift()), r--;
        }

        return e.length && o.push(e.join(t)), o;
      }, goog.string.editDistance = function (e, t) {
        var r = [],
            o = [];
        if (e == t) return 0;
        if (!e.length || !t.length) return Math.max(e.length, t.length);

        for (var s = 0; s < t.length + 1; s++) {
          r[s] = s;
        }

        for (s = 0; s < e.length; s++) {
          o[0] = s + 1;

          for (var i = 0; i < t.length; i++) {
            o[i + 1] = Math.min(o[i] + 1, r[i + 1] + 1, r[i] + Number(e[s] != t[i]));
          }

          for (i = 0; i < r.length; i++) {
            r[i] = o[i];
          }
        }

        return o[t.length];
      }, goog.asserts = {}, goog.asserts.ENABLE_ASSERTS = goog.DEBUG, goog.asserts.AssertionError = function (e, t) {
        t.unshift(e), goog.debug.Error.call(this, goog.string.subs.apply(null, t)), t.shift(), this.messagePattern = e;
      }, goog.inherits(goog.asserts.AssertionError, goog.debug.Error), goog.asserts.AssertionError.prototype.name = "AssertionError", goog.asserts.DEFAULT_ERROR_HANDLER = function (e) {
        throw e;
      }, goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER, goog.asserts.doAssertFailure_ = function (e, t, r, o) {
        var s = "Assertion failed";

        if (r) {
          s = s + ": " + r;
          var i = o;
        } else e && (s += ": " + e, i = t);

        e = new goog.asserts.AssertionError("" + s, i || []), goog.asserts.errorHandler_(e);
      }, goog.asserts.setErrorHandler = function (e) {
        goog.asserts.ENABLE_ASSERTS && (goog.asserts.errorHandler_ = e);
      }, goog.asserts.assert = function (e, t, r) {
        return goog.asserts.ENABLE_ASSERTS && !e && goog.asserts.doAssertFailure_("", null, t, Array.prototype.slice.call(arguments, 2)), e;
      }, goog.asserts.fail = function (e, t) {
        goog.asserts.ENABLE_ASSERTS && goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (e ? ": " + e : ""), Array.prototype.slice.call(arguments, 1)));
      }, goog.asserts.assertNumber = function (e, t, r) {
        return goog.asserts.ENABLE_ASSERTS && !goog.isNumber(e) && goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(e), e], t, Array.prototype.slice.call(arguments, 2)), e;
      }, goog.asserts.assertString = function (e, t, r) {
        return goog.asserts.ENABLE_ASSERTS && !goog.isString(e) && goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(e), e], t, Array.prototype.slice.call(arguments, 2)), e;
      }, goog.asserts.assertFunction = function (e, t, r) {
        return goog.asserts.ENABLE_ASSERTS && !goog.isFunction(e) && goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(e), e], t, Array.prototype.slice.call(arguments, 2)), e;
      }, goog.asserts.assertObject = function (e, t, r) {
        return goog.asserts.ENABLE_ASSERTS && !goog.isObject(e) && goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(e), e], t, Array.prototype.slice.call(arguments, 2)), e;
      }, goog.asserts.assertArray = function (e, t, r) {
        return goog.asserts.ENABLE_ASSERTS && !goog.isArray(e) && goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(e), e], t, Array.prototype.slice.call(arguments, 2)), e;
      }, goog.asserts.assertBoolean = function (e, t, r) {
        return goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(e) && goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(e), e], t, Array.prototype.slice.call(arguments, 2)), e;
      }, goog.asserts.assertElement = function (e, t, r) {
        return !goog.asserts.ENABLE_ASSERTS || goog.isObject(e) && e.nodeType == goog.dom.NodeType.ELEMENT || goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(e), e], t, Array.prototype.slice.call(arguments, 2)), e;
      }, goog.asserts.assertInstanceof = function (e, t, r, o) {
        return !goog.asserts.ENABLE_ASSERTS || e instanceof t || goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(t), goog.asserts.getType_(e)], r, Array.prototype.slice.call(arguments, 3)), e;
      }, goog.asserts.assertObjectPrototypeIsIntact = function () {
        for (var e in Object.prototype) {
          goog.asserts.fail(e + " should not be enumerable in Object.prototype.");
        }
      }, goog.asserts.getType_ = function (e) {
        return e instanceof Function ? e.displayName || e.name || "unknown type name" : e instanceof Object ? e.constructor.displayName || e.constructor.name || Object.prototype.toString.call(e) : null === e ? "null" : _typeof(e);
      };
      var jspb = {
        Map: function Map(e, t) {
          this.arr_ = e, this.valueCtor_ = t, this.map_ = {}, this.arrClean = !0, 0 < this.arr_.length && this.loadFromArray_();
        }
      },
          vha,
          wha;
      jspb.Map.prototype.loadFromArray_ = function () {
        for (var e = 0; e < this.arr_.length; e++) {
          var t = this.arr_[e],
              r = t[0];
          this.map_[r.toString()] = new jspb.Map.Entry_(r, t[1]);
        }

        this.arrClean = !0;
      }, jspb.Map.prototype.toArray = function () {
        if (this.arrClean) {
          if (this.valueCtor_) {
            var e,
                t = this.map_;

            for (e in t) {
              if (Object.prototype.hasOwnProperty.call(t, e)) {
                var r = t[e].valueWrapper;
                r && r.toArray();
              }
            }
          }
        } else {
          for (this.arr_.length = 0, (t = this.stringKeys_()).sort(), e = 0; e < t.length; e++) {
            var o = this.map_[t[e]];
            (r = o.valueWrapper) && r.toArray(), this.arr_.push([o.key, o.value]);
          }

          this.arrClean = !0;
        }

        return this.arr_;
      }, jspb.Map.prototype.toObject = function (e, t) {
        for (var r = this.toArray(), o = [], s = 0; s < r.length; s++) {
          var i = this.map_[r[s][0].toString()];
          this.wrapEntry_(i);
          var a = i.valueWrapper;
          a ? (goog.asserts.assert(t), o.push([i.key, t(e, a)])) : o.push([i.key, i.value]);
        }

        return o;
      }, jspb.Map.fromObject = function (e, t, r) {
        t = new jspb.Map([], t);

        for (var o = 0; o < e.length; o++) {
          var s = e[o][0],
              i = r(e[o][1]);
          t.set(s, i);
        }

        return t;
      }, jspb.Map.ArrayIteratorIterable_ = function (e) {
        this.idx_ = 0, this.arr_ = e;
      }, jspb.Map.ArrayIteratorIterable_.prototype.next = function () {
        return this.idx_ < this.arr_.length ? {
          done: !1,
          value: this.arr_[this.idx_++]
        } : {
          done: !0,
          value: void 0
        };
      }, $jscomp.initSymbol(), "undefined" != typeof Symbol && ($jscomp.initSymbol(), $jscomp.initSymbolIterator(), jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator] = function () {
        return this;
      }), jspb.Map.prototype.getLength = function () {
        return this.stringKeys_().length;
      }, jspb.Map.prototype.clear = function () {
        this.map_ = {}, this.arrClean = !1;
      }, jspb.Map.prototype.del = function (e) {
        e = e.toString();
        var t = this.map_.hasOwnProperty(e);
        return delete this.map_[e], this.arrClean = !1, t;
      }, jspb.Map.prototype.getEntryList = function () {
        var e = [],
            t = this.stringKeys_();
        t.sort();

        for (var r = 0; r < t.length; r++) {
          var o = this.map_[t[r]];
          e.push([o.key, o.value]);
        }

        return e;
      }, jspb.Map.prototype.entries = function () {
        var e = [],
            t = this.stringKeys_();
        t.sort();

        for (var r = 0; r < t.length; r++) {
          var o = this.map_[t[r]];
          e.push([o.key, this.wrapEntry_(o)]);
        }

        return new jspb.Map.ArrayIteratorIterable_(e);
      }, jspb.Map.prototype.keys = function () {
        var e = [],
            t = this.stringKeys_();
        t.sort();

        for (var r = 0; r < t.length; r++) {
          e.push(this.map_[t[r]].key);
        }

        return new jspb.Map.ArrayIteratorIterable_(e);
      }, jspb.Map.prototype.values = function () {
        var e = [],
            t = this.stringKeys_();
        t.sort();

        for (var r = 0; r < t.length; r++) {
          e.push(this.wrapEntry_(this.map_[t[r]]));
        }

        return new jspb.Map.ArrayIteratorIterable_(e);
      }, jspb.Map.prototype.forEach = function (e, t) {
        var r = this.stringKeys_();
        r.sort();

        for (var o = 0; o < r.length; o++) {
          var s = this.map_[r[o]];
          e.call(t, this.wrapEntry_(s), s.key, this);
        }
      }, jspb.Map.prototype.set = function (e, t) {
        var r = new jspb.Map.Entry_(e);
        return this.valueCtor_ ? (r.valueWrapper = t, r.value = t.toArray()) : r.value = t, this.map_[e.toString()] = r, this.arrClean = !1, this;
      }, jspb.Map.prototype.wrapEntry_ = function (e) {
        return this.valueCtor_ ? (e.valueWrapper || (e.valueWrapper = new this.valueCtor_(e.value)), e.valueWrapper) : e.value;
      }, jspb.Map.prototype.get = function (e) {
        if (e = this.map_[e.toString()]) return this.wrapEntry_(e);
      }, jspb.Map.prototype.has = function (e) {
        return e.toString() in this.map_;
      }, jspb.Map.prototype.serializeBinary = function (e, t, r, o, s) {
        var i = this.stringKeys_();
        i.sort();

        for (var a = 0; a < i.length; a++) {
          var n = this.map_[i[a]];
          t.beginSubMessage(e), r.call(t, 1, n.key), this.valueCtor_ ? o.call(t, 2, this.wrapEntry_(n), s) : o.call(t, 2, n.value), t.endSubMessage();
        }
      }, jspb.Map.deserializeBinary = function (e, t, r, o, s, i) {
        for (var a = void 0; t.nextField() && !t.isEndGroup();) {
          var n = t.getFieldNumber();
          1 == n ? i = r.call(t) : 2 == n && (e.valueCtor_ ? (goog.asserts.assert(s), a = new e.valueCtor_(), o.call(t, a, s)) : a = o.call(t));
        }

        goog.asserts.assert(null != i), goog.asserts.assert(null != a), e.set(i, a);
      }, jspb.Map.prototype.stringKeys_ = function () {
        var e,
            t = this.map_,
            r = [];

        for (e in t) {
          Object.prototype.hasOwnProperty.call(t, e) && r.push(e);
        }

        return r;
      }, jspb.Map.Entry_ = function (e, t) {
        this.key = e, this.value = t, this.valueWrapper = void 0;
      }, goog.array = {}, goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE, goog.array.ASSUME_NATIVE_FUNCTIONS = !1, goog.array.peek = function (e) {
        return e[e.length - 1];
      }, goog.array.last = goog.array.peek, goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function (e, t, r) {
        return goog.asserts.assert(null != e.length), Array.prototype.indexOf.call(e, t, r);
      } : function (e, t, r) {
        if (r = null == r ? 0 : r < 0 ? Math.max(0, e.length + r) : r, goog.isString(e)) return goog.isString(t) && 1 == t.length ? e.indexOf(t, r) : -1;

        for (; r < e.length; r++) {
          if (r in e && e[r] === t) return r;
        }

        return -1;
      }, goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function (e, t, r) {
        return goog.asserts.assert(null != e.length), Array.prototype.lastIndexOf.call(e, t, null == r ? e.length - 1 : r);
      } : function (e, t, r) {
        if ((r = null == r ? e.length - 1 : r) < 0 && (r = Math.max(0, e.length + r)), goog.isString(e)) return goog.isString(t) && 1 == t.length ? e.lastIndexOf(t, r) : -1;

        for (; 0 <= r; r--) {
          if (r in e && e[r] === t) return r;
        }

        return -1;
      }, goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function (e, t, r) {
        goog.asserts.assert(null != e.length), Array.prototype.forEach.call(e, t, r);
      } : function (e, t, r) {
        for (var o = e.length, s = goog.isString(e) ? e.split("") : e, i = 0; i < o; i++) {
          i in s && t.call(r, s[i], i, e);
        }
      }, goog.array.forEachRight = function (e, t, r) {
        var o = e.length,
            s = goog.isString(e) ? e.split("") : e;

        for (o = o - 1; 0 <= o; --o) {
          o in s && t.call(r, s[o], o, e);
        }
      }, goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function (e, t, r) {
        return goog.asserts.assert(null != e.length), Array.prototype.filter.call(e, t, r);
      } : function (e, t, r) {
        for (var o = e.length, s = [], i = 0, a = goog.isString(e) ? e.split("") : e, n = 0; n < o; n++) {
          if (n in a) {
            var p = a[n];
            t.call(r, p, n, e) && (s[i++] = p);
          }
        }

        return s;
      }, goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function (e, t, r) {
        return goog.asserts.assert(null != e.length), Array.prototype.map.call(e, t, r);
      } : function (e, t, r) {
        for (var o = e.length, s = Array(o), i = goog.isString(e) ? e.split("") : e, a = 0; a < o; a++) {
          a in i && (s[a] = t.call(r, i[a], a, e));
        }

        return s;
      }, goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function (e, t, r, o) {
        return goog.asserts.assert(null != e.length), o && (t = goog.bind(t, o)), Array.prototype.reduce.call(e, t, r);
      } : function (r, o, e, s) {
        var i = e;
        return goog.array.forEach(r, function (e, t) {
          i = o.call(s, i, e, t, r);
        }), i;
      }, goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function (e, t, r, o) {
        return goog.asserts.assert(null != e.length), goog.asserts.assert(null != t), o && (t = goog.bind(t, o)), Array.prototype.reduceRight.call(e, t, r);
      } : function (r, o, e, s) {
        var i = e;
        return goog.array.forEachRight(r, function (e, t) {
          i = o.call(s, i, e, t, r);
        }), i;
      }, goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function (e, t, r) {
        return goog.asserts.assert(null != e.length), Array.prototype.some.call(e, t, r);
      } : function (e, t, r) {
        for (var o = e.length, s = goog.isString(e) ? e.split("") : e, i = 0; i < o; i++) {
          if (i in s && t.call(r, s[i], i, e)) return !0;
        }

        return !1;
      }, goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function (e, t, r) {
        return goog.asserts.assert(null != e.length), Array.prototype.every.call(e, t, r);
      } : function (e, t, r) {
        for (var o = e.length, s = goog.isString(e) ? e.split("") : e, i = 0; i < o; i++) {
          if (i in s && !t.call(r, s[i], i, e)) return !1;
        }

        return !0;
      }, goog.array.count = function (e, o, s) {
        var i = 0;
        return goog.array.forEach(e, function (e, t, r) {
          o.call(s, e, t, r) && ++i;
        }, s), i;
      }, goog.array.find = function (e, t, r) {
        return (t = goog.array.findIndex(e, t, r)) < 0 ? null : goog.isString(e) ? e.charAt(t) : e[t];
      }, goog.array.findIndex = function (e, t, r) {
        for (var o = e.length, s = goog.isString(e) ? e.split("") : e, i = 0; i < o; i++) {
          if (i in s && t.call(r, s[i], i, e)) return i;
        }

        return -1;
      }, goog.array.findRight = function (e, t, r) {
        return (t = goog.array.findIndexRight(e, t, r)) < 0 ? null : goog.isString(e) ? e.charAt(t) : e[t];
      }, goog.array.findIndexRight = function (e, t, r) {
        var o = e.length,
            s = goog.isString(e) ? e.split("") : e;

        for (o = o - 1; 0 <= o; o--) {
          if (o in s && t.call(r, s[o], o, e)) return o;
        }

        return -1;
      }, goog.array.contains = function (e, t) {
        return 0 <= goog.array.indexOf(e, t);
      }, goog.array.isEmpty = function (e) {
        return 0 == e.length;
      }, goog.array.clear = function (e) {
        if (!goog.isArray(e)) for (var t = e.length - 1; 0 <= t; t--) {
          delete e[t];
        }
        e.length = 0;
      }, goog.array.insert = function (e, t) {
        goog.array.contains(e, t) || e.push(t);
      }, goog.array.insertAt = function (e, t, r) {
        goog.array.splice(e, r, 0, t);
      }, goog.array.insertArrayAt = function (e, t, r) {
        goog.partial(goog.array.splice, e, r, 0).apply(null, t);
      }, goog.array.insertBefore = function (e, t, r) {
        var o;
        2 == arguments.length || (o = goog.array.indexOf(e, r)) < 0 ? e.push(t) : goog.array.insertAt(e, t, o);
      }, goog.array.remove = function (e, t) {
        var r,
            o = goog.array.indexOf(e, t);
        return (r = 0 <= o) && goog.array.removeAt(e, o), r;
      }, goog.array.removeAt = function (e, t) {
        return goog.asserts.assert(null != e.length), 1 == Array.prototype.splice.call(e, t, 1).length;
      }, goog.array.removeIf = function (e, t, r) {
        return 0 <= (t = goog.array.findIndex(e, t, r)) && (goog.array.removeAt(e, t), !0);
      }, goog.array.removeAllIf = function (r, o, s) {
        var i = 0;
        return goog.array.forEachRight(r, function (e, t) {
          o.call(s, e, t, r) && goog.array.removeAt(r, t) && i++;
        }), i;
      }, goog.array.concat = function (e) {
        return Array.prototype.concat.apply(Array.prototype, arguments);
      }, goog.array.join = function (e) {
        return Array.prototype.concat.apply(Array.prototype, arguments);
      }, goog.array.toArray = function (e) {
        var t = e.length;

        if (0 < t) {
          for (var r = Array(t), o = 0; o < t; o++) {
            r[o] = e[o];
          }

          return r;
        }

        return [];
      }, goog.array.clone = goog.array.toArray, goog.array.extend = function (e, t) {
        for (var r = 1; r < arguments.length; r++) {
          var o = arguments[r];

          if (goog.isArrayLike(o)) {
            var s = e.length || 0,
                i = o.length || 0;
            e.length = s + i;

            for (var a = 0; a < i; a++) {
              e[s + a] = o[a];
            }
          } else e.push(o);
        }
      }, goog.array.splice = function (e, t, r, o) {
        return goog.asserts.assert(null != e.length), Array.prototype.splice.apply(e, goog.array.slice(arguments, 1));
      }, goog.array.slice = function (e, t, r) {
        return goog.asserts.assert(null != e.length), arguments.length <= 2 ? Array.prototype.slice.call(e, t) : Array.prototype.slice.call(e, t, r);
      }, goog.array.removeDuplicates = function (e, t, r) {
        t = t || e;

        var o = function o(e) {
          return goog.isObject(e) ? "o" + goog.getUid(e) : _typeof(e).charAt(0) + e;
        };

        r = r || o;
        o = {};

        for (var s = 0, i = 0; i < e.length;) {
          var a = e[i++],
              n = r(a);
          Object.prototype.hasOwnProperty.call(o, n) || (o[n] = !0, t[s++] = a);
        }

        t.length = s;
      }, goog.array.binarySearch = function (e, t, r) {
        return goog.array.binarySearch_(e, r || goog.array.defaultCompare, !1, t);
      }, goog.array.binarySelect = function (e, t, r) {
        return goog.array.binarySearch_(e, t, !0, void 0, r);
      }, goog.array.binarySearch_ = function (e, t, r, o, s) {
        for (var i, a = 0, n = e.length; a < n;) {
          var p,
              g = a + n >> 1;
          0 < (p = r ? t.call(s, e[g], g, e) : t(o, e[g])) ? a = g + 1 : (n = g, i = !p);
        }

        return i ? a : ~a;
      }, goog.array.sort = function (e, t) {
        e.sort(t || goog.array.defaultCompare);
      }, goog.array.stableSort = function (e, t) {
        for (var r = 0; r < e.length; r++) {
          e[r] = {
            index: r,
            value: e[r]
          };
        }

        var o = t || goog.array.defaultCompare;

        for (goog.array.sort(e, function (e, t) {
          return o(e.value, t.value) || e.index - t.index;
        }), r = 0; r < e.length; r++) {
          e[r] = e[r].value;
        }
      }, goog.array.sortByKey = function (e, r, t) {
        var o = t || goog.array.defaultCompare;
        goog.array.sort(e, function (e, t) {
          return o(r(e), r(t));
        });
      }, goog.array.sortObjectsByKey = function (e, t, r) {
        goog.array.sortByKey(e, function (e) {
          return e[t];
        }, r);
      }, goog.array.isSorted = function (e, t, r) {
        t = t || goog.array.defaultCompare;

        for (var o = 1; o < e.length; o++) {
          var s = t(e[o - 1], e[o]);
          if (0 < s || 0 == s && r) return !1;
        }

        return !0;
      }, goog.array.equals = function (e, t, r) {
        if (!goog.isArrayLike(e) || !goog.isArrayLike(t) || e.length != t.length) return !1;
        var o = e.length;
        r = r || goog.array.defaultCompareEquality;

        for (var s = 0; s < o; s++) {
          if (!r(e[s], t[s])) return !1;
        }

        return !0;
      }, goog.array.compare3 = function (e, t, r) {
        r = r || goog.array.defaultCompare;

        for (var o = Math.min(e.length, t.length), s = 0; s < o; s++) {
          var i = r(e[s], t[s]);
          if (0 != i) return i;
        }

        return goog.array.defaultCompare(e.length, t.length);
      }, goog.array.defaultCompare = function (e, t) {
        return t < e ? 1 : e < t ? -1 : 0;
      }, goog.array.inverseDefaultCompare = function (e, t) {
        return -goog.array.defaultCompare(e, t);
      }, goog.array.defaultCompareEquality = function (e, t) {
        return e === t;
      }, goog.array.binaryInsert = function (e, t, r) {
        return (r = goog.array.binarySearch(e, t, r)) < 0 && (goog.array.insertAt(e, t, -(r + 1)), !0);
      }, goog.array.binaryRemove = function (e, t, r) {
        return 0 <= (t = goog.array.binarySearch(e, t, r)) && goog.array.removeAt(e, t);
      }, goog.array.bucket = function (e, t, r) {
        for (var o = {}, s = 0; s < e.length; s++) {
          var i = e[s],
              a = t.call(r, i, s, e);
          goog.isDef(a) && (o[a] || (o[a] = [])).push(i);
        }

        return o;
      }, goog.array.toObject = function (r, o, s) {
        var i = {};
        return goog.array.forEach(r, function (e, t) {
          i[o.call(s, e, t, r)] = e;
        }), i;
      }, goog.array.range = function (e, t, r) {
        var o = [],
            s = 0,
            i = e;
        if (void 0 !== t && (s = e, i = t), (r = r || 1) * (i - s) < 0) return [];
        if (0 < r) for (e = s; e < i; e += r) {
          o.push(e);
        } else for (e = s; i < e; e += r) {
          o.push(e);
        }
        return o;
      }, goog.array.repeat = function (e, t) {
        for (var r = [], o = 0; o < t; o++) {
          r[o] = e;
        }

        return r;
      }, goog.array.flatten = function (e) {
        for (var t = [], r = 0; r < arguments.length; r++) {
          var o = arguments[r];
          if (goog.isArray(o)) for (var s = 0; s < o.length; s += 8192) {
            for (var i = goog.array.slice(o, s, s + 8192), a = (i = goog.array.flatten.apply(null, i), 0); a < i.length; a++) {
              t.push(i[a]);
            }
          } else t.push(o);
        }

        return t;
      }, goog.array.rotate = function (e, t) {
        return goog.asserts.assert(null != e.length), e.length && (0 < (t %= e.length) ? Array.prototype.unshift.apply(e, e.splice(-t, t)) : t < 0 && Array.prototype.push.apply(e, e.splice(0, -t))), e;
      }, goog.array.moveItem = function (e, t, r) {
        goog.asserts.assert(0 <= t && t < e.length), goog.asserts.assert(0 <= r && r < e.length), t = Array.prototype.splice.call(e, t, 1), Array.prototype.splice.call(e, r, 0, t[0]);
      }, goog.array.zip = function (e) {
        if (!arguments.length) return [];

        for (var t = [], r = e.length, o = 1; o < arguments.length; o++) {
          arguments[o].length < r && (r = arguments[o].length);
        }

        for (o = 0; o < r; o++) {
          for (var s = [], i = 0; i < arguments.length; i++) {
            s.push(arguments[i][o]);
          }

          t.push(s);
        }

        return t;
      }, goog.array.shuffle = function (e, t) {
        for (var r = t || Math.random, o = e.length - 1; 0 < o; o--) {
          var s = Math.floor(r() * (o + 1)),
              i = e[o];
          e[o] = e[s], e[s] = i;
        }
      }, goog.array.copyByIndex = function (t, e) {
        var r = [];
        return goog.array.forEach(e, function (e) {
          r.push(t[e]);
        }), r;
      }, goog.crypt = {}, goog.crypt.stringToByteArray = function (e) {
        for (var t = [], r = 0, o = 0; o < e.length; o++) {
          for (var s = e.charCodeAt(o); 255 < s;) {
            t[r++] = 255 & s, s >>= 8;
          }

          t[r++] = s;
        }

        return t;
      }, goog.crypt.byteArrayToString = function (e) {
        if (e.length <= 8192) return String.fromCharCode.apply(null, e);

        for (var t = "", r = 0; r < e.length; r += 8192) {
          var o = goog.array.slice(e, r, r + 8192);
          t = t + String.fromCharCode.apply(null, o);
        }

        return t;
      }, goog.crypt.byteArrayToHex = function (e) {
        return goog.array.map(e, function (e) {
          return 1 < (e = e.toString(16)).length ? e : "0" + e;
        }).join("");
      }, goog.crypt.hexToByteArray = function (e) {
        goog.asserts.assert(0 == e.length % 2, "Key string length must be multiple of 2");

        for (var t = [], r = 0; r < e.length; r += 2) {
          t.push(parseInt(e.substring(r, r + 2), 16));
        }

        return t;
      }, goog.crypt.stringToUtf8ByteArray = function (e) {
        for (var t = [], r = 0, o = 0; o < e.length; o++) {
          var s = e.charCodeAt(o);
          s < 128 ? t[r++] = s : (s < 2048 ? t[r++] = s >> 6 | 192 : (55296 == (64512 & s) && o + 1 < e.length && 56320 == (64512 & e.charCodeAt(o + 1)) ? (s = 65536 + ((1023 & s) << 10) + (1023 & e.charCodeAt(++o)), t[r++] = s >> 18 | 240, t[r++] = s >> 12 & 63 | 128) : t[r++] = s >> 12 | 224, t[r++] = s >> 6 & 63 | 128), t[r++] = 63 & s | 128);
        }

        return t;
      }, goog.crypt.utf8ByteArrayToString = function (e) {
        for (var t = [], r = 0, o = 0; r < e.length;) {
          if ((a = e[r++]) < 128) t[o++] = String.fromCharCode(a);else if (191 < a && a < 224) {
            var s = e[r++];
            t[o++] = String.fromCharCode((31 & a) << 6 | 63 & s);
          } else if (239 < a && a < 365) {
            s = e[r++];
            var i = e[r++],
                a = ((7 & a) << 18 | (63 & s) << 12 | (63 & i) << 6 | 63 & e[r++]) - 65536;
            t[o++] = String.fromCharCode(55296 + (a >> 10)), t[o++] = String.fromCharCode(56320 + (1023 & a));
          } else s = e[r++], i = e[r++], t[o++] = String.fromCharCode((15 & a) << 12 | (63 & s) << 6 | 63 & i);
        }

        return t.join("");
      }, goog.crypt.xorByteArray = function (e, t) {
        goog.asserts.assert(e.length == t.length, "XOR array lengths must match");

        for (var r = [], o = 0; o < e.length; o++) {
          r.push(e[o] ^ t[o]);
        }

        return r;
      }, goog.labs = {}, goog.labs.userAgent = {}, goog.labs.userAgent.util = {}, goog.labs.userAgent.util.getNativeUserAgentString_ = function () {
        var e = goog.labs.userAgent.util.getNavigator_();
        return e && (e = e.userAgent) ? e : "";
      }, goog.labs.userAgent.util.getNavigator_ = function () {
        return goog.global.navigator;
      }, goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_(), goog.labs.userAgent.util.setUserAgent = function (e) {
        goog.labs.userAgent.util.userAgent_ = e || goog.labs.userAgent.util.getNativeUserAgentString_();
      }, goog.labs.userAgent.util.getUserAgent = function () {
        return goog.labs.userAgent.util.userAgent_;
      }, goog.labs.userAgent.util.matchUserAgent = function (e) {
        var t = goog.labs.userAgent.util.getUserAgent();
        return goog.string.contains(t, e);
      }, goog.labs.userAgent.util.matchUserAgentIgnoreCase = function (e) {
        var t = goog.labs.userAgent.util.getUserAgent();
        return goog.string.caseInsensitiveContains(t, e);
      }, goog.labs.userAgent.util.extractVersionTuples = function (e) {
        for (var t, r = RegExp("(\\w[\\w ]+)/([^\\s]+)\\s*(?:\\((.*?)\\))?", "g"), o = []; t = r.exec(e);) {
          o.push([t[1], t[2], t[3] || void 0]);
        }

        return o;
      }, goog.labs.userAgent.platform = {}, goog.labs.userAgent.platform.isAndroid = function () {
        return goog.labs.userAgent.util.matchUserAgent("Android");
      }, goog.labs.userAgent.platform.isIpod = function () {
        return goog.labs.userAgent.util.matchUserAgent("iPod");
      }, goog.labs.userAgent.platform.isIphone = function () {
        return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
      }, goog.labs.userAgent.platform.isIpad = function () {
        return goog.labs.userAgent.util.matchUserAgent("iPad");
      }, goog.labs.userAgent.platform.isIos = function () {
        return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
      }, goog.labs.userAgent.platform.isMacintosh = function () {
        return goog.labs.userAgent.util.matchUserAgent("Macintosh");
      }, goog.labs.userAgent.platform.isLinux = function () {
        return goog.labs.userAgent.util.matchUserAgent("Linux");
      }, goog.labs.userAgent.platform.isWindows = function () {
        return goog.labs.userAgent.util.matchUserAgent("Windows");
      }, goog.labs.userAgent.platform.isChromeOS = function () {
        return goog.labs.userAgent.util.matchUserAgent("CrOS");
      }, goog.labs.userAgent.platform.getVersion = function () {
        var e = goog.labs.userAgent.util.getUserAgent(),
            t = "";
        return goog.labs.userAgent.platform.isWindows() ? t = (e = (t = /Windows (?:NT|Phone) ([0-9.]+)/).exec(e)) ? e[1] : "0.0" : goog.labs.userAgent.platform.isIos() ? t = (e = (t = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/).exec(e)) && e[1].replace(/_/g, ".") : goog.labs.userAgent.platform.isMacintosh() ? t = (e = (t = /Mac OS X ([0-9_.]+)/).exec(e)) ? e[1].replace(/_/g, ".") : "10" : goog.labs.userAgent.platform.isAndroid() ? t = (e = (t = /Android\s+([^\);]+)(\)|;)/).exec(e)) && e[1] : goog.labs.userAgent.platform.isChromeOS() && (t = (e = (t = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/).exec(e)) && e[1]), t || "";
      }, goog.labs.userAgent.platform.isVersionOrHigher = function (e) {
        return 0 <= goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), e);
      }, goog.object = {}, goog.object.forEach = function (e, t, r) {
        for (var o in e) {
          t.call(r, e[o], o, e);
        }
      }, goog.object.filter = function (e, t, r) {
        var o,
            s = {};

        for (o in e) {
          t.call(r, e[o], o, e) && (s[o] = e[o]);
        }

        return s;
      }, goog.object.map = function (e, t, r) {
        var o,
            s = {};

        for (o in e) {
          s[o] = t.call(r, e[o], o, e);
        }

        return s;
      }, goog.object.some = function (e, t, r) {
        for (var o in e) {
          if (t.call(r, e[o], o, e)) return !0;
        }

        return !1;
      }, goog.object.every = function (e, t, r) {
        for (var o in e) {
          if (!t.call(r, e[o], o, e)) return !1;
        }

        return !0;
      }, goog.object.getCount = function (e) {
        var t,
            r = 0;

        for (t in e) {
          r++;
        }

        return r;
      }, goog.object.getAnyKey = function (e) {
        for (var t in e) {
          return t;
        }
      }, goog.object.getAnyValue = function (e) {
        for (var t in e) {
          return e[t];
        }
      }, goog.object.contains = function (e, t) {
        return goog.object.containsValue(e, t);
      }, goog.object.getValues = function (e) {
        var t,
            r = [],
            o = 0;

        for (t in e) {
          r[o++] = e[t];
        }

        return r;
      }, goog.object.getKeys = function (e) {
        var t,
            r = [],
            o = 0;

        for (t in e) {
          r[o++] = t;
        }

        return r;
      }, goog.object.getValueByKeys = function (e, t) {
        for (var r = (o = goog.isArrayLike(t)) ? t : arguments, o = o ? 0 : 1; o < r.length && (e = e[r[o]], goog.isDef(e)); o++) {
          ;
        }

        return e;
      }, goog.object.containsKey = function (e, t) {
        return null !== e && t in e;
      }, goog.object.containsValue = function (e, t) {
        for (var r in e) {
          if (e[r] == t) return !0;
        }

        return !1;
      }, goog.object.findKey = function (e, t, r) {
        for (var o in e) {
          if (t.call(r, e[o], o, e)) return o;
        }
      }, goog.object.findValue = function (e, t, r) {
        return (t = goog.object.findKey(e, t, r)) && e[t];
      }, goog.object.isEmpty = function (e) {
        for (var t in e) {
          return !1;
        }

        return !0;
      }, goog.object.clear = function (e) {
        for (var t in e) {
          delete e[t];
        }
      }, goog.object.remove = function (e, t) {
        var r;
        return (r = t in e) && delete e[t], r;
      }, goog.object.add = function (e, t, r) {
        if (null !== e && t in e) throw Error('The object already contains the key "' + t + '"');
        goog.object.set(e, t, r);
      }, goog.object.get = function (e, t, r) {
        return null !== e && t in e ? e[t] : r;
      }, goog.object.set = function (e, t, r) {
        e[t] = r;
      }, goog.object.setIfUndefined = function (e, t, r) {
        return t in e ? e[t] : e[t] = r;
      }, goog.object.setWithReturnValueIfNotSet = function (e, t, r) {
        return t in e ? e[t] : (r = r(), e[t] = r);
      }, goog.object.equals = function (e, t) {
        for (var r in e) {
          if (!(r in t) || e[r] !== t[r]) return !1;
        }

        for (r in t) {
          if (!(r in e)) return !1;
        }

        return !0;
      }, goog.object.clone = function (e) {
        var t,
            r = {};

        for (t in e) {
          r[t] = e[t];
        }

        return r;
      }, goog.object.unsafeClone = function (e) {
        if ("object" == (r = goog.typeOf(e)) || "array" == r) {
          if (goog.isFunction(e.clone)) return e.clone();
          var t,
              r = "array" == r ? [] : {};

          for (t in e) {
            r[t] = goog.object.unsafeClone(e[t]);
          }

          return r;
        }

        return e;
      }, goog.object.transpose = function (e) {
        var t,
            r = {};

        for (t in e) {
          r[e[t]] = t;
        }

        return r;
      }, goog.object.PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "), goog.object.extend = function (e, t) {
        for (var r, o, s = 1; s < arguments.length; s++) {
          for (r in o = arguments[s]) {
            e[r] = o[r];
          }

          for (var i = 0; i < goog.object.PROTOTYPE_FIELDS_.length; i++) {
            r = goog.object.PROTOTYPE_FIELDS_[i], Object.prototype.hasOwnProperty.call(o, r) && (e[r] = o[r]);
          }
        }
      }, goog.object.create = function (e) {
        var t = arguments.length;
        if (1 == t && goog.isArray(e)) return goog.object.create.apply(null, e);
        if (t % 2) throw Error("Uneven number of arguments");

        for (var r = {}, o = 0; o < t; o += 2) {
          r[arguments[o]] = arguments[o + 1];
        }

        return r;
      }, goog.object.createSet = function (e) {
        var t = arguments.length;
        if (1 == t && goog.isArray(e)) return goog.object.createSet.apply(null, e);

        for (var r = {}, o = 0; o < t; o++) {
          r[arguments[o]] = !0;
        }

        return r;
      }, goog.object.createImmutableView = function (e) {
        var t = e;
        return Object.isFrozen && !Object.isFrozen(e) && (t = Object.create(e), Object.freeze(t)), t;
      }, goog.object.isImmutableView = function (e) {
        return !!Object.isFrozen && Object.isFrozen(e);
      }, goog.labs.userAgent.browser = {}, goog.labs.userAgent.browser.matchOpera_ = function () {
        return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
      }, goog.labs.userAgent.browser.matchIE_ = function () {
        return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
      }, goog.labs.userAgent.browser.matchEdge_ = function () {
        return goog.labs.userAgent.util.matchUserAgent("Edge");
      }, goog.labs.userAgent.browser.matchFirefox_ = function () {
        return goog.labs.userAgent.util.matchUserAgent("Firefox");
      }, goog.labs.userAgent.browser.matchSafari_ = function () {
        return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
      }, goog.labs.userAgent.browser.matchCoast_ = function () {
        return goog.labs.userAgent.util.matchUserAgent("Coast");
      }, goog.labs.userAgent.browser.matchIosWebview_ = function () {
        return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
      }, goog.labs.userAgent.browser.matchChrome_ = function () {
        return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchEdge_();
      }, goog.labs.userAgent.browser.matchAndroidBrowser_ = function () {
        return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
      }, goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_, goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_, goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_, goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_, goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_, goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_, goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_, goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_, goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_, goog.labs.userAgent.browser.isSilk = function () {
        return goog.labs.userAgent.util.matchUserAgent("Silk");
      }, goog.labs.userAgent.browser.getVersion = function () {
        function e(e) {
          return e = goog.array.find(e, o), r[e] || "";
        }

        var t = goog.labs.userAgent.util.getUserAgent();
        if (goog.labs.userAgent.browser.isIE()) return goog.labs.userAgent.browser.getIEVersion_(t);
        t = goog.labs.userAgent.util.extractVersionTuples(t);
        var r = {};
        goog.array.forEach(t, function (e) {
          r[e[0]] = e[1];
        });
        var o = goog.partial(goog.object.containsKey, r);
        return goog.labs.userAgent.browser.isOpera() ? e(["Version", "Opera", "OPR"]) : goog.labs.userAgent.browser.isEdge() ? e(["Edge"]) : goog.labs.userAgent.browser.isChrome() ? e(["Chrome", "CriOS"]) : (t = t[2]) && t[1] || "";
      }, goog.labs.userAgent.browser.isVersionOrHigher = function (e) {
        return 0 <= goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), e);
      }, goog.labs.userAgent.browser.getIEVersion_ = function (e) {
        if ((t = /rv: *([\d\.]*)/.exec(e)) && t[1]) return t[1];
        var t = "",
            r = /MSIE +([\d\.]+)/.exec(e);
        if (r && r[1]) if (e = /Trident\/(\d.\d)/.exec(e), "7.0" == r[1]) {
          if (e && e[1]) switch (e[1]) {
            case "4.0":
              t = "8.0";
              break;

            case "5.0":
              t = "9.0";
              break;

            case "6.0":
              t = "10.0";
              break;

            case "7.0":
              t = "11.0";
          } else t = "7.0";
        } else t = r[1];
        return t;
      }, goog.labs.userAgent.engine = {}, goog.labs.userAgent.engine.isPresto = function () {
        return goog.labs.userAgent.util.matchUserAgent("Presto");
      }, goog.labs.userAgent.engine.isTrident = function () {
        return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
      }, goog.labs.userAgent.engine.isEdge = function () {
        return goog.labs.userAgent.util.matchUserAgent("Edge");
      }, goog.labs.userAgent.engine.isWebKit = function () {
        return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
      }, goog.labs.userAgent.engine.isGecko = function () {
        return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
      }, goog.labs.userAgent.engine.getVersion = function () {
        if (t = goog.labs.userAgent.util.getUserAgent()) {
          var e,
              t = goog.labs.userAgent.util.extractVersionTuples(t),
              r = goog.labs.userAgent.engine.getEngineTuple_(t);
          if (r) return "Gecko" == r[0] ? goog.labs.userAgent.engine.getVersionForKey_(t, "Firefox") : r[1];
          if ((t = t[0]) && (e = t[2]) && (e = /Trident\/([^\s;]+)/.exec(e))) return e[1];
        }

        return "";
      }, goog.labs.userAgent.engine.getEngineTuple_ = function (e) {
        if (!goog.labs.userAgent.engine.isEdge()) return e[1];

        for (var t = 0; t < e.length; t++) {
          var r = e[t];
          if ("Edge" == r[0]) return r;
        }
      }, goog.labs.userAgent.engine.isVersionOrHigher = function (e) {
        return 0 <= goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), e);
      }, goog.labs.userAgent.engine.getVersionForKey_ = function (e, t) {
        var r = goog.array.find(e, function (e) {
          return t == e[0];
        });
        return r && r[1] || "";
      }, goog.userAgent = {}, goog.userAgent.ASSUME_IE = !1, goog.userAgent.ASSUME_EDGE = !1, goog.userAgent.ASSUME_GECKO = !1, goog.userAgent.ASSUME_WEBKIT = !1, goog.userAgent.ASSUME_MOBILE_WEBKIT = !1, goog.userAgent.ASSUME_OPERA = !1, goog.userAgent.ASSUME_ANY_VERSION = !1, goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA, goog.userAgent.getUserAgentString = function () {
        return goog.labs.userAgent.util.getUserAgent();
      }, goog.userAgent.getNavigator = function () {
        return goog.global.navigator || null;
      }, goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera(), goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE(), goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge(), goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE, goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko(), goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit(), goog.userAgent.isMobile_ = function () {
        return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
      }, goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_(), goog.userAgent.SAFARI = goog.userAgent.WEBKIT, goog.userAgent.determinePlatform_ = function () {
        var e = goog.userAgent.getNavigator();
        return e && e.platform || "";
      }, goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_(), goog.userAgent.ASSUME_MAC = !1, goog.userAgent.ASSUME_WINDOWS = !1, goog.userAgent.ASSUME_LINUX = !1, goog.userAgent.ASSUME_X11 = !1, goog.userAgent.ASSUME_ANDROID = !1, goog.userAgent.ASSUME_IPHONE = !1, goog.userAgent.ASSUME_IPAD = !1, goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD, goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh(), goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows(), goog.userAgent.isLegacyLinux_ = function () {
        return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
      }, goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_(), goog.userAgent.isX11_ = function () {
        var e = goog.userAgent.getNavigator();
        return !!e && goog.string.contains(e.appVersion || "", "X11");
      }, goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_(), goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid(), goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone(), goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad(), goog.userAgent.operaVersion_ = function () {
        var t = goog.global.opera.version;

        try {
          return t();
        } catch (e) {
          return t;
        }
      }, goog.userAgent.determineVersion_ = function () {
        if (goog.userAgent.OPERA && goog.global.opera) return goog.userAgent.operaVersion_();
        var e = "",
            t = goog.userAgent.getVersionRegexResult_();
        return t && (e = t ? t[1] : ""), goog.userAgent.IE && (t = goog.userAgent.getDocumentMode_()) > parseFloat(e) ? String(t) : e;
      }, goog.userAgent.getVersionRegexResult_ = function () {
        var e = goog.userAgent.getUserAgentString();
        return goog.userAgent.GECKO ? /rv\:([^\);]+)(\)|;)/.exec(e) : goog.userAgent.EDGE ? /Edge\/([\d\.]+)/.exec(e) : goog.userAgent.IE ? /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(e) : goog.userAgent.WEBKIT ? /WebKit\/(\S+)/.exec(e) : void 0;
      }, goog.userAgent.getDocumentMode_ = function () {
        var e = goog.global.document;
        return e ? e.documentMode : void 0;
      }, goog.userAgent.VERSION = goog.userAgent.determineVersion_(), goog.userAgent.compare = function (e, t) {
        return goog.string.compareVersions(e, t);
      }, goog.userAgent.isVersionOrHigherCache_ = {}, goog.userAgent.isVersionOrHigher = function (e) {
        return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[e] || (goog.userAgent.isVersionOrHigherCache_[e] = 0 <= goog.string.compareVersions(goog.userAgent.VERSION, e));
      }, goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher, goog.userAgent.isDocumentModeOrHigher = function (e) {
        return Number(goog.userAgent.DOCUMENT_MODE) >= e;
      }, goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher, goog.userAgent.DOCUMENT_MODE = (vha = goog.global.document, wha = goog.userAgent.getDocumentMode_(), vha && goog.userAgent.IE ? wha || ("CSS1Compat" == vha.compatMode ? parseInt(goog.userAgent.VERSION, 10) : 5) : void 0), goog.userAgent.product = {}, goog.userAgent.product.ASSUME_FIREFOX = !1, goog.userAgent.product.ASSUME_IPHONE = !1, goog.userAgent.product.ASSUME_IPAD = !1, goog.userAgent.product.ASSUME_ANDROID = !1, goog.userAgent.product.ASSUME_CHROME = !1, goog.userAgent.product.ASSUME_SAFARI = !1, goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI, goog.userAgent.product.OPERA = goog.userAgent.OPERA, goog.userAgent.product.IE = goog.userAgent.IE, goog.userAgent.product.EDGE = goog.userAgent.EDGE, goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox(), goog.userAgent.product.isIphoneOrIpod_ = function () {
        return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
      }, goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_(), goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad(), goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser(), goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome(), goog.userAgent.product.isSafariDesktop_ = function () {
        return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
      }, goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_(), goog.crypt.base64 = {}, goog.crypt.base64.byteToCharMap_ = null, goog.crypt.base64.charToByteMap_ = null, goog.crypt.base64.byteToCharMapWebSafe_ = null, goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/=", goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.", goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ = goog.userAgent.GECKO || goog.userAgent.WEBKIT && !goog.userAgent.product.SAFARI || goog.userAgent.OPERA, goog.crypt.base64.HAS_NATIVE_ENCODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || "function" == typeof goog.global.btoa, goog.crypt.base64.HAS_NATIVE_DECODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || !goog.userAgent.product.SAFARI && !goog.userAgent.IE && "function" == typeof goog.global.atob, goog.crypt.base64.encodeByteArray = function (e, t) {
        goog.asserts.assert(goog.isArrayLike(e), "encodeByteArray takes an array as a parameter"), goog.crypt.base64.init_();

        for (var r = t ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_, o = [], s = 0; s < e.length; s += 3) {
          var i = e[s],
              a = s + 1 < e.length,
              n = a ? e[s + 1] : 0,
              p = s + 2 < e.length,
              g = i >> 2,
              u = (i = (3 & i) << 4 | n >> 4, n = (15 & n) << 2 | (u = p ? e[s + 2] : 0) >> 6, 63 & u);
          p || (u = 64, a || (n = 64)), o.push(r[g], r[i], r[n], r[u]);
        }

        return o.join("");
      }, goog.crypt.base64.encodeString = function (e, t) {
        return goog.crypt.base64.HAS_NATIVE_ENCODE_ && !t ? goog.global.btoa(e) : goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(e), t);
      }, goog.crypt.base64.decodeString = function (e, t) {
        if (goog.crypt.base64.HAS_NATIVE_DECODE_ && !t) return goog.global.atob(e);
        var r = "";
        return goog.crypt.base64.decodeStringInternal_(e, function (e) {
          r += String.fromCharCode(e);
        }), r;
      }, goog.crypt.base64.decodeStringToByteArray = function (e, t) {
        var r = [];
        return goog.crypt.base64.decodeStringInternal_(e, function (e) {
          r.push(e);
        }), r;
      }, goog.crypt.base64.decodeStringToUint8Array = function (e) {
        goog.asserts.assert(!goog.userAgent.IE || goog.userAgent.isVersionOrHigher("10"), "Browser does not support typed arrays");
        var t = new Uint8Array(Math.ceil(3 * e.length / 4)),
            r = 0;
        return goog.crypt.base64.decodeStringInternal_(e, function (e) {
          t[r++] = e;
        }), t.subarray(0, r);
      }, goog.crypt.base64.decodeStringInternal_ = function (o, e) {
        function t(e) {
          for (; s < o.length;) {
            var t = o.charAt(s++),
                r = goog.crypt.base64.charToByteMap_[t];
            if (null != r) return r;
            if (!goog.string.isEmptyOrWhitespace(t)) throw Error("Unknown base64 encoding at char: " + t);
          }

          return e;
        }

        goog.crypt.base64.init_();

        for (var s = 0;;) {
          var r = t(-1),
              i = t(0),
              a = t(64),
              n = t(64);
          if (64 === n && -1 === r) break;
          e(r << 2 | i >> 4), 64 != a && (e(i << 4 & 240 | a >> 2), 64 != n && e(a << 6 & 192 | n));
        }
      }, goog.crypt.base64.init_ = function () {
        if (!goog.crypt.base64.byteToCharMap_) {
          goog.crypt.base64.byteToCharMap_ = {}, goog.crypt.base64.charToByteMap_ = {}, goog.crypt.base64.byteToCharMapWebSafe_ = {};

          for (var e = 0; e < goog.crypt.base64.ENCODED_VALS.length; e++) {
            goog.crypt.base64.byteToCharMap_[e] = goog.crypt.base64.ENCODED_VALS.charAt(e), goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[e]] = e, goog.crypt.base64.byteToCharMapWebSafe_[e] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(e), e >= goog.crypt.base64.ENCODED_VALS_BASE.length && (goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(e)] = e);
          }
        }
      }, jspb.ExtensionFieldInfo = function (e, t, r, o, s) {
        this.fieldIndex = e, this.fieldName = t, this.ctor = r, this.toObjectFn = o, this.isRepeated = s;
      }, jspb.ExtensionFieldBinaryInfo = function (e, t, r, o, s, i) {
        this.fieldInfo = e, this.binaryReaderFn = t, this.binaryWriterFn = r, this.binaryMessageSerializeFn = o, this.binaryMessageDeserializeFn = s, this.isPacked = i;
      }, jspb.ExtensionFieldInfo.prototype.isMessageType = function () {
        return !!this.ctor;
      }, jspb.Message = function () {}, jspb.Message.GENERATE_TO_OBJECT = !0, jspb.Message.GENERATE_FROM_OBJECT = !goog.DISALLOW_TEST_ONLY_CODE, jspb.Message.GENERATE_TO_STRING = !0, jspb.Message.ASSUME_LOCAL_ARRAYS = !1, jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS = !0, jspb.Message.SUPPORTS_UINT8ARRAY_ = "function" == typeof Uint8Array, jspb.Message.prototype.getJsPbMessageId = function () {
        return this.messageId_;
      }, jspb.Message.getIndex_ = function (e, t) {
        return t + e.arrayIndexOffset_;
      }, jspb.Message.getFieldNumber_ = function (e, t) {
        return t - e.arrayIndexOffset_;
      }, jspb.Message.initialize = function (e, t, r, o, s, i) {
        if (e.wrappers_ = null, t || (t = r ? [r] : []), e.messageId_ = r ? String(r) : void 0, e.arrayIndexOffset_ = 0 === r ? -1 : 0, e.array = t, jspb.Message.initPivotAndExtensionObject_(e, o), e.convertedFloatingPointFields_ = {}, jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS || (e.repeatedFields = s), s) for (t = 0; t < s.length; t++) {
          (r = s[t]) < e.pivot_ ? (r = jspb.Message.getIndex_(e, r), e.array[r] = e.array[r] || jspb.Message.EMPTY_LIST_SENTINEL_) : (jspb.Message.maybeInitEmptyExtensionObject_(e), e.extensionObject_[r] = e.extensionObject_[r] || jspb.Message.EMPTY_LIST_SENTINEL_);
        }
        if (i && i.length) for (t = 0; t < i.length; t++) {
          jspb.Message.computeOneofCase(e, i[t]);
        }
      }, jspb.Message.EMPTY_LIST_SENTINEL_ = goog.DEBUG && Object.freeze ? Object.freeze([]) : [], jspb.Message.isArray_ = function (e) {
        return jspb.Message.ASSUME_LOCAL_ARRAYS ? e instanceof Array : goog.isArray(e);
      }, jspb.Message.initPivotAndExtensionObject_ = function (e, t) {
        if (e.array.length) {
          var r = e.array.length - 1,
              o = e.array[r];
          if (o && "object" == _typeof(o) && !jspb.Message.isArray_(o) && !(jspb.Message.SUPPORTS_UINT8ARRAY_ && o instanceof Uint8Array)) return e.pivot_ = jspb.Message.getFieldNumber_(e, r), void (e.extensionObject_ = o);
        }

        -1 < t ? (e.pivot_ = t, e.extensionObject_ = null) : e.pivot_ = Number.MAX_VALUE;
      }, jspb.Message.maybeInitEmptyExtensionObject_ = function (e) {
        var t = jspb.Message.getIndex_(e, e.pivot_);
        e.array[t] || (e.extensionObject_ = e.array[t] = {});
      }, jspb.Message.toObjectList = function (e, t, r) {
        for (var o = [], s = 0; s < e.length; s++) {
          o[s] = t.call(e[s], r, e[s]);
        }

        return o;
      }, jspb.Message.toObjectExtension = function (e, t, r, o, s) {
        for (var i in r) {
          var a = r[i],
              n = o.call(e, a);

          if (null != n) {
            for (var p in a.fieldName) {
              if (a.fieldName.hasOwnProperty(p)) break;
            }

            t[p] = a.toObjectFn ? a.isRepeated ? jspb.Message.toObjectList(n, a.toObjectFn, s) : a.toObjectFn(s, n) : n;
          }
        }
      }, jspb.Message.serializeBinaryExtensions = function (e, t, r, o) {
        for (var s in r) {
          var i = r[s],
              a = i.fieldInfo;
          if (!i.binaryWriterFn) throw Error("Message extension present that was generated without binary serialization support");
          var n = o.call(e, a);
          if (null != n) if (a.isMessageType()) {
            if (!i.binaryMessageSerializeFn) throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
            i.binaryWriterFn.call(t, a.fieldIndex, n, i.binaryMessageSerializeFn);
          } else i.binaryWriterFn.call(t, a.fieldIndex, n);
        }
      }, jspb.Message.readBinaryExtension = function (e, t, r, o, s) {
        var i = r[t.getFieldNumber()];

        if (i) {
          if (r = i.fieldInfo, !i.binaryReaderFn) throw Error("Deserializing extension whose generated code does not support binary format");
          var a;
          r.isMessageType() ? (a = new r.ctor(), i.binaryReaderFn.call(t, a, i.binaryMessageDeserializeFn)) : a = i.binaryReaderFn.call(t), r.isRepeated && !i.isPacked ? (t = o.call(e, r)) ? t.push(a) : s.call(e, r, [a]) : s.call(e, r, a);
        } else t.skipField();
      }, jspb.Message.getField = function (e, t) {
        if (t < e.pivot_) {
          var r = jspb.Message.getIndex_(e, t),
              o = e.array[r];
          return o === jspb.Message.EMPTY_LIST_SENTINEL_ ? e.array[r] = [] : o;
        }

        if (e.extensionObject_) return (o = e.extensionObject_[t]) === jspb.Message.EMPTY_LIST_SENTINEL_ ? e.extensionObject_[t] = [] : o;
      }, jspb.Message.getRepeatedField = function (e, t) {
        if (t < e.pivot_) {
          var r = jspb.Message.getIndex_(e, t),
              o = e.array[r];
          return o === jspb.Message.EMPTY_LIST_SENTINEL_ ? e.array[r] = [] : o;
        }

        return (o = e.extensionObject_[t]) === jspb.Message.EMPTY_LIST_SENTINEL_ ? e.extensionObject_[t] = [] : o;
      }, jspb.Message.getOptionalFloatingPointField = function (e, t) {
        var r = jspb.Message.getField(e, t);
        return null == r ? r : +r;
      }, jspb.Message.getRepeatedFloatingPointField = function (e, t) {
        var r = jspb.Message.getRepeatedField(e, t);

        if (e.convertedFloatingPointFields_ || (e.convertedFloatingPointFields_ = {}), !e.convertedFloatingPointFields_[t]) {
          for (var o = 0; o < r.length; o++) {
            r[o] = +r[o];
          }

          e.convertedFloatingPointFields_[t] = !0;
        }

        return r;
      }, jspb.Message.bytesAsB64 = function (e) {
        return null == e || goog.isString(e) ? e : jspb.Message.SUPPORTS_UINT8ARRAY_ && e instanceof Uint8Array ? goog.crypt.base64.encodeByteArray(e) : (goog.asserts.fail("Cannot coerce to b64 string: " + goog.typeOf(e)), null);
      }, jspb.Message.bytesAsU8 = function (e) {
        return null == e || e instanceof Uint8Array ? e : goog.isString(e) ? goog.crypt.base64.decodeStringToUint8Array(e) : (goog.asserts.fail("Cannot coerce to Uint8Array: " + goog.typeOf(e)), null);
      }, jspb.Message.bytesListAsB64 = function (e) {
        return jspb.Message.assertConsistentTypes_(e), !e.length || goog.isString(e[0]) ? e : goog.array.map(e, jspb.Message.bytesAsB64);
      }, jspb.Message.bytesListAsU8 = function (e) {
        return jspb.Message.assertConsistentTypes_(e), !e.length || e[0] instanceof Uint8Array ? e : goog.array.map(e, jspb.Message.bytesAsU8);
      }, jspb.Message.assertConsistentTypes_ = function (e) {
        if (goog.DEBUG && e && 1 < e.length) {
          var t = goog.typeOf(e[0]);
          goog.array.forEach(e, function (e) {
            goog.typeOf(e) != t && goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got " + goog.typeOf(e) + " expected " + t);
          });
        }
      }, jspb.Message.getFieldWithDefault = function (e, t, r) {
        return null == (e = jspb.Message.getField(e, t)) ? r : e;
      }, jspb.Message.getFieldProto3 = jspb.Message.getFieldWithDefault, jspb.Message.getMapField = function (e, t, r, o) {
        return e.wrappers_ || (e.wrappers_ = {}), t in e.wrappers_ ? e.wrappers_[t] : r ? void 0 : ((r = jspb.Message.getField(e, t)) || (r = [], jspb.Message.setField(e, t, r)), e.wrappers_[t] = new jspb.Map(r, o));
      }, jspb.Message.setField = function (e, t, r) {
        t < e.pivot_ ? e.array[jspb.Message.getIndex_(e, t)] = r : (jspb.Message.maybeInitEmptyExtensionObject_(e), e.extensionObject_[t] = r);
      }, jspb.Message.setProto3IntField = function (e, t, r) {
        jspb.Message.setFieldIgnoringDefault_(e, t, r, 0);
      }, jspb.Message.setProto3StringIntField = function (e, t, r) {
        jspb.Message.setFieldIgnoringDefault_(e, t, r, "0");
      }, jspb.Message.setProto3FloatField = function (e, t, r) {
        jspb.Message.setFieldIgnoringDefault_(e, t, r, 0);
      }, jspb.Message.setProto3BooleanField = function (e, t, r) {
        jspb.Message.setFieldIgnoringDefault_(e, t, r, !1);
      }, jspb.Message.setProto3StringField = function (e, t, r) {
        jspb.Message.setFieldIgnoringDefault_(e, t, r, "");
      }, jspb.Message.setProto3BytesField = function (e, t, r) {
        jspb.Message.setFieldIgnoringDefault_(e, t, r, "");
      }, jspb.Message.setProto3EnumField = function (e, t, r) {
        jspb.Message.setFieldIgnoringDefault_(e, t, r, 0);
      }, jspb.Message.setFieldIgnoringDefault_ = function (e, t, r, o) {
        r != o ? jspb.Message.setField(e, t, r) : e.array[jspb.Message.getIndex_(e, t)] = null;
      }, jspb.Message.addToRepeatedField = function (e, t, r, o) {
        e = jspb.Message.getRepeatedField(e, t), null != o ? e.splice(o, 0, r) : e.push(r);
      }, jspb.Message.setOneofField = function (e, t, r, o) {
        (r = jspb.Message.computeOneofCase(e, r)) && r !== t && void 0 !== o && (e.wrappers_ && r in e.wrappers_ && (e.wrappers_[r] = void 0), jspb.Message.setField(e, r, void 0)), jspb.Message.setField(e, t, o);
      }, jspb.Message.computeOneofCase = function (e, t) {
        for (var r, o, s = 0; s < t.length; s++) {
          var i = t[s],
              a = jspb.Message.getField(e, i);
          null != a && (r = i, o = a, jspb.Message.setField(e, i, void 0));
        }

        return r ? (jspb.Message.setField(e, r, o), r) : 0;
      }, jspb.Message.getWrapperField = function (e, t, r, o) {
        if (e.wrappers_ || (e.wrappers_ = {}), !e.wrappers_[r]) {
          var s = jspb.Message.getField(e, r);
          (o || s) && (e.wrappers_[r] = new t(s));
        }

        return e.wrappers_[r];
      }, jspb.Message.getRepeatedWrapperField = function (e, t, r) {
        return jspb.Message.wrapRepeatedField_(e, t, r), (t = e.wrappers_[r]) == jspb.Message.EMPTY_LIST_SENTINEL_ && (t = e.wrappers_[r] = []), t;
      }, jspb.Message.wrapRepeatedField_ = function (e, t, r) {
        if (e.wrappers_ || (e.wrappers_ = {}), !e.wrappers_[r]) {
          for (var o = jspb.Message.getRepeatedField(e, r), s = [], i = 0; i < o.length; i++) {
            s[i] = new t(o[i]);
          }

          e.wrappers_[r] = s;
        }
      }, jspb.Message.setWrapperField = function (e, t, r) {
        e.wrappers_ || (e.wrappers_ = {});
        var o = r ? r.toArray() : r;
        e.wrappers_[t] = r, jspb.Message.setField(e, t, o);
      }, jspb.Message.setOneofWrapperField = function (e, t, r, o) {
        e.wrappers_ || (e.wrappers_ = {});
        var s = o ? o.toArray() : o;
        e.wrappers_[t] = o, jspb.Message.setOneofField(e, t, r, s);
      }, jspb.Message.setRepeatedWrapperField = function (e, t, r) {
        e.wrappers_ || (e.wrappers_ = {}), r = r || [];

        for (var o = [], s = 0; s < r.length; s++) {
          o[s] = r[s].toArray();
        }

        e.wrappers_[t] = r, jspb.Message.setField(e, t, o);
      }, jspb.Message.addToRepeatedWrapperField = function (e, t, r, o, s) {
        jspb.Message.wrapRepeatedField_(e, o, t);
        var i = e.wrappers_[t];
        return i || (i = e.wrappers_[t] = []), r = r || new o(), e = jspb.Message.getRepeatedField(e, t), null != s ? (i.splice(s, 0, r), e.splice(s, 0, r.toArray())) : (i.push(r), e.push(r.toArray())), r;
      }, jspb.Message.toMap = function (e, t, r, o) {
        for (var s = {}, i = 0; i < e.length; i++) {
          s[t.call(e[i])] = r ? r.call(e[i], o, e[i]) : e[i];
        }

        return s;
      }, jspb.Message.prototype.syncMapFields_ = function () {
        if (this.wrappers_) for (var e in this.wrappers_) {
          var t = this.wrappers_[e];
          if (goog.isArray(t)) for (var r = 0; r < t.length; r++) {
            t[r] && t[r].toArray();
          } else t && t.toArray();
        }
      }, jspb.Message.prototype.toArray = function () {
        return this.syncMapFields_(), this.array;
      }, jspb.Message.GENERATE_TO_STRING && (jspb.Message.prototype.toString = function () {
        return this.syncMapFields_(), this.array.toString();
      }), jspb.Message.prototype.getExtension = function (t) {
        if (this.extensionObject_) {
          this.wrappers_ || (this.wrappers_ = {});
          var e = t.fieldIndex;

          if (t.isRepeated) {
            if (t.isMessageType()) return this.wrappers_[e] || (this.wrappers_[e] = goog.array.map(this.extensionObject_[e] || [], function (e) {
              return new t.ctor(e);
            })), this.wrappers_[e];
          } else if (t.isMessageType()) return !this.wrappers_[e] && this.extensionObject_[e] && (this.wrappers_[e] = new t.ctor(this.extensionObject_[e])), this.wrappers_[e];

          return this.extensionObject_[e];
        }
      }, jspb.Message.prototype.setExtension = function (e, t) {
        this.wrappers_ || (this.wrappers_ = {}), jspb.Message.maybeInitEmptyExtensionObject_(this);
        var r = e.fieldIndex;
        return e.isRepeated ? (t = t || [], e.isMessageType() ? (this.wrappers_[r] = t, this.extensionObject_[r] = goog.array.map(t, function (e) {
          return e.toArray();
        })) : this.extensionObject_[r] = t) : e.isMessageType() ? (this.wrappers_[r] = t, this.extensionObject_[r] = t ? t.toArray() : t) : this.extensionObject_[r] = t, this;
      }, jspb.Message.difference = function (e, t) {
        if (!(e instanceof t.constructor)) throw Error("Messages have different types.");
        var r = e.toArray(),
            o = t.toArray(),
            s = [],
            i = 0,
            a = r.length > o.length ? r.length : o.length;

        for (e.getJsPbMessageId() && (s[0] = e.getJsPbMessageId(), i = 1); i < a; i++) {
          jspb.Message.compareFields(r[i], o[i]) || (s[i] = o[i]);
        }

        return new e.constructor(s);
      }, jspb.Message.equals = function (e, t) {
        return e == t || !(!e || !t) && e instanceof t.constructor && jspb.Message.compareFields(e.toArray(), t.toArray());
      }, jspb.Message.compareExtensions = function (e, t) {
        e = e || {}, t = t || {};
        var r,
            o = {};

        for (r in e) {
          o[r] = 0;
        }

        for (r in t) {
          o[r] = 0;
        }

        for (r in o) {
          if (!jspb.Message.compareFields(e[r], t[r])) return !1;
        }

        return !0;
      }, jspb.Message.compareFields = function (e, t) {
        if (e == t) return !0;
        if (!goog.isObject(e) || !goog.isObject(t)) return !!(goog.isNumber(e) && isNaN(e) || goog.isNumber(t) && isNaN(t)) && String(e) == String(t);
        if (e.constructor != t.constructor) return !1;

        if (jspb.Message.SUPPORTS_UINT8ARRAY_ && e.constructor === Uint8Array) {
          if (e.length != t.length) return !1;

          for (var r = 0; r < e.length; r++) {
            if (e[r] != t[r]) return !1;
          }

          return !0;
        }

        if (e.constructor === Array) {
          var o = void 0,
              s = void 0,
              i = Math.max(e.length, t.length);

          for (r = 0; r < i; r++) {
            var a = e[r],
                n = t[r];
            if (a && a.constructor == Object && (goog.asserts.assert(void 0 === o), goog.asserts.assert(r === e.length - 1), o = a, a = void 0), n && n.constructor == Object && (goog.asserts.assert(void 0 === s), goog.asserts.assert(r === t.length - 1), s = n, n = void 0), !jspb.Message.compareFields(a, n)) return !1;
          }

          return !o && !s || (o = o || {}, s = s || {}, jspb.Message.compareExtensions(o, s));
        }

        if (e.constructor === Object) return jspb.Message.compareExtensions(e, t);
        throw Error("Invalid type in JSPB array");
      }, jspb.Message.prototype.cloneMessage = function () {
        return jspb.Message.cloneMessage(this);
      }, jspb.Message.prototype.clone = function () {
        return jspb.Message.cloneMessage(this);
      }, jspb.Message.clone = function (e) {
        return jspb.Message.cloneMessage(e);
      }, jspb.Message.cloneMessage = function (e) {
        return new e.constructor(jspb.Message.clone_(e.toArray()));
      }, jspb.Message.copyInto = function (e, t) {
        goog.asserts.assertInstanceof(e, jspb.Message), goog.asserts.assertInstanceof(t, jspb.Message), goog.asserts.assert(e.constructor == t.constructor, "Copy source and target message should have the same type.");

        for (var r = jspb.Message.clone(e), o = t.toArray(), s = r.toArray(), i = o.length = 0; i < s.length; i++) {
          o[i] = s[i];
        }

        t.wrappers_ = r.wrappers_, t.extensionObject_ = r.extensionObject_;
      }, jspb.Message.clone_ = function (e) {
        var t;

        if (goog.isArray(e)) {
          for (var r = Array(e.length), o = 0; o < e.length; o++) {
            null != (t = e[o]) && (r[o] = "object" == _typeof(t) ? jspb.Message.clone_(goog.asserts.assert(t)) : t);
          }

          return r;
        }

        if (jspb.Message.SUPPORTS_UINT8ARRAY_ && e instanceof Uint8Array) return new Uint8Array(e);

        for (o in r = {}, e) {
          null != (t = e[o]) && (r[o] = "object" == _typeof(t) ? jspb.Message.clone_(goog.asserts.assert(t)) : t);
        }

        return r;
      }, jspb.Message.registerMessageType = function (e, t) {
        (jspb.Message.registry_[e] = t).messageId = e;
      }, jspb.Message.registry_ = {}, jspb.Message.messageSetExtensions = {}, jspb.Message.messageSetExtensionsBinary = {}, jspb.arith = {}, jspb.arith.UInt64 = function (e, t) {
        this.lo = e, this.hi = t;
      }, jspb.arith.UInt64.prototype.cmp = function (e) {
        return this.hi < e.hi || this.hi == e.hi && this.lo < e.lo ? -1 : this.hi == e.hi && this.lo == e.lo ? 0 : 1;
      }, jspb.arith.UInt64.prototype.rightShift = function () {
        return new jspb.arith.UInt64((this.lo >>> 1 | (1 & this.hi) << 31) >>> 0, this.hi >>> 1 >>> 0);
      }, jspb.arith.UInt64.prototype.leftShift = function () {
        return new jspb.arith.UInt64(this.lo << 1 >>> 0, (this.hi << 1 | this.lo >>> 31) >>> 0);
      }, jspb.arith.UInt64.prototype.msb = function () {
        return !!(2147483648 & this.hi);
      }, jspb.arith.UInt64.prototype.lsb = function () {
        return !!(1 & this.lo);
      }, jspb.arith.UInt64.prototype.zero = function () {
        return 0 == this.lo && 0 == this.hi;
      }, jspb.arith.UInt64.prototype.add = function (e) {
        return new jspb.arith.UInt64((this.lo + e.lo & 4294967295) >>> 0 >>> 0, ((this.hi + e.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + e.lo ? 1 : 0) >>> 0);
      }, jspb.arith.UInt64.prototype.sub = function (e) {
        return new jspb.arith.UInt64((this.lo - e.lo & 4294967295) >>> 0 >>> 0, ((this.hi - e.hi & 4294967295) >>> 0) - (this.lo - e.lo < 0 ? 1 : 0) >>> 0);
      }, jspb.arith.UInt64.mul32x32 = function (e, t) {
        for (var r = e >>> 16, o = 65535 & t, s = t >>> 16, i = (a = 65535 & e) * o + 65536 * (a * s & 65535) + 65536 * (r * o & 65535), a = r * s + (a * s >>> 16) + (r * o >>> 16); 4294967296 <= i;) {
          i -= 4294967296, a += 1;
        }

        return new jspb.arith.UInt64(i >>> 0, a >>> 0);
      }, jspb.arith.UInt64.prototype.mul = function (e) {
        var t = jspb.arith.UInt64.mul32x32(this.lo, e);
        return (e = jspb.arith.UInt64.mul32x32(this.hi, e)).hi = e.lo, e.lo = 0, t.add(e);
      }, jspb.arith.UInt64.prototype.div = function (e) {
        if (0 == e) return [];
        var t = new jspb.arith.UInt64(0, 0),
            r = new jspb.arith.UInt64(this.lo, this.hi);
        e = new jspb.arith.UInt64(e, 0);

        for (var o = new jspb.arith.UInt64(1, 0); !e.msb();) {
          e = e.leftShift(), o = o.leftShift();
        }

        for (; !o.zero();) {
          e.cmp(r) <= 0 && (t = t.add(o), r = r.sub(e)), e = e.rightShift(), o = o.rightShift();
        }

        return [t, r];
      }, jspb.arith.UInt64.prototype.toString = function () {
        for (var e = "", t = this; !t.zero();) {
          var r = (t = t.div(10))[0];
          e = t[1].lo + e, t = r;
        }

        return "" == e && (e = "0"), e;
      }, jspb.arith.UInt64.fromString = function (e) {
        for (var t = new jspb.arith.UInt64(0, 0), r = new jspb.arith.UInt64(0, 0), o = 0; o < e.length; o++) {
          if (e[o] < "0" || "9" < e[o]) return null;
          var s = parseInt(e[o], 10);
          r.lo = s, t = t.mul(10).add(r);
        }

        return t;
      }, jspb.arith.UInt64.prototype.clone = function () {
        return new jspb.arith.UInt64(this.lo, this.hi);
      }, jspb.arith.Int64 = function (e, t) {
        this.lo = e, this.hi = t;
      }, jspb.arith.Int64.prototype.add = function (e) {
        return new jspb.arith.Int64((this.lo + e.lo & 4294967295) >>> 0 >>> 0, ((this.hi + e.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + e.lo ? 1 : 0) >>> 0);
      }, jspb.arith.Int64.prototype.sub = function (e) {
        return new jspb.arith.Int64((this.lo - e.lo & 4294967295) >>> 0 >>> 0, ((this.hi - e.hi & 4294967295) >>> 0) - (this.lo - e.lo < 0 ? 1 : 0) >>> 0);
      }, jspb.arith.Int64.prototype.clone = function () {
        return new jspb.arith.Int64(this.lo, this.hi);
      }, jspb.arith.Int64.prototype.toString = function () {
        var e = 0 != (2147483648 & this.hi),
            t = new jspb.arith.UInt64(this.lo, this.hi);
        return e && (t = new jspb.arith.UInt64(0, 0).sub(t)), (e ? "-" : "") + t.toString();
      }, jspb.arith.Int64.fromString = function (e) {
        var t = 0 < e.length && "-" == e[0];
        return t && (e = e.substring(1)), null === (e = jspb.arith.UInt64.fromString(e)) ? null : (t && (e = new jspb.arith.UInt64(0, 0).sub(e)), new jspb.arith.Int64(e.lo, e.hi));
      }, jspb.BinaryConstants = {}, jspb.ConstBinaryMessage = function () {}, jspb.BinaryMessage = function () {}, jspb.BinaryConstants.FieldType = {
        INVALID: -1,
        DOUBLE: 1,
        FLOAT: 2,
        INT64: 3,
        UINT64: 4,
        INT32: 5,
        FIXED64: 6,
        FIXED32: 7,
        BOOL: 8,
        STRING: 9,
        GROUP: 10,
        MESSAGE: 11,
        BYTES: 12,
        UINT32: 13,
        ENUM: 14,
        SFIXED32: 15,
        SFIXED64: 16,
        SINT32: 17,
        SINT64: 18,
        FHASH64: 30,
        VHASH64: 31
      }, jspb.BinaryConstants.WireType = {
        INVALID: -1,
        VARINT: 0,
        FIXED64: 1,
        DELIMITED: 2,
        START_GROUP: 3,
        END_GROUP: 4,
        FIXED32: 5
      }, jspb.BinaryConstants.FieldTypeToWireType = function (e) {
        var t = jspb.BinaryConstants.FieldType,
            r = jspb.BinaryConstants.WireType;

        switch (e) {
          case t.INT32:
          case t.INT64:
          case t.UINT32:
          case t.UINT64:
          case t.SINT32:
          case t.SINT64:
          case t.BOOL:
          case t.ENUM:
          case t.VHASH64:
            return r.VARINT;

          case t.DOUBLE:
          case t.FIXED64:
          case t.SFIXED64:
          case t.FHASH64:
            return r.FIXED64;

          case t.STRING:
          case t.MESSAGE:
          case t.BYTES:
            return r.DELIMITED;

          case t.FLOAT:
          case t.FIXED32:
          case t.SFIXED32:
            return r.FIXED32;

          default:
            return r.INVALID;
        }
      }, jspb.BinaryConstants.INVALID_FIELD_NUMBER = -1, jspb.BinaryConstants.FLOAT32_EPS = 1401298464324817e-60, jspb.BinaryConstants.FLOAT32_MIN = 11754943508222875e-54, jspb.BinaryConstants.FLOAT32_MAX = 34028234663852886e22, jspb.BinaryConstants.FLOAT64_EPS = 5e-324, jspb.BinaryConstants.FLOAT64_MIN = 22250738585072014e-324, jspb.BinaryConstants.FLOAT64_MAX = 17976931348623157e292, jspb.BinaryConstants.TWO_TO_20 = 1048576, jspb.BinaryConstants.TWO_TO_23 = 8388608, jspb.BinaryConstants.TWO_TO_31 = 2147483648, jspb.BinaryConstants.TWO_TO_32 = 4294967296, jspb.BinaryConstants.TWO_TO_52 = 4503599627370496, jspb.BinaryConstants.TWO_TO_63 = 0x8000000000000000, jspb.BinaryConstants.TWO_TO_64 = 0x10000000000000000, jspb.BinaryConstants.ZERO_HASH = "\0\0\0\0\0\0\0\0", jspb.utils = {}, jspb.utils.split64Low = 0, jspb.utils.split64High = 0, jspb.utils.splitUint64 = function (e) {
        var t = e >>> 0;
        e = Math.floor((e - t) / jspb.BinaryConstants.TWO_TO_32) >>> 0, jspb.utils.split64Low = t, jspb.utils.split64High = e;
      }, jspb.utils.splitInt64 = function (e) {
        var t = e < 0,
            r = (e = Math.abs(e)) >>> 0;
        e = Math.floor((e - r) / jspb.BinaryConstants.TWO_TO_32), e >>>= 0, t && (e = ~e >>> 0, 4294967295 < (r = 1 + (~r >>> 0)) && (r = 0, 4294967295 < ++e && (e = 0))), jspb.utils.split64Low = r, jspb.utils.split64High = e;
      }, jspb.utils.splitZigzag64 = function (e) {
        var t = e < 0;
        e = 2 * Math.abs(e), jspb.utils.splitUint64(e), e = jspb.utils.split64Low;
        var r = jspb.utils.split64High;
        t && (0 == e ? 0 == r ? r = e = 4294967295 : (r--, e = 4294967295) : e--), jspb.utils.split64Low = e, jspb.utils.split64High = r;
      }, jspb.utils.splitFloat32 = function (e) {
        var t,
            r = e < 0 ? 1 : 0;
        0 === (e = r ? -e : e) ? 0 < 1 / e ? (jspb.utils.split64High = 0, jspb.utils.split64Low = 0) : (jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483648) : isNaN(e) ? (jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483647) : e > jspb.BinaryConstants.FLOAT32_MAX ? (jspb.utils.split64High = 0, jspb.utils.split64Low = (r << 31 | 2139095040) >>> 0) : e < jspb.BinaryConstants.FLOAT32_MIN ? (e = Math.round(e / Math.pow(2, -149)), jspb.utils.split64High = 0, jspb.utils.split64Low = (r << 31 | e) >>> 0) : (t = Math.floor(Math.log(e) / Math.LN2), e *= Math.pow(2, -t), e = 8388607 & Math.round(e * jspb.BinaryConstants.TWO_TO_23), jspb.utils.split64High = 0, jspb.utils.split64Low = (r << 31 | t + 127 << 23 | e) >>> 0);
      }, jspb.utils.splitFloat64 = function (e) {
        var t = e < 0 ? 1 : 0;
        if (0 === (e = t ? -e : e)) jspb.utils.split64High = 0 < 1 / e ? 0 : 2147483648, jspb.utils.split64Low = 0;else if (isNaN(e)) jspb.utils.split64High = 2147483647, jspb.utils.split64Low = 4294967295;else if (e > jspb.BinaryConstants.FLOAT64_MAX) jspb.utils.split64High = (t << 31 | 2146435072) >>> 0, jspb.utils.split64Low = 0;else if (e < jspb.BinaryConstants.FLOAT64_MIN) {
          var r = e / Math.pow(2, -1074);
          e = r / jspb.BinaryConstants.TWO_TO_32, jspb.utils.split64High = (t << 31 | e) >>> 0, jspb.utils.split64Low = r >>> 0;
        } else {
          var o = Math.floor(Math.log(e) / Math.LN2);
          1024 == o && (o = 1023), e = (r = e * Math.pow(2, -o)) * jspb.BinaryConstants.TWO_TO_20 & 1048575, r = r * jspb.BinaryConstants.TWO_TO_52 >>> 0, jspb.utils.split64High = (t << 31 | o + 1023 << 20 | e) >>> 0, jspb.utils.split64Low = r;
        }
      }, jspb.utils.splitHash64 = function (e) {
        var t = e.charCodeAt(0),
            r = e.charCodeAt(1),
            o = e.charCodeAt(2),
            s = e.charCodeAt(3),
            i = e.charCodeAt(4),
            a = e.charCodeAt(5),
            n = e.charCodeAt(6);
        e = e.charCodeAt(7), jspb.utils.split64Low = t + (r << 8) + (o << 16) + (s << 24) >>> 0, jspb.utils.split64High = i + (a << 8) + (n << 16) + (e << 24) >>> 0;
      }, jspb.utils.joinUint64 = function (e, t) {
        return t * jspb.BinaryConstants.TWO_TO_32 + e;
      }, jspb.utils.joinInt64 = function (e, t) {
        var r = 2147483648 & t;
        r && (t = ~t >>> 0, 0 == (e = 1 + ~e >>> 0) && (t = t + 1 >>> 0));
        var o = jspb.utils.joinUint64(e, t);
        return r ? -o : o;
      }, jspb.utils.joinZigzag64 = function (e, t) {
        var r = 1 & e;
        e = (e >>> 1 | t << 31) >>> 0, t >>>= 1, r && 0 == (e = e + 1 >>> 0) && (t = t + 1 >>> 0);
        var o = jspb.utils.joinUint64(e, t);
        return r ? -o : o;
      }, jspb.utils.joinFloat32 = function (e, t) {
        var r = 2 * (e >> 31) + 1,
            o = e >>> 23 & 255,
            s = 8388607 & e;
        return 255 == o ? s ? NaN : 1 / 0 * r : 0 == o ? r * Math.pow(2, -149) * s : r * Math.pow(2, o - 150) * (s + Math.pow(2, 23));
      }, jspb.utils.joinFloat64 = function (e, t) {
        var r = 2 * (t >> 31) + 1,
            o = t >>> 20 & 2047,
            s = jspb.BinaryConstants.TWO_TO_32 * (1048575 & t) + e;
        return 2047 == o ? s ? NaN : 1 / 0 * r : 0 == o ? r * Math.pow(2, -1074) * s : r * Math.pow(2, o - 1075) * (s + jspb.BinaryConstants.TWO_TO_52);
      }, jspb.utils.joinHash64 = function (e, t) {
        return String.fromCharCode(e >>> 0 & 255, e >>> 8 & 255, e >>> 16 & 255, e >>> 24 & 255, t >>> 0 & 255, t >>> 8 & 255, t >>> 16 & 255, t >>> 24 & 255);
      }, jspb.utils.DIGITS = "0123456789abcdef".split(""), jspb.utils.joinUnsignedDecimalString = function (e, t) {
        function r(e) {
          for (var t = 1e7, r = 0; r < 7; r++) {
            var o = e / (t = t / 10) % 10 >>> 0;
            (0 != o || n) && (n = !0, p += a[o]);
          }
        }

        if (t <= 2097151) return "" + (jspb.BinaryConstants.TWO_TO_32 * t + e);
        var o = (16777215 & e) + 6777216 * (s = (e >>> 24 | t << 8) >>> 0 & 16777215) + 6710656 * (i = t >> 16 & 65535),
            s = s + 8147497 * i,
            i = 2 * i;
        1e7 <= o && (s += Math.floor(o / 1e7), o %= 1e7), 1e7 <= s && (i += Math.floor(s / 1e7), s %= 1e7);
        var a = jspb.utils.DIGITS,
            n = !1,
            p = "";
        return (i || n) && r(i), (s || n) && r(s), (o || n) && r(o), p;
      }, jspb.utils.joinSignedDecimalString = function (e, t) {
        var r = 2147483648 & t;
        r && (t = ~t + (0 == (e = 1 + ~e >>> 0) ? 1 : 0) >>> 0);
        var o = jspb.utils.joinUnsignedDecimalString(e, t);
        return r ? "-" + o : o;
      }, jspb.utils.hash64ToDecimalString = function (e, t) {
        jspb.utils.splitHash64(e);
        var r = jspb.utils.split64Low,
            o = jspb.utils.split64High;
        return t ? jspb.utils.joinSignedDecimalString(r, o) : jspb.utils.joinUnsignedDecimalString(r, o);
      }, jspb.utils.hash64ArrayToDecimalStrings = function (e, t) {
        for (var r = Array(e.length), o = 0; o < e.length; o++) {
          r[o] = jspb.utils.hash64ToDecimalString(e[o], t);
        }

        return r;
      }, jspb.utils.decimalStringToHash64 = function (e) {
        function t(e, t) {
          for (var r = 0; r < 8 && (1 !== e || 0 < t); r++) {
            var o = e * s[r] + t;
            s[r] = 255 & o, t = o >>> 8;
          }
        }

        goog.asserts.assert(0 < e.length);
        var r = !1;
        "-" === e[0] && (r = !0, e = e.slice(1));

        for (var s = [0, 0, 0, 0, 0, 0, 0, 0], o = 0; o < e.length; o++) {
          t(10, jspb.utils.DIGITS.indexOf(e[o]));
        }

        return r && (function () {
          for (var e = 0; e < 8; e++) {
            s[e] = 255 & ~s[e];
          }
        }(), t(1, 1)), goog.crypt.byteArrayToString(s);
      }, jspb.utils.splitDecimalString = function (e) {
        jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(e));
      }, jspb.utils.hash64ToHexString = function (e) {
        var t = Array(18);
        t[0] = "0", t[1] = "x";

        for (var r = 0; r < 8; r++) {
          var o = e.charCodeAt(7 - r);
          t[2 * r + 2] = jspb.utils.DIGITS[o >> 4], t[2 * r + 3] = jspb.utils.DIGITS[15 & o];
        }

        return t.join("");
      }, jspb.utils.hexStringToHash64 = function (e) {
        e = e.toLowerCase(), goog.asserts.assert(18 == e.length), goog.asserts.assert("0" == e[0]), goog.asserts.assert("x" == e[1]);

        for (var t = "", r = 0; r < 8; r++) {
          var o = jspb.utils.DIGITS.indexOf(e[2 * r + 2]),
              s = jspb.utils.DIGITS.indexOf(e[2 * r + 3]);
          t = String.fromCharCode(16 * o + s) + t;
        }

        return t;
      }, jspb.utils.hash64ToNumber = function (e, t) {
        jspb.utils.splitHash64(e);
        var r = jspb.utils.split64Low,
            o = jspb.utils.split64High;
        return t ? jspb.utils.joinInt64(r, o) : jspb.utils.joinUint64(r, o);
      }, jspb.utils.numberToHash64 = function (e) {
        return jspb.utils.splitInt64(e), jspb.utils.joinHash64(jspb.utils.split64Low, jspb.utils.split64High);
      }, jspb.utils.countVarints = function (e, t, r) {
        for (var o = 0, s = t; s < r; s++) {
          o += e[s] >> 7;
        }

        return r - t - o;
      }, jspb.utils.countVarintFields = function (e, t, r, o) {
        var s = 0;
        if ((o = 8 * o + jspb.BinaryConstants.WireType.VARINT) < 128) for (; t < r && e[t++] == o;) {
          for (s++;;) {
            var i = e[t++];
            if (0 == (128 & i)) break;
          }
        } else for (; t < r;) {
          for (i = o; 128 < i;) {
            if (e[t] != (127 & i | 128)) return s;
            t++, i >>= 7;
          }

          if (e[t++] != i) break;

          for (s++; 0 != (128 & (i = e[t++]));) {
            ;
          }
        }
        return s;
      }, jspb.utils.countFixedFields_ = function (e, t, r, o, s) {
        var i = 0;
        if (o < 128) for (; t < r && e[t++] == o;) {
          i++, t += s;
        } else for (; t < r;) {
          for (var a = o; 128 < a;) {
            if (e[t++] != (127 & a | 128)) return i;
            a >>= 7;
          }

          if (e[t++] != a) break;
          i++, t += s;
        }
        return i;
      }, jspb.utils.countFixed32Fields = function (e, t, r, o) {
        return jspb.utils.countFixedFields_(e, t, r, 8 * o + jspb.BinaryConstants.WireType.FIXED32, 4);
      }, jspb.utils.countFixed64Fields = function (e, t, r, o) {
        return jspb.utils.countFixedFields_(e, t, r, 8 * o + jspb.BinaryConstants.WireType.FIXED64, 8);
      }, jspb.utils.countDelimitedFields = function (e, t, r, o) {
        var s = 0;

        for (o = 8 * o + jspb.BinaryConstants.WireType.DELIMITED; t < r;) {
          for (var i = o; 128 < i;) {
            if (e[t++] != (127 & i | 128)) return s;
            i >>= 7;
          }

          if (e[t++] != i) break;
          s++;

          for (var a = 0, n = 1; a += (127 & (i = e[t++])) * n, n *= 128, 0 != (128 & i);) {
            ;
          }

          t += a;
        }

        return s;
      }, jspb.utils.debugBytesToTextFormat = function (e) {
        var t = '"';

        if (e) {
          e = jspb.utils.byteSourceToUint8Array(e);

          for (var r = 0; r < e.length; r++) {
            t += "\\x", e[r] < 16 && (t += "0"), t += e[r].toString(16);
          }
        }

        return t + '"';
      }, jspb.utils.debugScalarToTextFormat = function (e) {
        return goog.isString(e) ? goog.string.quote(e) : e.toString();
      }, jspb.utils.stringToByteArray = function (e) {
        for (var t = new Uint8Array(e.length), r = 0; r < e.length; r++) {
          var o = e.charCodeAt(r);
          if (255 < o) throw Error("Conversion error: string contains codepoint outside of byte range");
          t[r] = o;
        }

        return t;
      }, jspb.utils.byteSourceToUint8Array = function (e) {
        return e.constructor === Uint8Array ? e : e.constructor === ArrayBuffer || e.constructor === Buffer || e.constructor === Array ? new Uint8Array(e) : e.constructor === String ? goog.crypt.base64.decodeStringToUint8Array(e) : (goog.asserts.fail("Type not convertible to Uint8Array."), new Uint8Array(0));
      }, jspb.BinaryEncoder = function () {
        this.buffer_ = [];
      }, jspb.BinaryEncoder.prototype.length = function () {
        return this.buffer_.length;
      }, jspb.BinaryEncoder.prototype.end = function () {
        var e = this.buffer_;
        return this.buffer_ = [], e;
      }, jspb.BinaryEncoder.prototype.writeSplitVarint64 = function (e, t) {
        for (goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(t == Math.floor(t)), goog.asserts.assert(0 <= e && e < jspb.BinaryConstants.TWO_TO_32), goog.asserts.assert(0 <= t && t < jspb.BinaryConstants.TWO_TO_32); 0 < t || 127 < e;) {
          this.buffer_.push(127 & e | 128), e = (e >>> 7 | t << 25) >>> 0, t >>>= 7;
        }

        this.buffer_.push(e);
      }, jspb.BinaryEncoder.prototype.writeSplitFixed64 = function (e, t) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(t == Math.floor(t)), goog.asserts.assert(0 <= e && e < jspb.BinaryConstants.TWO_TO_32), goog.asserts.assert(0 <= t && t < jspb.BinaryConstants.TWO_TO_32), this.writeUint32(e), this.writeUint32(t);
      }, jspb.BinaryEncoder.prototype.writeUnsignedVarint32 = function (e) {
        for (goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(0 <= e && e < jspb.BinaryConstants.TWO_TO_32); 127 < e;) {
          this.buffer_.push(127 & e | 128), e >>>= 7;
        }

        this.buffer_.push(e);
      }, jspb.BinaryEncoder.prototype.writeSignedVarint32 = function (e) {
        if (goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(e >= -jspb.BinaryConstants.TWO_TO_31 && e < jspb.BinaryConstants.TWO_TO_31), 0 <= e) this.writeUnsignedVarint32(e);else {
          for (var t = 0; t < 9; t++) {
            this.buffer_.push(127 & e | 128), e >>= 7;
          }

          this.buffer_.push(1);
        }
      }, jspb.BinaryEncoder.prototype.writeUnsignedVarint64 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(0 <= e && e < jspb.BinaryConstants.TWO_TO_64), jspb.utils.splitInt64(e), this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeSignedVarint64 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(e >= -jspb.BinaryConstants.TWO_TO_63 && e < jspb.BinaryConstants.TWO_TO_63), jspb.utils.splitInt64(e), this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeZigzagVarint32 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(e >= -jspb.BinaryConstants.TWO_TO_31 && e < jspb.BinaryConstants.TWO_TO_31), this.writeUnsignedVarint32((e << 1 ^ e >> 31) >>> 0);
      }, jspb.BinaryEncoder.prototype.writeZigzagVarint64 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(e >= -jspb.BinaryConstants.TWO_TO_63 && e < jspb.BinaryConstants.TWO_TO_63), jspb.utils.splitZigzag64(e), this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeZigzagVarint64String = function (e) {
        this.writeZigzagVarint64(parseInt(e, 10));
      }, jspb.BinaryEncoder.prototype.writeUint8 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(0 <= e && e < 256), this.buffer_.push(e >>> 0 & 255);
      }, jspb.BinaryEncoder.prototype.writeUint16 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(0 <= e && e < 65536), this.buffer_.push(e >>> 0 & 255), this.buffer_.push(e >>> 8 & 255);
      }, jspb.BinaryEncoder.prototype.writeUint32 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(0 <= e && e < jspb.BinaryConstants.TWO_TO_32), this.buffer_.push(e >>> 0 & 255), this.buffer_.push(e >>> 8 & 255), this.buffer_.push(e >>> 16 & 255), this.buffer_.push(e >>> 24 & 255);
      }, jspb.BinaryEncoder.prototype.writeUint64 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(0 <= e && e < jspb.BinaryConstants.TWO_TO_64), jspb.utils.splitUint64(e), this.writeUint32(jspb.utils.split64Low), this.writeUint32(jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeInt8 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(-128 <= e && e < 128), this.buffer_.push(e >>> 0 & 255);
      }, jspb.BinaryEncoder.prototype.writeInt16 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(-32768 <= e && e < 32768), this.buffer_.push(e >>> 0 & 255), this.buffer_.push(e >>> 8 & 255);
      }, jspb.BinaryEncoder.prototype.writeInt32 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(e >= -jspb.BinaryConstants.TWO_TO_31 && e < jspb.BinaryConstants.TWO_TO_31), this.buffer_.push(e >>> 0 & 255), this.buffer_.push(e >>> 8 & 255), this.buffer_.push(e >>> 16 & 255), this.buffer_.push(e >>> 24 & 255);
      }, jspb.BinaryEncoder.prototype.writeInt64 = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(e >= -jspb.BinaryConstants.TWO_TO_63 && e < jspb.BinaryConstants.TWO_TO_63), jspb.utils.splitInt64(e), this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeInt64String = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(+e >= -jspb.BinaryConstants.TWO_TO_63 && +e < jspb.BinaryConstants.TWO_TO_63), jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(e)), this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeFloat = function (e) {
        goog.asserts.assert(e >= -jspb.BinaryConstants.FLOAT32_MAX && e <= jspb.BinaryConstants.FLOAT32_MAX), jspb.utils.splitFloat32(e), this.writeUint32(jspb.utils.split64Low);
      }, jspb.BinaryEncoder.prototype.writeDouble = function (e) {
        goog.asserts.assert(e >= -jspb.BinaryConstants.FLOAT64_MAX && e <= jspb.BinaryConstants.FLOAT64_MAX), jspb.utils.splitFloat64(e), this.writeUint32(jspb.utils.split64Low), this.writeUint32(jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeBool = function (e) {
        goog.asserts.assert(goog.isBoolean(e) || goog.isNumber(e)), this.buffer_.push(e ? 1 : 0);
      }, jspb.BinaryEncoder.prototype.writeEnum = function (e) {
        goog.asserts.assert(e == Math.floor(e)), goog.asserts.assert(e >= -jspb.BinaryConstants.TWO_TO_31 && e < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32(e);
      }, jspb.BinaryEncoder.prototype.writeBytes = function (e) {
        this.buffer_.push.apply(this.buffer_, e);
      }, jspb.BinaryEncoder.prototype.writeVarintHash64 = function (e) {
        jspb.utils.splitHash64(e), this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeFixedHash64 = function (e) {
        jspb.utils.splitHash64(e), this.writeUint32(jspb.utils.split64Low), this.writeUint32(jspb.utils.split64High);
      }, jspb.BinaryEncoder.prototype.writeString = function (e) {
        for (var t = this.buffer_.length, r = 0; r < e.length; r++) {
          var o = e.charCodeAt(r);
          if (o < 128) this.buffer_.push(o);else if (o < 2048) this.buffer_.push(o >> 6 | 192), this.buffer_.push(63 & o | 128);else if (o < 65536) if (55296 <= o && o <= 56319 && r + 1 < e.length) {
            var s = e.charCodeAt(r + 1);
            56320 <= s && s <= 57343 && (o = 1024 * (o - 55296) + s - 56320 + 65536, this.buffer_.push(o >> 18 | 240), this.buffer_.push(o >> 12 & 63 | 128), this.buffer_.push(o >> 6 & 63 | 128), this.buffer_.push(63 & o | 128), r++);
          } else this.buffer_.push(o >> 12 | 224), this.buffer_.push(o >> 6 & 63 | 128), this.buffer_.push(63 & o | 128);
        }

        return this.buffer_.length - t;
      }, jspb.BinaryWriter = function () {
        this.blocks_ = [], this.totalLength_ = 0, this.encoder_ = new jspb.BinaryEncoder(), this.bookmarks_ = [];
      }, jspb.BinaryWriter.prototype.appendUint8Array_ = function (e) {
        var t = this.encoder_.end();
        this.blocks_.push(t), this.blocks_.push(e), this.totalLength_ += t.length + e.length;
      }, jspb.BinaryWriter.prototype.beginDelimited_ = function (e) {
        return this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), e = this.encoder_.end(), this.blocks_.push(e), this.totalLength_ += e.length, e.push(this.totalLength_), e;
      }, jspb.BinaryWriter.prototype.endDelimited_ = function (e) {
        var t = e.pop();
        t = this.totalLength_ + this.encoder_.length() - t;

        for (goog.asserts.assert(0 <= t); 127 < t;) {
          e.push(127 & t | 128), t >>>= 7, this.totalLength_++;
        }

        e.push(t), this.totalLength_++;
      }, jspb.BinaryWriter.prototype.writeSerializedMessage = function (e, t, r) {
        this.appendUint8Array_(e.subarray(t, r));
      }, jspb.BinaryWriter.prototype.maybeWriteSerializedMessage = function (e, t, r) {
        null != e && null != t && null != r && this.writeSerializedMessage(e, t, r);
      }, jspb.BinaryWriter.prototype.reset = function () {
        this.blocks_ = [], this.encoder_.end(), this.totalLength_ = 0, this.bookmarks_ = [];
      }, jspb.BinaryWriter.prototype.getResultBuffer = function () {
        goog.asserts.assert(0 == this.bookmarks_.length);

        for (var e = new Uint8Array(this.totalLength_ + this.encoder_.length()), t = this.blocks_, r = t.length, o = 0, s = 0; s < r; s++) {
          var i = t[s];
          e.set(i, o), o += i.length;
        }

        return t = this.encoder_.end(), e.set(t, o), o += t.length, goog.asserts.assert(o == e.length), this.blocks_ = [e], e;
      }, jspb.BinaryWriter.prototype.getResultBase64String = function (e) {
        return goog.crypt.base64.encodeByteArray(this.getResultBuffer(), e);
      }, jspb.BinaryWriter.prototype.beginSubMessage = function (e) {
        this.bookmarks_.push(this.beginDelimited_(e));
      }, jspb.BinaryWriter.prototype.endSubMessage = function () {
        goog.asserts.assert(0 <= this.bookmarks_.length), this.endDelimited_(this.bookmarks_.pop());
      }, jspb.BinaryWriter.prototype.writeFieldHeader_ = function (e, t) {
        goog.asserts.assert(1 <= e && e == Math.floor(e)), this.encoder_.writeUnsignedVarint32(8 * e + t);
      }, jspb.BinaryWriter.prototype.writeAny = function (e, t, r) {
        var o = jspb.BinaryConstants.FieldType;

        switch (e) {
          case o.DOUBLE:
            this.writeDouble(t, r);
            break;

          case o.FLOAT:
            this.writeFloat(t, r);
            break;

          case o.INT64:
            this.writeInt64(t, r);
            break;

          case o.UINT64:
            this.writeUint64(t, r);
            break;

          case o.INT32:
            this.writeInt32(t, r);
            break;

          case o.FIXED64:
            this.writeFixed64(t, r);
            break;

          case o.FIXED32:
            this.writeFixed32(t, r);
            break;

          case o.BOOL:
            this.writeBool(t, r);
            break;

          case o.STRING:
            this.writeString(t, r);
            break;

          case o.GROUP:
            goog.asserts.fail("Group field type not supported in writeAny()");
            break;

          case o.MESSAGE:
            goog.asserts.fail("Message field type not supported in writeAny()");
            break;

          case o.BYTES:
            this.writeBytes(t, r);
            break;

          case o.UINT32:
            this.writeUint32(t, r);
            break;

          case o.ENUM:
            this.writeEnum(t, r);
            break;

          case o.SFIXED32:
            this.writeSfixed32(t, r);
            break;

          case o.SFIXED64:
            this.writeSfixed64(t, r);
            break;

          case o.SINT32:
            this.writeSint32(t, r);
            break;

          case o.SINT64:
            this.writeSint64(t, r);
            break;

          case o.FHASH64:
            this.writeFixedHash64(t, r);
            break;

          case o.VHASH64:
            this.writeVarintHash64(t, r);
            break;

          default:
            goog.asserts.fail("Invalid field type in writeAny()");
        }
      }, jspb.BinaryWriter.prototype.writeUnsignedVarint32_ = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint32(t));
      }, jspb.BinaryWriter.prototype.writeSignedVarint32_ = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(t));
      }, jspb.BinaryWriter.prototype.writeUnsignedVarint64_ = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint64(t));
      }, jspb.BinaryWriter.prototype.writeSignedVarint64_ = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint64(t));
      }, jspb.BinaryWriter.prototype.writeZigzagVarint32_ = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint32(t));
      }, jspb.BinaryWriter.prototype.writeZigzagVarint64_ = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64(t));
      }, jspb.BinaryWriter.prototype.writeZigzagVarint64String_ = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64String(t));
      }, jspb.BinaryWriter.prototype.writeInt32 = function (e, t) {
        null != t && (goog.asserts.assert(t >= -jspb.BinaryConstants.TWO_TO_31 && t < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(e, t));
      }, jspb.BinaryWriter.prototype.writeInt32String = function (e, t) {
        if (null != t) {
          var r = parseInt(t, 10);
          goog.asserts.assert(r >= -jspb.BinaryConstants.TWO_TO_31 && r < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(e, r);
        }
      }, jspb.BinaryWriter.prototype.writeInt64 = function (e, t) {
        null != t && (goog.asserts.assert(t >= -jspb.BinaryConstants.TWO_TO_63 && t < jspb.BinaryConstants.TWO_TO_63), this.writeSignedVarint64_(e, t));
      }, jspb.BinaryWriter.prototype.writeInt64String = function (e, t) {
        if (null != t) {
          var r = jspb.arith.Int64.fromString(t);
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(r.lo, r.hi);
        }
      }, jspb.BinaryWriter.prototype.writeUint32 = function (e, t) {
        null != t && (goog.asserts.assert(0 <= t && t < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(e, t));
      }, jspb.BinaryWriter.prototype.writeUint32String = function (e, t) {
        if (null != t) {
          var r = parseInt(t, 10);
          goog.asserts.assert(0 <= r && r < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(e, r);
        }
      }, jspb.BinaryWriter.prototype.writeUint64 = function (e, t) {
        null != t && (goog.asserts.assert(0 <= t && t < jspb.BinaryConstants.TWO_TO_64), this.writeUnsignedVarint64_(e, t));
      }, jspb.BinaryWriter.prototype.writeUint64String = function (e, t) {
        if (null != t) {
          var r = jspb.arith.UInt64.fromString(t);
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(r.lo, r.hi);
        }
      }, jspb.BinaryWriter.prototype.writeSint32 = function (e, t) {
        null != t && (goog.asserts.assert(t >= -jspb.BinaryConstants.TWO_TO_31 && t < jspb.BinaryConstants.TWO_TO_31), this.writeZigzagVarint32_(e, t));
      }, jspb.BinaryWriter.prototype.writeSint64 = function (e, t) {
        null != t && (goog.asserts.assert(t >= -jspb.BinaryConstants.TWO_TO_63 && t < jspb.BinaryConstants.TWO_TO_63), this.writeZigzagVarint64_(e, t));
      }, jspb.BinaryWriter.prototype.writeSint64String = function (e, t) {
        null != t && (goog.asserts.assert(+t >= -jspb.BinaryConstants.TWO_TO_63 && +t < jspb.BinaryConstants.TWO_TO_63), this.writeZigzagVarint64String_(e, t));
      }, jspb.BinaryWriter.prototype.writeFixed32 = function (e, t) {
        null != t && (goog.asserts.assert(0 <= t && t < jspb.BinaryConstants.TWO_TO_32), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeUint32(t));
      }, jspb.BinaryWriter.prototype.writeFixed64 = function (e, t) {
        null != t && (goog.asserts.assert(0 <= t && t < jspb.BinaryConstants.TWO_TO_64), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeUint64(t));
      }, jspb.BinaryWriter.prototype.writeFixed64String = function (e, t) {
        if (null != t) {
          var r = jspb.arith.UInt64.fromString(t);
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(r.lo, r.hi);
        }
      }, jspb.BinaryWriter.prototype.writeSfixed32 = function (e, t) {
        null != t && (goog.asserts.assert(t >= -jspb.BinaryConstants.TWO_TO_31 && t < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeInt32(t));
      }, jspb.BinaryWriter.prototype.writeSfixed64 = function (e, t) {
        null != t && (goog.asserts.assert(t >= -jspb.BinaryConstants.TWO_TO_63 && t < jspb.BinaryConstants.TWO_TO_63), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeInt64(t));
      }, jspb.BinaryWriter.prototype.writeSfixed64String = function (e, t) {
        if (null != t) {
          var r = jspb.arith.Int64.fromString(t);
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(r.lo, r.hi);
        }
      }, jspb.BinaryWriter.prototype.writeFloat = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeFloat(t));
      }, jspb.BinaryWriter.prototype.writeDouble = function (e, t) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeDouble(t));
      }, jspb.BinaryWriter.prototype.writeBool = function (e, t) {
        null != t && (goog.asserts.assert(goog.isBoolean(t) || goog.isNumber(t)), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeBool(t));
      }, jspb.BinaryWriter.prototype.writeEnum = function (e, t) {
        null != t && (goog.asserts.assert(t >= -jspb.BinaryConstants.TWO_TO_31 && t < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(t));
      }, jspb.BinaryWriter.prototype.writeString = function (e, t) {
        if (null != t) {
          var r = this.beginDelimited_(e);
          this.encoder_.writeString(t), this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writeBytes = function (e, t) {
        if (null != t) {
          var r = jspb.utils.byteSourceToUint8Array(t);
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(r.length), this.appendUint8Array_(r);
        }
      }, jspb.BinaryWriter.prototype.writeMessage = function (e, t, r) {
        null != t && (e = this.beginDelimited_(e), r(t, this), this.endDelimited_(e));
      }, jspb.BinaryWriter.prototype.writeGroup = function (e, t, r) {
        null != t && (this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.START_GROUP), r(t, this), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.END_GROUP));
      }, jspb.BinaryWriter.prototype.writeFixedHash64 = function (e, t) {
        null != t && (goog.asserts.assert(8 == t.length), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeFixedHash64(t));
      }, jspb.BinaryWriter.prototype.writeVarintHash64 = function (e, t) {
        null != t && (goog.asserts.assert(8 == t.length), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeVarintHash64(t));
      }, jspb.BinaryWriter.prototype.writeRepeatedInt32 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeSignedVarint32_(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedInt32String = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeInt32String(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedInt64 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeSignedVarint64_(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedInt64String = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeInt64String(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedUint32 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeUnsignedVarint32_(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedUint32String = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeUint32String(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedUint64 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeUnsignedVarint64_(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedUint64String = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeUint64String(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedSint32 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeZigzagVarint32_(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedSint64 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeZigzagVarint64_(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedSint64String = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeZigzagVarint64String_(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedFixed32 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeFixed32(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedFixed64 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeFixed64(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedFixed64String = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeFixed64String(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedSfixed32 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeSfixed32(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedSfixed64 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeSfixed64(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedSfixed64String = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeSfixed64String(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedFloat = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeFloat(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedDouble = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeDouble(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedBool = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeBool(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedEnum = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeEnum(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedString = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeString(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedBytes = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeBytes(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedMessage = function (e, t, r) {
        if (null != t) for (var o = 0; o < t.length; o++) {
          var s = this.beginDelimited_(e);
          r(t[o], this), this.endDelimited_(s);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedGroup = function (e, t, r) {
        if (null != t) for (var o = 0; o < t.length; o++) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.START_GROUP), r(t[o], this), this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.END_GROUP);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedFixedHash64 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeFixedHash64(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writeRepeatedVarintHash64 = function (e, t) {
        if (null != t) for (var r = 0; r < t.length; r++) {
          this.writeVarintHash64(e, t[r]);
        }
      }, jspb.BinaryWriter.prototype.writePackedInt32 = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeSignedVarint32(t[o]);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedInt32String = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeSignedVarint32(parseInt(t[o], 10));
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedInt64 = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeSignedVarint64(t[o]);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedInt64String = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            var s = jspb.arith.Int64.fromString(t[o]);
            this.encoder_.writeSplitVarint64(s.lo, s.hi);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedUint32 = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeUnsignedVarint32(t[o]);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedUint32String = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeUnsignedVarint32(parseInt(t[o], 10));
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedUint64 = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeUnsignedVarint64(t[o]);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedUint64String = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            var s = jspb.arith.UInt64.fromString(t[o]);
            this.encoder_.writeSplitVarint64(s.lo, s.hi);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedSint32 = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeZigzagVarint32(t[o]);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedSint64 = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeZigzagVarint64(t[o]);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedSint64String = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeZigzagVarint64(parseInt(t[o], 10));
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedFixed32 = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeUint32(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedFixed64 = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeUint64(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedFixed64String = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * t.length);

          for (var r = 0; r < t.length; r++) {
            var o = jspb.arith.UInt64.fromString(t[r]);
            this.encoder_.writeSplitFixed64(o.lo, o.hi);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedSfixed32 = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeInt32(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedSfixed64 = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeInt64(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedSfixed64String = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeInt64String(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedFloat = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeFloat(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedDouble = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeDouble(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedBool = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeBool(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedEnum = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeEnum(t[o]);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryWriter.prototype.writePackedFixedHash64 = function (e, t) {
        if (null != t && t.length) {
          this.writeFieldHeader_(e, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * t.length);

          for (var r = 0; r < t.length; r++) {
            this.encoder_.writeFixedHash64(t[r]);
          }
        }
      }, jspb.BinaryWriter.prototype.writePackedVarintHash64 = function (e, t) {
        if (null != t && t.length) {
          for (var r = this.beginDelimited_(e), o = 0; o < t.length; o++) {
            this.encoder_.writeVarintHash64(t[o]);
          }

          this.endDelimited_(r);
        }
      }, jspb.BinaryIterator = function (e, t, r) {
        this.elements_ = this.nextMethod_ = this.decoder_ = null, this.cursor_ = 0, this.nextValue_ = null, this.atEnd_ = !0, this.init_(e, t, r);
      }, jspb.BinaryIterator.prototype.init_ = function (e, t, r) {
        e && t && (this.decoder_ = e, this.nextMethod_ = t), this.elements_ = r || null, this.cursor_ = 0, this.nextValue_ = null, this.atEnd_ = !this.decoder_ && !this.elements_, this.next();
      }, jspb.BinaryIterator.instanceCache_ = [], jspb.BinaryIterator.alloc = function (e, t, r) {
        if (jspb.BinaryIterator.instanceCache_.length) {
          var o = jspb.BinaryIterator.instanceCache_.pop();
          return o.init_(e, t, r), o;
        }

        return new jspb.BinaryIterator(e, t, r);
      }, jspb.BinaryIterator.prototype.free = function () {
        this.clear(), jspb.BinaryIterator.instanceCache_.length < 100 && jspb.BinaryIterator.instanceCache_.push(this);
      }, jspb.BinaryIterator.prototype.clear = function () {
        this.decoder_ && this.decoder_.free(), this.elements_ = this.nextMethod_ = this.decoder_ = null, this.cursor_ = 0, this.nextValue_ = null, this.atEnd_ = !0;
      }, jspb.BinaryIterator.prototype.get = function () {
        return this.nextValue_;
      }, jspb.BinaryIterator.prototype.atEnd = function () {
        return this.atEnd_;
      }, jspb.BinaryIterator.prototype.next = function () {
        var e = this.nextValue_;
        return this.decoder_ ? this.decoder_.atEnd() ? (this.nextValue_ = null, this.atEnd_ = !0) : this.nextValue_ = this.nextMethod_.call(this.decoder_) : this.elements_ && (this.cursor_ == this.elements_.length ? (this.nextValue_ = null, this.atEnd_ = !0) : this.nextValue_ = this.elements_[this.cursor_++]), e;
      }, jspb.BinaryDecoder = function (e, t, r) {
        this.bytes_ = null, this.tempHigh_ = this.tempLow_ = this.cursor_ = this.end_ = this.start_ = 0, this.error_ = !1, e && this.setBlock(e, t, r);
      }, jspb.BinaryDecoder.instanceCache_ = [], jspb.BinaryDecoder.alloc = function (e, t, r) {
        if (jspb.BinaryDecoder.instanceCache_.length) {
          var o = jspb.BinaryDecoder.instanceCache_.pop();
          return e && o.setBlock(e, t, r), o;
        }

        return new jspb.BinaryDecoder(e, t, r);
      }, jspb.BinaryDecoder.prototype.free = function () {
        this.clear(), jspb.BinaryDecoder.instanceCache_.length < 100 && jspb.BinaryDecoder.instanceCache_.push(this);
      }, jspb.BinaryDecoder.prototype.clone = function () {
        return jspb.BinaryDecoder.alloc(this.bytes_, this.start_, this.end_ - this.start_);
      }, jspb.BinaryDecoder.prototype.clear = function () {
        this.bytes_ = null, this.cursor_ = this.end_ = this.start_ = 0, this.error_ = !1;
      }, jspb.BinaryDecoder.prototype.getBuffer = function () {
        return this.bytes_;
      }, jspb.BinaryDecoder.prototype.setBlock = function (e, t, r) {
        this.bytes_ = jspb.utils.byteSourceToUint8Array(e), this.start_ = goog.isDef(t) ? t : 0, this.end_ = goog.isDef(r) ? this.start_ + r : this.bytes_.length, this.cursor_ = this.start_;
      }, jspb.BinaryDecoder.prototype.getEnd = function () {
        return this.end_;
      }, jspb.BinaryDecoder.prototype.setEnd = function (e) {
        this.end_ = e;
      }, jspb.BinaryDecoder.prototype.reset = function () {
        this.cursor_ = this.start_;
      }, jspb.BinaryDecoder.prototype.getCursor = function () {
        return this.cursor_;
      }, jspb.BinaryDecoder.prototype.setCursor = function (e) {
        this.cursor_ = e;
      }, jspb.BinaryDecoder.prototype.advance = function (e) {
        this.cursor_ += e, goog.asserts.assert(this.cursor_ <= this.end_);
      }, jspb.BinaryDecoder.prototype.atEnd = function () {
        return this.cursor_ == this.end_;
      }, jspb.BinaryDecoder.prototype.pastEnd = function () {
        return this.cursor_ > this.end_;
      }, jspb.BinaryDecoder.prototype.getError = function () {
        return this.error_ || this.cursor_ < 0 || this.cursor_ > this.end_;
      }, jspb.BinaryDecoder.prototype.readSplitVarint64_ = function () {
        for (var e, t, r = 0, o = 0; o < 4; o++) {
          if (r |= (127 & (e = this.bytes_[this.cursor_++])) << 7 * o, e < 128) return this.tempLow_ = r >>> 0, void (this.tempHigh_ = 0);
        }

        if (r |= (127 & (e = this.bytes_[this.cursor_++])) << 28, t = 0 | (127 & e) >> 4, e < 128) this.tempLow_ = r >>> 0, this.tempHigh_ = t >>> 0;else {
          for (o = 0; o < 5; o++) {
            if (t |= (127 & (e = this.bytes_[this.cursor_++])) << 7 * o + 3, e < 128) return this.tempLow_ = r >>> 0, void (this.tempHigh_ = t >>> 0);
          }

          goog.asserts.fail("Failed to read varint, encoding is invalid."), this.error_ = !0;
        }
      }, jspb.BinaryDecoder.prototype.skipVarint = function () {
        for (; 128 & this.bytes_[this.cursor_];) {
          this.cursor_++;
        }

        this.cursor_++;
      }, jspb.BinaryDecoder.prototype.unskipVarint = function (e) {
        for (; 128 < e;) {
          this.cursor_--, e >>>= 7;
        }

        this.cursor_--;
      }, jspb.BinaryDecoder.prototype.readUnsignedVarint32 = function () {
        var e,
            t = this.bytes_,
            r = 127 & (e = t[this.cursor_ + 0]);
        return e < 128 ? (this.cursor_ += 1, goog.asserts.assert(this.cursor_ <= this.end_), r) : (r |= (127 & (e = t[this.cursor_ + 1])) << 7, e < 128 ? (this.cursor_ += 2, goog.asserts.assert(this.cursor_ <= this.end_), r) : (r |= (127 & (e = t[this.cursor_ + 2])) << 14, e < 128 ? (this.cursor_ += 3, goog.asserts.assert(this.cursor_ <= this.end_), r) : (r |= (127 & (e = t[this.cursor_ + 3])) << 21, e < 128 ? (this.cursor_ += 4, goog.asserts.assert(this.cursor_ <= this.end_), r) : (r |= (15 & (e = t[this.cursor_ + 4])) << 28, e < 128 ? (this.cursor_ += 5, goog.asserts.assert(this.cursor_ <= this.end_), r >>> 0) : (this.cursor_ += 5, 128 <= t[this.cursor_++] && 128 <= t[this.cursor_++] && 128 <= t[this.cursor_++] && 128 <= t[this.cursor_++] && 128 <= t[this.cursor_++] && goog.asserts.assert(!1), goog.asserts.assert(this.cursor_ <= this.end_), r)))));
      }, jspb.BinaryDecoder.prototype.readSignedVarint32 = jspb.BinaryDecoder.prototype.readUnsignedVarint32, jspb.BinaryDecoder.prototype.readUnsignedVarint32String = function () {
        return this.readUnsignedVarint32().toString();
      }, jspb.BinaryDecoder.prototype.readSignedVarint32String = function () {
        return this.readSignedVarint32().toString();
      }, jspb.BinaryDecoder.prototype.readZigzagVarint32 = function () {
        var e = this.readUnsignedVarint32();
        return e >>> 1 ^ -(1 & e);
      }, jspb.BinaryDecoder.prototype.readUnsignedVarint64 = function () {
        return this.readSplitVarint64_(), jspb.utils.joinUint64(this.tempLow_, this.tempHigh_);
      }, jspb.BinaryDecoder.prototype.readUnsignedVarint64String = function () {
        return this.readSplitVarint64_(), jspb.utils.joinUnsignedDecimalString(this.tempLow_, this.tempHigh_);
      }, jspb.BinaryDecoder.prototype.readSignedVarint64 = function () {
        return this.readSplitVarint64_(), jspb.utils.joinInt64(this.tempLow_, this.tempHigh_);
      }, jspb.BinaryDecoder.prototype.readSignedVarint64String = function () {
        return this.readSplitVarint64_(), jspb.utils.joinSignedDecimalString(this.tempLow_, this.tempHigh_);
      }, jspb.BinaryDecoder.prototype.readZigzagVarint64 = function () {
        return this.readSplitVarint64_(), jspb.utils.joinZigzag64(this.tempLow_, this.tempHigh_);
      }, jspb.BinaryDecoder.prototype.readZigzagVarint64String = function () {
        return this.readZigzagVarint64().toString();
      }, jspb.BinaryDecoder.prototype.readUint8 = function () {
        var e = this.bytes_[this.cursor_ + 0];
        return this.cursor_ += 1, goog.asserts.assert(this.cursor_ <= this.end_), e;
      }, jspb.BinaryDecoder.prototype.readUint16 = function () {
        var e = this.bytes_[this.cursor_ + 0],
            t = this.bytes_[this.cursor_ + 1];
        return this.cursor_ += 2, goog.asserts.assert(this.cursor_ <= this.end_), e << 0 | t << 8;
      }, jspb.BinaryDecoder.prototype.readUint32 = function () {
        var e = this.bytes_[this.cursor_ + 0],
            t = this.bytes_[this.cursor_ + 1],
            r = this.bytes_[this.cursor_ + 2],
            o = this.bytes_[this.cursor_ + 3];
        return this.cursor_ += 4, goog.asserts.assert(this.cursor_ <= this.end_), (e << 0 | t << 8 | r << 16 | o << 24) >>> 0;
      }, jspb.BinaryDecoder.prototype.readUint64 = function () {
        var e = this.readUint32(),
            t = this.readUint32();
        return jspb.utils.joinUint64(e, t);
      }, jspb.BinaryDecoder.prototype.readUint64String = function () {
        var e = this.readUint32(),
            t = this.readUint32();
        return jspb.utils.joinUnsignedDecimalString(e, t);
      }, jspb.BinaryDecoder.prototype.readInt8 = function () {
        var e = this.bytes_[this.cursor_ + 0];
        return this.cursor_ += 1, goog.asserts.assert(this.cursor_ <= this.end_), e << 24 >> 24;
      }, jspb.BinaryDecoder.prototype.readInt16 = function () {
        var e = this.bytes_[this.cursor_ + 0],
            t = this.bytes_[this.cursor_ + 1];
        return this.cursor_ += 2, goog.asserts.assert(this.cursor_ <= this.end_), (e << 0 | t << 8) << 16 >> 16;
      }, jspb.BinaryDecoder.prototype.readInt32 = function () {
        var e = this.bytes_[this.cursor_ + 0],
            t = this.bytes_[this.cursor_ + 1],
            r = this.bytes_[this.cursor_ + 2],
            o = this.bytes_[this.cursor_ + 3];
        return this.cursor_ += 4, goog.asserts.assert(this.cursor_ <= this.end_), e << 0 | t << 8 | r << 16 | o << 24;
      }, jspb.BinaryDecoder.prototype.readInt64 = function () {
        var e = this.readUint32(),
            t = this.readUint32();
        return jspb.utils.joinInt64(e, t);
      }, jspb.BinaryDecoder.prototype.readInt64String = function () {
        var e = this.readUint32(),
            t = this.readUint32();
        return jspb.utils.joinSignedDecimalString(e, t);
      }, jspb.BinaryDecoder.prototype.readFloat = function () {
        var e = this.readUint32();
        return jspb.utils.joinFloat32(e, 0);
      }, jspb.BinaryDecoder.prototype.readDouble = function () {
        var e = this.readUint32(),
            t = this.readUint32();
        return jspb.utils.joinFloat64(e, t);
      }, jspb.BinaryDecoder.prototype.readBool = function () {
        return !!this.bytes_[this.cursor_++];
      }, jspb.BinaryDecoder.prototype.readEnum = function () {
        return this.readSignedVarint32();
      }, jspb.BinaryDecoder.prototype.readString = function (e) {
        var t = this.bytes_,
            r = this.cursor_;
        e = r + e;

        for (var o = [], s = ""; r < e;) {
          if ((n = t[r++]) < 128) o.push(n);else {
            if (n < 192) continue;

            if (n < 224) {
              var i = t[r++];
              o.push((31 & n) << 6 | 63 & i);
            } else if (n < 240) {
              i = t[r++];
              var a = t[r++];
              o.push((15 & n) << 12 | (63 & i) << 6 | 63 & a);
            } else if (n < 248) {
              var n = (n = (7 & n) << 18 | (63 & (i = t[r++])) << 12 | (63 & (a = t[r++])) << 6 | 63 & t[r++]) - 65536;
              o.push(55296 + (n >> 10 & 1023), 56320 + (1023 & n));
            }
          }
          8192 <= o.length && (s += String.fromCharCode.apply(null, o), o.length = 0);
        }

        return s += goog.crypt.byteArrayToString(o), this.cursor_ = r, s;
      }, jspb.BinaryDecoder.prototype.readStringWithLength = function () {
        var e = this.readUnsignedVarint32();
        return this.readString(e);
      }, jspb.BinaryDecoder.prototype.readBytes = function (e) {
        if (e < 0 || this.cursor_ + e > this.bytes_.length) return this.error_ = !0, goog.asserts.fail("Invalid byte length!"), new Uint8Array(0);
        var t = this.bytes_.subarray(this.cursor_, this.cursor_ + e);
        return this.cursor_ += e, goog.asserts.assert(this.cursor_ <= this.end_), t;
      }, jspb.BinaryDecoder.prototype.readVarintHash64 = function () {
        return this.readSplitVarint64_(), jspb.utils.joinHash64(this.tempLow_, this.tempHigh_);
      }, jspb.BinaryDecoder.prototype.readFixedHash64 = function () {
        var e = this.bytes_,
            t = this.cursor_,
            r = e[t + 0],
            o = e[t + 1],
            s = e[t + 2],
            i = e[t + 3],
            a = e[t + 4],
            n = e[t + 5],
            p = e[t + 6];
        e = e[t + 7];
        return this.cursor_ += 8, String.fromCharCode(r, o, s, i, a, n, p, e);
      }, jspb.BinaryReader = function (e, t, r) {
        this.decoder_ = jspb.BinaryDecoder.alloc(e, t, r), this.fieldCursor_ = this.decoder_.getCursor(), this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER, this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID, this.error_ = !1, this.readCallbacks_ = null;
      }, jspb.BinaryReader.instanceCache_ = [], jspb.BinaryReader.alloc = function (e, t, r) {
        if (jspb.BinaryReader.instanceCache_.length) {
          var o = jspb.BinaryReader.instanceCache_.pop();
          return e && o.decoder_.setBlock(e, t, r), o;
        }

        return new jspb.BinaryReader(e, t, r);
      }, jspb.BinaryReader.prototype.alloc = jspb.BinaryReader.alloc, jspb.BinaryReader.prototype.free = function () {
        this.decoder_.clear(), this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER, this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID, this.error_ = !1, this.readCallbacks_ = null, jspb.BinaryReader.instanceCache_.length < 100 && jspb.BinaryReader.instanceCache_.push(this);
      }, jspb.BinaryReader.prototype.getFieldCursor = function () {
        return this.fieldCursor_;
      }, jspb.BinaryReader.prototype.getCursor = function () {
        return this.decoder_.getCursor();
      }, jspb.BinaryReader.prototype.getBuffer = function () {
        return this.decoder_.getBuffer();
      }, jspb.BinaryReader.prototype.getFieldNumber = function () {
        return this.nextField_;
      }, jspb.BinaryReader.prototype.getWireType = function () {
        return this.nextWireType_;
      }, jspb.BinaryReader.prototype.isEndGroup = function () {
        return this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP;
      }, jspb.BinaryReader.prototype.getError = function () {
        return this.error_ || this.decoder_.getError();
      }, jspb.BinaryReader.prototype.setBlock = function (e, t, r) {
        this.decoder_.setBlock(e, t, r), this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER, this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
      }, jspb.BinaryReader.prototype.reset = function () {
        this.decoder_.reset(), this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER, this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
      }, jspb.BinaryReader.prototype.advance = function (e) {
        this.decoder_.advance(e);
      }, jspb.BinaryReader.prototype.nextField = function () {
        if (this.decoder_.atEnd()) return !1;
        if (this.getError()) return goog.asserts.fail("Decoder hit an error"), !1;
        this.fieldCursor_ = this.decoder_.getCursor();
        var e,
            t = (e = this.decoder_.readUnsignedVarint32()) >>> 3;
        return (e = 7 & e) != jspb.BinaryConstants.WireType.VARINT && e != jspb.BinaryConstants.WireType.FIXED32 && e != jspb.BinaryConstants.WireType.FIXED64 && e != jspb.BinaryConstants.WireType.DELIMITED && e != jspb.BinaryConstants.WireType.START_GROUP && e != jspb.BinaryConstants.WireType.END_GROUP ? (goog.asserts.fail("Invalid wire type"), !(this.error_ = !0)) : (this.nextField_ = t, this.nextWireType_ = e, !0);
      }, jspb.BinaryReader.prototype.unskipHeader = function () {
        this.decoder_.unskipVarint(this.nextField_ << 3 | this.nextWireType_);
      }, jspb.BinaryReader.prototype.skipMatchingFields = function () {
        var e = this.nextField_;

        for (this.unskipHeader(); this.nextField() && this.getFieldNumber() == e;) {
          this.skipField();
        }

        this.decoder_.atEnd() || this.unskipHeader();
      }, jspb.BinaryReader.prototype.skipVarintField = function () {
        this.nextWireType_ != jspb.BinaryConstants.WireType.VARINT ? (goog.asserts.fail("Invalid wire type for skipVarintField"), this.skipField()) : this.decoder_.skipVarint();
      }, jspb.BinaryReader.prototype.skipDelimitedField = function () {
        if (this.nextWireType_ != jspb.BinaryConstants.WireType.DELIMITED) goog.asserts.fail("Invalid wire type for skipDelimitedField"), this.skipField();else {
          var e = this.decoder_.readUnsignedVarint32();
          this.decoder_.advance(e);
        }
      }, jspb.BinaryReader.prototype.skipFixed32Field = function () {
        this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED32 ? (goog.asserts.fail("Invalid wire type for skipFixed32Field"), this.skipField()) : this.decoder_.advance(4);
      }, jspb.BinaryReader.prototype.skipFixed64Field = function () {
        this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED64 ? (goog.asserts.fail("Invalid wire type for skipFixed64Field"), this.skipField()) : this.decoder_.advance(8);
      }, jspb.BinaryReader.prototype.skipGroup = function () {
        var e = [this.nextField_];

        do {
          if (!this.nextField()) {
            goog.asserts.fail("Unmatched start-group tag: stream EOF"), this.error_ = !0;
            break;
          }

          if (this.nextWireType_ == jspb.BinaryConstants.WireType.START_GROUP) e.push(this.nextField_);else if (this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP && this.nextField_ != e.pop()) {
            goog.asserts.fail("Unmatched end-group tag"), this.error_ = !0;
            break;
          }
        } while (0 < e.length);
      }, jspb.BinaryReader.prototype.skipField = function () {
        switch (this.nextWireType_) {
          case jspb.BinaryConstants.WireType.VARINT:
            this.skipVarintField();
            break;

          case jspb.BinaryConstants.WireType.FIXED64:
            this.skipFixed64Field();
            break;

          case jspb.BinaryConstants.WireType.DELIMITED:
            this.skipDelimitedField();
            break;

          case jspb.BinaryConstants.WireType.FIXED32:
            this.skipFixed32Field();
            break;

          case jspb.BinaryConstants.WireType.START_GROUP:
            this.skipGroup();
            break;

          default:
            goog.asserts.fail("Invalid wire encoding for field.");
        }
      }, jspb.BinaryReader.prototype.registerReadCallback = function (e, t) {
        goog.isNull(this.readCallbacks_) && (this.readCallbacks_ = {}), goog.asserts.assert(!this.readCallbacks_[e]), this.readCallbacks_[e] = t;
      }, jspb.BinaryReader.prototype.runReadCallback = function (e) {
        return goog.asserts.assert(!goog.isNull(this.readCallbacks_)), e = this.readCallbacks_[e], goog.asserts.assert(e), e(this);
      }, jspb.BinaryReader.prototype.readAny = function (e) {
        this.nextWireType_ = jspb.BinaryConstants.FieldTypeToWireType(e);
        var t = jspb.BinaryConstants.FieldType;

        switch (e) {
          case t.DOUBLE:
            return this.readDouble();

          case t.FLOAT:
            return this.readFloat();

          case t.INT64:
            return this.readInt64();

          case t.UINT64:
            return this.readUint64();

          case t.INT32:
            return this.readInt32();

          case t.FIXED64:
            return this.readFixed64();

          case t.FIXED32:
            return this.readFixed32();

          case t.BOOL:
            return this.readBool();

          case t.STRING:
            return this.readString();

          case t.GROUP:
            goog.asserts.fail("Group field type not supported in readAny()");

          case t.MESSAGE:
            goog.asserts.fail("Message field type not supported in readAny()");

          case t.BYTES:
            return this.readBytes();

          case t.UINT32:
            return this.readUint32();

          case t.ENUM:
            return this.readEnum();

          case t.SFIXED32:
            return this.readSfixed32();

          case t.SFIXED64:
            return this.readSfixed64();

          case t.SINT32:
            return this.readSint32();

          case t.SINT64:
            return this.readSint64();

          case t.FHASH64:
            return this.readFixedHash64();

          case t.VHASH64:
            return this.readVarintHash64();

          default:
            goog.asserts.fail("Invalid field type in readAny()");
        }

        return 0;
      }, jspb.BinaryReader.prototype.readMessage = function (e, t) {
        goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
        var r = this.decoder_.getEnd(),
            o = this.decoder_.readUnsignedVarint32();
        o = this.decoder_.getCursor() + o;
        this.decoder_.setEnd(o), t(e, this), this.decoder_.setCursor(o), this.decoder_.setEnd(r);
      }, jspb.BinaryReader.prototype.readGroup = function (e, t, r) {
        goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.START_GROUP), goog.asserts.assert(this.nextField_ == e), r(t, this), this.error_ || this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP || (goog.asserts.fail("Group submessage did not end with an END_GROUP tag"), this.error_ = !0);
      }, jspb.BinaryReader.prototype.getFieldDecoder = function () {
        goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
        var e = this.decoder_.readUnsignedVarint32(),
            t = this.decoder_.getCursor(),
            r = t + e;
        e = jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(), t, e);
        return this.decoder_.setCursor(r), e;
      }, jspb.BinaryReader.prototype.readInt32 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readSignedVarint32();
      }, jspb.BinaryReader.prototype.readInt32String = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readSignedVarint32String();
      }, jspb.BinaryReader.prototype.readInt64 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readSignedVarint64();
      }, jspb.BinaryReader.prototype.readInt64String = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readSignedVarint64String();
      }, jspb.BinaryReader.prototype.readUint32 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readUnsignedVarint32();
      }, jspb.BinaryReader.prototype.readUint32String = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readUnsignedVarint32String();
      }, jspb.BinaryReader.prototype.readUint64 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readUnsignedVarint64();
      }, jspb.BinaryReader.prototype.readUint64String = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readUnsignedVarint64String();
      }, jspb.BinaryReader.prototype.readSint32 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readZigzagVarint32();
      }, jspb.BinaryReader.prototype.readSint64 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readZigzagVarint64();
      }, jspb.BinaryReader.prototype.readSint64String = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readZigzagVarint64String();
      }, jspb.BinaryReader.prototype.readFixed32 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32), this.decoder_.readUint32();
      }, jspb.BinaryReader.prototype.readFixed64 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64), this.decoder_.readUint64();
      }, jspb.BinaryReader.prototype.readFixed64String = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64), this.decoder_.readUint64String();
      }, jspb.BinaryReader.prototype.readSfixed32 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32), this.decoder_.readInt32();
      }, jspb.BinaryReader.prototype.readSfixed32String = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32), this.decoder_.readInt32().toString();
      }, jspb.BinaryReader.prototype.readSfixed64 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64), this.decoder_.readInt64();
      }, jspb.BinaryReader.prototype.readSfixed64String = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64), this.decoder_.readInt64String();
      }, jspb.BinaryReader.prototype.readFloat = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32), this.decoder_.readFloat();
      }, jspb.BinaryReader.prototype.readDouble = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64), this.decoder_.readDouble();
      }, jspb.BinaryReader.prototype.readBool = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), !!this.decoder_.readUnsignedVarint32();
      }, jspb.BinaryReader.prototype.readEnum = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readSignedVarint64();
      }, jspb.BinaryReader.prototype.readString = function () {
        goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
        var e = this.decoder_.readUnsignedVarint32();
        return this.decoder_.readString(e);
      }, jspb.BinaryReader.prototype.readBytes = function () {
        goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
        var e = this.decoder_.readUnsignedVarint32();
        return this.decoder_.readBytes(e);
      }, jspb.BinaryReader.prototype.readVarintHash64 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT), this.decoder_.readVarintHash64();
      }, jspb.BinaryReader.prototype.readFixedHash64 = function () {
        return goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64), this.decoder_.readFixedHash64();
      }, jspb.BinaryReader.prototype.readPackedField_ = function (e) {
        goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);

        for (var t = this.decoder_.readUnsignedVarint32(), r = (t = this.decoder_.getCursor() + t, []); this.decoder_.getCursor() < t;) {
          r.push(e.call(this.decoder_));
        }

        return r;
      }, jspb.BinaryReader.prototype.readPackedInt32 = function () {
        return this.readPackedField_(this.decoder_.readSignedVarint32);
      }, jspb.BinaryReader.prototype.readPackedInt32String = function () {
        return this.readPackedField_(this.decoder_.readSignedVarint32String);
      }, jspb.BinaryReader.prototype.readPackedInt64 = function () {
        return this.readPackedField_(this.decoder_.readSignedVarint64);
      }, jspb.BinaryReader.prototype.readPackedInt64String = function () {
        return this.readPackedField_(this.decoder_.readSignedVarint64String);
      }, jspb.BinaryReader.prototype.readPackedUint32 = function () {
        return this.readPackedField_(this.decoder_.readUnsignedVarint32);
      }, jspb.BinaryReader.prototype.readPackedUint32String = function () {
        return this.readPackedField_(this.decoder_.readUnsignedVarint32String);
      }, jspb.BinaryReader.prototype.readPackedUint64 = function () {
        return this.readPackedField_(this.decoder_.readUnsignedVarint64);
      }, jspb.BinaryReader.prototype.readPackedUint64String = function () {
        return this.readPackedField_(this.decoder_.readUnsignedVarint64String);
      }, jspb.BinaryReader.prototype.readPackedSint32 = function () {
        return this.readPackedField_(this.decoder_.readZigzagVarint32);
      }, jspb.BinaryReader.prototype.readPackedSint64 = function () {
        return this.readPackedField_(this.decoder_.readZigzagVarint64);
      }, jspb.BinaryReader.prototype.readPackedSint64String = function () {
        return this.readPackedField_(this.decoder_.readZigzagVarint64String);
      }, jspb.BinaryReader.prototype.readPackedFixed32 = function () {
        return this.readPackedField_(this.decoder_.readUint32);
      }, jspb.BinaryReader.prototype.readPackedFixed64 = function () {
        return this.readPackedField_(this.decoder_.readUint64);
      }, jspb.BinaryReader.prototype.readPackedFixed64String = function () {
        return this.readPackedField_(this.decoder_.readUint64String);
      }, jspb.BinaryReader.prototype.readPackedSfixed32 = function () {
        return this.readPackedField_(this.decoder_.readInt32);
      }, jspb.BinaryReader.prototype.readPackedSfixed64 = function () {
        return this.readPackedField_(this.decoder_.readInt64);
      }, jspb.BinaryReader.prototype.readPackedSfixed64String = function () {
        return this.readPackedField_(this.decoder_.readInt64String);
      }, jspb.BinaryReader.prototype.readPackedFloat = function () {
        return this.readPackedField_(this.decoder_.readFloat);
      }, jspb.BinaryReader.prototype.readPackedDouble = function () {
        return this.readPackedField_(this.decoder_.readDouble);
      }, jspb.BinaryReader.prototype.readPackedBool = function () {
        return this.readPackedField_(this.decoder_.readBool);
      }, jspb.BinaryReader.prototype.readPackedEnum = function () {
        return this.readPackedField_(this.decoder_.readEnum);
      }, jspb.BinaryReader.prototype.readPackedVarintHash64 = function () {
        return this.readPackedField_(this.decoder_.readVarintHash64);
      }, jspb.BinaryReader.prototype.readPackedFixedHash64 = function () {
        return this.readPackedField_(this.decoder_.readFixedHash64);
      }, jspb.Export = {}, exports.Map = jspb.Map, exports.Message = jspb.Message, exports.BinaryReader = jspb.BinaryReader, exports.BinaryWriter = jspb.BinaryWriter, exports.ExtensionFieldInfo = jspb.ExtensionFieldInfo, exports.ExtensionFieldBinaryInfo = jspb.ExtensionFieldBinaryInfo, exports.exportSymbol = goog.exportSymbol, exports.inherits = goog.inherits, exports.object = {
        extend: goog.object.extend
      }, exports.typeOf = goog.typeOf;
    }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, _require("buffer").Buffer);
  }, {
    buffer: 2
  }],
  9: [function (e, t, r) {
    var o = e("google-protobuf"),
        s = o,
        i = window;
    s.exportSymbol("proto.stream.Broadcast", null, i), s.exportSymbol("proto.stream.BroadcastAck", null, i), s.exportSymbol("proto.stream.CheckIn", null, i), s.exportSymbol("proto.stream.CheckInAck", null, i), s.exportSymbol("proto.stream.CheckInNotify", null, i), s.exportSymbol("proto.stream.FrameBroadcast", null, i), s.exportSymbol("proto.stream.FrameBroadcastAck", null, i), s.exportSymbol("proto.stream.FrameDataNotify", null, i), s.exportSymbol("proto.stream.FrameSyncNotify", null, i), s.exportSymbol("proto.stream.GetCacheData", null, i), s.exportSymbol("proto.stream.GetCacheDataAck", null, i), s.exportSymbol("proto.stream.Heartbeat", null, i), s.exportSymbol("proto.stream.HeartbeatAck", null, i), s.exportSymbol("proto.stream.Notify", null, i), s.exportSymbol("proto.stream.Publish", null, i), s.exportSymbol("proto.stream.PublishAck", null, i), s.exportSymbol("proto.stream.PublishNotify", null, i), s.exportSymbol("proto.stream.SDKHotelCmdID", null, i), s.exportSymbol("proto.stream.SetFrameSyncRate", null, i), s.exportSymbol("proto.stream.SetFrameSyncRateAck", null, i), s.exportSymbol("proto.stream.SetFrameSyncRateNotify", null, i), s.exportSymbol("proto.stream.SetUseTimeStamp", null, i), s.exportSymbol("proto.stream.SetUseTimeStampAck", null, i), s.exportSymbol("proto.stream.Subscribe", null, i), s.exportSymbol("proto.stream.SubscribeAck", null, i), proto.stream.CheckIn = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.CheckIn, o.Message), s.DEBUG && !COMPILED && (proto.stream.CheckIn.displayName = "proto.stream.CheckIn"), o.Message.GENERATE_TO_OBJECT && (proto.stream.CheckIn.prototype.toObject = function (e) {
      return proto.stream.CheckIn.toObject(e, this);
    }, proto.stream.CheckIn.toObject = function (e, t) {
      var r = {
        gameid: o.Message.getFieldWithDefault(t, 1, 0),
        roomid: o.Message.getFieldWithDefault(t, 2, "0"),
        userid: o.Message.getFieldWithDefault(t, 3, 0),
        bookid: o.Message.getFieldWithDefault(t, 4, ""),
        key: o.Message.getFieldWithDefault(t, 5, "")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.CheckIn.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.CheckIn();
      return proto.stream.CheckIn.deserializeBinaryFromReader(r, t);
    }, proto.stream.CheckIn.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readString();
            e.setBookid(r);
            break;

          case 5:
            r = t.readString();
            e.setKey(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CheckIn.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.CheckIn.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CheckIn.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 < (r = e.getBookid()).length && t.writeString(4, r), 0 < (r = e.getKey()).length && t.writeString(5, r);
    }, proto.stream.CheckIn.prototype.getGameid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.CheckIn.prototype.setGameid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.CheckIn.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.CheckIn.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.CheckIn.prototype.getUserid = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.CheckIn.prototype.setUserid = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.CheckIn.prototype.getBookid = function () {
      return o.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.CheckIn.prototype.setBookid = function (e) {
      o.Message.setProto3StringField(this, 4, e);
    }, proto.stream.CheckIn.prototype.getKey = function () {
      return o.Message.getFieldWithDefault(this, 5, "");
    }, proto.stream.CheckIn.prototype.setKey = function (e) {
      o.Message.setProto3StringField(this, 5, e);
    }, proto.stream.CheckInAck = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.CheckInAck.repeatedFields_, null);
    }, s.inherits(proto.stream.CheckInAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.CheckInAck.displayName = "proto.stream.CheckInAck"), proto.stream.CheckInAck.repeatedFields_ = [3, 4], o.Message.GENERATE_TO_OBJECT && (proto.stream.CheckInAck.prototype.toObject = function (e) {
      return proto.stream.CheckInAck.toObject(e, this);
    }, proto.stream.CheckInAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0),
        bookid: o.Message.getFieldWithDefault(t, 2, ""),
        checkinsList: o.Message.getRepeatedField(t, 3),
        playersList: o.Message.getRepeatedField(t, 4),
        maxplayers: o.Message.getFieldWithDefault(t, 5, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.CheckInAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.CheckInAck();
      return proto.stream.CheckInAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.CheckInAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          case 2:
            r = t.readString();
            e.setBookid(r);
            break;

          case 3:
            r = t.readPackedUint32();
            e.setCheckinsList(r);
            break;

          case 4:
            r = t.readPackedUint32();
            e.setPlayersList(r);
            break;

          case 5:
            r = t.readUint32();
            e.setMaxplayers(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CheckInAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.CheckInAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CheckInAck.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r), 0 < (r = e.getBookid()).length && t.writeString(2, r), 0 < (r = e.getCheckinsList()).length && t.writePackedUint32(3, r), 0 < (r = e.getPlayersList()).length && t.writePackedUint32(4, r), 0 !== (r = e.getMaxplayers()) && t.writeUint32(5, r);
    }, proto.stream.CheckInAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.CheckInAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.CheckInAck.prototype.getBookid = function () {
      return o.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.CheckInAck.prototype.setBookid = function (e) {
      o.Message.setProto3StringField(this, 2, e);
    }, proto.stream.CheckInAck.prototype.getCheckinsList = function () {
      return o.Message.getRepeatedField(this, 3);
    }, proto.stream.CheckInAck.prototype.setCheckinsList = function (e) {
      o.Message.setField(this, 3, e || []);
    }, proto.stream.CheckInAck.prototype.addCheckins = function (e, t) {
      o.Message.addToRepeatedField(this, 3, e, t);
    }, proto.stream.CheckInAck.prototype.clearCheckinsList = function () {
      this.setCheckinsList([]);
    }, proto.stream.CheckInAck.prototype.getPlayersList = function () {
      return o.Message.getRepeatedField(this, 4);
    }, proto.stream.CheckInAck.prototype.setPlayersList = function (e) {
      o.Message.setField(this, 4, e || []);
    }, proto.stream.CheckInAck.prototype.addPlayers = function (e, t) {
      o.Message.addToRepeatedField(this, 4, e, t);
    }, proto.stream.CheckInAck.prototype.clearPlayersList = function () {
      this.setPlayersList([]);
    }, proto.stream.CheckInAck.prototype.getMaxplayers = function () {
      return o.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.CheckInAck.prototype.setMaxplayers = function (e) {
      o.Message.setProto3IntField(this, 5, e);
    }, proto.stream.Heartbeat = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.Heartbeat, o.Message), s.DEBUG && !COMPILED && (proto.stream.Heartbeat.displayName = "proto.stream.Heartbeat"), o.Message.GENERATE_TO_OBJECT && (proto.stream.Heartbeat.prototype.toObject = function (e) {
      return proto.stream.Heartbeat.toObject(e, this);
    }, proto.stream.Heartbeat.toObject = function (e, t) {
      var r = {
        gameid: o.Message.getFieldWithDefault(t, 1, 0),
        roomid: o.Message.getFieldWithDefault(t, 2, "0"),
        userid: o.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.Heartbeat.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.Heartbeat();
      return proto.stream.Heartbeat.deserializeBinaryFromReader(r, t);
    }, proto.stream.Heartbeat.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.Heartbeat.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.Heartbeat.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.Heartbeat.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r);
    }, proto.stream.Heartbeat.prototype.getGameid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.Heartbeat.prototype.setGameid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.Heartbeat.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.Heartbeat.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.Heartbeat.prototype.getUserid = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.Heartbeat.prototype.setUserid = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.HeartbeatAck = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.HeartbeatAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.HeartbeatAck.displayName = "proto.stream.HeartbeatAck"), o.Message.GENERATE_TO_OBJECT && (proto.stream.HeartbeatAck.prototype.toObject = function (e) {
      return proto.stream.HeartbeatAck.toObject(e, this);
    }, proto.stream.HeartbeatAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.HeartbeatAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.HeartbeatAck();
      return proto.stream.HeartbeatAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.HeartbeatAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.HeartbeatAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.HeartbeatAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.HeartbeatAck.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r);
    }, proto.stream.HeartbeatAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.HeartbeatAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.Broadcast = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.Broadcast.repeatedFields_, null);
    }, s.inherits(proto.stream.Broadcast, o.Message), s.DEBUG && !COMPILED && (proto.stream.Broadcast.displayName = "proto.stream.Broadcast"), proto.stream.Broadcast.repeatedFields_ = [3], o.Message.GENERATE_TO_OBJECT && (proto.stream.Broadcast.prototype.toObject = function (e) {
      return proto.stream.Broadcast.toObject(e, this);
    }, proto.stream.Broadcast.toObject = function (e, t) {
      var r = {
        roomid: o.Message.getFieldWithDefault(t, 1, "0"),
        flag: o.Message.getFieldWithDefault(t, 2, 0),
        dstuidsList: o.Message.getRepeatedField(t, 3),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.Broadcast.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.Broadcast();
      return proto.stream.Broadcast.deserializeBinaryFromReader(r, t);
    }, proto.stream.Broadcast.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setFlag(r);
            break;

          case 3:
            r = t.readPackedUint32();
            e.setDstuidsList(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.Broadcast.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.Broadcast.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.Broadcast.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getFlag()) && t.writeUint32(2, r), 0 < (r = e.getDstuidsList()).length && t.writePackedUint32(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.Broadcast.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.Broadcast.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.Broadcast.prototype.getFlag = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.Broadcast.prototype.setFlag = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.Broadcast.prototype.getDstuidsList = function () {
      return o.Message.getRepeatedField(this, 3);
    }, proto.stream.Broadcast.prototype.setDstuidsList = function (e) {
      o.Message.setField(this, 3, e || []);
    }, proto.stream.Broadcast.prototype.addDstuids = function (e, t) {
      o.Message.addToRepeatedField(this, 3, e, t);
    }, proto.stream.Broadcast.prototype.clearDstuidsList = function () {
      this.setDstuidsList([]);
    }, proto.stream.Broadcast.prototype.getCpproto = function () {
      return o.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.Broadcast.prototype.getCpproto_asB64 = function () {
      return o.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.Broadcast.prototype.getCpproto_asU8 = function () {
      return o.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.Broadcast.prototype.setCpproto = function (e) {
      o.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.BroadcastAck = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.BroadcastAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.BroadcastAck.displayName = "proto.stream.BroadcastAck"), o.Message.GENERATE_TO_OBJECT && (proto.stream.BroadcastAck.prototype.toObject = function (e) {
      return proto.stream.BroadcastAck.toObject(e, this);
    }, proto.stream.BroadcastAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.BroadcastAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.BroadcastAck();
      return proto.stream.BroadcastAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.BroadcastAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.BroadcastAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.BroadcastAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.BroadcastAck.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r);
    }, proto.stream.BroadcastAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.BroadcastAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.CheckInNotify = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.CheckInNotify.repeatedFields_, null);
    }, s.inherits(proto.stream.CheckInNotify, o.Message), s.DEBUG && !COMPILED && (proto.stream.CheckInNotify.displayName = "proto.stream.CheckInNotify"), proto.stream.CheckInNotify.repeatedFields_ = [3, 4], o.Message.GENERATE_TO_OBJECT && (proto.stream.CheckInNotify.prototype.toObject = function (e) {
      return proto.stream.CheckInNotify.toObject(e, this);
    }, proto.stream.CheckInNotify.toObject = function (e, t) {
      var r = {
        userid: o.Message.getFieldWithDefault(t, 1, 0),
        bookid: o.Message.getFieldWithDefault(t, 2, ""),
        checkinsList: o.Message.getRepeatedField(t, 3),
        playersList: o.Message.getRepeatedField(t, 4),
        maxplayers: o.Message.getFieldWithDefault(t, 5, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.CheckInNotify.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.CheckInNotify();
      return proto.stream.CheckInNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.CheckInNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readString();
            e.setBookid(r);
            break;

          case 3:
            r = t.readPackedUint32();
            e.setCheckinsList(r);
            break;

          case 4:
            r = t.readPackedUint32();
            e.setPlayersList(r);
            break;

          case 5:
            r = t.readUint32();
            e.setMaxplayers(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.CheckInNotify.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.CheckInNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.CheckInNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 < (r = e.getBookid()).length && t.writeString(2, r), 0 < (r = e.getCheckinsList()).length && t.writePackedUint32(3, r), 0 < (r = e.getPlayersList()).length && t.writePackedUint32(4, r), 0 !== (r = e.getMaxplayers()) && t.writeUint32(5, r);
    }, proto.stream.CheckInNotify.prototype.getUserid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.CheckInNotify.prototype.setUserid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.CheckInNotify.prototype.getBookid = function () {
      return o.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.CheckInNotify.prototype.setBookid = function (e) {
      o.Message.setProto3StringField(this, 2, e);
    }, proto.stream.CheckInNotify.prototype.getCheckinsList = function () {
      return o.Message.getRepeatedField(this, 3);
    }, proto.stream.CheckInNotify.prototype.setCheckinsList = function (e) {
      o.Message.setField(this, 3, e || []);
    }, proto.stream.CheckInNotify.prototype.addCheckins = function (e, t) {
      o.Message.addToRepeatedField(this, 3, e, t);
    }, proto.stream.CheckInNotify.prototype.clearCheckinsList = function () {
      this.setCheckinsList([]);
    }, proto.stream.CheckInNotify.prototype.getPlayersList = function () {
      return o.Message.getRepeatedField(this, 4);
    }, proto.stream.CheckInNotify.prototype.setPlayersList = function (e) {
      o.Message.setField(this, 4, e || []);
    }, proto.stream.CheckInNotify.prototype.addPlayers = function (e, t) {
      o.Message.addToRepeatedField(this, 4, e, t);
    }, proto.stream.CheckInNotify.prototype.clearPlayersList = function () {
      this.setPlayersList([]);
    }, proto.stream.CheckInNotify.prototype.getMaxplayers = function () {
      return o.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.CheckInNotify.prototype.setMaxplayers = function (e) {
      o.Message.setProto3IntField(this, 5, e);
    }, proto.stream.Notify = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.Notify, o.Message), s.DEBUG && !COMPILED && (proto.stream.Notify.displayName = "proto.stream.Notify"), o.Message.GENERATE_TO_OBJECT && (proto.stream.Notify.prototype.toObject = function (e) {
      return proto.stream.Notify.toObject(e, this);
    }, proto.stream.Notify.toObject = function (e, t) {
      var r = {
        srcuid: o.Message.getFieldWithDefault(t, 1, 0),
        priority: o.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.Notify.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.Notify();
      return proto.stream.Notify.deserializeBinaryFromReader(r, t);
    }, proto.stream.Notify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setSrcuid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.Notify.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.Notify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.Notify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getSrcuid()) && t.writeUint32(1, r), 0 !== (r = e.getPriority()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r);
    }, proto.stream.Notify.prototype.getSrcuid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.Notify.prototype.setSrcuid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.Notify.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.Notify.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.Notify.prototype.getCpproto = function () {
      return o.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.Notify.prototype.getCpproto_asB64 = function () {
      return o.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.Notify.prototype.getCpproto_asU8 = function () {
      return o.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.Notify.prototype.setCpproto = function (e) {
      o.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.Subscribe = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.Subscribe.repeatedFields_, null);
    }, s.inherits(proto.stream.Subscribe, o.Message), s.DEBUG && !COMPILED && (proto.stream.Subscribe.displayName = "proto.stream.Subscribe"), proto.stream.Subscribe.repeatedFields_ = [3, 4], o.Message.GENERATE_TO_OBJECT && (proto.stream.Subscribe.prototype.toObject = function (e) {
      return proto.stream.Subscribe.toObject(e, this);
    }, proto.stream.Subscribe.toObject = function (e, t) {
      var r = {
        gameid: o.Message.getFieldWithDefault(t, 1, 0),
        roomid: o.Message.getFieldWithDefault(t, 2, "0"),
        confirmsList: o.Message.getRepeatedField(t, 3),
        cancelsList: o.Message.getRepeatedField(t, 4)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.Subscribe.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.Subscribe();
      return proto.stream.Subscribe.deserializeBinaryFromReader(r, t);
    }, proto.stream.Subscribe.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readString();
            e.addConfirms(r);
            break;

          case 4:
            r = t.readString();
            e.addCancels(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.Subscribe.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.Subscribe.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.Subscribe.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 < (r = e.getConfirmsList()).length && t.writeRepeatedString(3, r), 0 < (r = e.getCancelsList()).length && t.writeRepeatedString(4, r);
    }, proto.stream.Subscribe.prototype.getGameid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.Subscribe.prototype.setGameid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.Subscribe.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.Subscribe.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.Subscribe.prototype.getConfirmsList = function () {
      return o.Message.getRepeatedField(this, 3);
    }, proto.stream.Subscribe.prototype.setConfirmsList = function (e) {
      o.Message.setField(this, 3, e || []);
    }, proto.stream.Subscribe.prototype.addConfirms = function (e, t) {
      o.Message.addToRepeatedField(this, 3, e, t);
    }, proto.stream.Subscribe.prototype.clearConfirmsList = function () {
      this.setConfirmsList([]);
    }, proto.stream.Subscribe.prototype.getCancelsList = function () {
      return o.Message.getRepeatedField(this, 4);
    }, proto.stream.Subscribe.prototype.setCancelsList = function (e) {
      o.Message.setField(this, 4, e || []);
    }, proto.stream.Subscribe.prototype.addCancels = function (e, t) {
      o.Message.addToRepeatedField(this, 4, e, t);
    }, proto.stream.Subscribe.prototype.clearCancelsList = function () {
      this.setCancelsList([]);
    }, proto.stream.SubscribeAck = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.SubscribeAck.repeatedFields_, null);
    }, s.inherits(proto.stream.SubscribeAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.SubscribeAck.displayName = "proto.stream.SubscribeAck"), proto.stream.SubscribeAck.repeatedFields_ = [2], o.Message.GENERATE_TO_OBJECT && (proto.stream.SubscribeAck.prototype.toObject = function (e) {
      return proto.stream.SubscribeAck.toObject(e, this);
    }, proto.stream.SubscribeAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0),
        groupsList: o.Message.getRepeatedField(t, 2)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SubscribeAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.SubscribeAck();
      return proto.stream.SubscribeAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.SubscribeAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          case 2:
            r = t.readString();
            e.addGroups(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SubscribeAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.SubscribeAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SubscribeAck.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r), 0 < (r = e.getGroupsList()).length && t.writeRepeatedString(2, r);
    }, proto.stream.SubscribeAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SubscribeAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SubscribeAck.prototype.getGroupsList = function () {
      return o.Message.getRepeatedField(this, 2);
    }, proto.stream.SubscribeAck.prototype.setGroupsList = function (e) {
      o.Message.setField(this, 2, e || []);
    }, proto.stream.SubscribeAck.prototype.addGroups = function (e, t) {
      o.Message.addToRepeatedField(this, 2, e, t);
    }, proto.stream.SubscribeAck.prototype.clearGroupsList = function () {
      this.setGroupsList([]);
    }, proto.stream.Publish = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.Publish.repeatedFields_, null);
    }, s.inherits(proto.stream.Publish, o.Message), s.DEBUG && !COMPILED && (proto.stream.Publish.displayName = "proto.stream.Publish"), proto.stream.Publish.repeatedFields_ = [3], o.Message.GENERATE_TO_OBJECT && (proto.stream.Publish.prototype.toObject = function (e) {
      return proto.stream.Publish.toObject(e, this);
    }, proto.stream.Publish.toObject = function (e, t) {
      var r = {
        roomid: o.Message.getFieldWithDefault(t, 1, "0"),
        priority: o.Message.getFieldWithDefault(t, 2, 0),
        groupsList: o.Message.getRepeatedField(t, 3),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.Publish.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.Publish();
      return proto.stream.Publish.deserializeBinaryFromReader(r, t);
    }, proto.stream.Publish.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 3:
            r = t.readString();
            e.addGroups(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.Publish.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.Publish.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.Publish.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getPriority()) && t.writeUint32(2, r), 0 < (r = e.getGroupsList()).length && t.writeRepeatedString(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.Publish.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.Publish.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.Publish.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.Publish.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.Publish.prototype.getGroupsList = function () {
      return o.Message.getRepeatedField(this, 3);
    }, proto.stream.Publish.prototype.setGroupsList = function (e) {
      o.Message.setField(this, 3, e || []);
    }, proto.stream.Publish.prototype.addGroups = function (e, t) {
      o.Message.addToRepeatedField(this, 3, e, t);
    }, proto.stream.Publish.prototype.clearGroupsList = function () {
      this.setGroupsList([]);
    }, proto.stream.Publish.prototype.getCpproto = function () {
      return o.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.Publish.prototype.getCpproto_asB64 = function () {
      return o.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.Publish.prototype.getCpproto_asU8 = function () {
      return o.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.Publish.prototype.setCpproto = function (e) {
      o.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.PublishAck = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.PublishAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.PublishAck.displayName = "proto.stream.PublishAck"), o.Message.GENERATE_TO_OBJECT && (proto.stream.PublishAck.prototype.toObject = function (e) {
      return proto.stream.PublishAck.toObject(e, this);
    }, proto.stream.PublishAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0),
        dstnum: o.Message.getFieldWithDefault(t, 2, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.PublishAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.PublishAck();
      return proto.stream.PublishAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.PublishAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint32();
            e.setDstnum(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.PublishAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.PublishAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.PublishAck.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r), 0 !== (r = e.getDstnum()) && t.writeUint32(2, r);
    }, proto.stream.PublishAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.PublishAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.PublishAck.prototype.getDstnum = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.PublishAck.prototype.setDstnum = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.PublishNotify = function (e) {
      o.Message.initialize(this, e, 0, -1, proto.stream.PublishNotify.repeatedFields_, null);
    }, s.inherits(proto.stream.PublishNotify, o.Message), s.DEBUG && !COMPILED && (proto.stream.PublishNotify.displayName = "proto.stream.PublishNotify"), proto.stream.PublishNotify.repeatedFields_ = [3], o.Message.GENERATE_TO_OBJECT && (proto.stream.PublishNotify.prototype.toObject = function (e) {
      return proto.stream.PublishNotify.toObject(e, this);
    }, proto.stream.PublishNotify.toObject = function (e, t) {
      var r = {
        srcuid: o.Message.getFieldWithDefault(t, 1, 0),
        priority: o.Message.getFieldWithDefault(t, 2, 0),
        groupsList: o.Message.getRepeatedField(t, 3),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.PublishNotify.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.PublishNotify();
      return proto.stream.PublishNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.PublishNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setSrcuid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 3:
            r = t.readString();
            e.addGroups(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.PublishNotify.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.PublishNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.PublishNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getSrcuid()) && t.writeUint32(1, r), 0 !== (r = e.getPriority()) && t.writeUint32(2, r), 0 < (r = e.getGroupsList()).length && t.writeRepeatedString(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.PublishNotify.prototype.getSrcuid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.PublishNotify.prototype.setSrcuid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.PublishNotify.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.PublishNotify.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.PublishNotify.prototype.getGroupsList = function () {
      return o.Message.getRepeatedField(this, 3);
    }, proto.stream.PublishNotify.prototype.setGroupsList = function (e) {
      o.Message.setField(this, 3, e || []);
    }, proto.stream.PublishNotify.prototype.addGroups = function (e, t) {
      o.Message.addToRepeatedField(this, 3, e, t);
    }, proto.stream.PublishNotify.prototype.clearGroupsList = function () {
      this.setGroupsList([]);
    }, proto.stream.PublishNotify.prototype.getCpproto = function () {
      return o.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.PublishNotify.prototype.getCpproto_asB64 = function () {
      return o.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.PublishNotify.prototype.getCpproto_asU8 = function () {
      return o.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.PublishNotify.prototype.setCpproto = function (e) {
      o.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.SetUseTimeStamp = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.SetUseTimeStamp, o.Message), s.DEBUG && !COMPILED && (proto.stream.SetUseTimeStamp.displayName = "proto.stream.SetUseTimeStamp"), o.Message.GENERATE_TO_OBJECT && (proto.stream.SetUseTimeStamp.prototype.toObject = function (e) {
      return proto.stream.SetUseTimeStamp.toObject(e, this);
    }, proto.stream.SetUseTimeStamp.toObject = function (e, t) {
      var r = {
        gameid: o.Message.getFieldWithDefault(t, 1, 0),
        roomid: o.Message.getFieldWithDefault(t, 2, "0"),
        priority: o.Message.getFieldWithDefault(t, 3, 0),
        usetimestamp: o.Message.getFieldWithDefault(t, 4, !1)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetUseTimeStamp.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.SetUseTimeStamp();
      return proto.stream.SetUseTimeStamp.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetUseTimeStamp.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 4:
            r = t.readBool();
            e.setUsetimestamp(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetUseTimeStamp.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.SetUseTimeStamp.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetUseTimeStamp.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getPriority()) && t.writeUint32(3, r), (r = e.getUsetimestamp()) && t.writeBool(4, r);
    }, proto.stream.SetUseTimeStamp.prototype.getGameid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetUseTimeStamp.prototype.setGameid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetUseTimeStamp.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.SetUseTimeStamp.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.SetUseTimeStamp.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.SetUseTimeStamp.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.SetUseTimeStamp.prototype.getUsetimestamp = function () {
      return o.Message.getFieldWithDefault(this, 4, !1);
    }, proto.stream.SetUseTimeStamp.prototype.setUsetimestamp = function (e) {
      o.Message.setProto3BooleanField(this, 4, e);
    }, proto.stream.SetUseTimeStampAck = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.SetUseTimeStampAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.SetUseTimeStampAck.displayName = "proto.stream.SetUseTimeStampAck"), o.Message.GENERATE_TO_OBJECT && (proto.stream.SetUseTimeStampAck.prototype.toObject = function (e) {
      return proto.stream.SetUseTimeStampAck.toObject(e, this);
    }, proto.stream.SetUseTimeStampAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0),
        timestamp: o.Message.getFieldWithDefault(t, 2, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetUseTimeStampAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.SetUseTimeStampAck();
      return proto.stream.SetUseTimeStampAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetUseTimeStampAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setTimestamp(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetUseTimeStampAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.SetUseTimeStampAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetUseTimeStampAck.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r), r = e.getTimestamp(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r);
    }, proto.stream.SetUseTimeStampAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetUseTimeStampAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetUseTimeStampAck.prototype.getTimestamp = function () {
      return o.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.SetUseTimeStampAck.prototype.setTimestamp = function (e) {
      o.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.SetFrameSyncRate = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.SetFrameSyncRate, o.Message), s.DEBUG && !COMPILED && (proto.stream.SetFrameSyncRate.displayName = "proto.stream.SetFrameSyncRate"), o.Message.GENERATE_TO_OBJECT && (proto.stream.SetFrameSyncRate.prototype.toObject = function (e) {
      return proto.stream.SetFrameSyncRate.toObject(e, this);
    }, proto.stream.SetFrameSyncRate.toObject = function (e, t) {
      var r = {
        gameid: o.Message.getFieldWithDefault(t, 1, 0),
        roomid: o.Message.getFieldWithDefault(t, 2, "0"),
        priority: o.Message.getFieldWithDefault(t, 3, 0),
        framerate: o.Message.getFieldWithDefault(t, 4, 0),
        frameidx: o.Message.getFieldWithDefault(t, 5, 0),
        enablegs: o.Message.getFieldWithDefault(t, 6, 0),
        cacheframems: o.Message.getFieldWithDefault(t, 7, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetFrameSyncRate.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.SetFrameSyncRate();
      return proto.stream.SetFrameSyncRate.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetFrameSyncRate.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 4:
            r = t.readUint32();
            e.setFramerate(r);
            break;

          case 5:
            r = t.readUint32();
            e.setFrameidx(r);
            break;

          case 6:
            r = t.readUint32();
            e.setEnablegs(r);
            break;

          case 7:
            r = t.readInt32();
            e.setCacheframems(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetFrameSyncRate.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.SetFrameSyncRate.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetFrameSyncRate.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getPriority()) && t.writeUint32(3, r), 0 !== (r = e.getFramerate()) && t.writeUint32(4, r), 0 !== (r = e.getFrameidx()) && t.writeUint32(5, r), 0 !== (r = e.getEnablegs()) && t.writeUint32(6, r), 0 !== (r = e.getCacheframems()) && t.writeInt32(7, r);
    }, proto.stream.SetFrameSyncRate.prototype.getGameid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetFrameSyncRate.prototype.setGameid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetFrameSyncRate.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.SetFrameSyncRate.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.SetFrameSyncRate.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.SetFrameSyncRate.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.SetFrameSyncRate.prototype.getFramerate = function () {
      return o.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.SetFrameSyncRate.prototype.setFramerate = function (e) {
      o.Message.setProto3IntField(this, 4, e);
    }, proto.stream.SetFrameSyncRate.prototype.getFrameidx = function () {
      return o.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.SetFrameSyncRate.prototype.setFrameidx = function (e) {
      o.Message.setProto3IntField(this, 5, e);
    }, proto.stream.SetFrameSyncRate.prototype.getEnablegs = function () {
      return o.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.SetFrameSyncRate.prototype.setEnablegs = function (e) {
      o.Message.setProto3IntField(this, 6, e);
    }, proto.stream.SetFrameSyncRate.prototype.getCacheframems = function () {
      return o.Message.getFieldWithDefault(this, 7, 0);
    }, proto.stream.SetFrameSyncRate.prototype.setCacheframems = function (e) {
      o.Message.setProto3IntField(this, 7, e);
    }, proto.stream.SetFrameSyncRateAck = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.SetFrameSyncRateAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.SetFrameSyncRateAck.displayName = "proto.stream.SetFrameSyncRateAck"), o.Message.GENERATE_TO_OBJECT && (proto.stream.SetFrameSyncRateAck.prototype.toObject = function (e) {
      return proto.stream.SetFrameSyncRateAck.toObject(e, this);
    }, proto.stream.SetFrameSyncRateAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetFrameSyncRateAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.SetFrameSyncRateAck();
      return proto.stream.SetFrameSyncRateAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetFrameSyncRateAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetFrameSyncRateAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.SetFrameSyncRateAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetFrameSyncRateAck.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r);
    }, proto.stream.SetFrameSyncRateAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetFrameSyncRateAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetFrameSyncRateNotify = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.SetFrameSyncRateNotify, o.Message), s.DEBUG && !COMPILED && (proto.stream.SetFrameSyncRateNotify.displayName = "proto.stream.SetFrameSyncRateNotify"), o.Message.GENERATE_TO_OBJECT && (proto.stream.SetFrameSyncRateNotify.prototype.toObject = function (e) {
      return proto.stream.SetFrameSyncRateNotify.toObject(e, this);
    }, proto.stream.SetFrameSyncRateNotify.toObject = function (e, t) {
      var r = {
        priority: o.Message.getFieldWithDefault(t, 1, 0),
        framerate: o.Message.getFieldWithDefault(t, 2, 0),
        frameidx: o.Message.getFieldWithDefault(t, 3, 0),
        timestamp: o.Message.getFieldWithDefault(t, 4, "0"),
        enablegs: o.Message.getFieldWithDefault(t, 5, 0),
        cacheframems: o.Message.getFieldWithDefault(t, 6, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetFrameSyncRateNotify.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.SetFrameSyncRateNotify();
      return proto.stream.SetFrameSyncRateNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetFrameSyncRateNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setPriority(r);
            break;

          case 2:
            r = t.readUint32();
            e.setFramerate(r);
            break;

          case 3:
            r = t.readUint32();
            e.setFrameidx(r);
            break;

          case 4:
            r = t.readUint64String();
            e.setTimestamp(r);
            break;

          case 5:
            r = t.readUint32();
            e.setEnablegs(r);
            break;

          case 6:
            r = t.readInt32();
            e.setCacheframems(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetFrameSyncRateNotify.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.SetFrameSyncRateNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetFrameSyncRateNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getPriority()) && t.writeUint32(1, r), 0 !== (r = e.getFramerate()) && t.writeUint32(2, r), 0 !== (r = e.getFrameidx()) && t.writeUint32(3, r), r = e.getTimestamp(), 0 !== parseInt(r, 10) && t.writeUint64String(4, r), 0 !== (r = e.getEnablegs()) && t.writeUint32(5, r), 0 !== (r = e.getCacheframems()) && t.writeInt32(6, r);
    }, proto.stream.SetFrameSyncRateNotify.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetFrameSyncRateNotify.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetFrameSyncRateNotify.prototype.getFramerate = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.SetFrameSyncRateNotify.prototype.setFramerate = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.SetFrameSyncRateNotify.prototype.getFrameidx = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.SetFrameSyncRateNotify.prototype.setFrameidx = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.SetFrameSyncRateNotify.prototype.getTimestamp = function () {
      return o.Message.getFieldWithDefault(this, 4, "0");
    }, proto.stream.SetFrameSyncRateNotify.prototype.setTimestamp = function (e) {
      o.Message.setProto3StringIntField(this, 4, e);
    }, proto.stream.SetFrameSyncRateNotify.prototype.getEnablegs = function () {
      return o.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.SetFrameSyncRateNotify.prototype.setEnablegs = function (e) {
      o.Message.setProto3IntField(this, 5, e);
    }, proto.stream.SetFrameSyncRateNotify.prototype.getCacheframems = function () {
      return o.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.SetFrameSyncRateNotify.prototype.setCacheframems = function (e) {
      o.Message.setProto3IntField(this, 6, e);
    }, proto.stream.FrameBroadcast = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.FrameBroadcast, o.Message), s.DEBUG && !COMPILED && (proto.stream.FrameBroadcast.displayName = "proto.stream.FrameBroadcast"), o.Message.GENERATE_TO_OBJECT && (proto.stream.FrameBroadcast.prototype.toObject = function (e) {
      return proto.stream.FrameBroadcast.toObject(e, this);
    }, proto.stream.FrameBroadcast.toObject = function (e, t) {
      var r = {
        roomid: o.Message.getFieldWithDefault(t, 1, "0"),
        priority: o.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64(),
        operation: o.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.FrameBroadcast.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.FrameBroadcast();
      return proto.stream.FrameBroadcast.deserializeBinaryFromReader(r, t);
    }, proto.stream.FrameBroadcast.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          case 4:
            r = t.readInt32();
            e.setOperation(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.FrameBroadcast.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.FrameBroadcast.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.FrameBroadcast.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getPriority()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r), 0 !== (r = e.getOperation()) && t.writeInt32(4, r);
    }, proto.stream.FrameBroadcast.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.FrameBroadcast.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.FrameBroadcast.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.FrameBroadcast.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.FrameBroadcast.prototype.getCpproto = function () {
      return o.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.FrameBroadcast.prototype.getCpproto_asB64 = function () {
      return o.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.FrameBroadcast.prototype.getCpproto_asU8 = function () {
      return o.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.FrameBroadcast.prototype.setCpproto = function (e) {
      o.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.FrameBroadcast.prototype.getOperation = function () {
      return o.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.FrameBroadcast.prototype.setOperation = function (e) {
      o.Message.setProto3IntField(this, 4, e);
    }, proto.stream.FrameBroadcastAck = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.FrameBroadcastAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.FrameBroadcastAck.displayName = "proto.stream.FrameBroadcastAck"), o.Message.GENERATE_TO_OBJECT && (proto.stream.FrameBroadcastAck.prototype.toObject = function (e) {
      return proto.stream.FrameBroadcastAck.toObject(e, this);
    }, proto.stream.FrameBroadcastAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.FrameBroadcastAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.FrameBroadcastAck();
      return proto.stream.FrameBroadcastAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.FrameBroadcastAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.FrameBroadcastAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.FrameBroadcastAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.FrameBroadcastAck.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r);
    }, proto.stream.FrameBroadcastAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.FrameBroadcastAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.FrameDataNotify = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.FrameDataNotify, o.Message), s.DEBUG && !COMPILED && (proto.stream.FrameDataNotify.displayName = "proto.stream.FrameDataNotify"), o.Message.GENERATE_TO_OBJECT && (proto.stream.FrameDataNotify.prototype.toObject = function (e) {
      return proto.stream.FrameDataNotify.toObject(e, this);
    }, proto.stream.FrameDataNotify.toObject = function (e, t) {
      var r = {
        srcuid: o.Message.getFieldWithDefault(t, 1, 0),
        priority: o.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64(),
        timestamp: o.Message.getFieldWithDefault(t, 4, "0"),
        frameidx: o.Message.getFieldWithDefault(t, 5, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.FrameDataNotify.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.FrameDataNotify();
      return proto.stream.FrameDataNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.FrameDataNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setSrcuid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          case 4:
            r = t.readUint64String();
            e.setTimestamp(r);
            break;

          case 5:
            r = t.readUint32();
            e.setFrameidx(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.FrameDataNotify.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.FrameDataNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.FrameDataNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getSrcuid()) && t.writeUint32(1, r), 0 !== (r = e.getPriority()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r), r = e.getTimestamp(), 0 !== parseInt(r, 10) && t.writeUint64String(4, r), 0 !== (r = e.getFrameidx()) && t.writeUint32(5, r);
    }, proto.stream.FrameDataNotify.prototype.getSrcuid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.FrameDataNotify.prototype.setSrcuid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.FrameDataNotify.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.FrameDataNotify.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.FrameDataNotify.prototype.getCpproto = function () {
      return o.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.FrameDataNotify.prototype.getCpproto_asB64 = function () {
      return o.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.FrameDataNotify.prototype.getCpproto_asU8 = function () {
      return o.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.FrameDataNotify.prototype.setCpproto = function (e) {
      o.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.FrameDataNotify.prototype.getTimestamp = function () {
      return o.Message.getFieldWithDefault(this, 4, "0");
    }, proto.stream.FrameDataNotify.prototype.setTimestamp = function (e) {
      o.Message.setProto3StringIntField(this, 4, e);
    }, proto.stream.FrameDataNotify.prototype.getFrameidx = function () {
      return o.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.FrameDataNotify.prototype.setFrameidx = function (e) {
      o.Message.setProto3IntField(this, 5, e);
    }, proto.stream.FrameSyncNotify = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.FrameSyncNotify, o.Message), s.DEBUG && !COMPILED && (proto.stream.FrameSyncNotify.displayName = "proto.stream.FrameSyncNotify"), o.Message.GENERATE_TO_OBJECT && (proto.stream.FrameSyncNotify.prototype.toObject = function (e) {
      return proto.stream.FrameSyncNotify.toObject(e, this);
    }, proto.stream.FrameSyncNotify.toObject = function (e, t) {
      var r = {
        priority: o.Message.getFieldWithDefault(t, 1, 0),
        lastidx: o.Message.getFieldWithDefault(t, 2, 0),
        nextidx: o.Message.getFieldWithDefault(t, 3, 0),
        startts: o.Message.getFieldWithDefault(t, 4, "0"),
        endts: o.Message.getFieldWithDefault(t, 5, "0"),
        timestamp: o.Message.getFieldWithDefault(t, 6, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.FrameSyncNotify.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.FrameSyncNotify();
      return proto.stream.FrameSyncNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.FrameSyncNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setPriority(r);
            break;

          case 2:
            r = t.readUint32();
            e.setLastidx(r);
            break;

          case 3:
            r = t.readUint32();
            e.setNextidx(r);
            break;

          case 4:
            r = t.readUint64String();
            e.setStartts(r);
            break;

          case 5:
            r = t.readUint64String();
            e.setEndts(r);
            break;

          case 6:
            r = t.readUint64String();
            e.setTimestamp(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.FrameSyncNotify.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.FrameSyncNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.FrameSyncNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getPriority()) && t.writeUint32(1, r), 0 !== (r = e.getLastidx()) && t.writeUint32(2, r), 0 !== (r = e.getNextidx()) && t.writeUint32(3, r), r = e.getStartts(), 0 !== parseInt(r, 10) && t.writeUint64String(4, r), r = e.getEndts(), 0 !== parseInt(r, 10) && t.writeUint64String(5, r), r = e.getTimestamp(), 0 !== parseInt(r, 10) && t.writeUint64String(6, r);
    }, proto.stream.FrameSyncNotify.prototype.getPriority = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.FrameSyncNotify.prototype.setPriority = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.FrameSyncNotify.prototype.getLastidx = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.FrameSyncNotify.prototype.setLastidx = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.FrameSyncNotify.prototype.getNextidx = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.FrameSyncNotify.prototype.setNextidx = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.FrameSyncNotify.prototype.getStartts = function () {
      return o.Message.getFieldWithDefault(this, 4, "0");
    }, proto.stream.FrameSyncNotify.prototype.setStartts = function (e) {
      o.Message.setProto3StringIntField(this, 4, e);
    }, proto.stream.FrameSyncNotify.prototype.getEndts = function () {
      return o.Message.getFieldWithDefault(this, 5, "0");
    }, proto.stream.FrameSyncNotify.prototype.setEndts = function (e) {
      o.Message.setProto3StringIntField(this, 5, e);
    }, proto.stream.FrameSyncNotify.prototype.getTimestamp = function () {
      return o.Message.getFieldWithDefault(this, 6, "0");
    }, proto.stream.FrameSyncNotify.prototype.setTimestamp = function (e) {
      o.Message.setProto3StringIntField(this, 6, e);
    }, proto.stream.GetCacheData = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.GetCacheData, o.Message), s.DEBUG && !COMPILED && (proto.stream.GetCacheData.displayName = "proto.stream.GetCacheData"), o.Message.GENERATE_TO_OBJECT && (proto.stream.GetCacheData.prototype.toObject = function (e) {
      return proto.stream.GetCacheData.toObject(e, this);
    }, proto.stream.GetCacheData.toObject = function (e, t) {
      var r = {
        gameid: o.Message.getFieldWithDefault(t, 1, 0),
        roomid: o.Message.getFieldWithDefault(t, 2, "0"),
        cacheframems: o.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.GetCacheData.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.GetCacheData();
      return proto.stream.GetCacheData.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetCacheData.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readInt32();
            e.setCacheframems(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetCacheData.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.GetCacheData.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetCacheData.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getCacheframems()) && t.writeInt32(3, r);
    }, proto.stream.GetCacheData.prototype.getGameid = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetCacheData.prototype.setGameid = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.GetCacheData.prototype.getRoomid = function () {
      return o.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.GetCacheData.prototype.setRoomid = function (e) {
      o.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.GetCacheData.prototype.getCacheframems = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.GetCacheData.prototype.setCacheframems = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.GetCacheDataAck = function (e) {
      o.Message.initialize(this, e, 0, -1, null, null);
    }, s.inherits(proto.stream.GetCacheDataAck, o.Message), s.DEBUG && !COMPILED && (proto.stream.GetCacheDataAck.displayName = "proto.stream.GetCacheDataAck"), o.Message.GENERATE_TO_OBJECT && (proto.stream.GetCacheDataAck.prototype.toObject = function (e) {
      return proto.stream.GetCacheDataAck.toObject(e, this);
    }, proto.stream.GetCacheDataAck.toObject = function (e, t) {
      var r = {
        status: o.Message.getFieldWithDefault(t, 1, 0),
        framecount: o.Message.getFieldWithDefault(t, 2, 0),
        msgcount: o.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.GetCacheDataAck.deserializeBinary = function (e) {
      var t = new o.BinaryReader(e),
          r = new proto.stream.GetCacheDataAck();
      return proto.stream.GetCacheDataAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.GetCacheDataAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint32();
            e.setFramecount(r);
            break;

          case 3:
            r = t.readUint32();
            e.setMsgcount(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.GetCacheDataAck.prototype.serializeBinary = function () {
      var e = new o.BinaryWriter();
      return proto.stream.GetCacheDataAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.GetCacheDataAck.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r), 0 !== (r = e.getFramecount()) && t.writeUint32(2, r), 0 !== (r = e.getMsgcount()) && t.writeUint32(3, r);
    }, proto.stream.GetCacheDataAck.prototype.getStatus = function () {
      return o.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.GetCacheDataAck.prototype.setStatus = function (e) {
      o.Message.setProto3IntField(this, 1, e);
    }, proto.stream.GetCacheDataAck.prototype.getFramecount = function () {
      return o.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.GetCacheDataAck.prototype.setFramecount = function (e) {
      o.Message.setProto3IntField(this, 2, e);
    }, proto.stream.GetCacheDataAck.prototype.getMsgcount = function () {
      return o.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.GetCacheDataAck.prototype.setMsgcount = function (e) {
      o.Message.setProto3IntField(this, 3, e);
    }, proto.stream.SDKHotelCmdID = {
      INVALIDSDKCMD: 0,
      CHECKINCMDID: 1401,
      CHECKINACKCMDID: 1402,
      HEARTBEATCMDID: 1403,
      HEARTBEATACKCMDID: 1404,
      BROADCASTCMDID: 1405,
      BROADCASTACKCMDID: 1406,
      NOTIFYCMDID: 1408,
      CHECKINNOTIFYCMDID: 1410,
      SUBSCRIBECMDID: 1411,
      SUBSCRIBEACKCMDID: 1412,
      PUBLISHCMDID: 1413,
      PUBLISHACKCMDID: 1414,
      PUBLISHNOTIFYCMDID: 1416,
      SETUSETIMESTAMPCMDID: 1417,
      SETUSETIMESTAMPACKCMDID: 1418,
      SETFRAMESYNCRATECMDID: 1419,
      SETFRAMESYNCRATEACKCMDID: 1420,
      SETFRAMESYNCRATENOTIFYCMDID: 1422,
      FRAMEBROADCASTCMDID: 1423,
      FRAMEBROADCASTACKCMDID: 1424,
      FRAMEDATANOTIFYCMDID: 1426,
      FRAMESYNCNOTIFYCMDID: 1428,
      GETCACHEDATACMDID: 1429,
      GETCACHEDATACMDIDACKCMDID: 1430
    }, s.object.extend(r, proto.stream);
  }, {
    "google-protobuf": 8
  }],
  10: [function (e, t, r) {
    var s = e("google-protobuf"),
        o = s,
        i = window,
        a = e("./common_pb.js");
    o.exportSymbol("proto.stream.EnterLiveRoom", null, i), o.exportSymbol("proto.stream.EnterLiveRoomAck", null, i), o.exportSymbol("proto.stream.EnterLiveRoomNotify", null, i), o.exportSymbol("proto.stream.ExitLiveRoomNotify", null, i), o.exportSymbol("proto.stream.LiveBroadcast", null, i), o.exportSymbol("proto.stream.LiveBroadcastAck", null, i), o.exportSymbol("proto.stream.LiveBroadcastNotify", null, i), o.exportSymbol("proto.stream.LiveFrameDataNotify", null, i), o.exportSymbol("proto.stream.LiveFrameSyncNotify", null, i), o.exportSymbol("proto.stream.LiveHeartbeat", null, i), o.exportSymbol("proto.stream.LiveHeartbeatAck", null, i), o.exportSymbol("proto.stream.LiveOverNotify", null, i), o.exportSymbol("proto.stream.SDKWatchCmdID", null, i), o.exportSymbol("proto.stream.SetLiveOffset", null, i), o.exportSymbol("proto.stream.SetLiveOffsetAck", null, i), proto.stream.EnterLiveRoom = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.EnterLiveRoom, s.Message), o.DEBUG && !COMPILED && (proto.stream.EnterLiveRoom.displayName = "proto.stream.EnterLiveRoom"), s.Message.GENERATE_TO_OBJECT && (proto.stream.EnterLiveRoom.prototype.toObject = function (e) {
      return proto.stream.EnterLiveRoom.toObject(e, this);
    }, proto.stream.EnterLiveRoom.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        userprofile: t.getUserprofile_asB64(),
        bookid: s.Message.getFieldWithDefault(t, 5, ""),
        ticket: s.Message.getFieldWithDefault(t, 6, ""),
        setid: s.Message.getFieldWithDefault(t, 7, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.EnterLiveRoom.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.EnterLiveRoom();
      return proto.stream.EnterLiveRoom.deserializeBinaryFromReader(r, t);
    }, proto.stream.EnterLiveRoom.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readBytes();
            e.setUserprofile(r);
            break;

          case 5:
            r = t.readString();
            e.setBookid(r);
            break;

          case 6:
            r = t.readString();
            e.setTicket(r);
            break;

          case 7:
            r = t.readUint32();
            e.setSetid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.EnterLiveRoom.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.EnterLiveRoom.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.EnterLiveRoom.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 < (r = e.getUserprofile_asU8()).length && t.writeBytes(4, r), 0 < (r = e.getBookid()).length && t.writeString(5, r), 0 < (r = e.getTicket()).length && t.writeString(6, r), 0 !== (r = e.getSetid()) && t.writeUint32(7, r);
    }, proto.stream.EnterLiveRoom.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.EnterLiveRoom.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.EnterLiveRoom.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.EnterLiveRoom.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.EnterLiveRoom.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.EnterLiveRoom.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.EnterLiveRoom.prototype.getUserprofile = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.EnterLiveRoom.prototype.getUserprofile_asB64 = function () {
      return s.Message.bytesAsB64(this.getUserprofile());
    }, proto.stream.EnterLiveRoom.prototype.getUserprofile_asU8 = function () {
      return s.Message.bytesAsU8(this.getUserprofile());
    }, proto.stream.EnterLiveRoom.prototype.setUserprofile = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.EnterLiveRoom.prototype.getBookid = function () {
      return s.Message.getFieldWithDefault(this, 5, "");
    }, proto.stream.EnterLiveRoom.prototype.setBookid = function (e) {
      s.Message.setProto3StringField(this, 5, e);
    }, proto.stream.EnterLiveRoom.prototype.getTicket = function () {
      return s.Message.getFieldWithDefault(this, 6, "");
    }, proto.stream.EnterLiveRoom.prototype.setTicket = function (e) {
      s.Message.setProto3StringField(this, 6, e);
    }, proto.stream.EnterLiveRoom.prototype.getSetid = function () {
      return s.Message.getFieldWithDefault(this, 7, 0);
    }, proto.stream.EnterLiveRoom.prototype.setSetid = function (e) {
      s.Message.setProto3IntField(this, 7, e);
    }, proto.stream.EnterLiveRoomAck = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.EnterLiveRoomAck, s.Message), o.DEBUG && !COMPILED && (proto.stream.EnterLiveRoomAck.displayName = "proto.stream.EnterLiveRoomAck"), s.Message.GENERATE_TO_OBJECT && (proto.stream.EnterLiveRoomAck.prototype.toObject = function (e) {
      return proto.stream.EnterLiveRoomAck.toObject(e, this);
    }, proto.stream.EnterLiveRoomAck.toObject = function (e, t) {
      var r,
          o = {
        status: s.Message.getFieldWithDefault(t, 1, 0),
        roomstatus: s.Message.getFieldWithDefault(t, 2, 0),
        reserved: s.Message.getFieldWithDefault(t, 3, ""),
        wathchinfo: (r = t.getWathchinfo()) && a.LiveWatchInfo.toObject(e, r)
      };
      return e && (o.$jspbMessageInstance = t), o;
    }), proto.stream.EnterLiveRoomAck.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.EnterLiveRoomAck();
      return proto.stream.EnterLiveRoomAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.EnterLiveRoomAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          case 2:
            r = t.readUint32();
            e.setRoomstatus(r);
            break;

          case 3:
            r = t.readString();
            e.setReserved(r);
            break;

          case 4:
            r = new a.LiveWatchInfo();
            t.readMessage(r, a.LiveWatchInfo.deserializeBinaryFromReader), e.setWathchinfo(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.EnterLiveRoomAck.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.EnterLiveRoomAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.EnterLiveRoomAck.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r), 0 !== (r = e.getRoomstatus()) && t.writeUint32(2, r), 0 < (r = e.getReserved()).length && t.writeString(3, r), null != (r = e.getWathchinfo()) && t.writeMessage(4, r, a.LiveWatchInfo.serializeBinaryToWriter);
    }, proto.stream.EnterLiveRoomAck.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.EnterLiveRoomAck.prototype.setStatus = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.EnterLiveRoomAck.prototype.getRoomstatus = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.EnterLiveRoomAck.prototype.setRoomstatus = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.EnterLiveRoomAck.prototype.getReserved = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.EnterLiveRoomAck.prototype.setReserved = function (e) {
      s.Message.setProto3StringField(this, 3, e);
    }, proto.stream.EnterLiveRoomAck.prototype.getWathchinfo = function () {
      return s.Message.getWrapperField(this, a.LiveWatchInfo, 4);
    }, proto.stream.EnterLiveRoomAck.prototype.setWathchinfo = function (e) {
      s.Message.setWrapperField(this, 4, e);
    }, proto.stream.EnterLiveRoomAck.prototype.clearWathchinfo = function () {
      this.setWathchinfo(void 0);
    }, proto.stream.EnterLiveRoomAck.prototype.hasWathchinfo = function () {
      return null != s.Message.getField(this, 4);
    }, proto.stream.LiveHeartbeat = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LiveHeartbeat, s.Message), o.DEBUG && !COMPILED && (proto.stream.LiveHeartbeat.displayName = "proto.stream.LiveHeartbeat"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LiveHeartbeat.prototype.toObject = function (e) {
      return proto.stream.LiveHeartbeat.toObject(e, this);
    }, proto.stream.LiveHeartbeat.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveHeartbeat.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LiveHeartbeat();
      return proto.stream.LiveHeartbeat.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveHeartbeat.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveHeartbeat.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LiveHeartbeat.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveHeartbeat.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r);
    }, proto.stream.LiveHeartbeat.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LiveHeartbeat.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LiveHeartbeat.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.LiveHeartbeat.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.LiveHeartbeat.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.LiveHeartbeat.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.LiveHeartbeatAck = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LiveHeartbeatAck, s.Message), o.DEBUG && !COMPILED && (proto.stream.LiveHeartbeatAck.displayName = "proto.stream.LiveHeartbeatAck"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LiveHeartbeatAck.prototype.toObject = function (e) {
      return proto.stream.LiveHeartbeatAck.toObject(e, this);
    }, proto.stream.LiveHeartbeatAck.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveHeartbeatAck.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LiveHeartbeatAck();
      return proto.stream.LiveHeartbeatAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveHeartbeatAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveHeartbeatAck.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LiveHeartbeatAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveHeartbeatAck.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r);
    }, proto.stream.LiveHeartbeatAck.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LiveHeartbeatAck.prototype.setStatus = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LiveBroadcast = function (e) {
      s.Message.initialize(this, e, 0, -1, proto.stream.LiveBroadcast.repeatedFields_, null);
    }, o.inherits(proto.stream.LiveBroadcast, s.Message), o.DEBUG && !COMPILED && (proto.stream.LiveBroadcast.displayName = "proto.stream.LiveBroadcast"), proto.stream.LiveBroadcast.repeatedFields_ = [3], s.Message.GENERATE_TO_OBJECT && (proto.stream.LiveBroadcast.prototype.toObject = function (e) {
      return proto.stream.LiveBroadcast.toObject(e, this);
    }, proto.stream.LiveBroadcast.toObject = function (e, t) {
      var r = {
        roomid: s.Message.getFieldWithDefault(t, 1, "0"),
        flag: s.Message.getFieldWithDefault(t, 2, 0),
        dstuidsList: s.Message.getRepeatedField(t, 3),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveBroadcast.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LiveBroadcast();
      return proto.stream.LiveBroadcast.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveBroadcast.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setFlag(r);
            break;

          case 3:
            r = t.readPackedUint32();
            e.setDstuidsList(r);
            break;

          case 4:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveBroadcast.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LiveBroadcast.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveBroadcast.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(1, r), 0 !== (r = e.getFlag()) && t.writeUint32(2, r), 0 < (r = e.getDstuidsList()).length && t.writePackedUint32(3, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(4, r);
    }, proto.stream.LiveBroadcast.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 1, "0");
    }, proto.stream.LiveBroadcast.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 1, e);
    }, proto.stream.LiveBroadcast.prototype.getFlag = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.LiveBroadcast.prototype.setFlag = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.LiveBroadcast.prototype.getDstuidsList = function () {
      return s.Message.getRepeatedField(this, 3);
    }, proto.stream.LiveBroadcast.prototype.setDstuidsList = function (e) {
      s.Message.setField(this, 3, e || []);
    }, proto.stream.LiveBroadcast.prototype.addDstuids = function (e, t) {
      s.Message.addToRepeatedField(this, 3, e, t);
    }, proto.stream.LiveBroadcast.prototype.clearDstuidsList = function () {
      this.setDstuidsList([]);
    }, proto.stream.LiveBroadcast.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 4, "");
    }, proto.stream.LiveBroadcast.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.LiveBroadcast.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.LiveBroadcast.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 4, e);
    }, proto.stream.LiveBroadcastAck = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LiveBroadcastAck, s.Message), o.DEBUG && !COMPILED && (proto.stream.LiveBroadcastAck.displayName = "proto.stream.LiveBroadcastAck"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LiveBroadcastAck.prototype.toObject = function (e) {
      return proto.stream.LiveBroadcastAck.toObject(e, this);
    }, proto.stream.LiveBroadcastAck.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveBroadcastAck.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LiveBroadcastAck();
      return proto.stream.LiveBroadcastAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveBroadcastAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveBroadcastAck.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LiveBroadcastAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveBroadcastAck.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r);
    }, proto.stream.LiveBroadcastAck.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LiveBroadcastAck.prototype.setStatus = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetLiveOffset = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.SetLiveOffset, s.Message), o.DEBUG && !COMPILED && (proto.stream.SetLiveOffset.displayName = "proto.stream.SetLiveOffset"), s.Message.GENERATE_TO_OBJECT && (proto.stream.SetLiveOffset.prototype.toObject = function (e) {
      return proto.stream.SetLiveOffset.toObject(e, this);
    }, proto.stream.SetLiveOffset.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0"),
        userid: s.Message.getFieldWithDefault(t, 3, 0),
        offsetms: s.Message.getFieldWithDefault(t, 4, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetLiveOffset.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SetLiveOffset();
      return proto.stream.SetLiveOffset.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetLiveOffset.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          case 3:
            r = t.readUint32();
            e.setUserid(r);
            break;

          case 4:
            r = t.readInt32();
            e.setOffsetms(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetLiveOffset.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SetLiveOffset.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetLiveOffset.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r), 0 !== (r = e.getUserid()) && t.writeUint32(3, r), 0 !== (r = e.getOffsetms()) && t.writeInt32(4, r);
    }, proto.stream.SetLiveOffset.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetLiveOffset.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.SetLiveOffset.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.SetLiveOffset.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.SetLiveOffset.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.SetLiveOffset.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.SetLiveOffset.prototype.getOffsetms = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.SetLiveOffset.prototype.setOffsetms = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.SetLiveOffsetAck = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.SetLiveOffsetAck, s.Message), o.DEBUG && !COMPILED && (proto.stream.SetLiveOffsetAck.displayName = "proto.stream.SetLiveOffsetAck"), s.Message.GENERATE_TO_OBJECT && (proto.stream.SetLiveOffsetAck.prototype.toObject = function (e) {
      return proto.stream.SetLiveOffsetAck.toObject(e, this);
    }, proto.stream.SetLiveOffsetAck.toObject = function (e, t) {
      var r = {
        status: s.Message.getFieldWithDefault(t, 1, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.SetLiveOffsetAck.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.SetLiveOffsetAck();
      return proto.stream.SetLiveOffsetAck.deserializeBinaryFromReader(r, t);
    }, proto.stream.SetLiveOffsetAck.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setStatus(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.SetLiveOffsetAck.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.SetLiveOffsetAck.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.SetLiveOffsetAck.serializeBinaryToWriter = function (e, t) {
      var r;
      0 !== (r = e.getStatus()) && t.writeUint32(1, r);
    }, proto.stream.SetLiveOffsetAck.prototype.getStatus = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.SetLiveOffsetAck.prototype.setStatus = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.EnterLiveRoomNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.EnterLiveRoomNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.EnterLiveRoomNotify.displayName = "proto.stream.EnterLiveRoomNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.EnterLiveRoomNotify.prototype.toObject = function (e) {
      return proto.stream.EnterLiveRoomNotify.toObject(e, this);
    }, proto.stream.EnterLiveRoomNotify.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        userprofile: t.getUserprofile_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.EnterLiveRoomNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.EnterLiveRoomNotify();
      return proto.stream.EnterLiveRoomNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.EnterLiveRoomNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readBytes();
            e.setUserprofile(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.EnterLiveRoomNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.EnterLiveRoomNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.EnterLiveRoomNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 < (r = e.getUserprofile_asU8()).length && t.writeBytes(2, r);
    }, proto.stream.EnterLiveRoomNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.EnterLiveRoomNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.EnterLiveRoomNotify.prototype.getUserprofile = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.EnterLiveRoomNotify.prototype.getUserprofile_asB64 = function () {
      return s.Message.bytesAsB64(this.getUserprofile());
    }, proto.stream.EnterLiveRoomNotify.prototype.getUserprofile_asU8 = function () {
      return s.Message.bytesAsU8(this.getUserprofile());
    }, proto.stream.EnterLiveRoomNotify.prototype.setUserprofile = function (e) {
      s.Message.setProto3BytesField(this, 2, e);
    }, proto.stream.ExitLiveRoomNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.ExitLiveRoomNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.ExitLiveRoomNotify.displayName = "proto.stream.ExitLiveRoomNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.ExitLiveRoomNotify.prototype.toObject = function (e) {
      return proto.stream.ExitLiveRoomNotify.toObject(e, this);
    }, proto.stream.ExitLiveRoomNotify.toObject = function (e, t) {
      var r = {
        userid: s.Message.getFieldWithDefault(t, 1, 0),
        userprofile: t.getUserprofile_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.ExitLiveRoomNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.ExitLiveRoomNotify();
      return proto.stream.ExitLiveRoomNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.ExitLiveRoomNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setUserid(r);
            break;

          case 2:
            r = t.readBytes();
            e.setUserprofile(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.ExitLiveRoomNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.ExitLiveRoomNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.ExitLiveRoomNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getUserid()) && t.writeUint32(1, r), 0 < (r = e.getUserprofile_asU8()).length && t.writeBytes(2, r);
    }, proto.stream.ExitLiveRoomNotify.prototype.getUserid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.ExitLiveRoomNotify.prototype.setUserid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.ExitLiveRoomNotify.prototype.getUserprofile = function () {
      return s.Message.getFieldWithDefault(this, 2, "");
    }, proto.stream.ExitLiveRoomNotify.prototype.getUserprofile_asB64 = function () {
      return s.Message.bytesAsB64(this.getUserprofile());
    }, proto.stream.ExitLiveRoomNotify.prototype.getUserprofile_asU8 = function () {
      return s.Message.bytesAsU8(this.getUserprofile());
    }, proto.stream.ExitLiveRoomNotify.prototype.setUserprofile = function (e) {
      s.Message.setProto3BytesField(this, 2, e);
    }, proto.stream.LiveBroadcastNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LiveBroadcastNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.LiveBroadcastNotify.displayName = "proto.stream.LiveBroadcastNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LiveBroadcastNotify.prototype.toObject = function (e) {
      return proto.stream.LiveBroadcastNotify.toObject(e, this);
    }, proto.stream.LiveBroadcastNotify.toObject = function (e, t) {
      var r = {
        srcuid: s.Message.getFieldWithDefault(t, 1, 0),
        priority: s.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64()
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveBroadcastNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LiveBroadcastNotify();
      return proto.stream.LiveBroadcastNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveBroadcastNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setSrcuid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveBroadcastNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LiveBroadcastNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveBroadcastNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getSrcuid()) && t.writeUint32(1, r), 0 !== (r = e.getPriority()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r);
    }, proto.stream.LiveBroadcastNotify.prototype.getSrcuid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LiveBroadcastNotify.prototype.setSrcuid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LiveBroadcastNotify.prototype.getPriority = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.LiveBroadcastNotify.prototype.setPriority = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.LiveBroadcastNotify.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.LiveBroadcastNotify.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.LiveBroadcastNotify.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.LiveBroadcastNotify.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.LiveOverNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LiveOverNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.LiveOverNotify.displayName = "proto.stream.LiveOverNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LiveOverNotify.prototype.toObject = function (e) {
      return proto.stream.LiveOverNotify.toObject(e, this);
    }, proto.stream.LiveOverNotify.toObject = function (e, t) {
      var r = {
        gameid: s.Message.getFieldWithDefault(t, 1, 0),
        roomid: s.Message.getFieldWithDefault(t, 2, "0")
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveOverNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LiveOverNotify();
      return proto.stream.LiveOverNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveOverNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setGameid(r);
            break;

          case 2:
            r = t.readUint64String();
            e.setRoomid(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveOverNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LiveOverNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveOverNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getGameid()) && t.writeUint32(1, r), r = e.getRoomid(), 0 !== parseInt(r, 10) && t.writeUint64String(2, r);
    }, proto.stream.LiveOverNotify.prototype.getGameid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LiveOverNotify.prototype.setGameid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LiveOverNotify.prototype.getRoomid = function () {
      return s.Message.getFieldWithDefault(this, 2, "0");
    }, proto.stream.LiveOverNotify.prototype.setRoomid = function (e) {
      s.Message.setProto3StringIntField(this, 2, e);
    }, proto.stream.LiveFrameDataNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LiveFrameDataNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.LiveFrameDataNotify.displayName = "proto.stream.LiveFrameDataNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LiveFrameDataNotify.prototype.toObject = function (e) {
      return proto.stream.LiveFrameDataNotify.toObject(e, this);
    }, proto.stream.LiveFrameDataNotify.toObject = function (e, t) {
      var r = {
        srcuid: s.Message.getFieldWithDefault(t, 1, 0),
        priority: s.Message.getFieldWithDefault(t, 2, 0),
        cpproto: t.getCpproto_asB64(),
        timestamp: s.Message.getFieldWithDefault(t, 4, 0),
        frameidx: s.Message.getFieldWithDefault(t, 5, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveFrameDataNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LiveFrameDataNotify();
      return proto.stream.LiveFrameDataNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveFrameDataNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setSrcuid(r);
            break;

          case 2:
            r = t.readUint32();
            e.setPriority(r);
            break;

          case 3:
            r = t.readBytes();
            e.setCpproto(r);
            break;

          case 4:
            r = t.readUint64();
            e.setTimestamp(r);
            break;

          case 5:
            r = t.readUint32();
            e.setFrameidx(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveFrameDataNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LiveFrameDataNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveFrameDataNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getSrcuid()) && t.writeUint32(1, r), 0 !== (r = e.getPriority()) && t.writeUint32(2, r), 0 < (r = e.getCpproto_asU8()).length && t.writeBytes(3, r), 0 !== (r = e.getTimestamp()) && t.writeUint64(4, r), 0 !== (r = e.getFrameidx()) && t.writeUint32(5, r);
    }, proto.stream.LiveFrameDataNotify.prototype.getSrcuid = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LiveFrameDataNotify.prototype.setSrcuid = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LiveFrameDataNotify.prototype.getPriority = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.LiveFrameDataNotify.prototype.setPriority = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.LiveFrameDataNotify.prototype.getCpproto = function () {
      return s.Message.getFieldWithDefault(this, 3, "");
    }, proto.stream.LiveFrameDataNotify.prototype.getCpproto_asB64 = function () {
      return s.Message.bytesAsB64(this.getCpproto());
    }, proto.stream.LiveFrameDataNotify.prototype.getCpproto_asU8 = function () {
      return s.Message.bytesAsU8(this.getCpproto());
    }, proto.stream.LiveFrameDataNotify.prototype.setCpproto = function (e) {
      s.Message.setProto3BytesField(this, 3, e);
    }, proto.stream.LiveFrameDataNotify.prototype.getTimestamp = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.LiveFrameDataNotify.prototype.setTimestamp = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.LiveFrameDataNotify.prototype.getFrameidx = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.LiveFrameDataNotify.prototype.setFrameidx = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.LiveFrameSyncNotify = function (e) {
      s.Message.initialize(this, e, 0, -1, null, null);
    }, o.inherits(proto.stream.LiveFrameSyncNotify, s.Message), o.DEBUG && !COMPILED && (proto.stream.LiveFrameSyncNotify.displayName = "proto.stream.LiveFrameSyncNotify"), s.Message.GENERATE_TO_OBJECT && (proto.stream.LiveFrameSyncNotify.prototype.toObject = function (e) {
      return proto.stream.LiveFrameSyncNotify.toObject(e, this);
    }, proto.stream.LiveFrameSyncNotify.toObject = function (e, t) {
      var r = {
        priority: s.Message.getFieldWithDefault(t, 1, 0),
        lastidx: s.Message.getFieldWithDefault(t, 2, 0),
        nextidx: s.Message.getFieldWithDefault(t, 3, 0),
        startts: s.Message.getFieldWithDefault(t, 4, 0),
        endts: s.Message.getFieldWithDefault(t, 5, 0),
        timestamp: s.Message.getFieldWithDefault(t, 6, 0)
      };
      return e && (r.$jspbMessageInstance = t), r;
    }), proto.stream.LiveFrameSyncNotify.deserializeBinary = function (e) {
      var t = new s.BinaryReader(e),
          r = new proto.stream.LiveFrameSyncNotify();
      return proto.stream.LiveFrameSyncNotify.deserializeBinaryFromReader(r, t);
    }, proto.stream.LiveFrameSyncNotify.deserializeBinaryFromReader = function (e, t) {
      for (; t.nextField() && !t.isEndGroup();) {
        switch (t.getFieldNumber()) {
          case 1:
            var r = t.readUint32();
            e.setPriority(r);
            break;

          case 2:
            r = t.readUint32();
            e.setLastidx(r);
            break;

          case 3:
            r = t.readUint32();
            e.setNextidx(r);
            break;

          case 4:
            r = t.readUint64();
            e.setStartts(r);
            break;

          case 5:
            r = t.readUint64();
            e.setEndts(r);
            break;

          case 6:
            r = t.readUint64();
            e.setTimestamp(r);
            break;

          default:
            t.skipField();
        }
      }

      return e;
    }, proto.stream.LiveFrameSyncNotify.prototype.serializeBinary = function () {
      var e = new s.BinaryWriter();
      return proto.stream.LiveFrameSyncNotify.serializeBinaryToWriter(this, e), e.getResultBuffer();
    }, proto.stream.LiveFrameSyncNotify.serializeBinaryToWriter = function (e, t) {
      var r = void 0;
      0 !== (r = e.getPriority()) && t.writeUint32(1, r), 0 !== (r = e.getLastidx()) && t.writeUint32(2, r), 0 !== (r = e.getNextidx()) && t.writeUint32(3, r), 0 !== (r = e.getStartts()) && t.writeUint64(4, r), 0 !== (r = e.getEndts()) && t.writeUint64(5, r), 0 !== (r = e.getTimestamp()) && t.writeUint64(6, r);
    }, proto.stream.LiveFrameSyncNotify.prototype.getPriority = function () {
      return s.Message.getFieldWithDefault(this, 1, 0);
    }, proto.stream.LiveFrameSyncNotify.prototype.setPriority = function (e) {
      s.Message.setProto3IntField(this, 1, e);
    }, proto.stream.LiveFrameSyncNotify.prototype.getLastidx = function () {
      return s.Message.getFieldWithDefault(this, 2, 0);
    }, proto.stream.LiveFrameSyncNotify.prototype.setLastidx = function (e) {
      s.Message.setProto3IntField(this, 2, e);
    }, proto.stream.LiveFrameSyncNotify.prototype.getNextidx = function () {
      return s.Message.getFieldWithDefault(this, 3, 0);
    }, proto.stream.LiveFrameSyncNotify.prototype.setNextidx = function (e) {
      s.Message.setProto3IntField(this, 3, e);
    }, proto.stream.LiveFrameSyncNotify.prototype.getStartts = function () {
      return s.Message.getFieldWithDefault(this, 4, 0);
    }, proto.stream.LiveFrameSyncNotify.prototype.setStartts = function (e) {
      s.Message.setProto3IntField(this, 4, e);
    }, proto.stream.LiveFrameSyncNotify.prototype.getEndts = function () {
      return s.Message.getFieldWithDefault(this, 5, 0);
    }, proto.stream.LiveFrameSyncNotify.prototype.setEndts = function (e) {
      s.Message.setProto3IntField(this, 5, e);
    }, proto.stream.LiveFrameSyncNotify.prototype.getTimestamp = function () {
      return s.Message.getFieldWithDefault(this, 6, 0);
    }, proto.stream.LiveFrameSyncNotify.prototype.setTimestamp = function (e) {
      s.Message.setProto3IntField(this, 6, e);
    }, proto.stream.SDKWatchCmdID = {
      INVALIDWATCHCMD: 0,
      ENTERLIVEROOMCMDID: 3401,
      ENTERLIVEROOMACKCMDID: 3402,
      LIVEHEARTBEATCMDID: 3403,
      LIVEHEARTBEATACKCMDID: 3404,
      LIVEBROADCASTCMDID: 3405,
      LIVEBROADCASTACKCMDID: 3406,
      SETLIVEOFFSETCMDID: 3407,
      SETLIVEOFFSETACKCMDID: 3408,
      ENTERLIVEROOMNOTIFYCMDID: 3420,
      EXITLIVEROOMNOTIFYCMDID: 3422,
      LIVEBROADCASTNOTIFYCMDID: 3424,
      LIVEOVERNOTIFYCMDID: 3426,
      LIVEFRAMEDATANOTIFYCMDID: 3428,
      LIVEFRAMESYNCNOTIFYCMDID: 3430
    }, o.object.extend(r, proto.stream);
  }, {
    "./common_pb.js": 4,
    "google-protobuf": 8
  }]
}, {}, [6]), function (e) {
  e.FrameOpt = {
    ONLY_CLIENT: 0,
    ONLY_GS: 1,
    CLIENT_GS: 2
  }, e.MsSetFrameSyncNotify = function (e, t, r, o, s) {
    this.frameRate = e, this.startIndex = t, this.timestamp = r, this.enableGS = o, this.cacheFrameMS = s;
  }, e.MsWatchSet = function (e, t, r, o) {
    this.cacheMS = e, this.maxWatch = t, this.delayMS = r, this.persistent = o;
  }, e.MsLiveFrameDataNotify = function (e, t, r, o) {
    this.srcUserID = e, this.cpProto = t, this.timeStamp = r, this.frameIdx = o;
  }, e.MsLiveAudience = function (e, t, r) {
    this.userID = e, this.profile = t, this.enterTime = r;
  }, e.MsLiveWatchInfo = function (e, t, r, o, s, i, a, n) {
    this.roomID = e, this.startTS = t, this.delayMS = r, this.cacheMS = o, this.maxAudiences = s, this.curAudiences = i, this.peakAudiences = a, this.lastAudiences = n;
  }, e.MsJoinWatchRoomRsp = function (e, t, r, o) {
    this.status = e, this.roomStatus = t, this.reserved = r, this.wathchInfo = o;
  }, e.MsExitLiveRoomNotify = function (e, t) {
    this.userID = e, this.userProfile = t;
  }, e.MsLiveOverNotify = function (e, t) {
    this.gameID = e, this.roomID = t;
  }, e.MsChangeRoleRsp = function (e, t) {
    this.status = e, this.targetRoomType = t;
  }, e.MsCreateTeamInfo = function (e, t, r, o, s) {
    this.password = e, this.capacity = t, this.mode = r, this.visibility = o, this.userProfile = s;
  }, e.MsTeamMatchCond = function (e, t, r, o, s, i, a) {
    this.teamNum = e, this.teamMemberNum = t, this.timeout = r, this.weight = o, this.weightRange = s, this.weightRule = i, this.full = a;
  }, e.MsTeamMatchInfo = function (e, t, r, o, s, i, a, n) {
    this.roomName = e, this.maxPlayer = t, this.canWatch = r, this.mode = o, this.visibility = s, this.roomProperty = i, this.watchSet = n, this.cond = a;
  };
}(MVS || {});
var MvsCode = {
  NoLogin: -2,
  CODE_201: 201,
  CODE_1000: 1e3,
  NetworkErr: 1001,
  CODE_1005: 1005,
  DataParseErr: 1606
},
    MvsErrMsg = new function () {
  this[1001] = "network error, please reference [ https://doc.matchvs.com/ErrCode ]", this[1e3] = "netwrk closed normal ", this[1005] = "netwrk closed no status ", this[1606] = "you data parse error ", this[400] = "bad request ", this[401] = "invaild appkey ", this[402] = "invaild sign [ https://doc.matchvs.com/ErrCode ]", this[403] = "forbidden", this[404] = "not found anything, please reference [ https://doc.matchvs.com/ErrCode ]", this[405] = "room have full, please reference [ https://doc.matchvs.com/ErrCode ]", this[406] = "room had joinOver, please reference [ https://doc.matchvs.com/ErrCode ]", this[500] = "server error, please reference [ https://doc.matchvs.com/ErrCode ]", this[502] = "service stoped,the license expires or the account is in arrears. please reference [ https://doc.matchvs.com/PaymentHelp ]", this[503] = "the ccu exceed the limit. please reference [ https://doc.matchvs.com/PaymentHelp ]", this[504] = "your traffic is running out today,please recharge [ https://doc.matchvs.com/PaymentHelp ]", this[507] = "room does not exist", this[509] = "not in the room ", this[521] = "gameServer not exist, please check your gameserver is ok [ https://doc.matchvs.com/QuickStart/GameServer-JavaScript ]", this[522] = "frame sync is close, please call the api 'setFrameSync' [ https://doc.matchvs.com/ErrCode ]", this[523] = "gameServer internal error, need check you game server [ https://doc.matchvs.com/ErrCode ] ", this[527] = "sending message too often ,  can't exceed 500 times per second [ https://doc.matchvs.com/ErrCode ]", this[201] = "reconnect not in room [ https://doc.matchvs.com/ErrCode ]", this[422] = "team match timeout", this[423] = "parameters is incorrect";
}();

function MsCreateRoomInfo(e, t, r, o, s, i) {
  this.roomName = e, this.maxPlayer = t, this.mode = r, this.canWatch = o, this.visibility = s, this.roomProperty = i, this.toString = function () {
    return "roomName:" + this.roomName + " maxPlayer:" + this.maxPlayer + " mode:" + this.mode + " canWatch:" + this.canWatch + " visibility:" + this.visibility + " roomProperty:" + this.roomProperty;
  }, MatchvsLog.logI(this + " MsCreateRoomInfo:" + JSON.stringify(this));
}

function MsEnum() {}

function MsRoomJoin(e, t, r, o, s, i, a, n, p, g, u) {
  this.joinType = e, this.userID = t, this.roomID = r, this.gameID = o, this.maxPlayer = s, this.mode = i, this.canWatch = a, this.tags = p, this.userProfile = n, this.visibility = g, this.roomProperty = u, MatchvsLog.logI(this + " MsRoomJoin:" + JSON.stringify(this));
}

function MsJoinOverRsp(e, t) {
  this.status = e, this.cpProto = t, MatchvsLog.logI(this + " MsJoinOverRsp:" + JSON.stringify(this));
}

function MsJoinOverNotifyInfo(e, t, r) {
  this.roomID = e, this.srcUserID = t, this.cpProto = r, MatchvsLog.logI(this + " MsJoinOverNotifyInfo:" + JSON.stringify(this));
}

function MsCreateRoomRsp(e, t, r) {
  this.status = e, this.roomID = t, this.owner = r, MatchvsLog.logI(this + " MsCreateRoomRsp:" + JSON.stringify(this));
}

function MsCheckIn(e, t, r, o, s, i) {
  this.gameID = e, this.roomID = t, this.userID = r, this.bookID = o, this.bookKey = s, this.hotelInfo = i;
}

function MsMatchInfo(e, t, r, o, s, i) {
  this.maxPlayer = e, this.mode = t, this.canWatch = r, this.tags = {}, this.tags = o, this.visibility = s, this.roomProperty = i, MatchvsLog.logI(this + " MsMatchInfo:" + JSON.stringify(this));
}

function MsRoomInfo(e, t, r, o, s) {
  this.roomID = e, this.roomName = s, this.roomProperty = t, this.ownerId = r, this.owner = r, this.state = o, MatchvsLog.logI(this + " MsRoomInfo:" + JSON.stringify(this));
}

function MsRoomUserInfo(e, t) {
  this.userId = e, this.userID = e, this.userProfile = t, MatchvsLog.logI(this + " MsRoomUserInfo:" + JSON.stringify(this));
}

function MsLeaveRoomRsp(e, t, r, o) {
  this.status = e, this.roomID = t, this.userId = r, this.userID = r, this.cpProto = o, MatchvsLog.logI(this + " MsLeaveRoomRsp:" + JSON.stringify(this));
}

function MsLeaveRoomNotify(e, t, r, o) {
  this.userId = t, this.userID = t, this.roomID = e, this.owner = r, this.cpProto = o, MatchvsLog.logI(this + " MsLeaveRoomNotify:" + JSON.stringify(this));
}

function MsSubscribeEventGroupRsp(e, t) {
  this.status = e, this.groups = t;
}

function MsSendEventGroupNotify(e, t, r) {
  this.srcUid = e, this.srcUserID = e, this.groups = t, this.cpProto = r;
}

function MsRegistRsp(e, t, r, o, s) {
  this.status = e, this.id = t, this.userID = t, this.token = r, this.name = o, this.avatar = s, MatchvsLog.logI("MsRegistRsp:" + JSON.stringify(this));
}

function MsLoginRsp(e, t) {
  this.status = e, this.roomID = t, MatchvsLog.logI("MsLoginRsp::" + JSON.stringify(this));
}

function MsCheckInNotify(e, t, r, o) {
  this.userID = e, this.checkins = t, this.players = r, this.maxPlayers = o, this.maxPlayer = o, MatchvsLog.logI(this + ":" + JSON.stringify(this));
}

function MsSendEventNotify(e, t) {
  this.srcUserId = e, this.srcUserID = e, this.cpProto = t;
}

function MsGameServerNotifyInfo(e, t) {
  this.srcUserId = e, this.srcUserID = e, this.cpProto = t;
}

function MsSendEventRsp(e, t) {
  this.status = e, this.sequence = t;
}

function MsRoomInfoEx(e, t, r, o, s, i) {
  this.roomID = e, this.roomName = t, this.maxPlayer = r, this.mode = o, this.canWatch = s, this.roomProperty = i, MatchvsLog.logI(" MsRoomInfoEx:" + JSON.stringify(this));
}

function MsRoomListRsp(e, t) {
  this.status = e, this.roomInfos = t, MatchvsLog.logI(this + " MsRoomListRsp:" + JSON.stringify(this));
}

function MsKickPlayerNotify(e, t, r, o) {
  this.userId = e, this.userID = e, this.srcUserId = t, this.srcUserID = t, this.cpProto = r, this.owner = o, MatchvsLog.logI(this + " MsKickPlayerNotify:" + JSON.stringify(this));
}

function MsKickPlayerRsp(e, t, r) {
  this.status = e, this.owner = t, this.userID = r, MatchvsLog.logI(this + " MsKickPlayerRsp:" + JSON.stringify(this));
}

function MsSetChannelFrameSyncRsp(e) {
  this.status = e;
}

function MsSendFrameEventRsp(e) {
  this.status = e;
}

function MsRoomFilter(e, t, r, o) {
  this.maxPlayer = e, this.mode = t, this.canWatch = r, this.roomProperty = o, MatchvsLog.logI(this + " MsRoomFilter:" + JSON.stringify(this));
}

function MsRoomFilterEx(e, t, r, o, s, i, a, n, p, g) {
  this.maxPlayer = e, this.mode = t, this.canWatch = r, this.roomProperty = o, this.full = s, this.state = i, this.sort = a, this.order = n, this.pageNo = p, this.pageSize = g || 10, MatchvsLog.logI(this + " MsRoomFilterEx:" + JSON.stringify(this));
}

function MsGetRoomDetailRsp(e, t, r, o, s, i, a, n, p, g, u) {
  this.status = e, this.state = t, this.maxPlayer = r, this.mode = o, this.canWatch = s, this.roomProperty = i, this.owner = a, this.createFlag = n, this.userInfos = [], this.userInfos = p, this.watchinfo = g, this.brigades = u, MatchvsLog.logI(this + " MsGetRoomDetailRsp:" + JSON.stringify(this));
}

function MsRoomAttribute(e, t, r, o, s, i, a, n, p, g, u, l) {
  this.roomID = e, this.roomName = t, this.maxPlayer = r, this.gamePlayer = o, this.watchPlayer = s, this.mode = i, this.canWatch = a, this.roomProperty = n, this.owner = p, this.state = g, this.createTime = u, this.watchSet = l, MatchvsLog.logI(this + " MsRoomAttribute:" + JSON.stringify(this));
}

function MsGetRoomListExRsp(e, t, r) {
  this.status = e, this.total = t, this.roomAttrs = r, MatchvsLog.logI(this + " MsGetRoomListExRsp:" + JSON.stringify(this));
}

function MsFrameItem(e, t, r) {
  this.srcUserID = e, this.cpProto = t, this.timestamp = r;
}

function MsFrameData(e, t, r) {
  this.frameIndex = e, this.frameItems = t, this.frameWaitCount = r;
}

function MsNetworkStateNotify(e, t, r, o) {
  this.roomID = e, this.userID = t, this.state = r, this.owner = o;
}

function MsSetRoomPropertyRspInfo(e, t, r, o) {
  this.status = e, this.roomID = t, this.userID = r, this.roomProperty = o, MatchvsLog.logI(this + " MsSetRoomPropertyRspInfo:" + JSON.stringify(this));
}

function MsRoomPropertyNotifyInfo(e, t, r) {
  this.roomID = e, this.userID = t, this.roomProperty = r, MatchvsLog.logI(this + " MsRoomPropertyNotifyInfo:" + JSON.stringify(this));
}

function MsHeartBeatResponse(e, t) {
  this.gameID = e, this.gsExist = t;
}

function MsGatewaySpeedResponse(e, t) {
  this.status = e, this.seq = t;
}

function MsReopenRoomResponse(e, t) {
  this.status = e, this.cpProto = t, MatchvsLog.logI(this + " MsReopenRoomResponse:" + JSON.stringify(this));
}

function MsReopenRoomNotify(e, t, r) {
  this.roomID = e, this.userID = t, this.cpProto = r, MatchvsLog.logI(this + " MsReopenRoomNotify:" + JSON.stringify(this));
}

MsEnum.JoinRoomType = {
  NoJoin: 0,
  joinSpecialRoom: 1,
  joinRoomWithProperty: 2,
  joinRandomRoom: 3,
  reconnect: 4
}, function (e) {
  function t(e) {
    this.mCallback = e;

    var r = function r(e, t, _r, o) {
      var s = new XMLHttpRequest();
      s.open(_r ? "POST" : "GET", e, !0), s.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), s.onreadystatechange = function () {
        4 === s.readyState && (200 === s.status ? (t.onMsg(s.responseText), MatchvsLog.logI("[HTTP:](" + e + ")+" + s.responseText)) : t.onErr(s.status, s.statusText));
      }, _r ? s.send(o) : s.send(null);
    };

    this.get = function (e) {
      r(e, this.mCallback, !1, null);
    }, this.post = function (e, t) {
      r(e, this.mCallback, !0, t);
    };
  }

  try {
    e.MatchvsNetWork = function (e, t) {
      this.socket = null, this.mCallBack = t, this.mHost = e;
      var r = !1,
          o = [];
      this.send = function (e) {
        if (window.WebSocket) {
          if (isIE()) {
            for (var t = new Uint8Array(e.buffer.byteLength), r = 0; r < t.length; r++) {
              t[r] = e.getUint8(r);
            }

            e = t;
          }

          this.socket.readyState === WebSocket.OPEN ? this.socket.send(e.buffer) : o.unshift(e);
        }
      }, this.close = function () {
        this.socket && ("undefined" != typeof cc && void 0 !== cc.Component ? (r = !0, this.socket.close()) : this.socket.close(1e3, ""));
      }, window.WebSocket || (window.WebSocket = window.MozWebSocket), window.WebSocket ? (this.socket = new WebSocket(e), this.socket.binaryType = "arraybuffer", this.socket.hashcode = new Date().getMilliseconds(), MatchvsLog.logI("try to create a socket:" + this.mHost + " socket is " + this.socket.hashcode), this.socket.onmessage = function (e) {
        if ("undefined" != typeof FileReader && e.data instanceof Blob) {
          console.log("websocket onmessage FileReader:", Date.now());
          var r = new FileReader();
          r.readAsArrayBuffer(e.data), r.onload = function (e) {
            if (e.target.readyState === FileReader.DONE) {
              console.log("websocket onmessage readyState:", Date.now());
              var t = new DataView(r.result);
              this.mCallBack.onMsg(t);
            } else this.mCallBack.onErr(MvsCode.DataParseErr, "[err]parse fail");
          }.bind(this);
        } else if (e.data instanceof ArrayBuffer) {
          var t = new DataView(e.data);
          this.mCallBack.onMsg && this.mCallBack.onMsg(t);
        } else console.log("[error] unknown event :" + e + " => " + JSON.stringify(e)), this.mCallBack.onErr && this.mCallBack.onErr(MvsCode.DataParseErr, "[err]parse fail");
      }.bind(this), this.socket.onopen = function (e) {
        for (r = !1, MatchvsLog.logI("Create the socket is success :" + this.mHost + " socket is " + this.socket.hashcode); 0 < o.length;) {
          this.send(o.pop());
        }

        this.mCallBack.onConnect && this.mCallBack.onConnect(this.mHost);
      }.bind(this), this.socket.onclose = function (e) {
        "undefined" != typeof cc && void 0 !== cc.Component && (e = r ? {
          code: 1e3,
          reason: "jsb friend close "
        } : {
          code: 1006,
          reason: "error close "
        }), MatchvsLog.logI("socket on closed ,code:" + (e && e.code) + "(1000:NORMAL,1005:CLOSE_NO_STATUS,1006:RESET,1009:CLOSE_TOO_LARGE) err:" + JSON.stringify(e)), this.mCallBack.onDisConnect && this.mCallBack.onDisConnect(this.mHost, e);
      }.bind(this), this.socket.onerror = function (e) {
        MatchvsLog.logI("socket on error ,event:" + JSON.stringify(e)), this.mCallBack.onDisConnect && this.mCallBack.onDisConnect(this.mHost, e);
      }.bind(this)) : alert("Not Support the WebSocket！");
    }, e.MatchvsHttp = t, "undefined" != typeof egret && (console.log("network api -> egret"), e.MatchvsNetWork = function (e, t) {
      var s = null,
          i = !1,
          a = [],
          n = t,
          r = e,
          o = !1,
          p = this;
      this.close = function () {
        s && (o = !0, s.close());
      }, this.send = function (e) {
        if (i) {
          var t = new egret.ByteArray();
          t.position = 0;

          for (var r = e.buffer.byteLength, o = 0; o < r; o++) {
            t.writeByte(e.getUint8(o));
          }

          s.writeBytes(t, 0, t.bytesAvailable);
        } else a.length < 100 && a.unshift(e);
      };

      var g = function g(e) {
        for (o = !1, MatchvsLog.logI("[egret.WebSocket][connect]:" + e), i = !0; 0 < a.length;) {
          p.send(a.pop());
        }

        n.onConnect && n.onConnect(r);
      },
          u = function u(e) {
        e = o ? {
          code: 1e3
        } : {
          code: 1001
        }, i = !1, n.onDisConnect && n.onDisConnect(r, e), MatchvsLog.logI("[egret.WebSocket] [onClose] case:" + JSON.stringify(e));
      },
          l = function l() {
        var e = new egret.ByteArray();
        s.readBytes(e);

        for (var t = new ArrayBuffer(e.readAvailable), r = new DataView(t), o = 0; o < t.byteLength; o++) {
          r.setUint8(o, e.readUnsignedByte());
        }

        n.onMsg(r);
      },
          m = function m(e) {
        n.onDisConnect && n.onDisConnect(r, e = {
          code: "1006"
        }), MatchvsLog.logI("[egret.WebSocket] [onError] case:" + JSON.stringify(e));
      };

      !function () {
        (s = new egret.WebSocket()).type = egret.WebSocket.TYPE_BINARY, s.addEventListener(egret.ProgressEvent.SOCKET_DATA, l, this), s.addEventListener(egret.Event.CONNECT, g, this), s.addEventListener(egret.Event.CLOSE, u, this), s.addEventListener(egret.IOErrorEvent.IO_ERROR, m, this), s.connectByUrl(e);
      }();
    }, e.MatchvsHttp = t), "undefined" != typeof wx ? (console.log("network api->wx"), e.MatchvsNetWork = function (e, t) {
      this.socket = wx.connectSocket({
        url: e,
        header: {
          engine: "WeiXinGame"
        }
      }), this.socketOpen = !1;
      var r = [],
          o = t,
          s = e,
          i = this;
      this.close = function () {
        this.socket && this.socket.close({
          code: 1e3,
          reason: "normal"
        });
      }, this.send = function (e) {
        this.socketOpen ? this.socket.send({
          data: e.buffer
        }) : r.length < 100 && r.unshift(e);
      }, this.socket.onOpen(function (e) {
        for (MatchvsLog.logI("[wx.WebSocket][connect]:" + e), i.socketOpen = !0; 0 < r.length;) {
          i.send(r.pop());
        }

        o.onConnect && o.onConnect(s);
      }), this.socket.onClose(function (e) {
        i.socketOpen = !1, e.reason && "interrupted" === e.reason && (e.code = 1001), o.onDisConnect && o.onDisConnect(s, e), MatchvsLog.logI("[wx.WebSocket] [onClose] case:" + JSON.stringify(e));
      }), this.socket.onMessage(function (e) {
        var t = new DataView(e.data);
        o.onMsg(t);
      }), this.socket.onError(function (e) {
        o.onDisConnect && o.onDisConnect(s, e), MatchvsLog.logI("[wx.WebSocket] [onError] case:" + JSON.stringify(e));
      });
    }, e.MatchvsHttp = function (e) {
      this.mCallback = e;

      var r = function r(e, _r2, t, o) {
        var s = t ? "application/json" : "application/x-www-form-urlencoded";
        wx.request({
          url: e,
          data: o,
          header: {
            "content-type": s
          },
          success: function success(e) {
            var t = JSON.stringify(e.data);
            MatchvsLog.logI("http success:" + t), _r2.onMsg(t);
          },
          fail: function fail(e) {
            MatchvsLog.logI("http fail:" + e.errMsg), _r2.onErr(0, e.errMsg);
          }
        });
      };

      this.get = function (e) {
        r(e, this.mCallback, !1, null);
      }, this.post = function (e, t) {
        r(e, this.mCallback, !0, t);
      };
    }) : "undefined" != typeof BK && (console.log("network api->BK"), e.MatchvsNetWork = function (e, t) {
      var i = t,
          r = e,
          o = [],
          s = !1,
          a = new BK.WebSocket(e),
          n = this;
      this.send = function (e) {
        s ? a.send(e.buffer) : o.length < 100 && o.unshift(e);
      }, this.close = function () {
        console.log("[matchvs sdk]websocket close"), a && a.close();
      }, a.onOpen = function (e) {
        for (s = !0, console.log("[BK.WebSocket][connect][Matchvs]:", e); 0 < o.length;) {
          n.send(o.pop());
        }

        i.onConnect && i.onConnect(r);
      }, a.onClose = function (e) {
        s = !1, console.log("[BK.WebSocket][onClose][Matchvs] case:", JSON.stringify(e)), i.onDisConnect && i.onDisConnect(r, {
          code: 1e3,
          message: " close normal"
        });
      }, a.onError = function (e) {
        a && s && (s = !1, a.close());
        var t = {
          code: e.getErrorCode(),
          message: e.getErrorString()
        };
        65535 === t.code && (t.code = 1e3), i.onDisConnect && i.onDisConnect(r, t), MatchvsLog.logI("[BK.WebSocket] [onError][Matchvs] case:" + JSON.stringify(e));
      }, a.onMessage = function (e, t) {
        var r = t.data;
        r.rewind();

        for (var o = new ArrayBuffer(r.length), s = new DataView(o); !r.eof;) {
          s.setUint8(r.pointer, r.readUint8Buffer());
        }

        i.onMsg && i.onMsg(s);
      }, a && a.connect();
    }, e.MatchvsHttp = function (e) {
      function r(o, s, e, t) {
        var r = new BK.HttpUtil(o);
        r.setHttpMethod(e ? "post" : "get"), r.setHttpHeader("Content-type", "application/x-www-form-urlencoded"), r.requestAsync(function (e, t) {
          if (200 === t) {
            var r = e.readAsString(!0);
            s.onMsg(r), MatchvsLog.logI("[HTTP:](" + o + ")+" + r);
          } else s.onErr(t, e.readAsString(!0));
        }), e ? r.setHttpPostData(t) : r.setHttpUrl(o);
      }

      this.mCallback = e, this.get = function (e) {
        r(e, this.mCallback, !1, null);
      }, this.post = function (e, t) {
        r(e, this.mCallback, !0, t);
      };
    });
  } catch (e) {
    console.warn("network adapter warning:" + e.message);
  }

  e.MatchvsNetWorkCallBack = function () {
    this.onMsg = function (e) {}, this.onErr = function (e, t) {};
  };
}(MVS || {});
var FIXED_HEAD_SIZE = 16,
    VERSION = 2;

function Packet() {}

function MatchvsHeader() {
  this.size = 0, this.seq = 0, this.cmd = 0, this.version = 0, this.userID = 0, this.toString = function () {
    return " this.size   " + this.size + " this.seq    " + this.seq + " this.cmd    " + this.cmd + " this.version" + this.version + " this.userID " + this.userID;
  };
}

!function (e) {
  var m = proto.stream,
      c = {
    GTW_SPEED_RSP: 1002,
    LOGIN_REQ: 1101,
    LOGIN_RSP: 1102,
    GTW_HEART_BEAT_REQ: 1103,
    GTW_HEART_BEAT_RSP: 1103,
    LOGOUT_REQ: 1105,
    LOGOUT_RSP: 1106,
    DISCONNECT_REQ: 1107,
    DISCONNECT_RSP: 1108,
    NETWORK_STATE_NOTIFY: 1122,
    CREATE_ROOM_REQ: 1203,
    CREATE_ROOM_RSP: 1204,
    JOIN_ROOM_REQ: 1201,
    JOIN_ROOM_RSP: 1202,
    JOIN_ROOM_NOTIFY: 1301,
    CHECK_IN_REQ: 1401,
    CHECK_IN_RSP: 1402,
    CHECK_IN_NOTIFY: 1410,
    JOIN_OVER_REQ: 1213,
    JOIN_OVER_RSP: 1214,
    JOIN_OVER_NOTIFY: 1306,
    SET_ROOM_PROPERTY_REQ: 1219,
    SET_ROOM_PROPERTY_RSP: 1220,
    SET_ROOM_PROPERTY_NOTIFY: 1307,
    JOIN_OPEN_REQ: 1221,
    JOIN_OPEN_RSP: 1222,
    JOIN_OPEN_NOTIFY: 1308,
    HOTEL_HEART_BEAT_REQ: 1403,
    HOTEL_HEART_BEAT_RSP: 1404,
    BROADCAST_REQ: 1405,
    BROADCAST_RSP: 1406,
    BROADCAST_NOTIFY: 1408,
    KICK_PLAYER_REQ: 1303,
    KICK_PLAYER_RSP: 1304,
    KICK_PLAYER_NOTIFY: 1305,
    LEAVE_ROOM_REQ: 1205,
    LEAVE_ROOM_RSP: 1206,
    LEAVE_ROOM_NOTIFY: 1302,
    GET_ROOMLIST_REQ: 1207,
    GET_ROOMLIST_RSP: 1208,
    GET_ROOM_DETAIL_REQ: 1209,
    GET_ROOM_DETAIL_RSP: 1210,
    SET_FRAMESYNC_REQ: 1419,
    SET_FRAMESYNC_RSP: 1420,
    SET_FRAMESYNC_NOTIFY: 1422,
    SEND_FRAME_DATA_REQ: 1423,
    SEND_FRAME_DATA_RSP: 1424,
    FRAME_DATA_NOTIFY: 1426,
    FRAME_SYNC_NOTIFY: 1428,
    SUBSCRIBE_REQ: 1411,
    SUBSCRIBE_RSP: 1412,
    SUBSCRIBE_DATA_REQ: 1413,
    SUBSCRIBE_DATA_RSP: 1414,
    SUBSCRIBE_DATA_NOTIFY: 1416,
    GET_ROOMLIST_EX_REQ: 1215,
    GET_ROOMLIST_EX_RSP: 1216,
    SET_RECONNECT_TIMEOUT_REQ: 1109,
    SET_RECONNECT_TIMEOUT_RSP: 1110,
    JOIN_WATCHROOM_REQ: 1225,
    JOIN_WATCHROOM_RSP: 1226,
    LEAVE_WATCHROOM_REQ: 1227,
    LEAVE_WATCHROOM_RSP: 1228,
    GET_WATCHROOM_REQ: 1229,
    GET_WATCHROOM_RSP: 1230,
    CHANGE_ROLE_REQ: 1231,
    CHANGE_ROLE_RSP: 1232,
    ENTER_LIVEROOM_REQ: 3401,
    ENTER_LIVEROOM_RSP: 3402,
    ENTER_LIVEROOM_NOTIFY: 3420,
    LIVE_HEARTBEAT_REQ: 3403,
    LIVE_HEARTBEAT_RSP: 3404,
    LIVE_BROADCAST_REQ: 3405,
    LIVE_BROADCAST_RSP: 3406,
    LIVE_BROADCAST_NOTIFY: 3424,
    SET_LIVEOFFSET_REQ: 3407,
    SET_LIVEOFFSET_RSP: 3408,
    EXIT_LIVEROOM_NOTIFY: 3422,
    LIVE_OVER_NOTIFY: 3426,
    LIVE_FRAMEDATA_NOTIFY: 3428,
    LIVE_FRAMESYNC_NOTIFY: 3430,
    CREATE_TEAM_REQ: 1233,
    CREATE_TEAM_RSP: 1234,
    JOIN_TEAM_REQ: 1235,
    JOIN_TEAM_RSP: 1236,
    JOIN_TEAM_NOTIFY: 1309,
    LEAVE_TEAM_REQ: 1237,
    LEAVE_TEAM_RSP: 1238,
    LEAVE_TEAM_NOTIFY: 1310,
    TEAM_MATCH_REQ: 1239,
    TEAM_MATCH_RSP: 1240,
    TEAM_MATCH_RESULT_NOTIFY: 1311,
    TEAM_MATCH_START_NOTIFY: 1312,
    GET_CACHEDATA_REQ: 1429,
    GET_CACHEDATA_RSP: 1430,
    CANCEL_TEAMMATCH_REQ: 1241,
    CANCEL_TEAMMATCH_RSP: 1242,
    CANCEL_TEAMMATCH_NOTIFY: 1313,
    SEND_TEAMEVENT_REQ: 1243,
    SEND_TEAMEVENT_RSP: 1244,
    SEND_TEAMEVENT_NOTIFY: 1314,
    KICK_TEAMMEMBER_REQ: 1245,
    KICK_TEAMMEMBER_RSP: 1246,
    KICK_TEAMMEMBER_NOTIFY: 1315
  };
  e.PtoCmd = c;
  var n = new function e() {
    return e.prototype;
  }();
  n[c.LOGIN_RSP] = m.LoginRsp, n[c.JOIN_ROOM_RSP] = m.JoinRoomRsp, n[c.CHECK_IN_RSP] = m.CheckInAck, n[c.CREATE_ROOM_RSP] = m.CreateRoomRsp, n[c.CHECK_IN_NOTIFY] = m.CheckInNotify, n[c.JOIN_OVER_RSP] = m.JoinOverRsp, n[c.LEAVE_ROOM_RSP] = m.LeaveRoomRsp, n[c.JOIN_ROOM_NOTIFY] = m.NoticeJoin, n[c.HOTEL_HEART_BEAT_RSP] = m.HeartbeatAck, n[c.LEAVE_ROOM_NOTIFY] = m.NoticeLeave, n[c.BROADCAST_RSP] = m.BroadcastAck, n[c.BROADCAST_NOTIFY] = m.Notify, n[c.SUBSCRIBE_RSP] = m.SubscribeAck, n[c.SUBSCRIBE_DATA_RSP] = m.PublishAck, n[c.SUBSCRIBE_DATA_NOTIFY] = m.PublishNotify, n[c.GTW_HEART_BEAT_RSP] = m.HeartbeatRsp, n[c.GET_ROOMLIST_RSP] = m.GetRoomListRsp, n[c.LOGOUT_RSP] = m.LogoutRsp, n[c.DISCONNECT_RSP] = m.DisconnectRsp, n[c.KICK_PLAYER_NOTIFY] = m.KickPlayerNotify, n[c.KICK_PLAYER_RSP] = m.KickPlayerRsp, n[c.SET_FRAMESYNC_RSP] = m.SetFrameSyncRateAck, n[c.SEND_FRAME_DATA_RSP] = m.FrameBroadcastAck, n[c.SET_FRAMESYNC_NOTIFY] = m.SetFrameSyncRateNotify, n[c.FRAME_DATA_NOTIFY] = m.FrameDataNotify, n[c.NETWORK_STATE_NOTIFY] = m.NetworkStateNotify, n[c.FRAME_SYNC_NOTIFY] = m.FrameSyncNotify, n[c.GET_ROOMLIST_EX_RSP] = m.GetRoomListExRsp, n[c.JOIN_OVER_NOTIFY] = m.JoinOverNotify, n[c.GET_ROOM_DETAIL_RSP] = m.GetRoomDetailRsp, n[c.SET_ROOM_PROPERTY_RSP] = m.SetRoomPropertyRsp, n[c.SET_ROOM_PROPERTY_NOTIFY] = m.NoticeRoomProperty, n[c.JOIN_OPEN_RSP] = m.JoinOpenRsp, n[c.JOIN_OPEN_NOTIFY] = m.JoinOpenNotify, n[c.JOIN_WATCHROOM_RSP] = m.JoinWatchRoomRsp, n[c.ENTER_LIVEROOM_RSP] = m.EnterLiveRoomAck, n[c.ENTER_LIVEROOM_NOTIFY] = m.EnterLiveRoomNotify, n[c.LIVE_HEARTBEAT_RSP] = m.LiveHeartbeatAck, n[c.LIVE_BROADCAST_RSP] = m.LiveBroadcastAck, n[c.LIVE_BROADCAST_NOTIFY] = m.LiveBroadcastNotify, n[c.SET_LIVEOFFSET_RSP] = m.SetLiveOffsetAck, n[c.EXIT_LIVEROOM_NOTIFY] = m.ExitLiveRoomNotify, n[c.LIVE_OVER_NOTIFY] = m.LiveOverNotify, n[c.LIVE_FRAMEDATA_NOTIFY] = m.LiveFrameDataNotify, n[c.LIVE_FRAMESYNC_NOTIFY] = m.LiveFrameSyncNotify, n[c.LEAVE_WATCHROOM_RSP] = m.LeaveWatchRoomRsp, n[c.GET_WATCHROOM_RSP] = m.GetWatchRoomsRsp, n[c.CHANGE_ROLE_RSP] = m.ChangeRoleRsp, n[c.SET_RECONNECT_TIMEOUT_RSP] = m.SetReconnectTimeoutRsp, n[c.CREATE_TEAM_RSP] = m.CreateTeamRsp, n[c.JOIN_TEAM_RSP] = m.JoinTeamRsp, n[c.JOIN_TEAM_NOTIFY] = m.JoinTeamNotify, n[c.LEAVE_TEAM_RSP] = m.LeaveTeamRsp, n[c.LEAVE_TEAM_NOTIFY] = m.LeaveTeamNotify, n[c.TEAM_MATCH_RSP] = m.TeamMatchRsp, n[c.TEAM_MATCH_RESULT_NOTIFY] = m.TeamMatchResultNotify, n[c.TEAM_MATCH_START_NOTIFY] = m.TeamMatchStartNotify, n[c.GET_CACHEDATA_RSP] = m.GetCacheDataAck, n[c.CANCEL_TEAMMATCH_RSP] = m.CancelTeamMatchRsp, n[c.CANCEL_TEAMMATCH_NOTIFY] = m.CancelTeamMatchNotify, n[c.KICK_TEAMMEMBER_RSP] = m.KickTeamMemberRsp, n[c.KICK_TEAMMEMBER_NOTIFY] = m.KickTeamMemberNotify, n[c.SEND_TEAMEVENT_RSP] = m.SendTeamEventRsp, n[c.SEND_TEAMEVENT_NOTIFY] = m.SendTeamEventNotify, e.MatchvsProtocol = function () {
    this.seq = 1;
    var u = 0,
        l = !1;
    this.fillHeader = function (e, t) {
      MVS.mtaReport && MVS.mtaReport.Report(t);
      var r = new ArrayBuffer(FIXED_HEAD_SIZE + e.length),
          o = new DataView(r);
      o.setInt32(0, r.byteLength, !0), o.setInt32(4, this.seq++, !0), o.setInt16(8, t, !0), l ? (l = !1, o.setInt16(10, 3, !0)) : o.setInt16(10, VERSION, !0), o.setInt32(12, Number(u), !0);

      for (var s = e.length, i = 0; i < s; i++) {
        o.setUint8(i + FIXED_HEAD_SIZE, e[i]);
      }

      return o;
    }, this.parseHeader = function (e) {
      var t = e,
          r = new MatchvsHeader();
      return r.size = t.getInt32(0, !0), r.seq = t.getInt32(4, !0), r.cmd = t.getInt16(8, !0), r.version = t.getInt16(10, !0), r.userID = t.getInt32(12, !0), r;
    }, this.handleMsg = function (e) {
      for (var t = e, r = this.parseHeader(e), o = new Uint8Array(r.size - FIXED_HEAD_SIZE), s = 0; s < o.length; s++) {
        o[s] = e.getUint8(FIXED_HEAD_SIZE + s);
      }

      var i = n[r.cmd],
          a = new Packet();
      return a.header = r, a.buf = t, i ? a.payload = i.deserializeBinary && i.deserializeBinary(e.buffer.slice(FIXED_HEAD_SIZE, e.buffer.byteLength)) : MatchvsLog.logI("[WARN]unknown msg,Head:" + r), a;
    }, this.init = function () {}, this.login = function (e, t, r, o, s) {
      var i = hex_md5(t),
          a = format("%s&UserID=%s&GameID=%s&VersionSdk=%d&%s", o, e, r, 3, i);
      u = e;
      var n = hex_md5(a);
      MatchvsLog.logI("[Sign]" + a + "->" + n);
      var p = new m.LoginReq();
      p.setGameid(Number(r)), p.setAppkey(o), p.setToken(i), p.setSdkver("3"), p.setDeviceid(s), p.setSign(n);
      var g = p.serializeBinary();
      return MatchvsLog.logI("[REQ]login...userID:" + e), l = !0, this.fillHeader(g, c.LOGIN_REQ);
    }, this.roomCreate = function (e, t, r, o) {
      var s = new m.CreateRoomReq();
      s.setGameid(Number(e));
      var i = new m.PlayerInfo();
      i.setUserid(r.userID), i.setUserprofile(stringToUtf8ByteArray(r.userProfile)), s.setPlayerinfo(i);
      var a = new m.RoomInfo();

      if (a.setMaxplayer(Number(t.maxPlayer)), a.setCanwatch(t.canWatch), a.setMode(t.mode), a.setVisibility(t.visibility), a.setRoomname(t.roomName), a.setRoomproperty(stringToUtf8ByteArray(t.roomProperty)), s.setRoominfo(a), o) {
        var n = new m.WatchSetting();
        n.setCachetime(o.cacheMS), n.setMaxwatch(o.maxWatch), n.setWatchdelayms(o.delayMS), n.setWatchpersistent(o.persistent), s.setWatchsetting(n);
      }

      var p = s.serializeBinary();
      return this.fillHeader(p, c.CREATE_ROOM_REQ);
    }, this.joinRandomRoom = function (e) {
      var t = new m.JoinRoomReq();
      t.setGameid(Number(e.gameID)), t.setJointype(m.JoinRoomType.JOINRANDOMROOM), t.setCpproto(stringToUtf8ByteArray(e.userProfile));
      var r = new m.PlayerInfo();
      r.setUserid(e.userID), r.setUserprofile(stringToUtf8ByteArray(e.userProfile)), t.setPlayerinfo(r);
      var o = new m.RoomInfo();
      o.setMaxplayer(e.maxPlayer), o.setCanwatch(e.canWatch), o.setMode(e.mode), o.setVisibility(0), t.setRoominfo(o);
      var s = t.serializeBinary();
      return this.fillHeader(s, c.JOIN_ROOM_REQ);
    }, this.joinRoomSpecial = function (e) {
      var t = new m.JoinRoomReq();
      t.setGameid(Number(e.gameID)), t.setJointype(e.joinType), t.setCpproto(stringToUtf8ByteArray(e.userProfile));
      var r = new m.PlayerInfo();
      r.setUserid(e.userID), r.setUserprofile(stringToUtf8ByteArray(e.userProfile)), t.setPlayerinfo(r);
      var o = new m.RoomInfo();
      o.setMaxplayer(e.maxPlayer), o.setCanwatch(e.canWatch), o.setMode(e.mode), o.setVisibility(0), o.setRoomid(e.roomID), t.setRoominfo(o);
      var s = t.serializeBinary();
      return this.fillHeader(s, c.JOIN_ROOM_REQ);
    }, this.joinRoomWithProperties = function (e, t) {
      var r = new m.JoinRoomReq(),
          o = [],
          s = e.tags,
          i = 0;

      for (var a in s) {
        var n = new m.keyValue();
        n.setKey(a), n.setValue(s[a]), o[i++] = n;
      }

      r.setTagsList(o), r.setGameid(e.gameID), r.setJointype(m.JoinRoomType.JOINROOMWITHPROPERTY), r.setCpproto(stringToUtf8ByteArray(e.userProfile));
      var p = new m.PlayerInfo();
      p.setUserid(e.userID), p.setUserprofile(stringToUtf8ByteArray(e.userProfile)), r.setPlayerinfo(p);
      var g = new m.RoomInfo();

      if (g.setMaxplayer(e.maxPlayer), g.setCanwatch(e.canWatch), g.setMode(e.mode), g.setVisibility(e.visibility), g.setRoomproperty(stringToUtf8ByteArray(e.roomProperty)), g.setRoomid(e.roomID), r.setRoominfo(g), t) {
        var u = new m.WatchSetting();
        u.setCachetime(t.cacheMS), u.setMaxwatch(t.maxWatch), u.setWatchdelayms(t.delayMS), u.setWatchpersistent(t.persistent), r.setWatchsetting(u);
      }

      var l = r.serializeBinary();
      return this.fillHeader(l, c.JOIN_ROOM_REQ);
    }, this.roomCheckIn = function (e, t, r, o) {
      var s = new m.CheckIn();
      s.setGameid(Number(o)), s.setRoomid(t.getRoomid()), s.setUserid(Number(r)), s.setBookid(e.getBookid()), s.setKey(e.getBookkey());
      var i = s.serializeBinary();
      return this.fillHeader(i, c.CHECK_IN_REQ);
    }, this.getRoomList = function (e, t) {
      var r = new m.GetRoomListReq(),
          o = new m.RoomFilter();
      o.setCanwatch(t.canWatch), o.setMaxplayer(t.maxPlayer), o.setMode(Number(t.mode)), o.setRoomproperty(stringToUtf8ByteArray(t.roomProperty)), r.setGameid(e), r.setRoomfilter(o);
      var s = r.serializeBinary();
      return this.fillHeader(s, c.GET_ROOMLIST_REQ);
    }, this.getRoomListEx = function (e, t) {
      var r = new m.GetRoomListExReq(),
          o = new m.RoomFilter();
      o.setMaxplayer(t.maxPlayer), o.setMode(Number(t.mode)), o.setFull(t.full), o.setCanwatch(t.canWatch), o.setRoomproperty(stringToUtf8ByteArray(t.roomProperty)), o.setState(t.state), r.setGameid(e), r.setRoomfilter(o), r.setSort(t.sort), r.setOrder(t.order), r.setPageno(t.pageNo), r.setPagesize(t.pageSize);
      var s = r.serializeBinary();
      return this.fillHeader(s, c.GET_ROOMLIST_EX_REQ);
    }, this.getRoomDetail = function (e, t) {
      var r = new m.GetRoomDetailReq();
      r.setGameid(e), r.setRoomid(t);
      var o = r.serializeBinary();
      return this.fillHeader(o, c.GET_ROOM_DETAIL_REQ);
    }, this.joinOver = function (e, t, r, o) {
      var s = new m.JoinOverReq();
      s.setGameid(e), s.setRoomid(t), s.setCpproto(r), s.setUserid(o);
      var i = s.serializeBinary();
      return this.fillHeader(i, c.JOIN_OVER_REQ);
    }, this.leaveRoom = function (e, t, r, o) {
      var s = new m.LeaveRoomReq();
      s.setGameid(e), s.setUserid(t), s.setRoomid(r), s.setCpproto(stringToUtf8ByteArray(o));
      var i = s.serializeBinary();
      return this.fillHeader(i, c.LEAVE_ROOM_REQ);
    }, this.heartBeat = function (e, t) {
      var r = new m.HeartbeatReq();
      r.setGameid(e), r.setRoomid(t);
      var o = r.serializeBinary();
      return this.fillHeader(o, c.GTW_HEART_BEAT_REQ);
    }, this.logout = function (e) {
      var t = stringToUtf8ByteArray(e);
      return this.fillHeader(t, c.LOGOUT_REQ);
    }, this.broadCast = function (e, t, r, o, s) {
      var i = new m.Broadcast();
      i.setRoomid(e), i.setDstuidsList(t), i.setCpproto(s);
      var a = 32 + ((3 & r) << 2) + (3 & o);
      i.setFlag(a);
      var n = i.serializeBinary();
      return this.fillHeader(n, c.BROADCAST_REQ);
    }, this.subscribeEventGroup = function (e, t, r, o) {
      var s = new m.Subscribe();
      s.setRoomid(t), s.setGameid(e), s.setCancelsList(o), s.setConfirmsList(r);
      var i = s.serializeBinary();
      return this.fillHeader(i, c.SUBSCRIBE_REQ);
    }, this.sendEventGroup = function (e, t, r, o, s) {
      var i = new m.Publish();
      i.setRoomid(t), i.setPriority(r), i.setCpproto(stringToUtf8ByteArray(s)), i.setGroupsList(o);
      var a = i.serializeBinary();
      return this.fillHeader(a, c.SUBSCRIBE_DATA_REQ);
    }, this.hotelHeartBeat = function (e, t, r) {
      var o = new m.Heartbeat();
      o.setGameid(e), o.setRoomid(t), o.setUserid(r);
      var s = o.serializeBinary();
      return this.fillHeader(s, c.HOTEL_HEART_BEAT_REQ);
    }, this.disConnect = function (e, t, r) {
      var o = new m.DisconnectReq();
      o.setGameid(t), o.setRoomid(r), o.setUserid(e);
      var s = o.serializeBinary();
      return this.fillHeader(s, c.DISCONNECT_REQ);
    }, this.kickPlayer = function (e, t, r, o) {
      var s = new m.KickPlayerReq();
      s.setRoomid(r), s.setSrcuserid(t), s.setUserid(e), s.setCpproto(stringToUtf8ByteArray(o));
      var i = s.serializeBinary();
      return this.fillHeader(i, c.KICK_PLAYER_REQ);
    }, this.setFrameSync = function (e) {
      var t = new m.SetFrameSyncRate();
      MVS.DEBUG && console.log("SetFrameSyncRate :" + JSON.stringify(e)), t.setGameid(e.gameID), t.setRoomid(e.roomID), t.setPriority(e.priority), t.setFramerate(e.frameRate), t.setFrameidx(e.frameidx), t.setEnablegs(e.enableGS), t.setCacheframems(e.cacheMs);
      var r = t.serializeBinary();
      return this.fillHeader(r, c.SET_FRAMESYNC_REQ);
    }, this.sendFrameEvent = function (e, t, r, o) {
      var s = new m.FrameBroadcast();
      s.setRoomid(e), s.setPriority(t), s.setOperation(o), s.setCpproto(stringToUtf8ByteArray(r));
      var i = s.serializeBinary();
      return this.fillHeader(i, c.SEND_FRAME_DATA_REQ);
    }, this.setRoomProperty = function (e, t, r, o) {
      var s = new m.SetRoomPropertyReq();
      s.setGameid(e), s.setRoomid(r), s.setUserid(t), s.setRoomproperty(stringToUtf8ByteArray(o));
      var i = s.serializeBinary();
      return this.fillHeader(i, c.SET_ROOM_PROPERTY_REQ);
    }, this.joinOpen = function (e, t, r, o) {
      var s = new m.JoinOpenReq();
      s.setRoomid(r), s.setGameid(e), s.setUserid(t), s.setCpproto(stringToUtf8ByteArray(o));
      var i = s.serializeBinary();
      return this.fillHeader(i, c.JOIN_OPEN_REQ);
    }, this.joinWatchRoom = function (e, t, r, o) {
      var s = new m.JoinWatchRoomReq();
      s.setGameid(e), s.setRoomid(r), s.setUserid(t), s.setUserprofile(stringToUtf8ByteArray(o));
      var i = s.serializeBinary();
      return this.fillHeader(i, m.CmdId.JOINWATCHROOMREQ);
    }, this.enterLiveRoom = function (e, t, r, o, s) {
      var i = new m.EnterLiveRoom();
      i.setBookid(e.getBookid()), i.setTicket(e.getBookkey()), i.setGameid(t), i.setUserid(r), i.setSetid(s), i.setUserprofile(""), i.setRoomid(o);
      var a = i.serializeBinary();
      return this.fillHeader(a, m.SDKWatchCmdID.ENTERLIVEROOMCMDID);
    }, this.leaveWatchRoom = function (e, t, r, o) {
      var s = new m.LeaveWatchRoomReq();
      s.setCpproto(stringToUtf8ByteArray(o)), s.setGameid(e), s.setUserid(t), s.setRoomid(r);
      var i = s.serializeBinary();
      return this.fillHeader(i, m.CmdId.LEAVEWATCHROOMREQ);
    }, this.getWatchRooms = function (e, t) {
      var r = new m.GetWatchRoomsReq(),
          o = new m.RoomFilter();
      o.setMaxplayer(t.maxPlayer), o.setMode(Number(t.mode)), o.setFull(t.full), o.setCanwatch(t.canWatch), o.setRoomproperty(stringToUtf8ByteArray(t.roomProperty)), o.setState(t.state), r.setGameid(e), r.setRoomfilter(o), r.setSort(t.sort), r.setOrder(t.order), r.setPageno(t.pageNo), r.setPagesize(t.pageSize);
      var s = r.serializeBinary();
      return this.fillHeader(s, m.CmdId.GETWATCHROOMSREQ);
    }, this.liveHeartBeat = function (e, t, r) {
      var o = new m.LiveHeartbeat();
      o.setGameid(Number(e)), o.setRoomid(t), o.setUserid(Number(r));
      var s = o.serializeBinary();
      return this.fillHeader(s, m.SDKWatchCmdID.LIVEHEARTBEATCMDID);
    }, this.broadCastWatch = function (e, t, r, o, s) {
      var i = new m.LiveBroadcast();
      i.setRoomid(e), i.setDstuidsList(t), i.setCpproto(stringToUtf8ByteArray(s));
      var a = 32 + ((3 & r) << 2) + (3 & o);
      i.setFlag(a);
      var n = i.serializeBinary();
      return this.fillHeader(n, m.SDKWatchCmdID.LIVEBROADCASTCMDID);
    }, this.setLiveOffset = function (e, t, r, o) {
      var s = new m.SetLiveOffset();
      s.setGameid(e), s.setRoomid(t), s.setUserid(r), s.setOffsetms(o);
      var i = s.serializeBinary();
      return this.fillHeader(i, MVS.PtoCmd.SET_LIVEOFFSET_REQ);
    }, this.changeRoleProto = function (e, t, r, o, s) {
      var i = new m.ChangeRoleReq();
      i.setGameid(t), i.setRoomid(r), i.setUserid(e), i.setUserprofile(stringToUtf8ByteArray(s));
      var a = 0 === o ? m.RoomType.GAMEROOM : m.RoomType.WATCHROOMTYPE;
      i.setTargetroomtype(a);
      var n = i.serializeBinary();
      return this.fillHeader(n, MVS.PtoCmd.CHANGE_ROLE_REQ);
    }, this.setReconnectTimeout = function (e, t) {
      var r = new m.SetReconnectTimeoutReq();
      r.setTimeout(Number(t)), r.setUserid(Number(e));
      var o = r.serializeBinary();
      return this.fillHeader(o, MVS.PtoCmd.SET_RECONNECT_TIMEOUT_REQ);
    }, this.CreateTeam = function (e, t, r) {
      MVS.DEBUG && console.log("CreateTeam gameID:", e, " teamInfo:", t);
      var o = new m.TeamInfo();
      o.setCapacity(t.capacity), o.setTeamid(t.teamID), o.setPassword(t.password), o.setMode(t.mode), o.setOwner(t.owner), o.setVisibility(t.visibility);
      var s = new m.PlayerInfo();
      s.setUserid(r.userID), s.setUserprofile(stringToUtf8ByteArray(r.userProfile));
      var i = new m.CreateTeamReq();
      i.setGameid(Number(e)), i.setPlayerinfo(s), i.setTeaminfo(o);
      var a = i.serializeBinary();
      return this.fillHeader(a, MVS.PtoCmd.CREATE_TEAM_REQ);
    }, this.JoinTeam = function (e) {
      var t = new m.PlayerInfo();
      t.setUserid(e.player.userID), t.setUserprofile(stringToUtf8ByteArray(e.player.userProfile));
      var r = new m.JoinTeamReq();
      r.setGameid(e.gameID), r.setTeamid(e.teamID), r.setPlayerinfo(t), r.setPassword(e.password);
      var o = r.serializeBinary();
      return this.fillHeader(o, MVS.PtoCmd.JOIN_TEAM_REQ);
    }, this.LeaveTeam = function (e) {
      MVS.DEBUG && console.log("LeaveTeam args:", e);
      var t = new m.LeaveTeamReq();
      t.setGameid(Number(e.gameID)), t.setTeamid(e.teamID), t.setUserid(Number(e.userID));
      var r = t.serializeBinary();
      return this.fillHeader(r, MVS.PtoCmd.LEAVE_TEAM_REQ);
    }, this.TeamMatch = function (e) {
      MVS.DEBUG && console.log("TeamMatch args:", e);
      var t = new m.TeamMatchCond();
      t.setFull(e.cond.full), t.setTeammembernum(e.cond.teamMemberNum), t.setTeamnum(e.cond.teamNum), t.setTimeout(e.cond.timeout), t.setWeight(e.cond.weight), t.setWeightrange(e.cond.weightRange), t.setWeightrule(e.cond.weightRule);
      var r = new m.WatchSetting();
      r.setWatchpersistent(e.watchSet.persistent), r.setWatchdelayms(e.watchSet.delayMS), r.setMaxwatch(e.watchSet.maxWatch), r.setCachetime(e.watchSet.cacheMS);
      var o = new m.RoomInfo();
      o.setRoomproperty(stringToUtf8ByteArray(e.roomInfo.roomProperty)), o.setCanwatch(e.roomInfo.canWatch), o.setMaxplayer(e.roomInfo.maxPlayer), o.setMode(e.roomInfo.mode), o.setOwner(0), o.setRoomid(""), o.setRoomname(e.roomInfo.roomName), o.setVisibility(e.roomInfo.visibility);
      var s = new m.TeamMatchReq();
      s.setGameid(e.gameID), s.setTeamid(e.teamID), s.setUserid(e.userID), s.setCond(t), s.setRoominfo(o), s.setWatchsetting(r);
      var i = s.serializeBinary();
      return this.fillHeader(i, c.TEAM_MATCH_REQ);
    }, this.GetOffLineData = function (e) {
      var t = new m.GetCacheData();
      t.setCacheframems(e.cacheFrameMS), t.setRoomid(e.roomID), t.setGameid(e.gameID);
      var r = t.serializeBinary();
      return this.fillHeader(r, c.GET_CACHEDATA_REQ);
    }, this.CancelTeamMatch = function (e) {
      var t = new m.CancelTeamMatchReq();
      t.setGameid(e.gameID), t.setTeamid(e.teamID), t.setCpproto(stringToUtf8ByteArray(e.cpProto)), t.setUserid(e.userID);
      var r = t.serializeBinary();
      return this.fillHeader(r, c.CANCEL_TEAMMATCH_REQ);
    }, this.SendTeamEvent = function (e) {
      var t = new m.SendTeamEventReq();
      t.setCpproto(stringToUtf8ByteArray(e.cpProto)), t.setUserid(e.userID), t.setGameid(e.gameID), t.setDsttype(e.dstType), t.setMsgtype(e.msgType), t.setTeamid(e.teamID), t.setDstuidsList(e.dstUids);
      var r = t.serializeBinary();
      return this.fillHeader(r, c.SEND_TEAMEVENT_REQ);
    }, this.KickTeamMember = function (e) {
      var t = new m.KickTeamMemberReq();
      t.setDstuserid(e.dstuserID), t.setGameid(e.gameID), t.setTeamid(e.teamID), t.setUserid(e.userID), t.setCpproto(stringToUtf8ByteArray(e.cpProto));
      var r = t.serializeBinary();
      return this.fillHeader(r, c.KICK_TEAMMEMBER_REQ);
    };
  };
}(MVS || {});

var NetWorkCallBackImp = function NetWorkCallBackImp(i) {
  MSExtend(this, MVS.MatchvsNetWork), this.engineWorkMap = new MVS.EngineNetworkMap(), this.gtwTimer = 0, this.watchTimer = 0, this.mHotelTimer = 0, this.frameCache = [], this.hbTimers = [], this.clearAllBeatTimer = function () {
    for (; 0 < this.hbTimers.length;) {
      MVS.ticker.clearInterval(this.hbTimers.pop());
    }
  }, this.onMsg = function (e) {
    var t = i.mProtocol.handleMsg(e),
        r = new proto.stream.RoomInfo(),
        o = {
      hotelTimer: this.mHotelTimer,
      watchTimer: this.watchTimer,
      payload: t.payload,
      seq: t.header.seq,
      roomInfo: r,
      frameCache: this.frameCache,
      teamNotifyInfo: this.teamNotifyInfo
    },
        s = this.engineWorkMap[t.header.cmd];
    MVS.mtaReport && MVS.mtaReport.Report(t.header.cmd), s ? s.doSubHandle(o, i) : MatchvsLog.logE("no the cmd: ", t.header.cmd);
  }, this.onErr = function (e, t) {
    MVS.ErrorRspWork(i.mRsp.errorResponse, e, t);
  }, this.onConnect = function (e) {
    "" !== MVS.Host.HOST_HOTEL_ADDR && 0 <= e.indexOf(MVS.Host.HOST_HOTEL_ADDR) ? (this.mHotelTimer = MVS.ticker.setInterval(i.hotelHeartBeat, MVS.Config.HEART_BEAT_INTERVAL), this.hbTimers.push(this.mHotelTimer)) : "" !== MVS.Host.HOST_WATCH_ADDR && 0 <= e.indexOf(MVS.Host.HOST_WATCH_ADDR) ? (this.watchTimer = MVS.ticker.setInterval(i.liveHeartBeat, MVS.Config.HEART_BEAT_INTERVAL), this.hbTimers.push(this.watchTimer)) : "" !== MVS.Host.HOST_GATWAY_ADDR && 0 <= e.indexOf(MVS.Host.HOST_GATWAY_ADDR) && (this.gtwTimer = MVS.ticker.setInterval(i.heartBeat, MVS.Config.HEART_BEAT_INTERVAL), this.hbTimers.push(this.gtwTimer)), i.mRsp.onConnect && i.mRsp.onConnect(e);
  }, this.onDisConnect = function (e, t) {
    i.mCntRoomType = MVS.TgRoomType.NRoom, i.mRsp.onDisConnect && i.mRsp.onDisConnect(e), e.endsWith(MVS.Host.HOST_GATWAY_ADDR) ? (i.mState.SetInit(), MatchvsLog.logI("gateway disconnect"), t && t.code && (t.code === MvsCode.CODE_1000 || t.code === MvsCode.CODE_1005) ? MatchvsLog.logI("gateway close is friend") : (this.clearAllBeatTimer(), i.mHotelNetWork && i.mHotelNetWork.close(), MVS.ErrorRspWork(i.mRsp.errorResponse, MvsCode.NetworkErr, "(" + t.code + ") gateway network error")), MVS.ticker.clearInterval(this.gtwTimer)) : "" !== MVS.Host.HOST_WATCH_ADDR && e.endsWith(MVS.Host.HOST_WATCH_ADDR) ? (MatchvsLog.logI("live disconnect"), t && t.code && (t.code === MvsCode.CODE_1000 || t.code === MvsCode.CODE_1005) ? MatchvsLog.logI("live close is friend") : (i.mState.SetInit(), this.clearAllBeatTimer(), i.mWatchNetwrok && i.mWatchNetwrok.close(), MVS.ErrorRspWork(i.mRsp.errorResponse, MvsCode.NetworkErr, "(" + t.code + ") watch network error")), MVS.ticker.clearInterval(this.watchTimer), i.mState.DelInRoom()) : "" !== MVS.Host.HOST_HOTEL_ADDR && e.endsWith(MVS.Host.HOST_HOTEL_ADDR) && (MatchvsLog.logI("hotel disconnect"), t && t.code && (t.code === MvsCode.CODE_1000 || t.code === MvsCode.CODE_1005) ? MatchvsLog.logI("hotel close is friend") : (i.mState.SetInit(), this.clearAllBeatTimer(), i.mGTWNetwork && i.mGTWNetwork.close(), MVS.ErrorRspWork(i.mRsp.errorResponse, MvsCode.NetworkErr, "(" + t.code + ") hotel network error")), MVS.ticker.clearInterval(this.mHotelTimer), i.mState.DelInRoom());
  };
};

function MatchvsResponse() {
  this.registerUserResponse = function (e) {}, this.loginResponse = function (e) {}, this.logoutResponse = function (e) {}, this.createRoomResponse = function (e) {}, this.getRoomListResponse = function (e, t) {}, this.joinRoomResponse = function (e, t, r) {}, this.joinRoomNotify = function (e) {}, this.joinOverResponse = function (e) {}, this.joinOverNotify = function (e) {}, this.leaveRoomResponse = function (e) {}, this.leaveRoomNotify = function (e) {}, this.kickPlayerResponse = function (e) {}, this.kickPlayerNotify = function (e) {}, this.sendEventResponse = function (e) {}, this.sendEventNotify = function (e) {}, this.gameServerNotify = function (e) {}, this.errorResponse = function (e, t) {}, this.initResponse = function (e) {}, this.networkStateNotify = function (e) {}, this.subscribeEventGroupResponse = function (e, t) {}, this.sendEventGroupResponse = function (e, t) {}, this.sendEventGroupNotify = function (e, t, r) {}, this.setFrameSyncResponse = function (e) {}, this.setFrameSyncNotify = function (e) {}, this.sendFrameEventResponse = function (e) {}, this.frameUpdate = function (e) {}, this.hotelHeartBeatRsp = function (e) {}, this.gatewaySpeedResponse = function (e) {}, this.heartBeatResponse = function (e) {}, this.disConnectResponse = function (e) {}, this.getRoomDetailResponse = function (e) {}, this.getRoomListExResponse = function (e) {}, this.setRoomPropertyResponse = function (e) {}, this.setRoomPropertyNotify = function (e) {}, this.reconnectResponse = function (e, t, r) {}, this.joinOpenNotify = function (e) {}, this.joinOpenResponse = function (e) {}, this.joinWatchRoomResponse = function (e) {}, this.joinWatchRoomNotify = function (e) {}, this.leaveWatchRoomResponse = function (e) {}, this.leaveWatchRoomNotify = function (e) {}, this.getWatchRoomsResponse = function (e) {}, this.watchHeartBeat = function (e) {}, this.liveBroadcastResponse = function (e) {}, this.liveBroadcastNotify = function (e) {}, this.setLiveOffsetResponse = function (e) {}, this.liveOverNotify = function (e) {}, this.liveFrameUpdate = function (e) {}, this.changeRoleResponse = function (e) {}, this.setReconnectTimeoutResponse = function (e) {}, this.createTeamResponse = function (e) {}, this.joinTeamResponse = function (e) {}, this.joinTeamNotify = function (e) {}, this.leaveTeamResponse = function (e) {}, this.leaveTeamNotify = function (e) {}, this.teamMatchResponse = function (e) {}, this.teamMatchResultNotify = function (e) {}, this.teamMatchStartNotify = function (e) {}, this.getOffLineDataResponse = function (e) {}, this.cancelTeamMatchResponse = function (e) {}, this.cancelTeamMatchNotify = function (e) {}, this.sendTeamEventResponse = function (e) {}, this.sendTeamEventNotify = function (e) {}, this.kickTeamMemberResponse = function (e) {}, this.kickTeamMemberNotify = function (e) {};
}

!function (e) {
  e.EngineNetworkMap = function () {
    this[MVS.PtoCmd.LOGIN_RSP] = new t(), this[MVS.PtoCmd.JOIN_ROOM_RSP] = new r(), this[MVS.PtoCmd.JOIN_ROOM_NOTIFY] = new o(), this[MVS.PtoCmd.CHECK_IN_RSP] = new i(), this[MVS.PtoCmd.CREATE_ROOM_RSP] = new s(), this[MVS.PtoCmd.CHECK_IN_NOTIFY] = new a(), this[MVS.PtoCmd.JOIN_OVER_RSP] = new p(), this[MVS.PtoCmd.JOIN_OVER_NOTIFY] = new g(), this[MVS.PtoCmd.LEAVE_ROOM_RSP] = new n(), this[MVS.PtoCmd.LEAVE_ROOM_NOTIFY] = new l(), this[MVS.PtoCmd.GTW_HEART_BEAT_RSP] = new M(), this[MVS.PtoCmd.HOTEL_HEART_BEAT_RSP] = new m(), this[MVS.PtoCmd.BROADCAST_RSP] = new c(), this[MVS.PtoCmd.BROADCAST_NOTIFY] = new d(), this[MVS.PtoCmd.SUBSCRIBE_RSP] = new f(), this[MVS.PtoCmd.SUBSCRIBE_DATA_RSP] = new h(), this[MVS.PtoCmd.SUBSCRIBE_DATA_NOTIFY] = new y(), this[MVS.PtoCmd.GTW_SPEED_RSP] = new R(), this[MVS.PtoCmd.GET_ROOMLIST_RSP] = new S(), this[MVS.PtoCmd.LOGOUT_RSP] = new b(), this[MVS.PtoCmd.DISCONNECT_RSP] = new E(), this[MVS.PtoCmd.KICK_PLAYER_NOTIFY] = new v(), this[MVS.PtoCmd.KICK_PLAYER_RSP] = new T(), this[MVS.PtoCmd.SET_FRAMESYNC_RSP] = new _(), this[MVS.PtoCmd.SEND_FRAME_DATA_RSP] = new F(), this[MVS.PtoCmd.SET_FRAMESYNC_NOTIFY] = new I(), this[MVS.PtoCmd.FRAME_DATA_NOTIFY] = new B(), this[MVS.PtoCmd.FRAME_SYNC_NOTIFY] = new O(), this[MVS.PtoCmd.NETWORK_STATE_NOTIFY] = new D(), this[MVS.PtoCmd.GET_ROOMLIST_EX_RSP] = new w(), this[MVS.PtoCmd.GET_ROOM_DETAIL_RSP] = new W(), this[MVS.PtoCmd.SET_ROOM_PROPERTY_RSP] = new C(), this[MVS.PtoCmd.SET_ROOM_PROPERTY_NOTIFY] = new N(), this[MVS.PtoCmd.JOIN_OPEN_RSP] = new A(), this[MVS.PtoCmd.JOIN_OPEN_NOTIFY] = new k(), this[MVS.PtoCmd.JOIN_WATCHROOM_RSP] = new P(), this[MVS.PtoCmd.LEAVE_WATCHROOM_RSP] = new L(), this[MVS.PtoCmd.GET_WATCHROOM_RSP] = new U(), this[MVS.PtoCmd.CHANGE_ROLE_RSP] = new Y(), this[MVS.PtoCmd.ENTER_LIVEROOM_RSP] = new j(), this[MVS.PtoCmd.ENTER_LIVEROOM_NOTIFY] = new G(), this[MVS.PtoCmd.LIVE_HEARTBEAT_RSP] = new x(), this[MVS.PtoCmd.LIVE_BROADCAST_RSP] = new z(), this[MVS.PtoCmd.LIVE_BROADCAST_NOTIFY] = new V(), this[MVS.PtoCmd.SET_LIVEOFFSET_RSP] = new H(), this[MVS.PtoCmd.EXIT_LIVEROOM_NOTIFY] = new q(), this[MVS.PtoCmd.LIVE_OVER_NOTIFY] = new J(), this[MVS.PtoCmd.LIVE_FRAMEDATA_NOTIFY] = new $(), this[MVS.PtoCmd.LIVE_FRAMESYNC_NOTIFY] = new K(), this[MVS.PtoCmd.SET_RECONNECT_TIMEOUT_RSP] = new Q(), this[MVS.PtoCmd.CREATE_TEAM_RSP] = new X(), this[MVS.PtoCmd.JOIN_TEAM_RSP] = new Z(), this[MVS.PtoCmd.JOIN_TEAM_NOTIFY] = new ee(), this[MVS.PtoCmd.LEAVE_TEAM_RSP] = new te(), this[MVS.PtoCmd.LEAVE_TEAM_NOTIFY] = new re(), this[MVS.PtoCmd.TEAM_MATCH_RSP] = new oe(), this[MVS.PtoCmd.TEAM_MATCH_RESULT_NOTIFY] = new se(), this[MVS.PtoCmd.TEAM_MATCH_START_NOTIFY] = new ie(), this[MVS.PtoCmd.GET_CACHEDATA_RSP] = new ae(), this[MVS.PtoCmd.CANCEL_TEAMMATCH_RSP] = new ne(), this[MVS.PtoCmd.CANCEL_TEAMMATCH_NOTIFY] = new pe(), this[MVS.PtoCmd.KICK_TEAMMEMBER_RSP] = new le(), this[MVS.PtoCmd.KICK_TEAMMEMBER_NOTIFY] = new me(), this[MVS.PtoCmd.SEND_TEAMEVENT_RSP] = new ge(), this[MVS.PtoCmd.SEND_TEAMEVENT_NOTIFY] = new ue();
  };

  var u = function u(e, t, r) {
    var o = "";
    o = void 0 !== MvsErrMsg[t] ? r + ". " + MvsErrMsg[t] : r, MatchvsLog.logI("[error code:" + t + "] " + o), e && e(t, o);
  };

  function t() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      if (MVS.ccReport && MVS.ccReport.loginRsp(r), 200 === r) {
        if (t.mState.SetLogin(), t.mRecntRoomID = e.payload.getRoomid(), 0 !== t.mState.IsReconnecting()) {
          if ("0" !== t.mRecntRoomID) {
            var o = new MsRoomJoin(MsEnum.JoinRoomType.reconnect, t.mUserID, t.mRecntRoomID, MVS.Game.id, 0, 0, 0, "reconnect", [{
              name: "MatchVS"
            }]),
                s = t.mProtocol && t.mProtocol.joinRoomSpecial(o);
            t.mGTWNetwork && t.mGTWNetwork.send(s);
          } else t.mState.DelReconnecting(), t.mRsp.reconnectResponse && t.mRsp.reconnectResponse(MvsCode.CODE_201, [], {});
        } else t.mRsp.loginResponse(new MsLoginRsp(r, t.mRecntRoomID));
      } else t.mState.SetInit(), u(t.mRsp.errorResponse, r, "login or reconnect is fail");
    };
  }

  function r() {
    this.doSubHandle = function (e, r) {
      var t = e.payload.getStatus();

      if (200 === t) {
        var o = e.payload.getBookinfo();
        r.mRoomInfo = e.payload.getRoominfo(), e.payload.getUsersList().forEach(function (e) {
          var t = e.getUserid();
          r.joinRoomNotifyInfo[t] = new MsRoomUserInfo(t, utf8ByteArrayToString(e.getUserprofile()));
        }), MVS.Host.HOST_HOTEL_ADDR = MVS.MsUtil.getHotelUrl(o), r.roomCheckIn(e.payload.getBookinfo(), e.payload.getRoominfo());
      } else r.mState.DelJoinRooming(), u(r.mRsp.errorResponse, t, "join room failed "), r.mRsp.joinRoomResponse && r.mRsp.joinRoomResponse(t, null, null);
    };
  }

  function o() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getUser().getUserid();
      t.joinRoomNotifyInfo[r] = new MsRoomUserInfo(r, utf8ByteArrayToString(e.payload.getUser().getUserprofile()));
    };
  }

  function s() {
    this.doSubHandle = function (e, t) {
      if (200 === e.payload.getStatus()) {
        var r = e.payload.getBookinfo();
        e.roomInfo.setRoomid(e.payload.getRoomid()), e.roomInfo.setOwner(e.payload.getOwner()), t.mRoomInfo = e.roomInfo, MVS.Host.HOST_HOTEL_ADDR = MVS.MsUtil.getHotelUrl(r), t.roomCheckIn(e.payload.getBookinfo(), e.roomInfo);
      } else t.mState.DelCreateRoom(), u(t.mRsp.errorResponse, e.payload.getStatus(), ""), t.mRsp.createRoomResponse && t.mRsp.createRoomResponse(new MsCreateRoomRsp(e.payload.getStatus(), "", 0));
    };
  }

  function i() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getCheckinsList(),
          o = e.payload.getStatus();
      if (200 !== o) t.mState.SetLogin(), u(t.mRsp.errorResponse, o, "check in error"), t.mHotelNetWork && t.mHotelNetWork.close();else {
        t.mCntRoomType = MVS.TgRoomType.PRoom, t.mRecntRoomID = t.mRoomInfo.getRoomid(), t.mAllPlayers = e.payload.getCheckinsList();
        var s = [];
        r.forEach(function (e) {
          e in t.joinRoomNotifyInfo && (s.push(t.joinRoomNotifyInfo[e]), delete t.joinRoomNotifyInfo[e]);
        });
        var i = new MsRoomInfo(t.mRoomInfo.getRoomid(), utf8ByteArrayToString(t.mRoomInfo.getRoomproperty()), t.mRoomInfo.getOwner(), t.mRoomInfo.getState());
        t.mState.SetInRoom(), t.mState.IsCreateRoom() ? (t.mState.DelCreateRoom(), t.mRsp.createRoomResponse && t.mRsp.createRoomResponse(new MsCreateRoomRsp(o, t.mRoomInfo.getRoomid(), t.mRoomInfo.getOwner()))) : t.mState.IsJoinRooming() ? (t.mState.DelJoinRooming(), t.mRsp.joinRoomResponse && t.mRsp.joinRoomResponse(o, s, i)) : 0 !== t.mState.IsReconnecting() ? (t.mState.DelReconnecting(), t.mRsp.reconnectResponse && t.mRsp.reconnectResponse(o, s, i)) : t.mState.IsTeamMatching() && (t.mState.DelTeamMatching(), t.mState.DelInTeam(), t.teamNotifyInfo.roomInfo = i, t.mRsp.teamMatchResultNotify(t.teamNotifyInfo));
      }
    };
  }

  function a() {
    this.doSubHandle = function (e, t) {
      t.mAllPlayers = e.payload.getCheckinsList();
      var r = e.payload.getUserid();
      r in t.joinRoomNotifyInfo && (t.mRsp.joinRoomNotify && t.mRsp.joinRoomNotify(t.joinRoomNotifyInfo[r]), delete t.joinRoomNotifyInfo[r]);
    };
  }

  function n() {
    this.doSubHandle = function (e, t) {
      t.mState.DelInRoom(), 200 !== e.payload.getStatus() && u(t.mRsp.errorResponse, e.payload.getStatus(), "leave room fail"), e.roomInfo.setRoomid("0"), t.mRoomInfo = e.roomInfo;
      var r = new MsLeaveRoomRsp(e.payload.getStatus(), e.payload.getRoomid(), e.payload.getUserid(), e.payload.getCpproto());
      t.mRsp.leaveRoomResponse && t.mRsp.leaveRoomResponse(r);
    };
  }

  function p() {
    this.doSubHandle = function (e, t) {
      200 !== e.payload.getStatus() && u(t.mRsp.errorResponse, e.payload.getStatus(), "join over fail"), t.mRsp.joinOverResponse && t.mRsp.joinOverResponse(new MsJoinOverRsp(e.payload.getStatus(), utf8ByteArrayToString(e.payload.getCpproto())));
    };
  }

  function g() {
    this.doSubHandle = function (e, t) {
      var r = new MsJoinOverNotifyInfo(e.payload.getRoomid(), e.payload.getSrcuserid(), utf8ByteArrayToString(e.payload.getCpproto()));
      t.mRsp.joinOverNotify && t.mRsp.joinOverNotify(r);
    };
  }

  function l() {
    this.doSubHandle = function (e, t) {
      var r = new MsLeaveRoomNotify(e.payload.getRoomid(), e.payload.getUserid(), e.payload.getOwner(), utf8ByteArrayToString(e.payload.getCpproto()));
      t.mRsp.leaveRoomNotify && t.mRsp.leaveRoomNotify(r);
    };
  }

  function m() {
    this.doSubHandle = function (e, t) {
      t.mRsp.hotelHeartBeatRsp && t.mRsp.hotelHeartBeatRsp(e.payload.getStatus()), MatchvsLog.logI("hotelHeartBeatRsp");
    };
  }

  function c() {
    this.doSubHandle = function (e, t) {
      200 !== e.payload.getStatus() && u(t.mRsp.errorResponse, e.payload.getStatus(), "send event fail"), t.mRsp.sendEventResponse && t.mRsp.sendEventResponse(new MsSendEventRsp(e.payload.getStatus(), e.seq));
    };
  }

  function d() {
    this.doSubHandle = function (e, t) {
      0 === e.payload.getSrcuid() ? t.mRsp.gameServerNotify && t.mRsp.gameServerNotify(new MsGameServerNotifyInfo(e.payload.getSrcuid(), utf8ByteArrayToString(e.payload.getCpproto()))) : t.mRsp.sendEventNotify && t.mRsp.sendEventNotify(new MsSendEventNotify(e.payload.getSrcuid(), utf8ByteArrayToString(e.payload.getCpproto())));
    };
  }

  function f() {
    this.doSubHandle = function (e, t) {
      t.mRsp.subscribeEventGroupResponse && t.mRsp.subscribeEventGroupResponse(e.payload.getStatus(), e.payload.getGroupsList());
    };
  }

  function h() {
    this.doSubHandle = function (e, t) {
      t.mRsp.sendEventGroupResponse && t.mRsp.sendEventGroupResponse(e.payload.getStatus(), e.payload.getDstnum());
    };
  }

  function y() {
    this.doSubHandle = function (e, t) {
      t.mRsp.sendEventGroupNotify && t.mRsp.sendEventGroupNotify(e.payload.getSrcuid(), e.payload.getGroupsList(), utf8ByteArrayToString(e.payload.getCpproto()));
    };
  }

  function R() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus(),
          o = e.payload.getSeq();
      t.mRsp.gatewaySpeedResponse && t.mRsp.gatewaySpeedResponse(new MsGatewaySpeedResponse(r, o));
    };
  }

  function M() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getGameid(),
          o = e.payload.getGsexist();
      t.mRsp.heartBeatResponse && t.mRsp.heartBeatResponse(new MsHeartBeatResponse(r, o)), MatchvsLog.logI("gatewayHeartBeatResponse");
    };
  }

  function b() {
    this.doSubHandle = function (e, t) {
      t.mGTWNetwork.close(), t.mRsp.logoutResponse && t.mRsp.logoutResponse(e.payload.getStatus());
    };
  }

  function S() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r && (t.mRsp.getRoomListResponse && t.mRsp.getRoomListResponse(e.payload.getStatus(), null), u(t.mRsp.errorResponse, e.payload.getStatus(), "get room list error "));

      for (var o = e.payload.getRoominfoList(), s = [], i = 0; i < o.length; i++) {
        s[i] = new MsRoomInfoEx(o[i].getRoomid(), o[i].getRoomname(), o[i].getMaxplayer(), o[i].getMode(), o[i].getCanwatch(), utf8ByteArrayToString(o[i].getRoomproperty()));
      }

      t.mRsp.getRoomListResponse && t.mRsp.getRoomListResponse(r, s);
    };
  }

  function E() {
    this.doSubHandle = function (e, t) {
      t.mRsp.disConnectResponse && t.mRsp.disConnectResponse(e.payload.getStatus());
    };
  }

  function T() {
    this.doSubHandle = function (e, t) {
      200 != e.payload.getStatus() && u(t.mRsp.errorResponse, e.payload.getStatus(), "kick player error "), t.mRsp.kickPlayerResponse && t.mRsp.kickPlayerResponse(new MsKickPlayerRsp(e.payload.getStatus(), e.payload.getOwner(), e.payload.getUserid()));
    };
  }

  function v() {
    this.doSubHandle = function (e, t) {
      e.payload.getUserid().toString() === "" + t.mUserID && null != e.hotelTimer && (MVS.ticker.clearInterval(e.hotelTimer), t.mState.SetLogin(), t.mHotelNetWork.close()), t.mRsp.kickPlayerNotify && t.mRsp.kickPlayerNotify(new MsKickPlayerNotify(e.payload.getUserid(), e.payload.getSrcuserid(), utf8ByteArrayToString(e.payload.getCpproto()), e.payload.getOwner()));
    };
  }

  function _() {
    this.doSubHandle = function (e, t) {
      MatchvsLog.logI("SetFrameSyncRateAck:" + e.payload), t.mRsp.setFrameSyncResponse && t.mRsp.setFrameSyncResponse(new MsSetChannelFrameSyncRsp(e.payload.getStatus()));
    };
  }

  function I() {
    this.doSubHandle = function (e, t) {
      var r = new MVS.MsSetFrameSyncNotify(e.payload.getFramerate(), e.payload.getFrameidx(), e.payload.getTimestamp(), e.payload.getEnablegs(), e.payload.getCacheframems());
      t.mRsp.setFrameSyncNotify && t.mRsp.setFrameSyncNotify(r);
    };
  }

  function F() {
    this.doSubHandle = function (e, t) {
      t.mRsp.sendFrameEventResponse && t.mRsp.sendFrameEventResponse(new MsSendFrameEventRsp(e.payload.getStatus()));
    };
  }

  function B() {
    this.doSubHandle = function (e, t) {
      e.frameCache.unshift(new MsFrameItem(e.payload.getSrcuid(), utf8ByteArrayToString(e.payload.getCpproto()), e.payload.getTimestamp()));
    };
  }

  function O() {
    this.doSubHandle = function (e, t) {
      for (var r = []; 0 < e.frameCache.length;) {
        r.push(e.frameCache.pop());
      }

      var o = new MsFrameData(e.payload.getLastidx(), r, r.length);
      t.mRsp.frameUpdate && t.mRsp.frameUpdate(o);
    };
  }

  function D() {
    this.doSubHandle = function (e, t) {
      t.mRsp.networkStateNotify && t.mRsp.networkStateNotify(new MsNetworkStateNotify(e.payload.getRoomid(), e.payload.getUserid(), e.payload.getState(), e.payload.getOwner()));
    };
  }

  function w() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getRoominfoexList(),
          s = [];
      r.forEach(function (e) {
        var t = e.getWatchinfo().getWatchsetting(),
            r = new MVS.MsWatchSet(t.getCachetime(), t.getMaxwatch(), t.getWatchdelayms(), t.getWatchpersistent()),
            o = new MsRoomAttribute(e.getRoomid(), e.getRoomname(), e.getMaxplayer(), e.getGameplayer(), e.getWatchplayer(), e.getMode(), e.getCanwatch(), utf8ByteArrayToString(e.getRoomproperty()), e.getOwner(), e.getState(), e.getCreatetime().toString(), r);
        s.push(o);
      });
      var o = new MsGetRoomListExRsp(e.payload.getStatus(), e.payload.getTotal(), s);
      t.mRsp.getRoomListExResponse && t.mRsp.getRoomListExResponse(o);
    };
  }

  function W() {
    this.doSubHandle = function (e, t) {
      200 !== e.payload.getStatus() && (t.mRsp.getRoomDetailResponse && t.mRsp.getRoomDetailResponse(new MsGetRoomDetailRsp(e.payload.getStatus())), u(t.mRsp.errorResponse, e.payload.getStatus(), ""));
      var r = e.payload.getRoomdetail(),
          o = [];
      r.getPlayerinfosList().forEach(function (e) {
        var t = new MsRoomUserInfo(e.getUserid(), utf8ByteArrayToString(e.getUserprofile()));
        o.push(t);
      });
      var s = r.getWatchroom(),
          i = s.getWatchinfo().getWatchsetting(),
          a = {
        state: s.getWatchinfo().getState(),
        curWatch: s.getWatchinfo().getCurwatch(),
        persistent: i.getWatchpersistent(),
        maxWatch: i.getMaxwatch(),
        delayMS: i.getWatchdelayms(),
        cacheTime: i.getCachetime()
      },
          n = r.getBrigadesList(),
          p = [];
      n.forEach(function (e) {
        var a = [];
        e.getTeamsList().forEach(function (e) {
          for (var t = e.getTeaminfo(), r = e.getPlayerList(), o = [], s = 0; s < r.length; s++) {
            o[s] = {
              userID: r[s].getUserid(),
              userProfile: utf8ByteArrayToString(r[s].getUserprofile())
            };
          }

          var i = {
            teamID: t.getTeamid(),
            capacity: t.getCapacity(),
            mode: t.getMode(),
            owner: t.getOwner(),
            playerList: o
          };
          a.push(i);
        });
        var t = {
          brigadeID: e.getBrigadeid(),
          teamList: a
        };
        p.push(t);
      });
      var g = new MsGetRoomDetailRsp(e.payload.getStatus(), r.getState(), r.getMaxplayer(), r.getMode(), r.getCanwatch(), utf8ByteArrayToString(r.getRoomproperty()), r.getOwner(), r.getCreateflag(), o, a, p);
      t.mRsp.getRoomDetailResponse && t.mRsp.getRoomDetailResponse(g);
    };
  }

  function C() {
    this.doSubHandle = function (e, t) {
      200 !== e.payload.getStatus() && u(t.mRsp.errorResponse, e.payload.getStatus(), "set room property fail"), t.mRsp.setRoomPropertyResponse && t.mRsp.setRoomPropertyResponse(new MsSetRoomPropertyRspInfo(e.payload.getStatus(), e.payload.getRoomid(), e.payload.getUserid(), utf8ByteArrayToString(e.payload.getRoomproperty())));
    };
  }

  function N() {
    this.doSubHandle = function (e, t) {
      t.mRsp.setRoomPropertyNotify && t.mRsp.setRoomPropertyNotify(new MsRoomPropertyNotifyInfo(e.payload.getRoomid(), e.payload.getUserid(), utf8ByteArrayToString(e.payload.getRoomproperty())));
    };
  }

  function A() {
    this.doSubHandle = function (e, t) {
      t.mRsp.joinOpenResponse && t.mRsp.joinOpenResponse(new MsReopenRoomResponse(e.payload.getStatus(), utf8ByteArrayToString(e.payload.getCpproto())));
    };
  }

  function k() {
    this.doSubHandle = function (e, t) {
      t.mRsp.joinOpenNotify && t.mRsp.joinOpenNotify(new MsReopenRoomNotify(e.payload.getRoomid(), e.payload.getUserid(), utf8ByteArrayToString(e.payload.getCpproto())));
    };
  }

  function P() {
    this.doSubHandle = function (e, t) {
      var r = e.payload,
          o = r.getStatus();
      if (200 !== o) return t.mState.DelJoinWatching(), u(t.mRsp.errorResponse, o, "join watch room error "), void (t.mRsp.joinWatchRoom && t.mRsp.joinWatchRoom(o));
      var s = r.getBookinfo();
      MVS.DEBUG && console.log("JoinWatchRoomRspWork bookInfo", s), MVS.Host.HOST_WATCH_ADDR = MVS.MsUtil.getLiveUrl(s, MVS.Game.id, r.getRoomid(), r.getSetid()), t.enterLiveRoom(r.getBookinfo(), r.getRoomid());
    };
  }

  function L() {
    this.doSubHandle = function (e, t) {
      t.mWatchNetwrok && t.mWatchNetwrok.close();
      var r = e.payload;
      MVS.DEBUG && console.log(MVS.LgFormat("LeaveWatchRoomRspWork"), r), 200 !== r.getStatus() && u(t.mRsp.errorResponse(r.getStatus(), " leave watch room error ")), t.mWatchRoomID = "0", t.mRsp.leaveWatchRoomResponse && t.mRsp.leaveWatchRoomResponse(r.getStatus());
    };
  }

  function U() {
    this.doSubHandle = function (e, t) {
      var r = e.payload;
      if (200 !== r.getStatus()) return t.mRsp.getRoomListExResponse && t.mRsp.getRoomListExResponse(new MsGetRoomListExRsp(r.getStatus(), 0, [])), void u(t.mRsp.errorResponse, r.getStatus(), "get watch room list error ");
      var o = r.getRoominfoexList(),
          s = [];
      o.forEach(function (e) {
        var t = e.getWatchinfo().getWatchsetting(),
            r = new MVS.MsWatchSet(t.getCachetime(), t.getMaxwatch(), t.getWatchdelayms(), t.getWatchpersistent()),
            o = new MsRoomAttribute(e.getRoomid(), e.getRoomname(), e.getMaxplayer(), e.getGameplayer(), e.getWatchplayer(), e.getMode(), e.getCanwatch(), utf8ByteArrayToString(e.getRoomproperty()), e.getOwner(), e.getState(), e.getCreatetime().toString(), r);
        s.push(o);
      });
      var i = new MsGetRoomListExRsp(r.getStatus(), r.getTotal(), s);
      t.mRsp.getWatchRoomsResponse && t.mRsp.getWatchRoomsResponse(i);
    };
  }

  function j() {
    this.doSubHandle = function (e, t) {
      t.mState.DelJoinWatching();
      var r = e.payload,
          o = {};
      if (200 !== r.getStatus()) u(t.mRsp.errorResponse, r.getStatus(), "enter live room error"), o = new MVS.MsJoinWatchRoomRsp(r.getStatus(), 0, "", {});else {
        t.mState.SetInWatch();
        var s = r.getWathchinfo(),
            i = [];
        t.mCntRoomType = MVS.TgRoomType.WRoom, t.mWatchRoomID = s.getRoomid(), s.getLastaudiencesList().forEach(function (e) {
          var t = new MVS.MsLiveAudience(e.getUserid(), utf8ByteArrayToString(e.getProfile()), e.getEntertime());
          i.push(t);
        });
        var a = new MVS.MsLiveWatchInfo(s.getRoomid(), s.getStartts(), s.getDelayms(), s.getCachems(), s.getMaxaudiences(), s.getCuraudiences(), s.getPeakaudiences(), i);
        o = new MVS.MsJoinWatchRoomRsp(r.getStatus(), r.getRoomstatus(), r.getReserved(), a);
      }
      t.mRsp.joinWatchRoomResponse && t.mRsp.joinWatchRoomResponse(o);
    };
  }

  function G() {
    this.doSubHandle = function (e, t) {
      var r = e.payload,
          o = new MsRoomUserInfo(r.getUserid(), utf8ByteArrayToString(r.getUserprofile()));
      MVS.DEBUG && console.log(MVS.LgFormat("EnterLiveRoomNotifyWork"), r), t.mRsp.joinWatchRoomNotify && t.mRsp.joinWatchRoomNotify(o);
    };
  }

  function x() {
    this.doSubHandle = function (e, t) {
      t.mRsp.watchHeartBeat && t.mRsp.watchHeartBeat(e.payload.getStatus());
    };
  }

  function z() {
    this.doSubHandle = function (e, t) {
      var r = e.payload;
      200 !== r.getStatus() && u(t.mRsp.errorResponse, r.getStatus(), " watch send message error "), t.mRsp.liveBroadcastResponse && t.mRsp.liveBroadcastResponse(r.getStatus());
    };
  }

  function V() {
    this.doSubHandle = function (e, t) {
      var r = e.payload;
      t.mRsp.liveBroadcastNotify && t.mRsp.liveBroadcastNotify(new MsSendEventNotify(r.getSrcuid(), utf8ByteArrayToString(r.getCpproto())));
    };
  }

  function H() {
    this.doSubHandle = function (e, t) {
      var r = e.payload;
      t.mRsp.setLiveOffsetResponse && t.mRsp.setLiveOffsetResponse(r.getStatus());
    };
  }

  function q() {
    this.doSubHandle = function (e, t) {
      var r = e.payload,
          o = new MVS.MsExitLiveRoomNotify(r.getUserid(), utf8ByteArrayToString(r.getUserprofile()));
      MVS.DEBUG && console.log(MVS.LgFormat("ExitLiveRoomNotifyWork"), o), t.mRsp.leaveWatchRoomNotify && t.mRsp.leaveWatchRoomNotify(o);
    };
  }

  function J() {
    this.doSubHandle = function (e, t) {
      var r = e.payload;
      MVS.DEBUG && console.log(MVS.LgFormat("LiveOverNotifyWork"), r), t.mRsp.liveOverNotify && t.mRsp.liveOverNotify(new MVS.MsLiveOverNotify(r.getGameid(), r.getRoomid()));
    };
  }

  function $() {
    this.doSubHandle = function (e, t) {
      var r = e.payload,
          o = utf8ByteArrayToString(r.getCpproto());
      e.frameCache.unshift(new MsFrameItem(r.getSrcuid(), o, r.getTimestamp()));
    };
  }

  function K() {
    this.doSubHandle = function (e, t) {
      for (var r = []; 0 < e.frameCache.length;) {
        r.push(e.frameCache.pop());
      }

      var o = new MsFrameData(e.payload.getLastidx(), r, r.length);
      t.mRsp.liveFrameUpdate && t.mRsp.liveFrameUpdate(o);
    };
  }

  function Y() {
    this.doSubHandle = function (e, t) {
      var r = e.payload;
      if (200 !== r.getStatus()) u(t.mRsp.errorResponse, r.getStatus(), " watch send message error ");else {
        var o = r.getBookinfo();

        if (r.getTargetroomtype() == MVS.TgRoomType.PRoom) {
          MVS.ticker.clearInterval(e.watchTimer), t.mWatchNetwrok && t.mWatchNetwrok.close();
          var s = r.getPlayroom().getRoominfo();
          t.mRoomInfo = s, MVS.Host.HOST_HOTEL_ADDR = MVS.MsUtil.getHotelUrl(o), t.roomCheckIn(o, s);
        } else r.getTargetroomtype() == MVS.TgRoomType.WRoom && (MVS.ticker.clearInterval(e.hotelTimer), t.mState.SetLogin(), t.mHotelNetWork && t.mHotelNetWork.close(), MVS.Host.HOST_WATCH_ADDR = MVS.MsUtil.getLiveUrl(o, MVS.Game.id, r.getRoomid(), r.getSetid()), t.enterLiveRoom(r.getBookinfo(), r.getRoomid()));
      }
      t.mRsp.changeRoleResponse(new MVS.MsChangeRoleRsp(r.getStatus(), r.getTargetroomtype()));
    };
  }

  function Q() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r && u(t.mRsp.errorResponse, r, " set reconnect timeout value response error"), t.mRsp.setReconnectTimeoutResponse && t.mRsp.setReconnectTimeoutResponse(r);
    };
  }

  function X() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r ? (t.mState.DelInTeam(), u(t.mRsp.errorResponse, r, "create team response error")) : t.mState.SetInTeam(), t.mTeamID = e.payload.getTeamid();
      var o = {
        status: r,
        teamID: e.payload.getTeamid(),
        owner: e.payload.getOwner()
      };
      t.mRsp.createTeamResponse && t.mRsp.createTeamResponse(o);
    };
  }

  function Z() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r ? (t.mState.DelInTeam(), u(t.mRsp.errorResponse, r, "join team response error")) : t.mState.SetInTeam();
      var o = e.payload.getTeaminfo(),
          s = e.payload.getUsersList(),
          i = [];
      s.forEach(function (e) {
        i.push({
          userID: e.getUserid(),
          userProfile: utf8ByteArrayToString(e.getUserprofile())
        });
      });
      var a = {
        team: {},
        status: r,
        userList: i
      };
      o && (a.team = {
        teamID: o.getTeamid() || "0",
        password: o.getPassword() || "",
        capacity: o.getCapacity() || 0,
        mode: o.getMode() || 0,
        owner: o.getOwner() || 0
      }), t.mRsp.joinTeamResponse && t.mRsp.joinTeamResponse(a);
    };
  }

  function ee() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getUser(),
          o = {
        user: {
          userID: r.getUserid(),
          userProfile: utf8ByteArrayToString(r.getUserprofile())
        }
      };
      t.mRsp.joinTeamNotify && t.mRsp.joinTeamNotify(o);
    };
  }

  function te() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r && u(t.mRsp.errorResponse, r, "leave team response error");
      var o = {
        status: r,
        teamID: e.payload.getTeamid() || "0",
        userID: e.payload.getUserid() || 0
      };
      t.mRsp.leaveTeamResponse && t.mRsp.leaveTeamResponse(o);
    };
  }

  function re() {
    this.doSubHandle = function (e, t) {
      var r = {
        teamID: e.payload.getTeamid() || "",
        userID: e.payload.getUserid() || 0,
        owner: e.payload.getOwner() || 0
      };
      t.mRsp.leaveTeamNotify && t.mRsp.leaveTeamNotify(r);
    };
  }

  function oe() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r && u(t.mRsp.errorResponse, r, "team match response error");
      var o = {
        status: r
      };
      t.mRsp.teamMatchResponse && t.mRsp.teamMatchResponse(o);
    };
  }

  function se() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      if (200 !== r) return u(t.mRsp.errorResponse, r, "team match error"), t.mState.DelTeamMatching(), t.mRsp.teamMatchResultNotify && t.mRsp.teamMatchResultNotify({
        status: r,
        brigades: {},
        roomInfo: {}
      }), 0;
      var o = e.payload.getBookinfo();
      t.mRoomInfo = e.payload.getRoominfo();
      var s = e.payload.getBrigadesList(),
          i = [];
      return s.forEach(function (e) {
        var t = e.getTeamsList(),
            o = [];
        t.forEach(function (e) {
          for (var t = e.getPlayerList(), r = 0; r < t.length; r++) {
            o.push({
              userID: t[r].getUserid(),
              userProfile: utf8ByteArrayToString(t[r].getUserprofile())
            });
          }
        });
        var r = {
          brigadeID: e.getBrigadeid(),
          playerList: o
        };
        i.push(r);
      }), t.teamNotifyInfo = {
        status: r,
        brigades: i,
        roomInfo: {}
      }, MVS.DEBUG && console.log(MVS.LgFormat("TeamMatchResultNotifyWork"), t.teamNotifyInfo), MVS.Host.HOST_HOTEL_ADDR = MVS.MsUtil.getHotelUrl(o), t.mState.SetTeamMatching(), t.roomCheckIn(e.payload.getBookinfo(), e.payload.getRoominfo()), 0;
    };
  }

  function ie() {
    this.doSubHandle = function (e, t) {
      t.mState.SetTeamMatching();
      var r = {
        teamID: e.payload.getTeamid(),
        userID: e.payload.getUserid()
      };
      t.mRsp.teamMatchStartNotify && t.mRsp.teamMatchStartNotify(r);
    };
  }

  function ae() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r && u(t.mRsp.errorResponse, r, "get off line data response error");
      var o = {
        status: r,
        frameCount: e.payload.getFramecount() || 0,
        msgCount: e.payload.getMsgcount() || 0
      };
      t.mRsp.getOffLineDataResponse && t.mRsp.getOffLineDataResponse(o);
    };
  }

  function ne() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r && u(t.mRsp.errorResponse, r, "cancel team match failed"), t.mState.DelTeamMatching(), t.mRsp.cancelTeamMatchResponse && t.mRsp.cancelTeamMatchResponse({
        status: r
      });
    };
  }

  function pe() {
    this.doSubHandle = function (e, t) {
      t.mState.DelTeamMatching();
      var r = e.payload,
          o = {
        teamID: r.getTeamid(),
        userID: r.getUserid(),
        cpProto: utf8ByteArrayToString(r.getCpproto())
      };
      t.mRsp.cancelTeamMatchNotify && t.mRsp.cancelTeamMatchNotify(o);
    };
  }

  function ge() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r && u(t.mRsp.errorResponse, r, "send team event failed");
      var o = {
        status: r,
        dstUserIDs: e.payload.getDstuseridsList() || []
      };
      t.mRsp.sendTeamEventResponse && t.mRsp.sendTeamEventResponse(o);
    };
  }

  function ue() {
    this.doSubHandle = function (e, t) {
      var r = e.payload,
          o = {
        teamID: r.getTeamid(),
        userID: r.getUserid(),
        cpProto: utf8ByteArrayToString(r.getCpproto())
      };
      t.mRsp.sendTeamEventNotify && t.mRsp.sendTeamEventNotify(o);
    };
  }

  function le() {
    this.doSubHandle = function (e, t) {
      var r = e.payload.getStatus();
      200 !== r && u(t.mRsp.errorResponse, r, "kick team member failed");
      var o = {
        status: r,
        members: e.payload.getMembersList() || [],
        owner: e.payload.getOwner(),
        teamID: e.payload.getTeamid()
      };
      t.mRsp.kickTeamMemberResponse && t.mRsp.kickTeamMemberResponse(o);
    };
  }

  function me() {
    this.doSubHandle = function (e, t) {
      var r = e.payload,
          o = r.getDstuserid();
      o === Number(t.mUserID) && t.mState.DelInTeam();
      var s = {
        teamID: r.getTeamid(),
        userID: r.getUserid(),
        dstUserID: o,
        owner: r.getOwner(),
        members: r.getMembersList(),
        cpProto: utf8ByteArrayToString(r.getCpproto())
      };
      t.mRsp.kickTeamMemberNotify && t.mRsp.kickTeamMemberNotify(s);
    };
  }

  e.ErrorRspWork = u;
}(MVS || {}), function (g) {
  var o,
      n = {
    ID: 0,
    token: ""
  },
      u = {
    gameID: 0,
    appkey: "",
    channel: "",
    platform: "",
    deviceID: "",
    gVersion: ""
  },
      s = function s(e) {
    e = String(e);

    for (var t = 0, r = 0; r < e.length; r++) {
      var o = e.charCodeAt(r);
      t += o < 128 ? 1 : o < 2048 ? 2 : o < 65536 ? 3 : o < 1 << 21 ? 4 : o < 1 << 26 ? 5 : o < 1 << 31 ? 6 : Number.NaN;
    }

    return t;
  };

  function e() {
    (o = this).mState = new MVS.MvsState(), this.mAllPlayers = [], this.mRecntRoomID = 0, this.mWatchRoomID = 0, this.mTeamID = "", this.mNetWorkCallBackImp = null, this.mUserListForJoinRoomRsp = [], this.joinRoomNotifyInfo = {}, this.teamNotifyInfo = null, this.mCntRoomType = MVS.TgRoomType.NRoom, this.mGTWNetwork = null, this.mHotelNetWork = null, this.mWatchNetwrok = null, this.mProtocol = new g.MatchvsProtocol(), this.init = function (e, t, r, o, s, i) {
      return MVS.Game.id = o, MVS.mtaReport && MVS.mtaReport.Report("init"), this.mRsp = e, u.channel = t, u.platform = r, u.gVersion = i, u.appkey = s, u.gameID = o, this.mState.SetIniting(), this.mProtocol.init(), this.getHostList(), 0;
    }, this.premiseInit = function (e, t, r, o) {
      return void 0 === t || "" === t ? -1 : (this.mRsp = e, MVS.Game.id = r, u.gameID = r, u.appkey = o, MVS.Host.HOST_GATWAY_ADDR = "ws://" + t, this.mState.SetInit(), this.mRsp.initResponse(200), 0);
    }, this.reconnect = function () {
      var e = this.mState.ReconnectCheck();
      if (0 !== e) return e;

      if ("0" !== this.mRecntRoomID && 0 === this.mState.HaveLogin()) {
        this.mState.SetReconnecting();
        var t = new MsRoomJoin(MsEnum.JoinRoomType.reconnect, n.ID, this.mRecntRoomID, u.gameID, 0, 0, 0, "reconnect", [{
          name: "MatchVS"
        }]),
            r = this.mProtocol.joinRoomSpecial(t);
        return this.mGTWNetwork.send(r), this.mRecntRoomID = "0", 0;
      }

      return 0 === u.gameID || "" === u.appkey ? -1 : (void 0 !== this.mGTWNetwork && null !== this.mGTWNetwork && this.mGTWNetwork.close(), this.mState.SetReconnecting(), this.login(n.ID, n.token, u.deviceID));
    }, this.login = function (e, t, r) {
      var o = this.mState.LoginCheck();
      if (0 !== o) return o;
      if (!new MVS.AppKeyCheck().isInvailed(u.appkey)) return -26;
      MVS.ccReport && MVS.ccReport.init(), MVS.ccReport && MVS.ccReport.login(u.gameID), void 0 !== this.mGTWNetwork && null !== this.mGTWNetwork && this.mGTWNetwork.close(), this.mNetWorkCallBackImp = new NetWorkCallBackImp(this), this.mGTWNetwork = new MVS.MatchvsNetWork(MVS.Host.HOST_GATWAY_ADDR, this.mNetWorkCallBackImp), n.ID = e, this.mUserID = e, n.token = t, u.deviceID = r;
      var s = this.mProtocol.login(e, t, u.gameID, u.appkey, r);
      return this.mState.SetLogining(), this.mGTWNetwork.send(s), MatchvsLog.logI("login,userID" + e + ", token:" + t), 0;
    }, this.createRoom = function (e, t, r) {
      var o = this.mState.InRoomCheck();
      if (o < 0) return o;
      if (512 < t.length) return -21;
      if (e.maxPlayer > MVS.Config.MAXPLAYER_LIMIT || e.maxPlayer < MVS.Config.MINPLAYER_LIMIT) return -20;
      var s = {
        roomID: 0,
        roomName: e.roomName,
        maxPlayer: e.maxPlayer,
        mode: e.mode,
        canWatch: e.canWatch,
        visibility: e.visibility,
        roomProperty: e.roomProperty,
        owner: 0
      },
          i = {
        userID: n.ID,
        userProfile: t
      },
          a = this.mProtocol.roomCreate(u.gameID, s, i, r);
      return 1024 < a.byteLength || 512 < t.length ? -21 : (this.mState.SetCreateRoom(), this.mGTWNetwork.send(a), MatchvsLog.logI("create room"), 0);
    }, this.uninit = function () {
      return this.mState.ReSet(), this.mRsp = null, MatchvsLog.logI("unInit "), 0;
    }, this.getRoomList = function (e) {
      var t = this.mState.InRoomCheck();
      if (0 !== t) return t;
      var r = this.mProtocol.getRoomList(u.gameID, e);
      return 1024 < r.byteLength ? -21 : (this.mGTWNetwork.send(r), 0);
    }, this.roomCheckIn = function (e, t) {
      this.mNetWorkCallBackImp.frameCache = [], this.mHotelNetWork = new MVS.MatchvsNetWork(MVS.Host.HOST_HOTEL_ADDR, this.mNetWorkCallBackImp);
      var r = this.mProtocol.roomCheckIn(e, t, n.ID, u.gameID);
      return this.mHotelNetWork.send(r), 0;
    }, this.joinRandomRoom = function (e, t) {
      var r = this.mState.InRoomCheck();
      if (r < 0) return r;
      if (e > MVS.Config.MAXPLAYER_LIMIT || e < MVS.Config.MINPLAYER_LIMIT) return -20;
      if (512 < t.length) return -21;
      var o = new MsRoomJoin(MsEnum.JoinRoomType.joinRandomRoom, n.ID, 0, u.gameID, e, 0, 0, t, [{
        name: "matchvs"
      }]),
          s = this.mProtocol.joinRandomRoom(o);
      return this.mState.SetJoinRooming(), this.mGTWNetwork.send(s), 0;
    }, this.joinRoomWithProperties = function (e, t, r) {
      var o = this.mState.InRoomCheck();
      if (o < 0) return o;
      if (512 < t.length) return -21;
      if ("object" != _typeof(e)) return -1;
      if ("string" != typeof t) return -1;
      if (e.maxPlayer > MVS.Config.MAXPLAYER_LIMIT || e.maxPlayer < MVS.Config.MINPLAYER_LIMIT) return -20;
      var s = new MsRoomJoin(MsEnum.JoinRoomType.joinRoomWithProperty, n.ID, 1, u.gameID, e.maxPlayer, e.mode, e.canWatch, t, e.tags, e.visibility, e.roomProperty),
          i = this.mProtocol.joinRoomWithProperties(s, r);
      return this.mState.SetJoinRooming(), this.mGTWNetwork.send(i), 0;
    }, this.joinRoom = function (e, t) {
      var r = this.mState.InRoomCheck();
      if (r < 0) return r;
      if (!/^[0-9]+$/.test(e)) return -1;
      var o = String(e).trim();
      if (0 === o || "" === o) return -1;
      var s = new MsRoomJoin(MsEnum.JoinRoomType.joinSpecialRoom, n.ID, e, u.gameID, 0, 0, 0, t, [{
        name: "MatchVS"
      }]),
          i = this.mProtocol.joinRoomSpecial(s);
      return this.mState.SetJoinRooming(), this.mGTWNetwork.send(i), MatchvsLog.logI("join room"), 0;
    }, this.joinOver = function (e) {
      var t = this.mState.HaveInRoom();
      if (t < 0) return t;
      if (1024 < e.length) return -21;
      var r = this.mProtocol.joinOver(u.gameID, this.mRoomInfo.getRoomid(), stringToUtf8ByteArray(e), n.ID);
      return this.mGTWNetwork.send(r), 0;
    }, this.leaveRoom = function (e) {
      var t = this.mState.LeaveRoomCheck();
      if (0 !== t) return t;
      var r = this.mRecntRoomID;
      if (this.mRoomInfo && this.mRoomInfo.getRoomid && (r = this.mRoomInfo.getRoomid()), 1024 < e.length) return -21;
      var o = this.mProtocol.leaveRoom(u.gameID, n.ID, r, e);
      return this.mGTWNetwork.send(o), this.mState.SetLeaveRooming(), this.mHotelNetWork && this.mHotelNetWork.close(), MatchvsLog.logI("leaveRoom"), 0;
    }, this.kickPlayer = function (e, t) {
      var r = this.mState.HaveInRoom();
      if (r < 0) return r;
      if (1024 < t.length) return -21;
      var o = this.mProtocol.kickPlayer(e, n.ID, this.mRoomInfo.getRoomid(), t);
      return this.mGTWNetwork.send(o), 0;
    }, this.setFrameSync = function (e, t, r) {
      void 0 === r && (r = {
        cacheFrameMS: 0
      });
      var o = this.mState.HaveInRoom();
      if (o < 0) return o;
      if (20 < e || e < 0) return -20;
      if (6e5 < r.cacheFrameMS) return -25;
      var s = {
        gameID: u.gameID,
        roomID: this.mRoomInfo.getRoomid(),
        priority: 0,
        frameRate: e,
        frameidx: 1,
        enableGS: t,
        cacheMs: r.cacheFrameMS
      },
          i = this.mProtocol.setFrameSync(s);
      return this.mHotelNetWork.send(i), 0;
    }, this.sendFrameEvent = function (e, t) {
      var r = this.mState.HaveInRoom();
      if (r < 0) return r;
      if (1024 < e.length) return -21;
      var o = this.mProtocol.sendFrameEvent(this.mRoomInfo.getRoomid(), 0, e, t || 2);
      return this.mHotelNetWork.send(o), 0;
    }, this.joinOpen = function (e) {
      var t = this.mState.HaveInRoom();
      if (t < 0) return t;
      var r = this.mProtocol.joinOpen(u.gameID, n.ID, this.mRoomInfo.getRoomid(), e);
      return this.mGTWNetwork.send(r), 0;
    };
  }

  e.prototype.logout = function (e) {
    var t = this.mState.HaveLogin();
    if (0 !== t) return t;
    0 === this.mState.HaveInRoom() && (this.mState.SetLeaveRooming(), this.leaveRoom("user logout"), this.mHotelNetWork && this.mHotelNetWork.close()), MVS.ccReport && MVS.ccReport.logout();
    var r = this.mProtocol.logout(e);
    return this.mState.SetLoginOuting(), this.mGTWNetwork.send(r), 0;
  }, e.prototype.heartBeat = function () {
    var e;

    if (void 0 !== u.gameID && "" !== u.gameID && 0 !== u.gameID && (e = void 0 === o.mRoomInfo ? 0 : o.mRoomInfo.getRoomid(), !o.mState.IsLoginOuting())) {
      var t = o.mProtocol.heartBeat(u.gameID, e);
      o.mGTWNetwork.send(t), MatchvsLog.logI("gateway heartBeat:");
    }
  }, e.prototype.sendEvent = function (e) {
    var t = this.mState.HaveInRoom();
    if (0 !== t) return {
      sequence: this.mProtocol.seq - 1,
      result: t
    };
    if (1024 < e.length) return -21;
    var r = this.mProtocol.broadCast(this.mRoomInfo.getRoomid(), [this.mUserID], 1, 0, stringToUtf8ByteArray(e));
    return this.mHotelNetWork.send(r), {
      sequence: this.mProtocol.seq - 1,
      result: 0
    };
  }, e.prototype.sendEventEx = function (e, t, r, o) {
    var s = this.mState.HaveInRoom();
    if (0 !== s) return {
      sequence: this.mProtocol.seq - 1,
      result: s
    };
    if ("string" != typeof t) return {
      sequence: this.mProtocol.seq - 1,
      result: -1
    };
    if (0 !== e && 1 !== e && 2 !== e) return {
      sequence: this.mProtocol.seq - 1,
      result: -23
    };
    if (0 !== r && 1 !== r) return {
      sequence: this.mProtocol.seq - 1,
      result: -24
    };
    if (1024 < t.length) return -21;
    var i = this.mProtocol.broadCast(this.mRoomInfo.getRoomid(), o, r, e, stringToUtf8ByteArray(t));
    return this.mHotelNetWork.send(i), {
      sequence: this.mProtocol.seq - 1,
      result: 0
    };
  }, e.prototype.subscribeEventGroup = function (e, t) {
    var r = this.mState.HaveInRoom();
    if (0 !== r) return r;
    if (0 === e.length && 0 === t.length) return -20;
    var o = this.mProtocol.subscribeEventGroup(u.gameID, this.mRoomInfo.getRoomid(), e, t);
    return this.mHotelNetWork.send(o), 0;
  }, e.prototype.sendEventGroup = function (e, t) {
    var r = this.mState.HaveInRoom();
    if (0 !== r) return r;
    if (t.length <= 0) return -20;
    if (1024 < e.length) return -21;
    var o = this.mProtocol.sendEventGroup(u.gameID, this.mRoomInfo.getRoomid(), 1, t, e);
    return this.mHotelNetWork.send(o), 0;
  }, e.prototype.hotelHeartBeat = function () {
    if (o.mState.IsLeaveRooming()) return 0;
    o.mState.SetLogin(), o.mState.SetInRoom();
    var e = o.mProtocol.hotelHeartBeat(u.gameID, o.mRoomInfo.getRoomid(), n.ID);
    o.mHotelNetWork.send(e), MatchvsLog.logI("hotel heartBeat:");
  }, e.prototype.registerUser = function () {
    MVS.mtaReport && MVS.mtaReport.Report("registerUser");
    var e = this.mState.HaveInit();
    if (0 !== e) return e;
    var t = u.channel,
        r = "regUserInfo" + t + u.platform,
        o = u.gVersion,
        s = LocalStore_Load(r);

    if (s) {
      var i = JSON.parse(s);
      return this.mRsp.registerUserResponse(new MsRegistRsp(i.status, i.data.userid, i.data.token, i.data.nickname, i.data.avatar)), MatchvsLog.logI("load user info from cache:" + i), 0;
    }

    var a = g.APIPATH.REGISTERUSER,
        n = MVS.Host.VS_USER_URL + a + "?mac=0&deviceid=javascript&channel=" + t + "&pid=13&version=" + o,
        p = {
      rsp: this.mRsp.registerUserResponse,
      onMsg: function onMsg(e) {
        var t = JSON.parse(e);
        0 === t.status ? (LocalStore_Save(r, e), this.rsp(new MsRegistRsp(t.status, t.data.userid, t.data.token, t.data.nickname, t.data.avatar))) : this.rsp(new MsRegistRsp(t.status, 0, "err", e, "err")), MVS.mtaReport && MVS.mtaReport.Report("registerUserResponse");
      },
      onErr: function onErr() {
        this.rsp(new MsRegistRsp(0 === errCode ? -1 : errCode, 0, "err", errMsg, "err"));
      }
    };
    return new MVS.MatchvsHttp(p).get(n), 0;
  }, e.prototype.getHostList = function () {
    var e = u.gameID,
        t = u.channel,
        r = u.platform,
        o = g.APIPATH.HOSTLIST,
        s = MVS.MsUtil.isNeedUseWSS(),
        i = MVS.Host.MAIN_URL + o + "?mac=0&gameid=" + e + "&channel=" + t + "&platform=" + r + (s ? "&useWSSProxy=1" : ""),
        a = this,
        n = {
      onMsg: function onMsg(e) {
        var t = JSON.parse(e);

        if (200 === t.status) {
          a.mState.SetInit();
          var r = "https://";
          MVS.Host.VS_USER_URL = r + t.data.vsuser, MVS.Host.HOST_GATWAY_ADDR = (s ? "wss://" : "ws://") + (s ? t.data.wssProxy : t.data.engine + ":7001"), MVS.Host.CMSNS_URL = r + t.data.cmsns, MVS.Host.VS_OPEN_URL = r + t.data.vsopen, MVS.Host.VS_PAY_URL = r + t.data.vspay, MVS.Host.VS_PRODUCT_URL = r + t.data.VS_PRODUCT_URL;
        }

        MVS.mtaReport && MVS.mtaReport.Report("initResponse"), a.mRsp.initResponse(t.status);
      },
      onErr: function onErr(e, t) {
        console.error("getHostListErrCode" + e + " getHostListErrMsg" + t), a.mRsp.errorResponse(e, t);
      }
    };
    return new MVS.MatchvsHttp(n).get(i), 0;
  }, e.prototype.getRoomListEx = function (e) {
    var t = this.mState.HaveLogin();
    if (0 !== t) return t;
    var r = this.mProtocol.getRoomListEx(u.gameID, e);
    return this.mGTWNetwork.send(r), 0;
  }, e.prototype.getRoomDetail = function (e) {
    var t = this.mState.HaveLogin();
    if (0 !== t) return t;
    var r = this.mProtocol.getRoomDetail(u.gameID, e);
    return this.mGTWNetwork.send(r), 0;
  }, e.prototype.setRoomProperty = function (e, t) {
    if (0 === t.length) return -1;
    if (1024 < t.length) return -21;
    var r = this.mState.HaveInRoom();
    if (0 !== r) return r;
    var o = this.mProtocol.setRoomProperty(u.gameID, n.ID, e, t);
    return this.mGTWNetwork.send(o), 0;
  }, e.prototype.joinWatchRoom = function (e, t) {
    var r = this.mState.InRoomCheck();
    if (0 !== r) return r;
    if (512 < t.length) return -21;
    this.mWatchRoomID = e;
    var o = this.mProtocol.joinWatchRoom(u.gameID, n.ID, this.mWatchRoomID, t);
    return this.mState.SetJoinWatching(), this.mGTWNetwork.send(o), r;
  }, e.prototype.enterLiveRoom = function (e, t) {
    this.mNetWorkCallBackImp.frameCache = [], t && (this.mWatchRoomID = t), this.mWatchNetwrok = new MVS.MatchvsNetWork(MVS.Host.HOST_WATCH_ADDR, this.mNetWorkCallBackImp);
    var r = this.mProtocol.enterLiveRoom(e, u.gameID, n.ID, this.mWatchRoomID, 0);
    return this.mWatchNetwrok.send(r), 0;
  }, e.prototype.liveHeartBeat = function () {
    var e = o,
        t = e.mRecntRoomID,
        r = e.mProtocol.liveHeartBeat(u.gameID, t, n.ID);
    return e.mWatchNetwrok.send(r), MatchvsLog.logI("live heartBeat"), 0;
  }, e.prototype.leaveWatchRoom = function (e) {
    var t = this.mState.HaveLogin();
    if (0 !== t) return t;
    var r = this.mWatchRoomID,
        o = this.mProtocol.leaveWatchRoom(u.gameID, n.ID, r, e);
    return this.mGTWNetwork.send(o), MatchvsLog.logI("leaveWatchRoom"), 0;
  }, e.prototype.sendWatchEvent = function (e, t, r, o) {
    var s = this.mRecntRoomID;
    if (1024 < o.length) return -21;
    var i = this.mProtocol.broadCastWatch(s, e, r, t, o);
    return this.mWatchNetwrok.send(i), 0;
  }, e.prototype.setLiveOffset = function (e) {
    var t = this.mState.HaveInWatch();
    if (0 !== t) return t;
    var r = this.mWatchRoomID,
        o = this.mProtocol.setLiveOffset(u.gameID, r, n.ID, e);
    return this.mWatchNetwrok.send(o), 0;
  }, e.prototype.getWatchRoomList = function (e) {
    var t = this.mState.HaveLogin();
    if (0 !== t) return t;
    var r = this.mProtocol.getWatchRooms(u.gameID, e);
    return this.mGTWNetwork.send(r), 0;
  }, e.prototype.changeRole = function (e, t) {
    var r = this.mWatchRoomID,
        o = 0,
        s = this.mState.HaveLogin();
    if (0 !== s) return s;

    if (MatchvsLog.logI("targetRoomType:" + t + " mCntRoomType:" + this.mCntRoomType + " roomID:" + this.mRecntRoomID), this.mCntRoomType === MVS.TgRoomType.PRoom) {
      if (s = this.mState.HaveInRoom(), this.mCntRoomType === t) return -30;
      r = this.mRecntRoomID, o = MVS.TgRoomType.WRoom;
    } else {
      if (this.mCntRoomType !== MVS.TgRoomType.WRoom) return -1;
      if (s = this.mState.HaveInWatch(), this.mCntRoomType === t) return -30;
      r = this.mWatchRoomID, o = MVS.TgRoomType.PRoom;
    }

    if (0 !== s) return s;
    var i = this.mProtocol.changeRoleProto(n.ID, u.gameID, r, o, e);
    return this.mGTWNetwork.send(i), 0;
  }, e.prototype.setReconnectTimeout = function (e) {
    var t = Number(e),
        r = this.mState.HaveLogin();
    if (0 !== r) return r;
    if (t < -1 || 600 < t) return -27;
    var o = this.mProtocol.setReconnectTimeout(n.ID, e);
    return this.mGTWNetwork.send(o), 0;
  }, e.prototype.createTeam = function (e) {
    var t = this.mState.InRoomCheck();
    if (0 !== t) return t;
    if (512 < e.userProfile.length) return -21;
    if (50 < Number(e.capacity) || Number(e.capacity) < 1) return -20;
    var r = {
      teamID: "0",
      password: e.password,
      capacity: e.capacity,
      mode: e.mode,
      owner: 0,
      visibility: e.visibility
    },
        o = {
      userID: n.ID,
      userProfile: e.userProfile
    },
        s = this.mProtocol.CreateTeam(u.gameID, r, o);
    return this.mGTWNetwork.send(s), 0;
  }, e.prototype.joinTeam = function (e) {
    var t = this.mState.InRoomCheck();
    if (0 !== t) return t;
    if (512 < e.userProfile.length) return -21;
    this.mTeamID = e.teamID;
    var r = {
      gameID: u.gameID,
      teamID: e.teamID,
      password: e.password,
      player: {
        userID: n.ID,
        userProfile: e.userProfile
      }
    },
        o = this.mProtocol.JoinTeam(r);
    return this.mGTWNetwork.send(o), 0;
  }, e.prototype.leaveTeam = function () {
    var e = this.mState.HaveLogin();
    if (0 !== e) return e;
    var t = {
      gameID: u.gameID,
      userID: n.ID,
      teamID: this.mTeamID
    },
        r = this.mProtocol.LeaveTeam(t);
    return this.mGTWNetwork.send(r), 0;
  }, e.prototype.teamMatch = function (e) {
    var t = this.mState.InRoomCheck();
    if (0 !== t) return t;
    if (512 < e.roomProperty.length) return -21;
    if (100 < e.maxPlayer || e.maxPlayer < 0) return -20;
    var r = {
      gameID: u.gameID,
      teamID: this.mTeamID,
      userID: n.ID,
      cond: e.cond,
      watchSet: e.watchSet,
      roomInfo: {
        roomName: e.roomName,
        mode: e.mode,
        maxPlayer: e.maxPlayer,
        canWatch: e.canWatch,
        visibility: e.visibility,
        roomProperty: e.roomProperty
      }
    },
        o = this.mProtocol.TeamMatch(r);
    return this.mState.SetTeamMatching(), this.mGTWNetwork.send(o), 0;
  }, e.prototype.getOffLineData = function (e) {
    var t = this.mState.HaveInRoom();
    if (0 !== t) return t;
    var r = {
      gameID: u.gameID,
      roomID: this.mRecntRoomID + "",
      cacheFrameMS: e
    },
        o = this.mProtocol.GetOffLineData(r);
    return this.mHotelNetWork.send(o), 0;
  }, e.prototype.cancelTeamMatch = function (e) {
    if (1024 < s(e.cpProto)) return -21;
    if (!this.mState.IsTeamMatching()) return -1;
    if ("" === this.mTeamID) return -1;
    var t = {
      gameID: u.gameID,
      teamID: this.mTeamID,
      userID: n.ID,
      cpProto: e.cpProto
    },
        r = this.mProtocol.CancelTeamMatch(t);
    return this.mGTWNetwork.send(r), 0;
  }, e.prototype.sendTeamEvent = function (e) {
    if (1024 < s(e.data)) return -21;
    var t = this.mState.HaveInTeam();
    if (0 !== t) return t;
    var r = {
      gameID: u.gameID,
      teamID: this.mTeamID,
      userID: n.ID,
      dstType: e.dstType,
      msgType: e.msgType,
      cpProto: e.data,
      dstUids: e.dstUserIDs
    },
        o = this.mProtocol.SendTeamEvent(r);
    return this.mGTWNetwork.send(o), 0;
  }, e.prototype.kickTeamMember = function (e) {
    if (1024 < s(e.cpProto)) return -21;
    var t = this.mState.HaveInTeam();
    if (0 !== t) return t;
    var r = {
      gameID: u.gameID,
      teamID: this.mTeamID,
      userID: n.ID,
      dstuserID: e.userID,
      cpProto: e.cpProto
    },
        o = this.mProtocol.KickTeamMember(r);
    return this.mGTWNetwork.send(o), 0;
  }, window.MatchvsEngine = e, g.MatchvsEngine = e;
}(MVS || {});

try {
  module && module.exports && (module.exports = {
    MVS: MVS,
    MatchvsLog: MatchvsLog,
    MatchvsEngine: MVS.MatchvsEngine,
    MatchvsResponse: MatchvsResponse,
    MsMatchInfo: MsMatchInfo,
    MsCreateRoomInfo: MsCreateRoomInfo,
    MsRoomFilter: MsRoomFilter,
    MsRoomFilterEx: MsRoomFilterEx,
    LocalStore_Clear: LocalStore_Clear,
    MsReopenRoomResponse: MsReopenRoomResponse,
    MsReopenRoomNotify: MsReopenRoomNotify,
    MatchvsHttp: MVS.MatchvsHttp
  });
} catch (e) {
  console.log(e);
}

window.MVS = MVS, window.MatchvsLog = MatchvsLog, window.MatchvsEngine = MatchvsEngine, window.MatchvsResponse = MatchvsResponse, window.MsMatchInfo = MsMatchInfo, window.MsCreateRoomInfo = MsCreateRoomInfo, window.MsRoomFilter = MsRoomFilter, window.MsRoomFilterEx = MsRoomFilterEx, window.LocalStore_Clear = LocalStore_Clear, window.MsReopenRoomResponse = MsReopenRoomResponse, window.MsReopenRoomNotify = MsReopenRoomNotify, window.MatchvsHttp = MVS.MatchvsHttp;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3BsdWdpbi1tYXRjaHZzL21hdGNodnMvbWF0Y2h2c2pzc2RrL3BhY2thZ2VzL3BsdWdpbi1tYXRjaHZzL21hdGNodnMvbWF0Y2h2c2pzc2RrL21hdGNodnMuYWxsLmpzIl0sIm5hbWVzIjpbIk1WUyIsImUiLCJ0IiwidmVyc2lvbiIsIkdhbWUiLCJpZCIsImFwcGtleSIsIkRFQlVHIiwiSXNXc3MiLCJJc05vdGljZSIsIlNldFdzcyIsIk5vdGljZSIsImNvbnNvbGUiLCJ3YXJuIiwiSW5pdCIsIkhvc3QiLCJNQUlOX1VSTCIsImdldE5vd1RpbWVTdHIiLCJEYXRlIiwiZ2V0TW9udGgiLCJyIiwiZ2V0RGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsIkxnRm9ybWF0IiwiQ29uZmlnIiwiSEVBUlRfQkVBVF9JTlRFUlZBTCIsIk1BWFBMQVlFUl9MSU1JVCIsIk1JTlBMQVlFUl9MSU1JVCIsIkhPU1RfR0FUV0FZX0FERFIiLCJIT1NUX0hPVEVMX0FERFIiLCJIT1NUX1dBVENIX0FERFIiLCJDTVNOU19VUkwiLCJWU19VU0VSX1VSTCIsIlZTX09QRU5fVVJMIiwiVlNfUEFZX1VSTCIsIlZTX1BST0RVQ1RfVVJMIiwiQVBJUEFUSCIsIkhPU1RMSVNUIiwiUkVHSVNURVJVU0VSIiwiVGdSb29tVHlwZSIsIk5Sb29tIiwiUFJvb20iLCJXUm9vbSIsIk1hdGNodnNMb2ciLCJ0b0FycmF5IiwibGVuZ3RoIiwicHVzaCIsImdldE5vd0Zvcm1hdERhdGUiLCJvcGVuTG9nIiwibG9nIiwid3giLCJsb2dJIiwiYmluZCIsImxvZ0UiLCJlcnJvciIsIkVycm9yIiwic3RhY2siLCJzcGxpdCIsInNsaWNlIiwibGFzdEluZGV4T2YiLCJhcmd1bWVudHMiLCJjbG9zZUxvZyIsIm8iLCJOT05FIiwiSU5JVElORyIsIkhBVkVfSU5JVCIsIkxPR0lOSU5HIiwiSEFWRV9MT0dJTiIsIklOX1JPT00iLCJDUkVBVEVST09NIiwiSk9JTl9ST09NSU5HIiwiTEVBVkVfUk9PTUlORyIsIkxPR09VVElORyIsIlJFQ09OTkVDVElORyIsIklOX1dBVENISU5HIiwiSU5fV0FUQ0giLCJMRUFWRV9XQVRDSElORyIsIlRFQU1NQVRDSElORyIsIklOX1RFQU0iLCJFTkdFX1NUQVRFIiwiTXZzU3RhdGUiLCJSZVNldCIsIlNldFN0YXRlIiwiRGVsU3RhdGUiLCJTdGF0ZURvaW5nIiwiU2V0SW5pdCIsIlNldEluaXRpbmciLCJTZXRMb2dpbmluZyIsIlNldExvZ2luIiwiSGF2ZUluaXQiLCJIYXZlTG9naW4iLCJMb2dpbkNoZWNrIiwiU2V0Sm9pblJvb21pbmciLCJTZXRJblJvb20iLCJTZXRDcmVhdGVSb29tIiwiRGVsQ3JlYXRlUm9vbSIsIklzQ3JlYXRlUm9vbSIsIkRlbEpvaW5Sb29taW5nIiwiSXNKb2luUm9vbWluZyIsIkRlbEluUm9vbSIsIkhhdmVJblJvb20iLCJJblJvb21DaGVjayIsIklzUmVjb25uZWN0aW5nIiwiUmVjb25uZWN0Q2hlY2siLCJTZXRSZWNvbm5lY3RpbmciLCJEZWxSZWNvbm5lY3RpbmciLCJMZWF2ZVJvb21DaGVjayIsIlNldExlYXZlUm9vbWluZyIsIklzTGVhdmVSb29taW5nIiwiU2V0TG9naW5PdXRpbmciLCJJc0xvZ2luT3V0aW5nIiwiU2V0Sm9pbldhdGNoaW5nIiwiRGVsSm9pbldhdGNoaW5nIiwiU2V0SW5XYXRjaCIsIkhhdmVJbldhdGNoIiwiSW5XYXRjaENoZWNrIiwiSGF2ZUluVGVhbSIsIlNldEluVGVhbSIsIkRlbEluVGVhbSIsIlNldFRlYW1NYXRjaGluZyIsIkRlbFRlYW1NYXRjaGluZyIsIklzVGVhbU1hdGNoaW5nIiwiaGV4Y2FzZSIsImI2NHBhZCIsImNocnN6IiwiaGV4X21kNSIsImJpbmwyaGV4IiwiY29yZV9tZDUiLCJzdHIyYmlubCIsImI2NF9tZDUiLCJiaW5sMmI2NCIsInN0cl9tZDUiLCJiaW5sMnN0ciIsImhleF9obWFjX21kNSIsImNvcmVfaG1hY19tZDUiLCJiNjRfaG1hY19tZDUiLCJzdHJfaG1hY19tZDUiLCJtZDVfdm1fdGVzdCIsInMiLCJpIiwiYSIsIm4iLCJwIiwiZyIsInUiLCJtZDVfaWkiLCJtZDVfaGgiLCJtZDVfZ2ciLCJtZDVfZmYiLCJzYWZlX2FkZCIsIkFycmF5IiwibWQ1X2NtbiIsImJpdF9yb2wiLCJjb25jYXQiLCJjaGFyQ29kZUF0IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hhckF0IiwiZm9ybWF0IiwiY2FsbCIsImwiLCJtIiwiYyIsInRlc3QiLCJwYXJzZUludCIsInRvU3RyaW5nIiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJyZXBsYWNlIiwiSlNPTiIsInN0cmluZ2lmeSIsInRvVXBwZXJDYXNlIiwiSW5jbHVkZUpTIiwibmV3X2VsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJNU0V4dGVuZCIsInByb3RvdHlwZSIsInN0cmluZ1RvVXRmOEJ5dGVBcnJheSIsIlVpbnQ4QXJyYXkiLCJ1dGY4Qnl0ZUFycmF5VG9TdHJpbmciLCJqb2luIiwiTG9jYWxTdG9yZV9TYXZlIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInNldFN0b3JhZ2VTeW5jIiwiTG9jYWxTdG9yZV9DbGVhciIsImNsZWFyIiwiY2xlYXJTdG9yYWdlU3luYyIsIkxvY2FsU3RvcmVfTG9hZCIsImdldEl0ZW0iLCJnZXRTdG9yYWdlU3luYyIsImlzSUUiLCJBY3RpdmVYT2JqZWN0Iiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwiaW5kZXhPZiIsImlzTmVlZFVzZVdTUyIsIkJLIiwiZ2V0TGl2ZVVybCIsImdldEhvdGVsYWRkciIsImdldFdzc3Byb3h5IiwiZ2V0SG90ZWxVcmwiLCJNc1V0aWwiLCJzZXRJbnRlcnZhbCIsIlRpY2tlciIsImludGVydmFsIiwic2V0VGlja2VyQ2FsbEJhY2siLCJjbGVhckludGVydmFsIiwiZGlzcG9zZSIsIk12c1RpY2tlciIsInRpY2tlciIsImlzSW52YWlsZWQiLCJBcHBLZXlDaGVjayIsIl9yZXF1aXJlIiwiY29kZSIsImV4cG9ydHMiLCJieXRlTGVuZ3RoIiwidG9CeXRlQXJyYXkiLCJmcm9tQnl0ZUFycmF5IiwiQnVmZmVyIiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJSYW5nZUVycm9yIiwiX19wcm90b19fIiwiVHlwZUVycm9yIiwiaXNFbmNvZGluZyIsIndyaXRlIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJrIiwiYnVmZmVyIiwidmFsdWVPZiIsImZyb20iLCJpc0J1ZmZlciIsImNvcHkiLCJQIiwidHlwZSIsImlzQXJyYXkiLCJkYXRhIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJDIiwiTiIsInRvTG93ZXJDYXNlIiwiZCIsImYiLCJoIiwicmVhZFVJbnQxNkJFIiwieSIsIk51bWJlciIsInN1YnN0ciIsIlIiLCJBIiwiTSIsImIiLCJNYXRoIiwibWluIiwiUyIsImFwcGx5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJmb28iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJieXRlT2Zmc2V0Iiwic3BlY2llcyIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJwb29sU2l6ZSIsImZpbGwiLCJhbGxvY1Vuc2FmZSIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJvZmZzZXQiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJ0b0xvY2FsZVN0cmluZyIsInYiLCJFIiwiVCIsIl8iLCJlcXVhbHMiLCJpbnNwZWN0IiwidHJpbSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwiVyIsIkkiLCJGIiwiQiIsIk8iLCJEIiwic3ViYXJyYXkiLCJyZWFkVUludExFIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWQiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJjb3B5V2l0aGluIiwic2V0IiwidyIsImNvbnN0cnVjdG9yIiwibmFtZSIsImllZWU3NTQiLCJOYU4iLCJhYnMiLCJpc05hTiIsImZsb29yIiwiTE4yIiwiZXhwb3J0U3ltYm9sIiwicHJvdG8iLCJzdHJlYW0iLCJBdWRpZW5jZSIsIk1lc3NhZ2UiLCJpbml0aWFsaXplIiwiaW5oZXJpdHMiLCJDT01QSUxFRCIsImRpc3BsYXlOYW1lIiwiR0VORVJBVEVfVE9fT0JKRUNUIiwidG9PYmplY3QiLCJ1c2VyaWQiLCJnZXRGaWVsZFdpdGhEZWZhdWx0IiwicHJvZmlsZSIsImdldFByb2ZpbGVfYXNCNjQiLCJlbnRlcnRpbWUiLCIkanNwYk1lc3NhZ2VJbnN0YW5jZSIsImRlc2VyaWFsaXplQmluYXJ5IiwiQmluYXJ5UmVhZGVyIiwiZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyIiwibmV4dEZpZWxkIiwiaXNFbmRHcm91cCIsImdldEZpZWxkTnVtYmVyIiwicmVhZFVpbnQzMiIsInNldFVzZXJpZCIsInJlYWRCeXRlcyIsInNldFByb2ZpbGUiLCJzZXRFbnRlcnRpbWUiLCJza2lwRmllbGQiLCJzZXJpYWxpemVCaW5hcnkiLCJCaW5hcnlXcml0ZXIiLCJzZXJpYWxpemVCaW5hcnlUb1dyaXRlciIsImdldFJlc3VsdEJ1ZmZlciIsImdldFVzZXJpZCIsIndyaXRlVWludDMyIiwiZ2V0UHJvZmlsZV9hc1U4Iiwid3JpdGVCeXRlcyIsImdldEVudGVydGltZSIsInNldFByb3RvM0ludEZpZWxkIiwiZ2V0UHJvZmlsZSIsImJ5dGVzQXNCNjQiLCJieXRlc0FzVTgiLCJzZXRQcm90bzNCeXRlc0ZpZWxkIiwiTGl2ZVdhdGNoSW5mbyIsInJlcGVhdGVkRmllbGRzXyIsInJvb21pZCIsInN0YXJ0dHMiLCJkZWxheW1zIiwiY2FjaGVtcyIsIm1heGF1ZGllbmNlcyIsImN1cmF1ZGllbmNlcyIsInBlYWthdWRpZW5jZXMiLCJsYXN0YXVkaWVuY2VzTGlzdCIsInRvT2JqZWN0TGlzdCIsImdldExhc3RhdWRpZW5jZXNMaXN0IiwicmVhZFVpbnQ2NFN0cmluZyIsInNldFJvb21pZCIsInNldFN0YXJ0dHMiLCJzZXREZWxheW1zIiwic2V0Q2FjaGVtcyIsInNldE1heGF1ZGllbmNlcyIsInNldEN1cmF1ZGllbmNlcyIsInNldFBlYWthdWRpZW5jZXMiLCJyZWFkTWVzc2FnZSIsImFkZExhc3RhdWRpZW5jZXMiLCJnZXRSb29taWQiLCJ3cml0ZVVpbnQ2NFN0cmluZyIsImdldFN0YXJ0dHMiLCJnZXREZWxheW1zIiwiZ2V0Q2FjaGVtcyIsImdldE1heGF1ZGllbmNlcyIsImdldEN1cmF1ZGllbmNlcyIsImdldFBlYWthdWRpZW5jZXMiLCJ3cml0ZVJlcGVhdGVkTWVzc2FnZSIsInNldFByb3RvM1N0cmluZ0ludEZpZWxkIiwiZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQiLCJzZXRMYXN0YXVkaWVuY2VzTGlzdCIsInNldFJlcGVhdGVkV3JhcHBlckZpZWxkIiwiYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCIsImNsZWFyTGFzdGF1ZGllbmNlc0xpc3QiLCJXYXRjaFBhcmFtcyIsImNhbndhdGNoIiwiYnVmZmVyYnl0ZXMiLCJsYXN0c2l6ZSIsIm5lZWRyZXBsYXkiLCJyZWFkQm9vbCIsInNldENhbndhdGNoIiwic2V0QnVmZmVyYnl0ZXMiLCJzZXRMYXN0c2l6ZSIsInNldE5lZWRyZXBsYXkiLCJnZXRDYW53YXRjaCIsIndyaXRlQm9vbCIsImdldEJ1ZmZlcmJ5dGVzIiwiZ2V0TGFzdHNpemUiLCJnZXROZWVkcmVwbGF5Iiwic2V0UHJvdG8zQm9vbGVhbkZpZWxkIiwiV2F0Y2hCb29rSW5mbyIsImJvb2tpZCIsInRpY2tldCIsInNldGlkIiwibGl2ZXNMaXN0IiwiZ2V0UmVwZWF0ZWRGaWVsZCIsIndzc3Byb3h5IiwicmVhZFN0cmluZyIsInNldEJvb2tpZCIsInNldFRpY2tldCIsInNldFNldGlkIiwiYWRkTGl2ZXMiLCJzZXRXc3Nwcm94eSIsImdldEJvb2tpZCIsIndyaXRlU3RyaW5nIiwiZ2V0VGlja2V0IiwiZ2V0U2V0aWQiLCJnZXRMaXZlc0xpc3QiLCJ3cml0ZVJlcGVhdGVkU3RyaW5nIiwic2V0UHJvdG8zU3RyaW5nRmllbGQiLCJzZXRMaXZlc0xpc3QiLCJzZXRGaWVsZCIsImFkZFRvUmVwZWF0ZWRGaWVsZCIsImNsZWFyTGl2ZXNMaXN0Iiwib2JqZWN0IiwiZXh0ZW5kIiwiRXJyb3JDb2RlIiwiTk9FUlJPUiIsIk9LIiwiQUNDRVBURUQiLCJOT0NPTlRFTlQiLCJCQURSRVFVRVNUIiwiVU5BVVRIT1JJWkVEIiwiU0lHTkFUVVJFRkFJTEVEIiwiRk9SQklEREVOIiwiTk9URk9VTkQiLCJJTlRFUk5BTFNFUlZFUkVSUk9SIiwiTk9USU1QTEVNRU5URUQiLCJCQURHQVRFV0FZIiwiU0VSVklDRVVOQVZBSUxBQkxFIiwiRGF0YVByb3RvIiwiTG9naW5SZXEiLCJnYW1laWQiLCJkZXZpY2VpZCIsInNpZ24iLCJzZGt2ZXIiLCJ2ZW5kb3IiLCJ0b2tlbiIsInNldEdhbWVpZCIsInNldEFwcGtleSIsInNldERldmljZWlkIiwic2V0U2lnbiIsInNldFNka3ZlciIsInNldFZlbmRvciIsInNldFRva2VuIiwiZ2V0R2FtZWlkIiwiZ2V0QXBwa2V5IiwiZ2V0RGV2aWNlaWQiLCJnZXRTaWduIiwiZ2V0U2RrdmVyIiwiZ2V0VmVuZG9yIiwiZ2V0VG9rZW4iLCJMb2dpblJzcCIsInN0YXR1cyIsInJlYWRFbnVtIiwic2V0U3RhdHVzIiwiZ2V0U3RhdHVzIiwid3JpdGVFbnVtIiwic2V0UHJvdG8zRW51bUZpZWxkIiwiSGVhcnRiZWF0UmVxIiwiSGVhcnRiZWF0UnNwIiwiZ3NleGlzdCIsInJlYWRJbnQzMiIsInNldEdzZXhpc3QiLCJnZXRHc2V4aXN0Iiwid3JpdGVJbnQzMiIsIkRpc2Nvbm5lY3RSZXEiLCJEaXNjb25uZWN0UnNwIiwiTG9nb3V0UnNwIiwiU2V0UmVjb25uZWN0VGltZW91dFJlcSIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZ2V0VGltZW91dCIsIlNldFJlY29ubmVjdFRpbWVvdXRSc3AiLCJrZXlWYWx1ZSIsImtleSIsInNldEtleSIsInNldFZhbHVlIiwiZ2V0S2V5IiwiZ2V0VmFsdWUiLCJKb2luUm9vbVJlcSIsImpvaW50eXBlIiwicGxheWVyaW5mbyIsImdldFBsYXllcmluZm8iLCJQbGF5ZXJJbmZvIiwicm9vbWluZm8iLCJnZXRSb29taW5mbyIsIlJvb21JbmZvIiwidGFnc0xpc3QiLCJnZXRUYWdzTGlzdCIsImNwcHJvdG8iLCJnZXRDcHByb3RvX2FzQjY0Iiwid2F0Y2hzZXR0aW5nIiwiZ2V0V2F0Y2hzZXR0aW5nIiwiV2F0Y2hTZXR0aW5nIiwic2V0Sm9pbnR5cGUiLCJzZXRQbGF5ZXJpbmZvIiwic2V0Um9vbWluZm8iLCJhZGRUYWdzIiwic2V0Q3Bwcm90byIsInNldFdhdGNoc2V0dGluZyIsImdldEpvaW50eXBlIiwid3JpdGVNZXNzYWdlIiwiZ2V0Q3Bwcm90b19hc1U4IiwiZ2V0V3JhcHBlckZpZWxkIiwic2V0V3JhcHBlckZpZWxkIiwiY2xlYXJQbGF5ZXJpbmZvIiwiaGFzUGxheWVyaW5mbyIsImdldEZpZWxkIiwiY2xlYXJSb29taW5mbyIsImhhc1Jvb21pbmZvIiwic2V0VGFnc0xpc3QiLCJjbGVhclRhZ3NMaXN0IiwiZ2V0Q3Bwcm90byIsImNsZWFyV2F0Y2hzZXR0aW5nIiwiaGFzV2F0Y2hzZXR0aW5nIiwiSm9pblJvb21Sc3AiLCJ1c2Vyc0xpc3QiLCJnZXRVc2Vyc0xpc3QiLCJib29raW5mbyIsImdldEJvb2tpbmZvIiwiQm9va0luZm8iLCJhZGRVc2VycyIsInNldEJvb2tpbmZvIiwic2V0VXNlcnNMaXN0IiwiY2xlYXJVc2Vyc0xpc3QiLCJjbGVhckJvb2tpbmZvIiwiaGFzQm9va2luZm8iLCJ1c2VycHJvZmlsZSIsImdldFVzZXJwcm9maWxlX2FzQjY0Iiwic2V0VXNlcnByb2ZpbGUiLCJnZXRVc2VycHJvZmlsZV9hc1U4IiwiZ2V0VXNlcnByb2ZpbGUiLCJib29ra2V5IiwiaG90ZWxhZGRyIiwic2V0Qm9va2tleSIsInNldEhvdGVsYWRkciIsImdldEJvb2trZXkiLCJyb29tbmFtZSIsIm1heHBsYXllciIsIm1vZGUiLCJ2aXNpYmlsaXR5Iiwicm9vbXByb3BlcnR5IiwiZ2V0Um9vbXByb3BlcnR5X2FzQjY0Iiwib3duZXIiLCJzdGF0ZSIsInNldFJvb21uYW1lIiwic2V0TWF4cGxheWVyIiwic2V0TW9kZSIsInNldFZpc2liaWxpdHkiLCJzZXRSb29tcHJvcGVydHkiLCJzZXRPd25lciIsInNldFN0YXRlIiwiZ2V0Um9vbW5hbWUiLCJnZXRNYXhwbGF5ZXIiLCJnZXRNb2RlIiwiZ2V0VmlzaWJpbGl0eSIsImdldFJvb21wcm9wZXJ0eV9hc1U4IiwiZ2V0T3duZXIiLCJnZXRTdGF0ZSIsImdldFJvb21wcm9wZXJ0eSIsIk5vdGljZUpvaW4iLCJ1c2VyIiwiZ2V0VXNlciIsInNldFVzZXIiLCJjbGVhclVzZXIiLCJoYXNVc2VyIiwiTm90aWNlTGVhdmUiLCJKb2luT3ZlclJlcSIsIkpvaW5PdmVyUnNwIiwiSm9pbk92ZXJOb3RpZnkiLCJzcmN1c2VyaWQiLCJzZXRTcmN1c2VyaWQiLCJnZXRTcmN1c2VyaWQiLCJKb2luT3BlblJlcSIsIkpvaW5PcGVuUnNwIiwiSm9pbk9wZW5Ob3RpZnkiLCJMZWF2ZVJvb21SZXEiLCJMZWF2ZVJvb21Sc3AiLCJUY3BQcm90b0hlYWRlciIsInNpemUiLCJzZXEiLCJjbWQiLCJzZXRTaXplIiwic2V0U2VxIiwic2V0Q21kIiwic2V0VmVyc2lvbiIsImdldFNpemUiLCJnZXRTZXEiLCJnZXRDbWQiLCJnZXRWZXJzaW9uIiwiQ29ubkRldGFpbFYyIiwiZmllbGRpZCIsImhlYXJ0YmVhdHRpbWUiLCJzZXRGaWVsZGlkIiwic2V0SGVhcnRiZWF0dGltZSIsImdldEZpZWxkaWQiLCJnZXRIZWFydGJlYXR0aW1lIiwiVXNlclYyIiwidXNlcklkIiwiZ2FtZUlkIiwidmVyc2lvblNkayIsImNvbm5lY3Rpb25JZCIsInNlcnZpY2VJZCIsInJvb21JZCIsImRldmljZUlkIiwiY29ublN0YXR1cyIsInJlY29ubmVjdFRpbWVvdXQiLCJ0ZWFtSWQiLCJzZXRVc2VySWQiLCJzZXRHYW1lSWQiLCJzZXRWZXJzaW9uU2RrIiwic2V0Q29ubmVjdGlvbklkIiwic2V0U2VydmljZUlkIiwic2V0Um9vbUlkIiwic2V0RGV2aWNlSWQiLCJzZXRDb25uU3RhdHVzIiwic2V0UmVjb25uZWN0VGltZW91dCIsInNldFRlYW1JZCIsImdldFVzZXJJZCIsImdldEdhbWVJZCIsImdldFZlcnNpb25TZGsiLCJnZXRDb25uZWN0aW9uSWQiLCJnZXRTZXJ2aWNlSWQiLCJnZXRSb29tSWQiLCJnZXREZXZpY2VJZCIsImdldENvbm5TdGF0dXMiLCJnZXRSZWNvbm5lY3RUaW1lb3V0IiwiZ2V0VGVhbUlkIiwiVXNlclYyRXgiLCJOZXR3b3JrU3RhdGVSZXEiLCJOZXR3b3JrU3RhdGVSc3AiLCJOZXR3b3JrU3RhdGVOb3RpZnkiLCJDcmVhdGVSb29tUmVxIiwiQ3JlYXRlUm9vbVJzcCIsIkdldFJvb21MaXN0UmVxIiwicm9vbWZpbHRlciIsImdldFJvb21maWx0ZXIiLCJSb29tRmlsdGVyIiwic2V0Um9vbWZpbHRlciIsImNsZWFyUm9vbWZpbHRlciIsImhhc1Jvb21maWx0ZXIiLCJmdWxsIiwic2V0RnVsbCIsImdldEZ1bGwiLCJHZXRSb29tTGlzdFJzcCIsInJvb21pbmZvTGlzdCIsImdldFJvb21pbmZvTGlzdCIsImFkZFJvb21pbmZvIiwic2V0Um9vbWluZm9MaXN0IiwiY2xlYXJSb29taW5mb0xpc3QiLCJHZXRSb29tTGlzdEV4UmVxIiwic29ydCIsIm9yZGVyIiwicGFnZW5vIiwicGFnZXNpemUiLCJzZXRTb3J0Iiwic2V0T3JkZXIiLCJzZXRQYWdlbm8iLCJzZXRQYWdlc2l6ZSIsImdldFNvcnQiLCJnZXRPcmRlciIsImdldFBhZ2VubyIsImdldFBhZ2VzaXplIiwiUm9vbUluZm9FeCIsImdhbWVwbGF5ZXIiLCJ3YXRjaHBsYXllciIsImNyZWF0ZXRpbWUiLCJ3YXRjaGluZm8iLCJnZXRXYXRjaGluZm8iLCJXYXRjaEluZm8iLCJzZXRHYW1lcGxheWVyIiwic2V0V2F0Y2hwbGF5ZXIiLCJzZXRDcmVhdGV0aW1lIiwic2V0V2F0Y2hpbmZvIiwiZ2V0R2FtZXBsYXllciIsImdldFdhdGNocGxheWVyIiwiZ2V0Q3JlYXRldGltZSIsImNsZWFyV2F0Y2hpbmZvIiwiaGFzV2F0Y2hpbmZvIiwiR2V0Um9vbUxpc3RFeFJzcCIsInRvdGFsIiwicm9vbWluZm9leExpc3QiLCJnZXRSb29taW5mb2V4TGlzdCIsInNldFRvdGFsIiwiYWRkUm9vbWluZm9leCIsImdldFRvdGFsIiwic2V0Um9vbWluZm9leExpc3QiLCJjbGVhclJvb21pbmZvZXhMaXN0IiwiS2lja1BsYXllclJlcSIsIktpY2tQbGF5ZXJSc3AiLCJLaWNrUGxheWVyTm90aWZ5IiwiR2V0Um9vbURldGFpbFJlcSIsImxhdGVzdHdhdGNoZXJudW0iLCJzZXRMYXRlc3R3YXRjaGVybnVtIiwiZ2V0TGF0ZXN0d2F0Y2hlcm51bSIsIkdldFJvb21EZXRhaWxSc3AiLCJyb29tZGV0YWlsIiwiZ2V0Um9vbWRldGFpbCIsIlJvb21EZXRhaWwiLCJzZXRSb29tZGV0YWlsIiwiY2xlYXJSb29tZGV0YWlsIiwiaGFzUm9vbWRldGFpbCIsImNyZWF0ZWZsYWciLCJwbGF5ZXJpbmZvc0xpc3QiLCJnZXRQbGF5ZXJpbmZvc0xpc3QiLCJ3YXRjaHJvb20iLCJnZXRXYXRjaHJvb20iLCJXYXRjaFJvb20iLCJicmlnYWRlc0xpc3QiLCJnZXRCcmlnYWRlc0xpc3QiLCJCcmlnYWRlSW5mbyIsInNldENyZWF0ZWZsYWciLCJhZGRQbGF5ZXJpbmZvcyIsInNldFdhdGNocm9vbSIsImFkZEJyaWdhZGVzIiwiZ2V0Q3JlYXRlZmxhZyIsInNldFBsYXllcmluZm9zTGlzdCIsImNsZWFyUGxheWVyaW5mb3NMaXN0IiwiY2xlYXJXYXRjaHJvb20iLCJoYXNXYXRjaHJvb20iLCJzZXRCcmlnYWRlc0xpc3QiLCJjbGVhckJyaWdhZGVzTGlzdCIsIlNldFJvb21Qcm9wZXJ0eVJlcSIsIlNldFJvb21Qcm9wZXJ0eVJzcCIsIk5vdGljZVJvb21Qcm9wZXJ0eSIsIkRlc3Ryb3lSb29tUmVxIiwiRGVzdHJveVJvb21Sc3AiLCJtYXh3YXRjaCIsIndhdGNocGVyc2lzdGVudCIsIndhdGNoZGVsYXltcyIsImNhY2hldGltZSIsInNldE1heHdhdGNoIiwic2V0V2F0Y2hwZXJzaXN0ZW50Iiwic2V0V2F0Y2hkZWxheW1zIiwic2V0Q2FjaGV0aW1lIiwiZ2V0TWF4d2F0Y2giLCJnZXRXYXRjaHBlcnNpc3RlbnQiLCJnZXRXYXRjaGRlbGF5bXMiLCJnZXRDYWNoZXRpbWUiLCJjdXJ3YXRjaCIsInNldEN1cndhdGNoIiwiZ2V0Q3Vyd2F0Y2giLCJ3YXRjaHBsYXllcnNMaXN0IiwiZ2V0V2F0Y2hwbGF5ZXJzTGlzdCIsImFkZFdhdGNocGxheWVycyIsInNldFdhdGNocGxheWVyc0xpc3QiLCJjbGVhcldhdGNocGxheWVyc0xpc3QiLCJQbGF5Um9vbSIsInBsYXllckxpc3QiLCJnZXRQbGF5ZXJMaXN0IiwiYWRkUGxheWVyIiwic2V0UGxheWVyTGlzdCIsImNsZWFyUGxheWVyTGlzdCIsIkpvaW5XYXRjaFJvb21SZXEiLCJKb2luV2F0Y2hSb29tUnNwIiwiTGVhdmVXYXRjaFJvb21SZXEiLCJMZWF2ZVdhdGNoUm9vbVJzcCIsIkNoYW5nZVJvbGVSZXEiLCJ0YXJnZXRyb29tdHlwZSIsInNldFRhcmdldHJvb210eXBlIiwiZ2V0VGFyZ2V0cm9vbXR5cGUiLCJDaGFuZ2VSb2xlUnNwIiwicGxheXJvb20iLCJnZXRQbGF5cm9vbSIsInNldFBsYXlyb29tIiwiY2xlYXJQbGF5cm9vbSIsImhhc1BsYXlyb29tIiwiR2V0V2F0Y2hSb29tc1JlcSIsIkdldFdhdGNoUm9vbXNSc3AiLCJUZWFtSW5mbyIsInRlYW1pZCIsInBhc3N3b3JkIiwiY2FwYWNpdHkiLCJzZXRUZWFtaWQiLCJzZXRQYXNzd29yZCIsInNldENhcGFjaXR5IiwiZ2V0VGVhbWlkIiwiZ2V0UGFzc3dvcmQiLCJnZXRDYXBhY2l0eSIsIkNyZWF0ZVRlYW1SZXEiLCJ0ZWFtaW5mbyIsImdldFRlYW1pbmZvIiwic2V0VGVhbWluZm8iLCJjbGVhclRlYW1pbmZvIiwiaGFzVGVhbWluZm8iLCJDcmVhdGVUZWFtUnNwIiwiSm9pblRlYW1SZXEiLCJKb2luVGVhbVJzcCIsIkpvaW5UZWFtTm90aWZ5IiwiTGVhdmVUZWFtUmVxIiwiTGVhdmVUZWFtUnNwIiwiTGVhdmVUZWFtTm90aWZ5IiwiVGVhbU1hdGNoQ29uZCIsInRlYW1udW0iLCJ0ZWFtbWVtYmVybnVtIiwid2VpZ2h0Iiwid2VpZ2h0cmFuZ2UiLCJ3ZWlnaHRydWxlIiwic2V0VGVhbW51bSIsInNldFRlYW1tZW1iZXJudW0iLCJzZXRXZWlnaHQiLCJzZXRXZWlnaHRyYW5nZSIsInNldFdlaWdodHJ1bGUiLCJnZXRUZWFtbnVtIiwiZ2V0VGVhbW1lbWJlcm51bSIsImdldFdlaWdodCIsImdldFdlaWdodHJhbmdlIiwiZ2V0V2VpZ2h0cnVsZSIsIlRlYW1NYXRjaFJlcSIsImNvbmQiLCJnZXRDb25kIiwic2V0Q29uZCIsImNsZWFyQ29uZCIsImhhc0NvbmQiLCJUZWFtTWF0Y2hSc3AiLCJUZWFtRGV0YWlsIiwiYnJpZ2FkZWlkIiwidGVhbXNMaXN0IiwiZ2V0VGVhbXNMaXN0Iiwic2V0QnJpZ2FkZWlkIiwiYWRkVGVhbXMiLCJnZXRCcmlnYWRlaWQiLCJzZXRUZWFtc0xpc3QiLCJjbGVhclRlYW1zTGlzdCIsIlRlYW1NYXRjaFJlc3VsdE5vdGlmeSIsIlRlYW1NYXRjaFN0YXJ0Tm90aWZ5IiwiQ2FuY2VsVGVhbU1hdGNoUmVxIiwiQ2FuY2VsVGVhbU1hdGNoUnNwIiwiQ2FuY2VsVGVhbU1hdGNoTm90aWZ5IiwiU2VuZFRlYW1FdmVudFJlcSIsImRzdHR5cGUiLCJtc2d0eXBlIiwiZHN0dWlkc0xpc3QiLCJzZXREc3R0eXBlIiwic2V0TXNndHlwZSIsInJlYWRQYWNrZWRVaW50MzIiLCJzZXREc3R1aWRzTGlzdCIsImdldERzdHR5cGUiLCJnZXRNc2d0eXBlIiwiZ2V0RHN0dWlkc0xpc3QiLCJ3cml0ZVBhY2tlZFVpbnQzMiIsImFkZERzdHVpZHMiLCJjbGVhckRzdHVpZHNMaXN0IiwiU2VuZFRlYW1FdmVudFJzcCIsImRzdHVzZXJpZHNMaXN0Iiwic2V0RHN0dXNlcmlkc0xpc3QiLCJnZXREc3R1c2VyaWRzTGlzdCIsImFkZERzdHVzZXJpZHMiLCJjbGVhckRzdHVzZXJpZHNMaXN0IiwiU2VuZFRlYW1FdmVudE5vdGlmeSIsIktpY2tUZWFtTWVtYmVyUmVxIiwiZHN0dXNlcmlkIiwic2V0RHN0dXNlcmlkIiwiZ2V0RHN0dXNlcmlkIiwiS2lja1RlYW1NZW1iZXJSc3AiLCJtZW1iZXJzTGlzdCIsInNldE1lbWJlcnNMaXN0IiwiZ2V0TWVtYmVyc0xpc3QiLCJhZGRNZW1iZXJzIiwiY2xlYXJNZW1iZXJzTGlzdCIsIktpY2tUZWFtTWVtYmVyTm90aWZ5IiwiQ21kSWQiLCJOT0NNRCIsIkxPR0lOUkVRIiwiTE9HSU5SU1AiLCJIRUFSVEJFQVRSRVEiLCJMT0dPVVRSRVEiLCJMT0dPVVRSU1AiLCJTRVRSRUNPTk5FQ1RUSU1FT1VUUkVRIiwiU0VUUkVDT05ORUNUVElNRU9VVFJTUCIsIk5FVFdPUktTVEFURVJFUSIsIk5FVFdPUktTVEFURVJTUCIsIk5PVElDRU5FVFdPUktTVEFURVJFUSIsIkpPSU5ST09NUkVRIiwiSk9JTlJPT01SU1AiLCJOT1RJQ0VVU0VSSk9JTlJFUSIsIkNSRUFURVJPT01SRVEiLCJDUkVBVEVST09NUlNQIiwiTEVBVkVST09NUkVRIiwiTEVBVkVST09NUlNQIiwiTk9USUNFVVNFUkxFQVZFUkVRIiwiR0VUUk9PTUxJU1RSRVEiLCJHRVRST09NTElTVFJTUCIsIkdFVFJPT01ERVRBSUxSRVEiLCJHRVRST09NREVUQUlMUlNQIiwiUk9PTURFVEFJTFVQREFURU5PVElGWSIsIkpPSU5PVkVSUkVRIiwiSk9JTk9WRVJSU1AiLCJKT0lOT1ZFUk5PVElGWSIsIlJPT01MSVNURVhSRVEiLCJST09NTElTVEVYUlNQIiwiTVZTU1RBUlRFRFJFUSIsIk1WU1NUQVJURURSU1AiLCJTRVRST09NUFJPUEVSVFlSRVEiLCJTRVRST09NUFJPUEVSVFlSU1AiLCJOT1RJQ0VST09NUFJPUEVSVFkiLCJKT0lOT1BFTlJFUSIsIkpPSU5PUEVOUlNQIiwiSk9JTk9QRU5OT1RJRlkiLCJERVNUUk9ZUk9PTVJFUSIsIkRFU1RST1lST09NUlNQIiwiSk9JTldBVENIUk9PTVJFUSIsIkpPSU5XQVRDSFJPT01SU1AiLCJMRUFWRVdBVENIUk9PTVJFUSIsIkxFQVZFV0FUQ0hST09NUlNQIiwiR0VUV0FUQ0hST09NU1JFUSIsIkdFVFdBVENIUk9PTVNSU1AiLCJDSEFOR0VST0xFUkVRIiwiQ0hBTkdFUk9MRVJTUCIsIktJQ0tQTEFZRVJSRVEiLCJLSUNLUExBWUVSUlNQIiwiS0lDS1BMQVlFUk5PVElGWSIsIkNSRUFURVRFQU1SRVEiLCJDUkVBVEVURUFNUlNQIiwiSk9JTlRFQU1SRVEiLCJKT0lOVEVBTVJTUCIsIkpPSU5URUFNTk9USUZZIiwiTEVBVkVURUFNUkVRIiwiTEVBVkVURUFNUlNQIiwiTEVBVkVURUFNTk9USUZZIiwiVEVBTU1BVENIUkVRIiwiVEVBTU1BVENIUlNQIiwiVEVBTU1BVENIUkVTVUxUTk9USUZZIiwiVEVBTU1BVENIU1RBUlROT1RJRlkiLCJDQU5DRUxURUFNTUFUQ0hSRVEiLCJDQU5DRUxURUFNTUFUQ0hSU1AiLCJDQU5DRUxURUFNTUFUQ0hOT1RJRlkiLCJTRU5EVEVBTUVWRU5UUkVRIiwiU0VORFRFQU1FVkVOVFJTUCIsIlNFTkRURUFNRVZFTlROT1RJRlkiLCJLSUNLVEVBTU1FTUJFUlJFUSIsIktJQ0tURUFNTUVNQkVSUlNQIiwiS0lDS1RFQU1NRU1CRVJOT1RJRlkiLCJKb2luUm9vbVR5cGUiLCJOT0pPSU4iLCJKT0lOU1BFQ0lBTFJPT00iLCJKT0lOUk9PTVdJVEhQUk9QRVJUWSIsIkpPSU5SQU5ET01ST09NIiwiUkVKT0lOUk9PTSIsIkNSRUFURUpPSU5ST09NIiwiV0FUQ0hFUkpPSU4iLCJSb29tU3RhdGUiLCJST09NU1RBVEVOSUwiLCJST09NU1RBVEVPUEVOIiwiUk9PTVNUQVRFQ0xPU0VEIiwiQ3JlYXRlRmxhZyIsIkNSRUFURVJPT01VTktOT1dOIiwiQ1JFQVRFUk9PTVNZU1RFTSIsIkNSRUFURVJPT01QTEFZRVIiLCJDUkVBVEVST09NR1MiLCJSb29tTGlzdFNvcnQiLCJOSUwiLCJDUkVBVEVUSU1FIiwiUExBWUVSTlVNIiwiU1RBVEUiLCJTb3J0T3JkZXIiLCJBU0MiLCJERVNDIiwiUm9vbVR5cGUiLCJHQU1FUk9PTSIsIldBVENIUk9PTVRZUEUiLCJUZWFtRHN0VHlwZSIsIkRTVF9UWVBFX0lOQ0xVU0lWRSIsIkRTVF9UWVBFX0VYQ0xVU0lWRSIsIlRlYW1Nc2dUeXBlIiwiTVNHX1RZUEVfU0RLMV9HUzAiLCJNU0dfVFlQRV9TREswX0dTMSIsIk1TR19UWVBFX1NESzFfR1MxIiwibW9kdWxlIiwiZ2xvYmFsIiwiJGpzY29tcCIsInNjb3BlIiwiZ2V0R2xvYmFsIiwiaW5pdFN5bWJvbCIsInN5bWJvbENvdW50ZXJfIiwiaW5pdFN5bWJvbEl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJtYWtlSXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImFycmF5RnJvbUl0ZXJhdG9yIiwiYXJyYXlGcm9tSXRlcmFibGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYXJyYXkiLCJpdGVyYXRvckZyb21BcnJheSIsImZpbmRJbnRlcm5hbCIsIm9mIiwiZW50cmllcyIsImluc3RhbGxIZWxwZXJfIiwiZW50cmllcyRpbnN0YWxsIiwia2V5cyIsImtleXMkaW5zdGFsbCIsInZhbHVlcyIsInZhbHVlcyRpbnN0YWxsIiwiY29weVdpdGhpbiRpbnN0YWxsIiwibWF4IiwiZmlsbCRpbnN0YWxsIiwiZmluZCIsImZpbmQkaW5zdGFsbCIsImZpbmRJbmRleCIsImZpbmRJbmRleCRpbnN0YWxsIiwiQVNTVU1FX05PX05BVElWRV9NQVAiLCJNYXAkaXNDb25mb3JtYW50IiwiTWFwIiwic2VhbCIsIngiLCJkYXRhXyIsImhlYWRfIiwiY3JlYXRlSGVhZCIsIm1heWJlR2V0RW50cnkiLCJsaXN0IiwiZW50cnkiLCJwcmV2aW91cyIsImhlYWQiLCJzcGxpY2UiLCJpbmRleCIsImhhcyIsIm1ha2VJdGVyYXRvcl8iLCJmb3JFYWNoIiwiZ2V0SWQiLCJoYXNPd25Qcm9wZXJ0eSIsIm1hcEluZGV4XyIsImlkS2V5IiwiRW50cnkiLCJNYXAkaW5zdGFsbCIsIm1hdGgiLCJjbHozMiIsImltdWwiLCJsb2cxMCIsIkxOMTAiLCJsb2cyIiwibG9nMXAiLCJleHBtMSIsImV4cCIsImNvc2giLCJzaW5oIiwidGFuaCIsImFjb3NoIiwic3FydCIsImFzaW5oIiwiYXRhbmgiLCJoeXBvdCIsInRydW5jIiwiY2JydCIsIm51bWJlciIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiRVBTSUxPTiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJhc3NpZ24iLCJpcyIsIkFTU1VNRV9OT19OQVRJVkVfU0VUIiwiU2V0JGlzQ29uZm9ybWFudCIsIlNldCIsImFkZCIsIm1hcF8iLCJTZXQkaW5zdGFsbCIsInN0cmluZyIsImNoZWNrU3RyaW5nQXJncyIsIlJlZ0V4cCIsImZyb21Db2RlUG9pbnQiLCJyZXBlYXQiLCJyZXBlYXQkaW5zdGFsbCIsImNvZGVQb2ludEF0IiwiY29kZVBvaW50QXQkaW5zdGFsbCIsImluY2x1ZGVzJGluc3RhbGwiLCJzdGFydHNXaXRoJGluc3RhbGwiLCJlbmRzV2l0aCRpbnN0YWxsIiwiZ29vZyIsImlzRGVmIiwiZXhwb3J0UGF0aF8iLCJleGVjU2NyaXB0Iiwic2hpZnQiLCJkZWZpbmUiLCJDTE9TVVJFX1VOQ09NUElMRURfREVGSU5FUyIsIkNMT1NVUkVfREVGSU5FUyIsIkxPQ0FMRSIsIlRSVVNURURfU0lURSIsIlNUUklDVF9NT0RFX0NPTVBBVElCTEUiLCJESVNBTExPV19URVNUX09OTFlfQ09ERSIsIkVOQUJMRV9DSFJPTUVfQVBQX1NBRkVfU0NSSVBUX0xPQURJTkciLCJwcm92aWRlIiwiaXNQcm92aWRlZF8iLCJjb25zdHJ1Y3ROYW1lc3BhY2VfIiwiaW1wbGljaXROYW1lc3BhY2VzXyIsInN1YnN0cmluZyIsImdldE9iamVjdEJ5TmFtZSIsIlZBTElEX01PRFVMRV9SRV8iLCJpc1N0cmluZyIsInNlYXJjaCIsImlzSW5Nb2R1bGVMb2FkZXJfIiwibW9kdWxlTG9hZGVyU3RhdGVfIiwibW9kdWxlTmFtZSIsImdldEludGVybmFsXyIsImxvYWRlZE1vZHVsZXNfIiwiZGVjbGFyZUxlZ2FjeU5hbWVzcGFjZSIsInNldFRlc3RPbmx5IiwiZm9yd2FyZERlY2xhcmUiLCJpc0RlZkFuZE5vdE51bGwiLCJnbG9iYWxpemUiLCJhZGREZXBlbmRlbmN5IiwiREVQRU5ERU5DSUVTX0VOQUJMRUQiLCJkZXBlbmRlbmNpZXNfIiwibmFtZVRvUGF0aCIsInBhdGhJc01vZHVsZSIsInJlcXVpcmVzIiwiRU5BQkxFX0RFQlVHX0xPQURFUiIsImxvZ1RvQ29uc29sZV8iLCJyZXF1aXJlIiwiSVNfT0xEX0lFXyIsIm1heWJlUHJvY2Vzc0RlZmVycmVkRGVwXyIsImdldFBhdGhGcm9tRGVwc18iLCJ3cml0ZVNjcmlwdHNfIiwiYmFzZVBhdGgiLCJudWxsRnVuY3Rpb24iLCJhYnN0cmFjdE1ldGhvZCIsImFkZFNpbmdsZXRvbkdldHRlciIsImdldEluc3RhbmNlIiwiaW5zdGFuY2VfIiwiaW5zdGFudGlhdGVkU2luZ2xldG9uc18iLCJMT0FEX01PRFVMRV9VU0lOR19FVkFMIiwiU0VBTF9NT0RVTEVfRVhQT1JUUyIsInZpc2l0ZWQiLCJ3cml0dGVuIiwiZGVmZXJyZWQiLCJpbkh0bWxEb2N1bWVudF8iLCJmaW5kQmFzZVBhdGhfIiwiQ0xPU1VSRV9CQVNFX1BBVEgiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNyYyIsImltcG9ydFNjcmlwdF8iLCJDTE9TVVJFX0lNUE9SVF9TQ1JJUFQiLCJ3cml0ZVNjcmlwdFRhZ18iLCJhdG9iIiwiYWxsIiwiaW1wb3J0TW9kdWxlXyIsInF1ZXVlZE1vZHVsZXNfIiwid3JhcE1vZHVsZV8iLCJsb2FkUXVldWVkTW9kdWxlc18iLCJtYXliZVByb2Nlc3NEZWZlcnJlZFBhdGhfIiwiaXNEZWZlcnJlZE1vZHVsZV8iLCJhbGxEZXBzQXJlQXZhaWxhYmxlXyIsImdsb2JhbEV2YWwiLCJsb2FkTW9kdWxlRnJvbVVybCIsInJldHJpZXZlQW5kRXhlY01vZHVsZV8iLCJsb2FkTW9kdWxlIiwiaXNGdW5jdGlvbiIsImxvYWRNb2R1bGVGcm9tU291cmNlXyIsImV2YWwiLCJ3cml0ZVNjcmlwdFNyY05vZGVfIiwiYXBwZW5kU2NyaXB0U3JjTm9kZV8iLCJkZWZlciIsImFzeW5jIiwicmVhZHlTdGF0ZSIsImxhc3ROb25Nb2R1bGVTY3JpcHRJbmRleF8iLCJvblNjcmlwdExvYWRfIiwiQ0xPU1VSRV9OT19ERVBTIiwibm9ybWFsaXplUGF0aF8iLCJsb2FkRmlsZVN5bmNfIiwiQ0xPU1VSRV9MT0FEX0ZJTEVfU1lOQyIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNlbmQiLCJyZXNwb25zZVRleHQiLCJ0eXBlT2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlzTnVsbCIsImlzQXJyYXlMaWtlIiwiaXNEYXRlTGlrZSIsImlzT2JqZWN0IiwiaXNCb29sZWFuIiwiaXNOdW1iZXIiLCJnZXRVaWQiLCJVSURfUFJPUEVSVFlfIiwidWlkQ291bnRlcl8iLCJoYXNVaWQiLCJyZW1vdmVVaWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyYW5kb20iLCJnZXRIYXNoQ29kZSIsInJlbW92ZUhhc2hDb2RlIiwiY2xvbmVPYmplY3QiLCJjbG9uZSIsImJpbmROYXRpdmVfIiwiYmluZEpzXyIsInVuc2hpZnQiLCJGdW5jdGlvbiIsInBhcnRpYWwiLCJtaXhpbiIsIm5vdyIsImV2YWxXb3Jrc0Zvckdsb2JhbHNfIiwiX2V2YWxUZXN0XyIsImNyZWF0ZVRleHROb2RlIiwicmVtb3ZlQ2hpbGQiLCJnZXRDc3NOYW1lIiwiY3NzTmFtZU1hcHBpbmdfIiwiY3NzTmFtZU1hcHBpbmdTdHlsZV8iLCJzZXRDc3NOYW1lTWFwcGluZyIsIkNMT1NVUkVfQ1NTX05BTUVfTUFQUElORyIsImdldE1zZyIsImdldE1zZ1dpdGhGYWxsYmFjayIsImV4cG9ydFByb3BlcnR5Iiwic3VwZXJDbGFzc18iLCJiYXNlIiwiY2FsbGVlIiwiY2FsbGVyIiwiZGVmaW5lQ2xhc3MiLCJzdGF0aWNzIiwiY3JlYXRlU2VhbGluZ0NvbnN0cnVjdG9yXyIsImFwcGx5UHJvcGVydGllc18iLCJTRUFMX0NMQVNTX0lOU1RBTkNFUyIsIlVOU0VBTEFCTEVfQ09OU1RSVUNUT1JfUFJPUEVSVFlfIiwiT0JKRUNUX1BST1RPVFlQRV9GSUVMRFNfIiwidGFnVW5zZWFsYWJsZUNsYXNzIiwiZG9tIiwiTm9kZVR5cGUiLCJFTEVNRU5UIiwiQVRUUklCVVRFIiwiVEVYVCIsIkNEQVRBX1NFQ1RJT04iLCJFTlRJVFlfUkVGRVJFTkNFIiwiRU5USVRZIiwiUFJPQ0VTU0lOR19JTlNUUlVDVElPTiIsIkNPTU1FTlQiLCJET0NVTUVOVCIsIkRPQ1VNRU5UX1RZUEUiLCJET0NVTUVOVF9GUkFHTUVOVCIsIk5PVEFUSU9OIiwiZGVidWciLCJjYXB0dXJlU3RhY2tUcmFjZSIsIm1lc3NhZ2UiLCJyZXBvcnRFcnJvclRvU2VydmVyIiwiREVURUNUX0RPVUJMRV9FU0NBUElORyIsIkZPUkNFX05PTl9ET01fSFRNTF9VTkVTQ0FQSU5HIiwiVW5pY29kZSIsIk5CU1AiLCJjYXNlSW5zZW5zaXRpdmVTdGFydHNXaXRoIiwiY2FzZUluc2Vuc2l0aXZlQ29tcGFyZSIsImNhc2VJbnNlbnNpdGl2ZUVuZHNXaXRoIiwiY2FzZUluc2Vuc2l0aXZlRXF1YWxzIiwic3VicyIsImNvbGxhcHNlV2hpdGVzcGFjZSIsImlzRW1wdHlPcldoaXRlc3BhY2UiLCJpc0VtcHR5U3RyaW5nIiwiaXNFbXB0eSIsImlzRW1wdHlPcldoaXRlc3BhY2VTYWZlIiwibWFrZVNhZmUiLCJpc0VtcHR5U2FmZSIsImlzQnJlYWtpbmdXaGl0ZXNwYWNlIiwiaXNBbHBoYSIsImlzTnVtZXJpYyIsImlzQWxwaGFOdW1lcmljIiwiaXNTcGFjZSIsImlzVW5pY29kZUNoYXIiLCJzdHJpcE5ld2xpbmVzIiwiY2Fub25pY2FsaXplTmV3bGluZXMiLCJub3JtYWxpemVXaGl0ZXNwYWNlIiwibm9ybWFsaXplU3BhY2VzIiwiY29sbGFwc2VCcmVha2luZ1NwYWNlcyIsInRyaW1MZWZ0IiwidHJpbVJpZ2h0IiwibnVtYmVyQXdhcmVDb21wYXJlXyIsIm1hdGNoIiwiaW50QXdhcmVDb21wYXJlIiwiZmxvYXRBd2FyZUNvbXBhcmUiLCJudW1lcmF0ZUNvbXBhcmUiLCJ1cmxFbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ1cmxEZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJuZXdMaW5lVG9CciIsImh0bWxFc2NhcGUiLCJBTVBfUkVfIiwiTFRfUkVfIiwiR1RfUkVfIiwiUVVPVF9SRV8iLCJTSU5HTEVfUVVPVEVfUkVfIiwiTlVMTF9SRV8iLCJFX1JFXyIsIkFMTF9SRV8iLCJ1bmVzY2FwZUVudGl0aWVzIiwiY29udGFpbnMiLCJ1bmVzY2FwZUVudGl0aWVzVXNpbmdEb21fIiwidW5lc2NhcGVQdXJlWG1sRW50aXRpZXNfIiwidW5lc2NhcGVFbnRpdGllc1dpdGhEb2N1bWVudCIsIkhUTUxfRU5USVRZX1BBVFRFUk5fIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIndoaXRlc3BhY2VFc2NhcGUiLCJwcmVzZXJ2ZVNwYWNlcyIsInN0cmlwUXVvdGVzIiwidHJ1bmNhdGUiLCJ0cnVuY2F0ZU1pZGRsZSIsInNwZWNpYWxFc2NhcGVDaGFyc18iLCJqc0VzY2FwZUNhY2hlXyIsInF1b3RlIiwiZXNjYXBlQ2hhciIsImVzY2FwZVN0cmluZyIsImNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zIiwiY291bnRPZiIsInJlbW92ZUF0IiwicmVtb3ZlIiwicmVnRXhwRXNjYXBlIiwicmVtb3ZlQWxsIiwicGFkTnVtYmVyIiwiYnVpbGRTdHJpbmciLCJnZXRSYW5kb21TdHJpbmciLCJjb21wYXJlVmVyc2lvbnMiLCJleGVjIiwiY29tcGFyZUVsZW1lbnRzXyIsImhhc2hDb2RlIiwidW5pcXVlU3RyaW5nQ291bnRlcl8iLCJjcmVhdGVVbmlxdWVTdHJpbmciLCJ0b051bWJlciIsImlzTG93ZXJDYW1lbENhc2UiLCJpc1VwcGVyQ2FtZWxDYXNlIiwidG9DYW1lbENhc2UiLCJ0b1NlbGVjdG9yQ2FzZSIsInRvVGl0bGVDYXNlIiwiY2FwaXRhbGl6ZSIsInNwbGl0TGltaXQiLCJlZGl0RGlzdGFuY2UiLCJhc3NlcnRzIiwiRU5BQkxFX0FTU0VSVFMiLCJBc3NlcnRpb25FcnJvciIsIm1lc3NhZ2VQYXR0ZXJuIiwiREVGQVVMVF9FUlJPUl9IQU5ETEVSIiwiZXJyb3JIYW5kbGVyXyIsImRvQXNzZXJ0RmFpbHVyZV8iLCJzZXRFcnJvckhhbmRsZXIiLCJhc3NlcnQiLCJmYWlsIiwiYXNzZXJ0TnVtYmVyIiwiYXNzZXJ0U3RyaW5nIiwiYXNzZXJ0RnVuY3Rpb24iLCJhc3NlcnRPYmplY3QiLCJhc3NlcnRBcnJheSIsImFzc2VydEJvb2xlYW4iLCJhc3NlcnRFbGVtZW50Iiwibm9kZVR5cGUiLCJhc3NlcnRJbnN0YW5jZW9mIiwiZ2V0VHlwZV8iLCJhc3NlcnRPYmplY3RQcm90b3R5cGVJc0ludGFjdCIsImpzcGIiLCJhcnJfIiwidmFsdWVDdG9yXyIsImFyckNsZWFuIiwibG9hZEZyb21BcnJheV8iLCJ2aGEiLCJ3aGEiLCJFbnRyeV8iLCJ2YWx1ZVdyYXBwZXIiLCJzdHJpbmdLZXlzXyIsIndyYXBFbnRyeV8iLCJmcm9tT2JqZWN0IiwiQXJyYXlJdGVyYXRvckl0ZXJhYmxlXyIsImlkeF8iLCJnZXRMZW5ndGgiLCJkZWwiLCJnZXRFbnRyeUxpc3QiLCJiZWdpblN1Yk1lc3NhZ2UiLCJlbmRTdWJNZXNzYWdlIiwiTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMiLCJBU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUyIsInBlZWsiLCJsYXN0IiwiZm9yRWFjaFJpZ2h0IiwiZmlsdGVyIiwibWFwIiwicmVkdWNlIiwicmVkdWNlUmlnaHQiLCJzb21lIiwiZXZlcnkiLCJjb3VudCIsImZpbmRSaWdodCIsImZpbmRJbmRleFJpZ2h0IiwiaW5zZXJ0IiwiaW5zZXJ0QXQiLCJpbnNlcnRBcnJheUF0IiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlSWYiLCJyZW1vdmVBbGxJZiIsInJlbW92ZUR1cGxpY2F0ZXMiLCJiaW5hcnlTZWFyY2giLCJiaW5hcnlTZWFyY2hfIiwiZGVmYXVsdENvbXBhcmUiLCJiaW5hcnlTZWxlY3QiLCJzdGFibGVTb3J0Iiwic29ydEJ5S2V5Iiwic29ydE9iamVjdHNCeUtleSIsImlzU29ydGVkIiwiZGVmYXVsdENvbXBhcmVFcXVhbGl0eSIsImNvbXBhcmUzIiwiaW52ZXJzZURlZmF1bHRDb21wYXJlIiwiYmluYXJ5SW5zZXJ0IiwiYmluYXJ5UmVtb3ZlIiwiYnVja2V0IiwicmFuZ2UiLCJmbGF0dGVuIiwicm90YXRlIiwibW92ZUl0ZW0iLCJ6aXAiLCJzaHVmZmxlIiwiY29weUJ5SW5kZXgiLCJjcnlwdCIsInN0cmluZ1RvQnl0ZUFycmF5IiwiYnl0ZUFycmF5VG9TdHJpbmciLCJieXRlQXJyYXlUb0hleCIsImhleFRvQnl0ZUFycmF5IiwieG9yQnl0ZUFycmF5IiwibGFicyIsInVzZXJBZ2VudCIsInV0aWwiLCJnZXROYXRpdmVVc2VyQWdlbnRTdHJpbmdfIiwiZ2V0TmF2aWdhdG9yXyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudF8iLCJzZXRVc2VyQWdlbnQiLCJnZXRVc2VyQWdlbnQiLCJtYXRjaFVzZXJBZ2VudCIsIm1hdGNoVXNlckFnZW50SWdub3JlQ2FzZSIsImV4dHJhY3RWZXJzaW9uVHVwbGVzIiwicGxhdGZvcm0iLCJpc0FuZHJvaWQiLCJpc0lwb2QiLCJpc0lwaG9uZSIsImlzSXBhZCIsImlzSW9zIiwiaXNNYWNpbnRvc2giLCJpc0xpbnV4IiwiaXNXaW5kb3dzIiwiaXNDaHJvbWVPUyIsImlzVmVyc2lvbk9ySGlnaGVyIiwiZ2V0Q291bnQiLCJnZXRBbnlLZXkiLCJnZXRBbnlWYWx1ZSIsImNvbnRhaW5zVmFsdWUiLCJnZXRWYWx1ZXMiLCJnZXRLZXlzIiwiZ2V0VmFsdWVCeUtleXMiLCJjb250YWluc0tleSIsImZpbmRLZXkiLCJmaW5kVmFsdWUiLCJzZXRJZlVuZGVmaW5lZCIsInNldFdpdGhSZXR1cm5WYWx1ZUlmTm90U2V0IiwidW5zYWZlQ2xvbmUiLCJ0cmFuc3Bvc2UiLCJQUk9UT1RZUEVfRklFTERTXyIsImNyZWF0ZSIsImNyZWF0ZVNldCIsImNyZWF0ZUltbXV0YWJsZVZpZXciLCJpc0Zyb3plbiIsImZyZWV6ZSIsImlzSW1tdXRhYmxlVmlldyIsImJyb3dzZXIiLCJtYXRjaE9wZXJhXyIsIm1hdGNoSUVfIiwibWF0Y2hFZGdlXyIsIm1hdGNoRmlyZWZveF8iLCJtYXRjaFNhZmFyaV8iLCJtYXRjaENocm9tZV8iLCJtYXRjaENvYXN0XyIsImlzU2lsayIsIm1hdGNoSW9zV2Vidmlld18iLCJtYXRjaEFuZHJvaWRCcm93c2VyXyIsImlzQ2hyb21lIiwiaXNGaXJlZm94IiwiaXNPcGVyYSIsImlzRWRnZSIsImlzU2FmYXJpIiwiaXNDb2FzdCIsImlzSW9zV2VidmlldyIsImlzQW5kcm9pZEJyb3dzZXIiLCJnZXRJRVZlcnNpb25fIiwiZW5naW5lIiwiaXNQcmVzdG8iLCJpc1RyaWRlbnQiLCJpc1dlYktpdCIsImlzR2Vja28iLCJnZXRFbmdpbmVUdXBsZV8iLCJnZXRWZXJzaW9uRm9yS2V5XyIsIkFTU1VNRV9JRSIsIkFTU1VNRV9FREdFIiwiQVNTVU1FX0dFQ0tPIiwiQVNTVU1FX1dFQktJVCIsIkFTU1VNRV9NT0JJTEVfV0VCS0lUIiwiQVNTVU1FX09QRVJBIiwiQVNTVU1FX0FOWV9WRVJTSU9OIiwiQlJPV1NFUl9LTk9XTl8iLCJnZXRVc2VyQWdlbnRTdHJpbmciLCJnZXROYXZpZ2F0b3IiLCJPUEVSQSIsIklFIiwiRURHRSIsIkVER0VfT1JfSUUiLCJHRUNLTyIsIldFQktJVCIsImlzTW9iaWxlXyIsIk1PQklMRSIsIlNBRkFSSSIsImRldGVybWluZVBsYXRmb3JtXyIsIlBMQVRGT1JNIiwiQVNTVU1FX01BQyIsIkFTU1VNRV9XSU5ET1dTIiwiQVNTVU1FX0xJTlVYIiwiQVNTVU1FX1gxMSIsIkFTU1VNRV9BTkRST0lEIiwiQVNTVU1FX0lQSE9ORSIsIkFTU1VNRV9JUEFEIiwiUExBVEZPUk1fS05PV05fIiwiTUFDIiwiV0lORE9XUyIsImlzTGVnYWN5TGludXhfIiwiTElOVVgiLCJpc1gxMV8iLCJhcHBWZXJzaW9uIiwiWDExIiwiQU5EUk9JRCIsIklQSE9ORSIsIklQQUQiLCJvcGVyYVZlcnNpb25fIiwib3BlcmEiLCJkZXRlcm1pbmVWZXJzaW9uXyIsImdldFZlcnNpb25SZWdleFJlc3VsdF8iLCJnZXREb2N1bWVudE1vZGVfIiwiZG9jdW1lbnRNb2RlIiwiVkVSU0lPTiIsImlzVmVyc2lvbk9ySGlnaGVyQ2FjaGVfIiwiaXNWZXJzaW9uIiwiaXNEb2N1bWVudE1vZGVPckhpZ2hlciIsIkRPQ1VNRU5UX01PREUiLCJpc0RvY3VtZW50TW9kZSIsImNvbXBhdE1vZGUiLCJwcm9kdWN0IiwiQVNTVU1FX0ZJUkVGT1giLCJBU1NVTUVfQ0hST01FIiwiQVNTVU1FX1NBRkFSSSIsIlBST0RVQ1RfS05PV05fIiwiRklSRUZPWCIsImlzSXBob25lT3JJcG9kXyIsIkNIUk9NRSIsImlzU2FmYXJpRGVza3RvcF8iLCJiYXNlNjQiLCJieXRlVG9DaGFyTWFwXyIsImNoYXJUb0J5dGVNYXBfIiwiYnl0ZVRvQ2hhck1hcFdlYlNhZmVfIiwiRU5DT0RFRF9WQUxTX0JBU0UiLCJFTkNPREVEX1ZBTFMiLCJFTkNPREVEX1ZBTFNfV0VCU0FGRSIsIkFTU1VNRV9OQVRJVkVfU1VQUE9SVF8iLCJIQVNfTkFUSVZFX0VOQ09ERV8iLCJidG9hIiwiSEFTX05BVElWRV9ERUNPREVfIiwiZW5jb2RlQnl0ZUFycmF5IiwiaW5pdF8iLCJlbmNvZGVTdHJpbmciLCJkZWNvZGVTdHJpbmciLCJkZWNvZGVTdHJpbmdJbnRlcm5hbF8iLCJkZWNvZGVTdHJpbmdUb0J5dGVBcnJheSIsImRlY29kZVN0cmluZ1RvVWludDhBcnJheSIsImNlaWwiLCJFeHRlbnNpb25GaWVsZEluZm8iLCJmaWVsZEluZGV4IiwiZmllbGROYW1lIiwiY3RvciIsInRvT2JqZWN0Rm4iLCJpc1JlcGVhdGVkIiwiRXh0ZW5zaW9uRmllbGRCaW5hcnlJbmZvIiwiZmllbGRJbmZvIiwiYmluYXJ5UmVhZGVyRm4iLCJiaW5hcnlXcml0ZXJGbiIsImJpbmFyeU1lc3NhZ2VTZXJpYWxpemVGbiIsImJpbmFyeU1lc3NhZ2VEZXNlcmlhbGl6ZUZuIiwiaXNQYWNrZWQiLCJpc01lc3NhZ2VUeXBlIiwiR0VORVJBVEVfRlJPTV9PQkpFQ1QiLCJHRU5FUkFURV9UT19TVFJJTkciLCJBU1NVTUVfTE9DQUxfQVJSQVlTIiwiU0VSSUFMSVpFX0VNUFRZX1RSQUlMSU5HX0ZJRUxEUyIsIlNVUFBPUlRTX1VJTlQ4QVJSQVlfIiwiZ2V0SnNQYk1lc3NhZ2VJZCIsIm1lc3NhZ2VJZF8iLCJnZXRJbmRleF8iLCJhcnJheUluZGV4T2Zmc2V0XyIsImdldEZpZWxkTnVtYmVyXyIsIndyYXBwZXJzXyIsImluaXRQaXZvdEFuZEV4dGVuc2lvbk9iamVjdF8iLCJjb252ZXJ0ZWRGbG9hdGluZ1BvaW50RmllbGRzXyIsInJlcGVhdGVkRmllbGRzIiwicGl2b3RfIiwiRU1QVFlfTElTVF9TRU5USU5FTF8iLCJtYXliZUluaXRFbXB0eUV4dGVuc2lvbk9iamVjdF8iLCJleHRlbnNpb25PYmplY3RfIiwiY29tcHV0ZU9uZW9mQ2FzZSIsImlzQXJyYXlfIiwiTUFYX1ZBTFVFIiwidG9PYmplY3RFeHRlbnNpb24iLCJzZXJpYWxpemVCaW5hcnlFeHRlbnNpb25zIiwicmVhZEJpbmFyeUV4dGVuc2lvbiIsImdldE9wdGlvbmFsRmxvYXRpbmdQb2ludEZpZWxkIiwiZ2V0UmVwZWF0ZWRGbG9hdGluZ1BvaW50RmllbGQiLCJieXRlc0xpc3RBc0I2NCIsImFzc2VydENvbnNpc3RlbnRUeXBlc18iLCJieXRlc0xpc3RBc1U4IiwiZ2V0RmllbGRQcm90bzMiLCJnZXRNYXBGaWVsZCIsInNldEZpZWxkSWdub3JpbmdEZWZhdWx0XyIsInNldFByb3RvM0Zsb2F0RmllbGQiLCJzZXRPbmVvZkZpZWxkIiwid3JhcFJlcGVhdGVkRmllbGRfIiwic2V0T25lb2ZXcmFwcGVyRmllbGQiLCJ0b01hcCIsInN5bmNNYXBGaWVsZHNfIiwiZ2V0RXh0ZW5zaW9uIiwic2V0RXh0ZW5zaW9uIiwiZGlmZmVyZW5jZSIsImNvbXBhcmVGaWVsZHMiLCJjb21wYXJlRXh0ZW5zaW9ucyIsImNsb25lTWVzc2FnZSIsImNsb25lXyIsImNvcHlJbnRvIiwicmVnaXN0ZXJNZXNzYWdlVHlwZSIsInJlZ2lzdHJ5XyIsIm1lc3NhZ2VJZCIsIm1lc3NhZ2VTZXRFeHRlbnNpb25zIiwibWVzc2FnZVNldEV4dGVuc2lvbnNCaW5hcnkiLCJhcml0aCIsIlVJbnQ2NCIsImxvIiwiaGkiLCJjbXAiLCJyaWdodFNoaWZ0IiwibGVmdFNoaWZ0IiwibXNiIiwibHNiIiwiemVybyIsInN1YiIsIm11bDMyeDMyIiwibXVsIiwiZGl2IiwiZnJvbVN0cmluZyIsIkludDY0IiwiQmluYXJ5Q29uc3RhbnRzIiwiQ29uc3RCaW5hcnlNZXNzYWdlIiwiQmluYXJ5TWVzc2FnZSIsIkZpZWxkVHlwZSIsIklOVkFMSUQiLCJET1VCTEUiLCJGTE9BVCIsIklOVDY0IiwiVUlOVDY0IiwiSU5UMzIiLCJGSVhFRDY0IiwiRklYRUQzMiIsIkJPT0wiLCJTVFJJTkciLCJHUk9VUCIsIk1FU1NBR0UiLCJCWVRFUyIsIlVJTlQzMiIsIkVOVU0iLCJTRklYRUQzMiIsIlNGSVhFRDY0IiwiU0lOVDMyIiwiU0lOVDY0IiwiRkhBU0g2NCIsIlZIQVNINjQiLCJXaXJlVHlwZSIsIlZBUklOVCIsIkRFTElNSVRFRCIsIlNUQVJUX0dST1VQIiwiRU5EX0dST1VQIiwiRmllbGRUeXBlVG9XaXJlVHlwZSIsIklOVkFMSURfRklFTERfTlVNQkVSIiwiRkxPQVQzMl9FUFMiLCJGTE9BVDMyX01JTiIsIkZMT0FUMzJfTUFYIiwiRkxPQVQ2NF9FUFMiLCJGTE9BVDY0X01JTiIsIkZMT0FUNjRfTUFYIiwiVFdPX1RPXzIwIiwiVFdPX1RPXzIzIiwiVFdPX1RPXzMxIiwiVFdPX1RPXzMyIiwiVFdPX1RPXzUyIiwiVFdPX1RPXzYzIiwiVFdPX1RPXzY0IiwiWkVST19IQVNIIiwidXRpbHMiLCJzcGxpdDY0TG93Iiwic3BsaXQ2NEhpZ2giLCJzcGxpdFVpbnQ2NCIsInNwbGl0SW50NjQiLCJzcGxpdFppZ3phZzY0Iiwic3BsaXRGbG9hdDMyIiwicm91bmQiLCJzcGxpdEZsb2F0NjQiLCJzcGxpdEhhc2g2NCIsImpvaW5VaW50NjQiLCJqb2luSW50NjQiLCJqb2luWmlnemFnNjQiLCJqb2luRmxvYXQzMiIsImpvaW5GbG9hdDY0Iiwiam9pbkhhc2g2NCIsIkRJR0lUUyIsImpvaW5VbnNpZ25lZERlY2ltYWxTdHJpbmciLCJqb2luU2lnbmVkRGVjaW1hbFN0cmluZyIsImhhc2g2NFRvRGVjaW1hbFN0cmluZyIsImhhc2g2NEFycmF5VG9EZWNpbWFsU3RyaW5ncyIsImRlY2ltYWxTdHJpbmdUb0hhc2g2NCIsInNwbGl0RGVjaW1hbFN0cmluZyIsImhhc2g2NFRvSGV4U3RyaW5nIiwiaGV4U3RyaW5nVG9IYXNoNjQiLCJoYXNoNjRUb051bWJlciIsIm51bWJlclRvSGFzaDY0IiwiY291bnRWYXJpbnRzIiwiY291bnRWYXJpbnRGaWVsZHMiLCJjb3VudEZpeGVkRmllbGRzXyIsImNvdW50Rml4ZWQzMkZpZWxkcyIsImNvdW50Rml4ZWQ2NEZpZWxkcyIsImNvdW50RGVsaW1pdGVkRmllbGRzIiwiZGVidWdCeXRlc1RvVGV4dEZvcm1hdCIsImJ5dGVTb3VyY2VUb1VpbnQ4QXJyYXkiLCJkZWJ1Z1NjYWxhclRvVGV4dEZvcm1hdCIsIkJpbmFyeUVuY29kZXIiLCJidWZmZXJfIiwiZW5kIiwid3JpdGVTcGxpdFZhcmludDY0Iiwid3JpdGVTcGxpdEZpeGVkNjQiLCJ3cml0ZVVuc2lnbmVkVmFyaW50MzIiLCJ3cml0ZVNpZ25lZFZhcmludDMyIiwid3JpdGVVbnNpZ25lZFZhcmludDY0Iiwid3JpdGVTaWduZWRWYXJpbnQ2NCIsIndyaXRlWmlnemFnVmFyaW50MzIiLCJ3cml0ZVppZ3phZ1ZhcmludDY0Iiwid3JpdGVaaWd6YWdWYXJpbnQ2NFN0cmluZyIsIndyaXRlVWludDgiLCJ3cml0ZVVpbnQxNiIsIndyaXRlVWludDY0Iiwid3JpdGVJbnQxNiIsIndyaXRlSW50NjQiLCJ3cml0ZUludDY0U3RyaW5nIiwid3JpdGVGbG9hdCIsIndyaXRlRG91YmxlIiwid3JpdGVWYXJpbnRIYXNoNjQiLCJ3cml0ZUZpeGVkSGFzaDY0IiwiYmxvY2tzXyIsInRvdGFsTGVuZ3RoXyIsImVuY29kZXJfIiwiYm9va21hcmtzXyIsImFwcGVuZFVpbnQ4QXJyYXlfIiwiYmVnaW5EZWxpbWl0ZWRfIiwid3JpdGVGaWVsZEhlYWRlcl8iLCJlbmREZWxpbWl0ZWRfIiwicG9wIiwid3JpdGVTZXJpYWxpemVkTWVzc2FnZSIsIm1heWJlV3JpdGVTZXJpYWxpemVkTWVzc2FnZSIsInJlc2V0IiwiZ2V0UmVzdWx0QmFzZTY0U3RyaW5nIiwid3JpdGVBbnkiLCJ3cml0ZUZpeGVkNjQiLCJ3cml0ZUZpeGVkMzIiLCJ3cml0ZVNmaXhlZDMyIiwid3JpdGVTZml4ZWQ2NCIsIndyaXRlU2ludDMyIiwid3JpdGVTaW50NjQiLCJ3cml0ZVVuc2lnbmVkVmFyaW50MzJfIiwid3JpdGVTaWduZWRWYXJpbnQzMl8iLCJ3cml0ZVVuc2lnbmVkVmFyaW50NjRfIiwid3JpdGVTaWduZWRWYXJpbnQ2NF8iLCJ3cml0ZVppZ3phZ1ZhcmludDMyXyIsIndyaXRlWmlnemFnVmFyaW50NjRfIiwid3JpdGVaaWd6YWdWYXJpbnQ2NFN0cmluZ18iLCJ3cml0ZUludDMyU3RyaW5nIiwid3JpdGVVaW50MzJTdHJpbmciLCJ3cml0ZVNpbnQ2NFN0cmluZyIsIndyaXRlRml4ZWQ2NFN0cmluZyIsIndyaXRlU2ZpeGVkNjRTdHJpbmciLCJ3cml0ZUdyb3VwIiwid3JpdGVSZXBlYXRlZEludDMyIiwid3JpdGVSZXBlYXRlZEludDMyU3RyaW5nIiwid3JpdGVSZXBlYXRlZEludDY0Iiwid3JpdGVSZXBlYXRlZEludDY0U3RyaW5nIiwid3JpdGVSZXBlYXRlZFVpbnQzMiIsIndyaXRlUmVwZWF0ZWRVaW50MzJTdHJpbmciLCJ3cml0ZVJlcGVhdGVkVWludDY0Iiwid3JpdGVSZXBlYXRlZFVpbnQ2NFN0cmluZyIsIndyaXRlUmVwZWF0ZWRTaW50MzIiLCJ3cml0ZVJlcGVhdGVkU2ludDY0Iiwid3JpdGVSZXBlYXRlZFNpbnQ2NFN0cmluZyIsIndyaXRlUmVwZWF0ZWRGaXhlZDMyIiwid3JpdGVSZXBlYXRlZEZpeGVkNjQiLCJ3cml0ZVJlcGVhdGVkRml4ZWQ2NFN0cmluZyIsIndyaXRlUmVwZWF0ZWRTZml4ZWQzMiIsIndyaXRlUmVwZWF0ZWRTZml4ZWQ2NCIsIndyaXRlUmVwZWF0ZWRTZml4ZWQ2NFN0cmluZyIsIndyaXRlUmVwZWF0ZWRGbG9hdCIsIndyaXRlUmVwZWF0ZWREb3VibGUiLCJ3cml0ZVJlcGVhdGVkQm9vbCIsIndyaXRlUmVwZWF0ZWRFbnVtIiwid3JpdGVSZXBlYXRlZEJ5dGVzIiwid3JpdGVSZXBlYXRlZEdyb3VwIiwid3JpdGVSZXBlYXRlZEZpeGVkSGFzaDY0Iiwid3JpdGVSZXBlYXRlZFZhcmludEhhc2g2NCIsIndyaXRlUGFja2VkSW50MzIiLCJ3cml0ZVBhY2tlZEludDMyU3RyaW5nIiwid3JpdGVQYWNrZWRJbnQ2NCIsIndyaXRlUGFja2VkSW50NjRTdHJpbmciLCJ3cml0ZVBhY2tlZFVpbnQzMlN0cmluZyIsIndyaXRlUGFja2VkVWludDY0Iiwid3JpdGVQYWNrZWRVaW50NjRTdHJpbmciLCJ3cml0ZVBhY2tlZFNpbnQzMiIsIndyaXRlUGFja2VkU2ludDY0Iiwid3JpdGVQYWNrZWRTaW50NjRTdHJpbmciLCJ3cml0ZVBhY2tlZEZpeGVkMzIiLCJ3cml0ZVBhY2tlZEZpeGVkNjQiLCJ3cml0ZVBhY2tlZEZpeGVkNjRTdHJpbmciLCJ3cml0ZVBhY2tlZFNmaXhlZDMyIiwid3JpdGVQYWNrZWRTZml4ZWQ2NCIsIndyaXRlUGFja2VkU2ZpeGVkNjRTdHJpbmciLCJ3cml0ZVBhY2tlZEZsb2F0Iiwid3JpdGVQYWNrZWREb3VibGUiLCJ3cml0ZVBhY2tlZEJvb2wiLCJ3cml0ZVBhY2tlZEVudW0iLCJ3cml0ZVBhY2tlZEZpeGVkSGFzaDY0Iiwid3JpdGVQYWNrZWRWYXJpbnRIYXNoNjQiLCJCaW5hcnlJdGVyYXRvciIsImVsZW1lbnRzXyIsIm5leHRNZXRob2RfIiwiZGVjb2Rlcl8iLCJjdXJzb3JfIiwibmV4dFZhbHVlXyIsImF0RW5kXyIsImluc3RhbmNlQ2FjaGVfIiwiZnJlZSIsImF0RW5kIiwiQmluYXJ5RGVjb2RlciIsImJ5dGVzXyIsInRlbXBIaWdoXyIsInRlbXBMb3dfIiwiZW5kXyIsInN0YXJ0XyIsImVycm9yXyIsInNldEJsb2NrIiwiZ2V0QnVmZmVyIiwiZ2V0RW5kIiwic2V0RW5kIiwiZ2V0Q3Vyc29yIiwic2V0Q3Vyc29yIiwiYWR2YW5jZSIsInBhc3RFbmQiLCJnZXRFcnJvciIsInJlYWRTcGxpdFZhcmludDY0XyIsInNraXBWYXJpbnQiLCJ1bnNraXBWYXJpbnQiLCJyZWFkVW5zaWduZWRWYXJpbnQzMiIsInJlYWRTaWduZWRWYXJpbnQzMiIsInJlYWRVbnNpZ25lZFZhcmludDMyU3RyaW5nIiwicmVhZFNpZ25lZFZhcmludDMyU3RyaW5nIiwicmVhZFppZ3phZ1ZhcmludDMyIiwicmVhZFVuc2lnbmVkVmFyaW50NjQiLCJyZWFkVW5zaWduZWRWYXJpbnQ2NFN0cmluZyIsInJlYWRTaWduZWRWYXJpbnQ2NCIsInJlYWRTaWduZWRWYXJpbnQ2NFN0cmluZyIsInJlYWRaaWd6YWdWYXJpbnQ2NCIsInJlYWRaaWd6YWdWYXJpbnQ2NFN0cmluZyIsInJlYWRVaW50OCIsInJlYWRVaW50MTYiLCJyZWFkVWludDY0IiwicmVhZEludDE2IiwicmVhZEludDY0IiwicmVhZEludDY0U3RyaW5nIiwicmVhZEZsb2F0IiwicmVhZERvdWJsZSIsInJlYWRTdHJpbmdXaXRoTGVuZ3RoIiwicmVhZFZhcmludEhhc2g2NCIsInJlYWRGaXhlZEhhc2g2NCIsImZpZWxkQ3Vyc29yXyIsIm5leHRGaWVsZF8iLCJuZXh0V2lyZVR5cGVfIiwicmVhZENhbGxiYWNrc18iLCJnZXRGaWVsZEN1cnNvciIsImdldFdpcmVUeXBlIiwidW5za2lwSGVhZGVyIiwic2tpcE1hdGNoaW5nRmllbGRzIiwic2tpcFZhcmludEZpZWxkIiwic2tpcERlbGltaXRlZEZpZWxkIiwic2tpcEZpeGVkMzJGaWVsZCIsInNraXBGaXhlZDY0RmllbGQiLCJza2lwR3JvdXAiLCJyZWdpc3RlclJlYWRDYWxsYmFjayIsInJ1blJlYWRDYWxsYmFjayIsInJlYWRBbnkiLCJyZWFkRml4ZWQ2NCIsInJlYWRGaXhlZDMyIiwicmVhZFNmaXhlZDMyIiwicmVhZFNmaXhlZDY0IiwicmVhZFNpbnQzMiIsInJlYWRTaW50NjQiLCJyZWFkR3JvdXAiLCJnZXRGaWVsZERlY29kZXIiLCJyZWFkSW50MzJTdHJpbmciLCJyZWFkVWludDMyU3RyaW5nIiwicmVhZFNpbnQ2NFN0cmluZyIsInJlYWRGaXhlZDY0U3RyaW5nIiwicmVhZFNmaXhlZDMyU3RyaW5nIiwicmVhZFNmaXhlZDY0U3RyaW5nIiwicmVhZFBhY2tlZEZpZWxkXyIsInJlYWRQYWNrZWRJbnQzMiIsInJlYWRQYWNrZWRJbnQzMlN0cmluZyIsInJlYWRQYWNrZWRJbnQ2NCIsInJlYWRQYWNrZWRJbnQ2NFN0cmluZyIsInJlYWRQYWNrZWRVaW50MzJTdHJpbmciLCJyZWFkUGFja2VkVWludDY0IiwicmVhZFBhY2tlZFVpbnQ2NFN0cmluZyIsInJlYWRQYWNrZWRTaW50MzIiLCJyZWFkUGFja2VkU2ludDY0IiwicmVhZFBhY2tlZFNpbnQ2NFN0cmluZyIsInJlYWRQYWNrZWRGaXhlZDMyIiwicmVhZFBhY2tlZEZpeGVkNjQiLCJyZWFkUGFja2VkRml4ZWQ2NFN0cmluZyIsInJlYWRQYWNrZWRTZml4ZWQzMiIsInJlYWRQYWNrZWRTZml4ZWQ2NCIsInJlYWRQYWNrZWRTZml4ZWQ2NFN0cmluZyIsInJlYWRQYWNrZWRGbG9hdCIsInJlYWRQYWNrZWREb3VibGUiLCJyZWFkUGFja2VkQm9vbCIsInJlYWRQYWNrZWRFbnVtIiwicmVhZFBhY2tlZFZhcmludEhhc2g2NCIsInJlYWRQYWNrZWRGaXhlZEhhc2g2NCIsIkV4cG9ydCIsInNlbGYiLCJDaGVja0luIiwiQ2hlY2tJbkFjayIsImNoZWNraW5zTGlzdCIsInBsYXllcnNMaXN0IiwibWF4cGxheWVycyIsInNldENoZWNraW5zTGlzdCIsInNldFBsYXllcnNMaXN0Iiwic2V0TWF4cGxheWVycyIsImdldENoZWNraW5zTGlzdCIsImdldFBsYXllcnNMaXN0IiwiZ2V0TWF4cGxheWVycyIsImFkZENoZWNraW5zIiwiY2xlYXJDaGVja2luc0xpc3QiLCJhZGRQbGF5ZXJzIiwiY2xlYXJQbGF5ZXJzTGlzdCIsIkhlYXJ0YmVhdCIsIkhlYXJ0YmVhdEFjayIsIkJyb2FkY2FzdCIsImZsYWciLCJzZXRGbGFnIiwiZ2V0RmxhZyIsIkJyb2FkY2FzdEFjayIsIkNoZWNrSW5Ob3RpZnkiLCJOb3RpZnkiLCJzcmN1aWQiLCJwcmlvcml0eSIsInNldFNyY3VpZCIsInNldFByaW9yaXR5IiwiZ2V0U3JjdWlkIiwiZ2V0UHJpb3JpdHkiLCJTdWJzY3JpYmUiLCJjb25maXJtc0xpc3QiLCJjYW5jZWxzTGlzdCIsImFkZENvbmZpcm1zIiwiYWRkQ2FuY2VscyIsImdldENvbmZpcm1zTGlzdCIsImdldENhbmNlbHNMaXN0Iiwic2V0Q29uZmlybXNMaXN0IiwiY2xlYXJDb25maXJtc0xpc3QiLCJzZXRDYW5jZWxzTGlzdCIsImNsZWFyQ2FuY2Vsc0xpc3QiLCJTdWJzY3JpYmVBY2siLCJncm91cHNMaXN0IiwiYWRkR3JvdXBzIiwiZ2V0R3JvdXBzTGlzdCIsInNldEdyb3Vwc0xpc3QiLCJjbGVhckdyb3Vwc0xpc3QiLCJQdWJsaXNoIiwiUHVibGlzaEFjayIsImRzdG51bSIsInNldERzdG51bSIsImdldERzdG51bSIsIlB1Ymxpc2hOb3RpZnkiLCJTZXRVc2VUaW1lU3RhbXAiLCJ1c2V0aW1lc3RhbXAiLCJzZXRVc2V0aW1lc3RhbXAiLCJnZXRVc2V0aW1lc3RhbXAiLCJTZXRVc2VUaW1lU3RhbXBBY2siLCJ0aW1lc3RhbXAiLCJzZXRUaW1lc3RhbXAiLCJnZXRUaW1lc3RhbXAiLCJTZXRGcmFtZVN5bmNSYXRlIiwiZnJhbWVyYXRlIiwiZnJhbWVpZHgiLCJlbmFibGVncyIsImNhY2hlZnJhbWVtcyIsInNldEZyYW1lcmF0ZSIsInNldEZyYW1laWR4Iiwic2V0RW5hYmxlZ3MiLCJzZXRDYWNoZWZyYW1lbXMiLCJnZXRGcmFtZXJhdGUiLCJnZXRGcmFtZWlkeCIsImdldEVuYWJsZWdzIiwiZ2V0Q2FjaGVmcmFtZW1zIiwiU2V0RnJhbWVTeW5jUmF0ZUFjayIsIlNldEZyYW1lU3luY1JhdGVOb3RpZnkiLCJGcmFtZUJyb2FkY2FzdCIsIm9wZXJhdGlvbiIsInNldE9wZXJhdGlvbiIsImdldE9wZXJhdGlvbiIsIkZyYW1lQnJvYWRjYXN0QWNrIiwiRnJhbWVEYXRhTm90aWZ5IiwiRnJhbWVTeW5jTm90aWZ5IiwibGFzdGlkeCIsIm5leHRpZHgiLCJlbmR0cyIsInNldExhc3RpZHgiLCJzZXROZXh0aWR4Iiwic2V0RW5kdHMiLCJnZXRMYXN0aWR4IiwiZ2V0TmV4dGlkeCIsImdldEVuZHRzIiwiR2V0Q2FjaGVEYXRhIiwiR2V0Q2FjaGVEYXRhQWNrIiwiZnJhbWVjb3VudCIsIm1zZ2NvdW50Iiwic2V0RnJhbWVjb3VudCIsInNldE1zZ2NvdW50IiwiZ2V0RnJhbWVjb3VudCIsImdldE1zZ2NvdW50IiwiU0RLSG90ZWxDbWRJRCIsIklOVkFMSURTREtDTUQiLCJDSEVDS0lOQ01ESUQiLCJDSEVDS0lOQUNLQ01ESUQiLCJIRUFSVEJFQVRDTURJRCIsIkhFQVJUQkVBVEFDS0NNRElEIiwiQlJPQURDQVNUQ01ESUQiLCJCUk9BRENBU1RBQ0tDTURJRCIsIk5PVElGWUNNRElEIiwiQ0hFQ0tJTk5PVElGWUNNRElEIiwiU1VCU0NSSUJFQ01ESUQiLCJTVUJTQ1JJQkVBQ0tDTURJRCIsIlBVQkxJU0hDTURJRCIsIlBVQkxJU0hBQ0tDTURJRCIsIlBVQkxJU0hOT1RJRllDTURJRCIsIlNFVFVTRVRJTUVTVEFNUENNRElEIiwiU0VUVVNFVElNRVNUQU1QQUNLQ01ESUQiLCJTRVRGUkFNRVNZTkNSQVRFQ01ESUQiLCJTRVRGUkFNRVNZTkNSQVRFQUNLQ01ESUQiLCJTRVRGUkFNRVNZTkNSQVRFTk9USUZZQ01ESUQiLCJGUkFNRUJST0FEQ0FTVENNRElEIiwiRlJBTUVCUk9BRENBU1RBQ0tDTURJRCIsIkZSQU1FREFUQU5PVElGWUNNRElEIiwiRlJBTUVTWU5DTk9USUZZQ01ESUQiLCJHRVRDQUNIRURBVEFDTURJRCIsIkdFVENBQ0hFREFUQUNNRElEQUNLQ01ESUQiLCJFbnRlckxpdmVSb29tIiwiRW50ZXJMaXZlUm9vbUFjayIsInJvb21zdGF0dXMiLCJyZXNlcnZlZCIsIndhdGhjaGluZm8iLCJnZXRXYXRoY2hpbmZvIiwic2V0Um9vbXN0YXR1cyIsInNldFJlc2VydmVkIiwic2V0V2F0aGNoaW5mbyIsImdldFJvb21zdGF0dXMiLCJnZXRSZXNlcnZlZCIsImNsZWFyV2F0aGNoaW5mbyIsImhhc1dhdGhjaGluZm8iLCJMaXZlSGVhcnRiZWF0IiwiTGl2ZUhlYXJ0YmVhdEFjayIsIkxpdmVCcm9hZGNhc3QiLCJMaXZlQnJvYWRjYXN0QWNrIiwiU2V0TGl2ZU9mZnNldCIsIm9mZnNldG1zIiwic2V0T2Zmc2V0bXMiLCJnZXRPZmZzZXRtcyIsIlNldExpdmVPZmZzZXRBY2siLCJFbnRlckxpdmVSb29tTm90aWZ5IiwiRXhpdExpdmVSb29tTm90aWZ5IiwiTGl2ZUJyb2FkY2FzdE5vdGlmeSIsIkxpdmVPdmVyTm90aWZ5IiwiTGl2ZUZyYW1lRGF0YU5vdGlmeSIsIkxpdmVGcmFtZVN5bmNOb3RpZnkiLCJTREtXYXRjaENtZElEIiwiSU5WQUxJRFdBVENIQ01EIiwiRU5URVJMSVZFUk9PTUNNRElEIiwiRU5URVJMSVZFUk9PTUFDS0NNRElEIiwiTElWRUhFQVJUQkVBVENNRElEIiwiTElWRUhFQVJUQkVBVEFDS0NNRElEIiwiTElWRUJST0FEQ0FTVENNRElEIiwiTElWRUJST0FEQ0FTVEFDS0NNRElEIiwiU0VUTElWRU9GRlNFVENNRElEIiwiU0VUTElWRU9GRlNFVEFDS0NNRElEIiwiRU5URVJMSVZFUk9PTU5PVElGWUNNRElEIiwiRVhJVExJVkVST09NTk9USUZZQ01ESUQiLCJMSVZFQlJPQURDQVNUTk9USUZZQ01ESUQiLCJMSVZFT1ZFUk5PVElGWUNNRElEIiwiTElWRUZSQU1FREFUQU5PVElGWUNNRElEIiwiTElWRUZSQU1FU1lOQ05PVElGWUNNRElEIiwiRnJhbWVPcHQiLCJPTkxZX0NMSUVOVCIsIk9OTFlfR1MiLCJDTElFTlRfR1MiLCJNc1NldEZyYW1lU3luY05vdGlmeSIsImZyYW1lUmF0ZSIsInN0YXJ0SW5kZXgiLCJlbmFibGVHUyIsImNhY2hlRnJhbWVNUyIsIk1zV2F0Y2hTZXQiLCJjYWNoZU1TIiwibWF4V2F0Y2giLCJkZWxheU1TIiwicGVyc2lzdGVudCIsIk1zTGl2ZUZyYW1lRGF0YU5vdGlmeSIsInNyY1VzZXJJRCIsImNwUHJvdG8iLCJ0aW1lU3RhbXAiLCJmcmFtZUlkeCIsIk1zTGl2ZUF1ZGllbmNlIiwidXNlcklEIiwiZW50ZXJUaW1lIiwiTXNMaXZlV2F0Y2hJbmZvIiwicm9vbUlEIiwic3RhcnRUUyIsIm1heEF1ZGllbmNlcyIsImN1ckF1ZGllbmNlcyIsInBlYWtBdWRpZW5jZXMiLCJsYXN0QXVkaWVuY2VzIiwiTXNKb2luV2F0Y2hSb29tUnNwIiwicm9vbVN0YXR1cyIsIndhdGhjaEluZm8iLCJNc0V4aXRMaXZlUm9vbU5vdGlmeSIsInVzZXJQcm9maWxlIiwiTXNMaXZlT3Zlck5vdGlmeSIsImdhbWVJRCIsIk1zQ2hhbmdlUm9sZVJzcCIsInRhcmdldFJvb21UeXBlIiwiTXNDcmVhdGVUZWFtSW5mbyIsIk1zVGVhbU1hdGNoQ29uZCIsInRlYW1OdW0iLCJ0ZWFtTWVtYmVyTnVtIiwid2VpZ2h0UmFuZ2UiLCJ3ZWlnaHRSdWxlIiwiTXNUZWFtTWF0Y2hJbmZvIiwicm9vbU5hbWUiLCJtYXhQbGF5ZXIiLCJjYW5XYXRjaCIsInJvb21Qcm9wZXJ0eSIsIndhdGNoU2V0IiwiTXZzQ29kZSIsIk5vTG9naW4iLCJDT0RFXzIwMSIsIkNPREVfMTAwMCIsIk5ldHdvcmtFcnIiLCJDT0RFXzEwMDUiLCJEYXRhUGFyc2VFcnIiLCJNdnNFcnJNc2ciLCJNc0NyZWF0ZVJvb21JbmZvIiwiTXNFbnVtIiwiTXNSb29tSm9pbiIsImpvaW5UeXBlIiwidGFncyIsIk1zSm9pbk92ZXJSc3AiLCJNc0pvaW5PdmVyTm90aWZ5SW5mbyIsIk1zQ3JlYXRlUm9vbVJzcCIsIk1zQ2hlY2tJbiIsImJvb2tJRCIsImJvb2tLZXkiLCJob3RlbEluZm8iLCJNc01hdGNoSW5mbyIsIk1zUm9vbUluZm8iLCJvd25lcklkIiwiTXNSb29tVXNlckluZm8iLCJNc0xlYXZlUm9vbVJzcCIsIk1zTGVhdmVSb29tTm90aWZ5IiwiTXNTdWJzY3JpYmVFdmVudEdyb3VwUnNwIiwiZ3JvdXBzIiwiTXNTZW5kRXZlbnRHcm91cE5vdGlmeSIsInNyY1VpZCIsIk1zUmVnaXN0UnNwIiwiYXZhdGFyIiwiTXNMb2dpblJzcCIsIk1zQ2hlY2tJbk5vdGlmeSIsImNoZWNraW5zIiwicGxheWVycyIsIm1heFBsYXllcnMiLCJNc1NlbmRFdmVudE5vdGlmeSIsInNyY1VzZXJJZCIsIk1zR2FtZVNlcnZlck5vdGlmeUluZm8iLCJNc1NlbmRFdmVudFJzcCIsInNlcXVlbmNlIiwiTXNSb29tSW5mb0V4IiwiTXNSb29tTGlzdFJzcCIsInJvb21JbmZvcyIsIk1zS2lja1BsYXllck5vdGlmeSIsIk1zS2lja1BsYXllclJzcCIsIk1zU2V0Q2hhbm5lbEZyYW1lU3luY1JzcCIsIk1zU2VuZEZyYW1lRXZlbnRSc3AiLCJNc1Jvb21GaWx0ZXIiLCJNc1Jvb21GaWx0ZXJFeCIsInBhZ2VObyIsInBhZ2VTaXplIiwiTXNHZXRSb29tRGV0YWlsUnNwIiwiY3JlYXRlRmxhZyIsInVzZXJJbmZvcyIsImJyaWdhZGVzIiwiTXNSb29tQXR0cmlidXRlIiwiZ2FtZVBsYXllciIsIndhdGNoUGxheWVyIiwiY3JlYXRlVGltZSIsIk1zR2V0Um9vbUxpc3RFeFJzcCIsInJvb21BdHRycyIsIk1zRnJhbWVJdGVtIiwiTXNGcmFtZURhdGEiLCJmcmFtZUluZGV4IiwiZnJhbWVJdGVtcyIsImZyYW1lV2FpdENvdW50IiwiTXNOZXR3b3JrU3RhdGVOb3RpZnkiLCJNc1NldFJvb21Qcm9wZXJ0eVJzcEluZm8iLCJNc1Jvb21Qcm9wZXJ0eU5vdGlmeUluZm8iLCJNc0hlYXJ0QmVhdFJlc3BvbnNlIiwiZ3NFeGlzdCIsIk1zR2F0ZXdheVNwZWVkUmVzcG9uc2UiLCJNc1Jlb3BlblJvb21SZXNwb25zZSIsIk1zUmVvcGVuUm9vbU5vdGlmeSIsIk5vSm9pbiIsImpvaW5TcGVjaWFsUm9vbSIsImpvaW5Sb29tV2l0aFByb3BlcnR5Iiwiam9pblJhbmRvbVJvb20iLCJyZWNvbm5lY3QiLCJtQ2FsbGJhY2siLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwib25Nc2ciLCJvbkVyciIsInN0YXR1c1RleHQiLCJwb3N0IiwiTWF0Y2h2c05ldFdvcmsiLCJzb2NrZXQiLCJtQ2FsbEJhY2siLCJtSG9zdCIsIldlYlNvY2tldCIsImdldFVpbnQ4IiwiT1BFTiIsImNsb3NlIiwiY2MiLCJDb21wb25lbnQiLCJNb3pXZWJTb2NrZXQiLCJiaW5hcnlUeXBlIiwiaGFzaGNvZGUiLCJvbm1lc3NhZ2UiLCJGaWxlUmVhZGVyIiwiQmxvYiIsInJlYWRBc0FycmF5QnVmZmVyIiwib25sb2FkIiwidGFyZ2V0IiwiRE9ORSIsIkRhdGFWaWV3IiwicmVzdWx0Iiwib25vcGVuIiwib25Db25uZWN0Iiwib25jbG9zZSIsInJlYXNvbiIsIm9uRGlzQ29ubmVjdCIsIm9uZXJyb3IiLCJhbGVydCIsIk1hdGNodnNIdHRwIiwiZWdyZXQiLCJCeXRlQXJyYXkiLCJwb3NpdGlvbiIsIndyaXRlQnl0ZSIsImJ5dGVzQXZhaWxhYmxlIiwicmVhZEF2YWlsYWJsZSIsInNldFVpbnQ4IiwicmVhZFVuc2lnbmVkQnl0ZSIsIlRZUEVfQklOQVJZIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlByb2dyZXNzRXZlbnQiLCJTT0NLRVRfREFUQSIsIkV2ZW50IiwiQ09OTkVDVCIsIkNMT1NFIiwiSU9FcnJvckV2ZW50IiwiSU9fRVJST1IiLCJjb25uZWN0QnlVcmwiLCJjb25uZWN0U29ja2V0IiwidXJsIiwiaGVhZGVyIiwic29ja2V0T3BlbiIsIm9uT3BlbiIsIm9uQ2xvc2UiLCJvbk1lc3NhZ2UiLCJvbkVycm9yIiwicmVxdWVzdCIsInN1Y2Nlc3MiLCJlcnJNc2ciLCJnZXRFcnJvckNvZGUiLCJnZXRFcnJvclN0cmluZyIsInJld2luZCIsImVvZiIsInBvaW50ZXIiLCJyZWFkVWludDhCdWZmZXIiLCJjb25uZWN0IiwiSHR0cFV0aWwiLCJzZXRIdHRwTWV0aG9kIiwic2V0SHR0cEhlYWRlciIsInJlcXVlc3RBc3luYyIsInJlYWRBc1N0cmluZyIsInNldEh0dHBQb3N0RGF0YSIsInNldEh0dHBVcmwiLCJNYXRjaHZzTmV0V29ya0NhbGxCYWNrIiwiRklYRURfSEVBRF9TSVpFIiwiUGFja2V0IiwiTWF0Y2h2c0hlYWRlciIsIkdUV19TUEVFRF9SU1AiLCJMT0dJTl9SRVEiLCJMT0dJTl9SU1AiLCJHVFdfSEVBUlRfQkVBVF9SRVEiLCJHVFdfSEVBUlRfQkVBVF9SU1AiLCJMT0dPVVRfUkVRIiwiTE9HT1VUX1JTUCIsIkRJU0NPTk5FQ1RfUkVRIiwiRElTQ09OTkVDVF9SU1AiLCJORVRXT1JLX1NUQVRFX05PVElGWSIsIkNSRUFURV9ST09NX1JFUSIsIkNSRUFURV9ST09NX1JTUCIsIkpPSU5fUk9PTV9SRVEiLCJKT0lOX1JPT01fUlNQIiwiSk9JTl9ST09NX05PVElGWSIsIkNIRUNLX0lOX1JFUSIsIkNIRUNLX0lOX1JTUCIsIkNIRUNLX0lOX05PVElGWSIsIkpPSU5fT1ZFUl9SRVEiLCJKT0lOX09WRVJfUlNQIiwiSk9JTl9PVkVSX05PVElGWSIsIlNFVF9ST09NX1BST1BFUlRZX1JFUSIsIlNFVF9ST09NX1BST1BFUlRZX1JTUCIsIlNFVF9ST09NX1BST1BFUlRZX05PVElGWSIsIkpPSU5fT1BFTl9SRVEiLCJKT0lOX09QRU5fUlNQIiwiSk9JTl9PUEVOX05PVElGWSIsIkhPVEVMX0hFQVJUX0JFQVRfUkVRIiwiSE9URUxfSEVBUlRfQkVBVF9SU1AiLCJCUk9BRENBU1RfUkVRIiwiQlJPQURDQVNUX1JTUCIsIkJST0FEQ0FTVF9OT1RJRlkiLCJLSUNLX1BMQVlFUl9SRVEiLCJLSUNLX1BMQVlFUl9SU1AiLCJLSUNLX1BMQVlFUl9OT1RJRlkiLCJMRUFWRV9ST09NX1JFUSIsIkxFQVZFX1JPT01fUlNQIiwiTEVBVkVfUk9PTV9OT1RJRlkiLCJHRVRfUk9PTUxJU1RfUkVRIiwiR0VUX1JPT01MSVNUX1JTUCIsIkdFVF9ST09NX0RFVEFJTF9SRVEiLCJHRVRfUk9PTV9ERVRBSUxfUlNQIiwiU0VUX0ZSQU1FU1lOQ19SRVEiLCJTRVRfRlJBTUVTWU5DX1JTUCIsIlNFVF9GUkFNRVNZTkNfTk9USUZZIiwiU0VORF9GUkFNRV9EQVRBX1JFUSIsIlNFTkRfRlJBTUVfREFUQV9SU1AiLCJGUkFNRV9EQVRBX05PVElGWSIsIkZSQU1FX1NZTkNfTk9USUZZIiwiU1VCU0NSSUJFX1JFUSIsIlNVQlNDUklCRV9SU1AiLCJTVUJTQ1JJQkVfREFUQV9SRVEiLCJTVUJTQ1JJQkVfREFUQV9SU1AiLCJTVUJTQ1JJQkVfREFUQV9OT1RJRlkiLCJHRVRfUk9PTUxJU1RfRVhfUkVRIiwiR0VUX1JPT01MSVNUX0VYX1JTUCIsIlNFVF9SRUNPTk5FQ1RfVElNRU9VVF9SRVEiLCJTRVRfUkVDT05ORUNUX1RJTUVPVVRfUlNQIiwiSk9JTl9XQVRDSFJPT01fUkVRIiwiSk9JTl9XQVRDSFJPT01fUlNQIiwiTEVBVkVfV0FUQ0hST09NX1JFUSIsIkxFQVZFX1dBVENIUk9PTV9SU1AiLCJHRVRfV0FUQ0hST09NX1JFUSIsIkdFVF9XQVRDSFJPT01fUlNQIiwiQ0hBTkdFX1JPTEVfUkVRIiwiQ0hBTkdFX1JPTEVfUlNQIiwiRU5URVJfTElWRVJPT01fUkVRIiwiRU5URVJfTElWRVJPT01fUlNQIiwiRU5URVJfTElWRVJPT01fTk9USUZZIiwiTElWRV9IRUFSVEJFQVRfUkVRIiwiTElWRV9IRUFSVEJFQVRfUlNQIiwiTElWRV9CUk9BRENBU1RfUkVRIiwiTElWRV9CUk9BRENBU1RfUlNQIiwiTElWRV9CUk9BRENBU1RfTk9USUZZIiwiU0VUX0xJVkVPRkZTRVRfUkVRIiwiU0VUX0xJVkVPRkZTRVRfUlNQIiwiRVhJVF9MSVZFUk9PTV9OT1RJRlkiLCJMSVZFX09WRVJfTk9USUZZIiwiTElWRV9GUkFNRURBVEFfTk9USUZZIiwiTElWRV9GUkFNRVNZTkNfTk9USUZZIiwiQ1JFQVRFX1RFQU1fUkVRIiwiQ1JFQVRFX1RFQU1fUlNQIiwiSk9JTl9URUFNX1JFUSIsIkpPSU5fVEVBTV9SU1AiLCJKT0lOX1RFQU1fTk9USUZZIiwiTEVBVkVfVEVBTV9SRVEiLCJMRUFWRV9URUFNX1JTUCIsIkxFQVZFX1RFQU1fTk9USUZZIiwiVEVBTV9NQVRDSF9SRVEiLCJURUFNX01BVENIX1JTUCIsIlRFQU1fTUFUQ0hfUkVTVUxUX05PVElGWSIsIlRFQU1fTUFUQ0hfU1RBUlRfTk9USUZZIiwiR0VUX0NBQ0hFREFUQV9SRVEiLCJHRVRfQ0FDSEVEQVRBX1JTUCIsIkNBTkNFTF9URUFNTUFUQ0hfUkVRIiwiQ0FOQ0VMX1RFQU1NQVRDSF9SU1AiLCJDQU5DRUxfVEVBTU1BVENIX05PVElGWSIsIlNFTkRfVEVBTUVWRU5UX1JFUSIsIlNFTkRfVEVBTUVWRU5UX1JTUCIsIlNFTkRfVEVBTUVWRU5UX05PVElGWSIsIktJQ0tfVEVBTU1FTUJFUl9SRVEiLCJLSUNLX1RFQU1NRU1CRVJfUlNQIiwiS0lDS19URUFNTUVNQkVSX05PVElGWSIsIlB0b0NtZCIsIk1hdGNodnNQcm90b2NvbCIsImZpbGxIZWFkZXIiLCJtdGFSZXBvcnQiLCJSZXBvcnQiLCJzZXRJbnQzMiIsInNldEludDE2IiwicGFyc2VIZWFkZXIiLCJnZXRJbnQzMiIsImdldEludDE2IiwiaGFuZGxlTXNnIiwiYnVmIiwicGF5bG9hZCIsImluaXQiLCJsb2dpbiIsInJvb21DcmVhdGUiLCJqb2luUm9vbVNwZWNpYWwiLCJqb2luUm9vbVdpdGhQcm9wZXJ0aWVzIiwicm9vbUNoZWNrSW4iLCJnZXRSb29tTGlzdCIsImdldFJvb21MaXN0RXgiLCJnZXRSb29tRGV0YWlsIiwiam9pbk92ZXIiLCJsZWF2ZVJvb20iLCJoZWFydEJlYXQiLCJsb2dvdXQiLCJicm9hZENhc3QiLCJzdWJzY3JpYmVFdmVudEdyb3VwIiwic2VuZEV2ZW50R3JvdXAiLCJob3RlbEhlYXJ0QmVhdCIsImRpc0Nvbm5lY3QiLCJraWNrUGxheWVyIiwic2V0RnJhbWVTeW5jIiwiY2FjaGVNcyIsInNlbmRGcmFtZUV2ZW50Iiwic2V0Um9vbVByb3BlcnR5Iiwiam9pbk9wZW4iLCJqb2luV2F0Y2hSb29tIiwiZW50ZXJMaXZlUm9vbSIsImxlYXZlV2F0Y2hSb29tIiwiZ2V0V2F0Y2hSb29tcyIsImxpdmVIZWFydEJlYXQiLCJicm9hZENhc3RXYXRjaCIsInNldExpdmVPZmZzZXQiLCJjaGFuZ2VSb2xlUHJvdG8iLCJDcmVhdGVUZWFtIiwidGVhbUlEIiwiSm9pblRlYW0iLCJwbGF5ZXIiLCJMZWF2ZVRlYW0iLCJUZWFtTWF0Y2giLCJyb29tSW5mbyIsIkdldE9mZkxpbmVEYXRhIiwiQ2FuY2VsVGVhbU1hdGNoIiwiU2VuZFRlYW1FdmVudCIsImRzdFR5cGUiLCJtc2dUeXBlIiwiZHN0VWlkcyIsIktpY2tUZWFtTWVtYmVyIiwiZHN0dXNlcklEIiwiTmV0V29ya0NhbGxCYWNrSW1wIiwiZW5naW5lV29ya01hcCIsIkVuZ2luZU5ldHdvcmtNYXAiLCJndHdUaW1lciIsIndhdGNoVGltZXIiLCJtSG90ZWxUaW1lciIsImZyYW1lQ2FjaGUiLCJoYlRpbWVycyIsImNsZWFyQWxsQmVhdFRpbWVyIiwibVByb3RvY29sIiwiaG90ZWxUaW1lciIsInRlYW1Ob3RpZnlJbmZvIiwiZG9TdWJIYW5kbGUiLCJFcnJvclJzcFdvcmsiLCJtUnNwIiwiZXJyb3JSZXNwb25zZSIsIm1DbnRSb29tVHlwZSIsIm1TdGF0ZSIsIm1Ib3RlbE5ldFdvcmsiLCJtV2F0Y2hOZXR3cm9rIiwibUdUV05ldHdvcmsiLCJNYXRjaHZzUmVzcG9uc2UiLCJyZWdpc3RlclVzZXJSZXNwb25zZSIsImxvZ2luUmVzcG9uc2UiLCJsb2dvdXRSZXNwb25zZSIsImNyZWF0ZVJvb21SZXNwb25zZSIsImdldFJvb21MaXN0UmVzcG9uc2UiLCJqb2luUm9vbVJlc3BvbnNlIiwiam9pblJvb21Ob3RpZnkiLCJqb2luT3ZlclJlc3BvbnNlIiwiam9pbk92ZXJOb3RpZnkiLCJsZWF2ZVJvb21SZXNwb25zZSIsImxlYXZlUm9vbU5vdGlmeSIsImtpY2tQbGF5ZXJSZXNwb25zZSIsImtpY2tQbGF5ZXJOb3RpZnkiLCJzZW5kRXZlbnRSZXNwb25zZSIsInNlbmRFdmVudE5vdGlmeSIsImdhbWVTZXJ2ZXJOb3RpZnkiLCJpbml0UmVzcG9uc2UiLCJuZXR3b3JrU3RhdGVOb3RpZnkiLCJzdWJzY3JpYmVFdmVudEdyb3VwUmVzcG9uc2UiLCJzZW5kRXZlbnRHcm91cFJlc3BvbnNlIiwic2VuZEV2ZW50R3JvdXBOb3RpZnkiLCJzZXRGcmFtZVN5bmNSZXNwb25zZSIsInNldEZyYW1lU3luY05vdGlmeSIsInNlbmRGcmFtZUV2ZW50UmVzcG9uc2UiLCJmcmFtZVVwZGF0ZSIsImhvdGVsSGVhcnRCZWF0UnNwIiwiZ2F0ZXdheVNwZWVkUmVzcG9uc2UiLCJoZWFydEJlYXRSZXNwb25zZSIsImRpc0Nvbm5lY3RSZXNwb25zZSIsImdldFJvb21EZXRhaWxSZXNwb25zZSIsImdldFJvb21MaXN0RXhSZXNwb25zZSIsInNldFJvb21Qcm9wZXJ0eVJlc3BvbnNlIiwic2V0Um9vbVByb3BlcnR5Tm90aWZ5IiwicmVjb25uZWN0UmVzcG9uc2UiLCJqb2luT3Blbk5vdGlmeSIsImpvaW5PcGVuUmVzcG9uc2UiLCJqb2luV2F0Y2hSb29tUmVzcG9uc2UiLCJqb2luV2F0Y2hSb29tTm90aWZ5IiwibGVhdmVXYXRjaFJvb21SZXNwb25zZSIsImxlYXZlV2F0Y2hSb29tTm90aWZ5IiwiZ2V0V2F0Y2hSb29tc1Jlc3BvbnNlIiwid2F0Y2hIZWFydEJlYXQiLCJsaXZlQnJvYWRjYXN0UmVzcG9uc2UiLCJsaXZlQnJvYWRjYXN0Tm90aWZ5Iiwic2V0TGl2ZU9mZnNldFJlc3BvbnNlIiwibGl2ZU92ZXJOb3RpZnkiLCJsaXZlRnJhbWVVcGRhdGUiLCJjaGFuZ2VSb2xlUmVzcG9uc2UiLCJzZXRSZWNvbm5lY3RUaW1lb3V0UmVzcG9uc2UiLCJjcmVhdGVUZWFtUmVzcG9uc2UiLCJqb2luVGVhbVJlc3BvbnNlIiwiam9pblRlYW1Ob3RpZnkiLCJsZWF2ZVRlYW1SZXNwb25zZSIsImxlYXZlVGVhbU5vdGlmeSIsInRlYW1NYXRjaFJlc3BvbnNlIiwidGVhbU1hdGNoUmVzdWx0Tm90aWZ5IiwidGVhbU1hdGNoU3RhcnROb3RpZnkiLCJnZXRPZmZMaW5lRGF0YVJlc3BvbnNlIiwiY2FuY2VsVGVhbU1hdGNoUmVzcG9uc2UiLCJjYW5jZWxUZWFtTWF0Y2hOb3RpZnkiLCJzZW5kVGVhbUV2ZW50UmVzcG9uc2UiLCJzZW5kVGVhbUV2ZW50Tm90aWZ5Iiwia2lja1RlYW1NZW1iZXJSZXNwb25zZSIsImtpY2tUZWFtTWVtYmVyTm90aWZ5IiwiTCIsIlUiLCJZIiwiaiIsIkciLCJ6IiwiViIsIkgiLCJxIiwiSiIsIiQiLCJLIiwiUSIsIlgiLCJaIiwiZWUiLCJ0ZSIsInJlIiwib2UiLCJzZSIsImllIiwiYWUiLCJuZSIsInBlIiwibGUiLCJtZSIsImdlIiwidWUiLCJjY1JlcG9ydCIsImxvZ2luUnNwIiwibVJlY250Um9vbUlEIiwibVVzZXJJRCIsIm1Sb29tSW5mbyIsImpvaW5Sb29tTm90aWZ5SW5mbyIsIm1BbGxQbGF5ZXJzIiwiY3VyV2F0Y2giLCJjYWNoZVRpbWUiLCJicmlnYWRlSUQiLCJ0ZWFtTGlzdCIsIm1XYXRjaFJvb21JRCIsIm1UZWFtSUQiLCJ0ZWFtIiwidXNlckxpc3QiLCJmcmFtZUNvdW50IiwibXNnQ291bnQiLCJkc3RVc2VySURzIiwibWVtYmVycyIsImRzdFVzZXJJRCIsIklEIiwiY2hhbm5lbCIsImRldmljZUlEIiwiZ1ZlcnNpb24iLCJtTmV0V29ya0NhbGxCYWNrSW1wIiwibVVzZXJMaXN0Rm9ySm9pblJvb21Sc3AiLCJnZXRIb3N0TGlzdCIsInByZW1pc2VJbml0IiwiY3JlYXRlUm9vbSIsInVuaW5pdCIsImpvaW5Sb29tIiwic2VuZEV2ZW50Iiwic2VuZEV2ZW50RXgiLCJyZWdpc3RlclVzZXIiLCJwYXJzZSIsIm5pY2tuYW1lIiwicnNwIiwiZXJyQ29kZSIsInZzdXNlciIsIndzc1Byb3h5IiwiY21zbnMiLCJ2c29wZW4iLCJ2c3BheSIsInNlbmRXYXRjaEV2ZW50IiwiZ2V0V2F0Y2hSb29tTGlzdCIsImNoYW5nZVJvbGUiLCJjcmVhdGVUZWFtIiwiam9pblRlYW0iLCJsZWF2ZVRlYW0iLCJ0ZWFtTWF0Y2giLCJnZXRPZmZMaW5lRGF0YSIsImNhbmNlbFRlYW1NYXRjaCIsInNlbmRUZWFtRXZlbnQiLCJraWNrVGVhbU1lbWJlciIsIk1hdGNodnNFbmdpbmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7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LGtCQUFoVDtBQUFtVTBDLElBQUFBLFdBQVcsRUFBQ2p5RSxHQUFHLENBQUNpeUU7QUFBblYsR0FBeEM7QUFBeVksQ0FBN1ksQ0FBNlksT0FBTWh5RSxDQUFOLEVBQVE7QUFBQ1csRUFBQUEsT0FBTyxDQUFDeUMsR0FBUixDQUFZcEQsQ0FBWjtBQUFlOztBQUFBNkwsTUFBTSxDQUFDOUwsR0FBUCxHQUFXQSxHQUFYLEVBQWU4TCxNQUFNLENBQUMvSSxVQUFQLEdBQWtCQSxVQUFqQyxFQUE0QytJLE1BQU0sQ0FBQzg5RSxhQUFQLEdBQXFCQSxhQUFqRSxFQUErRTk5RSxNQUFNLENBQUMyMEUsZUFBUCxHQUF1QkEsZUFBdEcsRUFBc0gzMEUsTUFBTSxDQUFDa2dFLFdBQVAsR0FBbUJBLFdBQXpJLEVBQXFKbGdFLE1BQU0sQ0FBQ3MvRCxnQkFBUCxHQUF3QkEsZ0JBQTdLLEVBQThMdC9ELE1BQU0sQ0FBQytoRSxZQUFQLEdBQW9CQSxZQUFsTixFQUErTi9oRSxNQUFNLENBQUNnaUUsY0FBUCxHQUFzQkEsY0FBclAsRUFBb1FoaUUsTUFBTSxDQUFDSSxnQkFBUCxHQUF3QkEsZ0JBQTVSLEVBQTZTSixNQUFNLENBQUN3akUsb0JBQVAsR0FBNEJBLG9CQUF6VSxFQUE4VnhqRSxNQUFNLENBQUN5akUsa0JBQVAsR0FBMEJBLGtCQUF4WCxFQUEyWXpqRSxNQUFNLENBQUNtbUUsV0FBUCxHQUFtQmp5RSxHQUFHLENBQUNpeUUsV0FBbGEiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcGx1Z2luLW1hdGNodnMvbWF0Y2h2cy9tYXRjaHZzanNzZGsiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTVZTPWZ1bmN0aW9uKGUpe3ZhciB0PXt2ZXJzaW9uOlwiLS1TREtfUkVMTWF0Y2h2c19WMy43LjguMFwiLEdhbWU6e2lkOjAsYXBwa2V5OlwiXCJ9LERFQlVHOiExLElzV3NzOiExLElzTm90aWNlOiEwLFNldFdzczpmdW5jdGlvbihlKXt0aGlzLklzV3NzPWV9LE5vdGljZTpmdW5jdGlvbigpe3RoaXMuSXNOb3RpY2UmJihjb25zb2xlLndhcm4oXCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09TWF0Y2h2cz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XCIpLGNvbnNvbGUud2FybihcIiAgICAgICAgICAgICBTREtfdjMuNy43LivniYjmnKxpbml05o6l5Y+j5ZKMbG9naW7mjqXlj6Plj4LmlbDlgZrnm7jlupTnmoTosIPmlbRcIiksY29uc29sZS53YXJuKFwiICAgICAgICAg6K+m57uG6K+355yLIGh0dHA6Ly9kb2MubWF0Y2h2cy5jb20vQVBJRG9jL0phdmFTY3JpcHRcIiksY29uc29sZS53YXJuKFwiPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVwiKSl9LEluaXQ6ZnVuY3Rpb24oKXt0aGlzLk5vdGljZSgpLFwiQE1BSU5fVVJMXCI9PT10Lkhvc3QuTUFJTl9VUkwmJih0Lkhvc3QuTUFJTl9VUkw9XCJodHRwczovL3Nkay5tYXRjaHZzLmNvbVwiKX0sZ2V0Tm93VGltZVN0cjpmdW5jdGlvbigpe3ZhciBlPW5ldyBEYXRlLHQ9ZS5nZXRNb250aCgpKzEscj1lLmdldERhdGUoKTtyZXR1cm4gMTw9dCYmdDw9OSYmKHQ9XCIwXCIrdCksMDw9ciYmcjw9OSYmKHI9XCIwXCIrciksXCJbXCIrZS5nZXRGdWxsWWVhcigpK1wiLVwiK3QrXCItXCIrcitcIiBcIitlLmdldEhvdXJzKCkrXCI6XCIrZS5nZXRNaW51dGVzKCkrXCI6XCIrZS5nZXRTZWNvbmRzKCkrXCIuXCIrZS5nZXRNaWxsaXNlY29uZHMoKStcIl1cIn0sTGdGb3JtYXQ6ZnVuY3Rpb24oZSl7cmV0dXJuXCJbTWF0Y2h2c1NES11bXCIrdGhpcy5nZXROb3dUaW1lU3RyKCkrXCJdW1wiK2UrXCJdXCJ9LENvbmZpZzp7SEVBUlRfQkVBVF9JTlRFUlZBTDozZTMsTUFYUExBWUVSX0xJTUlUOjEwMCxNSU5QTEFZRVJfTElNSVQ6Mn0sSG9zdDp7TUFJTl9VUkw6XCJATUFJTl9VUkxcIixIT1NUX0dBVFdBWV9BRERSOlwiXCIsSE9TVF9IT1RFTF9BRERSOlwiXCIsSE9TVF9XQVRDSF9BRERSOlwiXCIsQ01TTlNfVVJMOlwiXCIsVlNfVVNFUl9VUkw6XCJcIixWU19PUEVOX1VSTDpcIlwiLFZTX1BBWV9VUkw6XCJcIixWU19QUk9EVUNUX1VSTDpcIlwifSxBUElQQVRIOntIT1NUTElTVDpcIi92MS9nYXRld2F5L3F1ZXJ5XCIsUkVHSVNURVJVU0VSOlwiL3djMy9yZWdpdC5kb1wifSxUZ1Jvb21UeXBlOntOUm9vbTotMSxQUm9vbTowLFdSb29tOjF9fTtyZXR1cm4gdC5Jbml0KCksdH0oKSxNYXRjaHZzTG9nPXt0b0FycmF5OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTA7cjxlLmxlbmd0aDtyKyspdC5wdXNoKGVbcl0pO3JldHVybiB0fX07ZnVuY3Rpb24gZ2V0Tm93Rm9ybWF0RGF0ZSgpe3ZhciBlPW5ldyBEYXRlLHQ9ZS5nZXRNb250aCgpKzEscj1lLmdldERhdGUoKTtyZXR1cm4gMTw9dCYmdDw9OSYmKHQ9XCIwXCIrdCksMDw9ciYmcjw9OSYmKHI9XCIwXCIrciksXCJbXCIrZS5nZXRGdWxsWWVhcigpK1wiLVwiK3QrXCItXCIrcitcIiBcIitlLmdldEhvdXJzKCkrXCI6XCIrZS5nZXRNaW51dGVzKCkrXCI6XCIrZS5nZXRTZWNvbmRzKCkrXCIuXCIrZS5nZXRNaWxsaXNlY29uZHMoKStcIl1cIn1NYXRjaHZzTG9nLm9wZW5Mb2c9ZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcIi0tLS0gb3BlbiBsb2cgLS0tLVwiKSxcInVuZGVmaW5lZFwiPT10eXBlb2Ygd3g/KE1hdGNodnNMb2cubG9nST1jb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUsXCJbSU5GT11bTWF0Y2h2c10gXCIpLE1hdGNodnNMb2cubG9nRT1jb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSxcIltFUlJPUl1bTWF0Y2h2c10gXCIpKTooTWF0Y2h2c0xvZy5sb2dJPWZ1bmN0aW9uKCl7dmFyIHQ9XCJcIjt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKGUpe3ZhciByPWUuc3RhY2suc3BsaXQoL1xcbi8pWzFdO3Q9ci5zbGljZShyLmxhc3RJbmRleE9mKFwiL1wiKSsxLHIubGFzdEluZGV4T2YoXCIpXCIpKX1jb25zb2xlLmxvZyhcIltJTkZPXVtNYXRjaHZzXSBcIitnZXROb3dGb3JtYXREYXRlKCkrXCIgXCIrdGhpcy50b0FycmF5KGFyZ3VtZW50cykrXCIgXCIrdCl9LE1hdGNodnNMb2cubG9nRT1mdW5jdGlvbigpe3ZhciB0PVwiXCI7dHJ5e3Rocm93IG5ldyBFcnJvcn1jYXRjaChlKXt2YXIgcj1lLnN0YWNrLnNwbGl0KC9cXG4vKVsxXTt0PXIuc2xpY2Uoci5sYXN0SW5kZXhPZihcIi9cIikrMSxyLmxhc3RJbmRleE9mKFwiKVwiKSl9Y29uc29sZS5lcnJvcihcIltFUlJPUl1bTWF0Y2h2c10gXCIrZ2V0Tm93Rm9ybWF0RGF0ZSgpK1wiIFwiK3RoaXMudG9BcnJheShhcmd1bWVudHMpK1wiIFwiK3QpfSl9LE1hdGNodnNMb2cuY2xvc2VMb2c9ZnVuY3Rpb24oKXtjb25zb2xlLmxvZyhcIi0tLS0gY2xvc2UgbG9nIC0tLS1cIiksTWF0Y2h2c0xvZy5sb2dJPWZ1bmN0aW9uKCl7fSxNYXRjaHZzTG9nLmxvZ0U9ZnVuY3Rpb24oKXt9fSxNYXRjaHZzTG9nLm9wZW5Mb2coKSxmdW5jdGlvbihlKXt2YXIgbz17Tk9ORTowLElOSVRJTkc6MSxIQVZFX0lOSVQ6MixMT0dJTklORzo0LEhBVkVfTE9HSU46OCxJTl9ST09NOjE2LENSRUFURVJPT006MzIsSk9JTl9ST09NSU5HOjY0LExFQVZFX1JPT01JTkc6MTI4LExPR09VVElORzoyNTYsUkVDT05ORUNUSU5HOjUxMixJTl9XQVRDSElORzoxMDI0LElOX1dBVENIOjIwNDgsTEVBVkVfV0FUQ0hJTkc6NDA5NixURUFNTUFUQ0hJTkc6ODE5MixJTl9URUFNOjE2Mzg0fTtlLkVOR0VfU1RBVEU9byxlLk12c1N0YXRlPWZ1bmN0aW9uKCl7dmFyIHQ9by5OT05FO3RoaXMuUmVTZXQ9ZnVuY3Rpb24oKXt0PW8uTk9ORX0sdGhpcy5TZXRTdGF0ZT1mdW5jdGlvbihlKXt0fD1lfSx0aGlzLkRlbFN0YXRlPWZ1bmN0aW9uKGUpe3QmPX5lfTt2YXIgcj1mdW5jdGlvbihlKXtyZXR1cm4odCZlKT09PWV9O3RoaXMuU3RhdGVEb2luZz1mdW5jdGlvbigpe3JldHVybiByKG8uSU5JVElORyk/LTM6cihvLkxPR0lOSU5HKT8tNTpyKG8uSk9JTl9ST09NSU5HKT8tNzpyKG8uQ1JFQVRFUk9PTSk/LTc6cihvLkxPR09VVElORyk/LTExOnIoby5JTl9XQVRDSElORyk/LTEyOnIoby5URUFNTUFUQ0hJTkcpPy0xMzpyKG8uTEVBVkVfUk9PTUlORyk/LTEwOnIoby5MRUFWRV9XQVRDSElORyk/LTE0OjB9LHRoaXMuU2V0SW5pdD1mdW5jdGlvbigpe3Q9by5OT05FLHRoaXMuU2V0U3RhdGUoby5IQVZFX0lOSVQpfSx0aGlzLlNldEluaXRpbmc9ZnVuY3Rpb24oKXt0PW8uTk9ORSx0aGlzLlNldFN0YXRlKG8uSU5JVElORyl9LHRoaXMuU2V0TG9naW5pbmc9ZnVuY3Rpb24oKXt0aGlzLkRlbFN0YXRlKG8uSEFWRV9MT0dJTiksdGhpcy5TZXRTdGF0ZShvLkxPR0lOSU5HKX0sdGhpcy5TZXRMb2dpbj1mdW5jdGlvbigpe3RoaXMuRGVsU3RhdGUoby5MT0dJTklORyksdGhpcy5TZXRTdGF0ZShvLkhBVkVfTE9HSU4pfSx0aGlzLkhhdmVJbml0PWZ1bmN0aW9uKCl7cmV0dXJuITE9PT1yKG8uSEFWRV9JTklUKT8tMjpyKG8uSU5JVElORyk/LTM6MH0sdGhpcy5IYXZlTG9naW49ZnVuY3Rpb24oKXt2YXIgZT10aGlzLkhhdmVJbml0KCk7cmV0dXJuIDAhPT1lP2U6cihvLkhBVkVfTE9HSU4pPzA6LTR9LHRoaXMuTG9naW5DaGVjaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuU3RhdGVEb2luZygpO3JldHVybiBlPDA/ZTooZT10aGlzLkhhdmVJbml0KCkpPDA/ZTpyKG8uSEFWRV9MT0dJTik/LTY6MH0sdGhpcy5TZXRKb2luUm9vbWluZz1mdW5jdGlvbigpe3RoaXMuU2V0U3RhdGUoby5KT0lOX1JPT01JTkcpfSx0aGlzLlNldEluUm9vbT1mdW5jdGlvbigpe3RoaXMuU2V0U3RhdGUoby5JTl9ST09NKX0sdGhpcy5TZXRDcmVhdGVSb29tPWZ1bmN0aW9uKCl7dGhpcy5EZWxTdGF0ZShvLklOX1JPT00pLHRoaXMuU2V0U3RhdGUoby5DUkVBVEVST09NKX0sdGhpcy5EZWxDcmVhdGVSb29tPWZ1bmN0aW9uKCl7dGhpcy5EZWxTdGF0ZShvLkNSRUFURVJPT00pfSx0aGlzLklzQ3JlYXRlUm9vbT1mdW5jdGlvbigpe3JldHVybiByKG8uQ1JFQVRFUk9PTSl9LHRoaXMuRGVsSm9pblJvb21pbmc9ZnVuY3Rpb24oKXt0aGlzLkRlbFN0YXRlKG8uSk9JTl9ST09NSU5HKX0sdGhpcy5Jc0pvaW5Sb29taW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHIoby5KT0lOX1JPT01JTkcpfSx0aGlzLkRlbEluUm9vbT1mdW5jdGlvbigpe3RoaXMuRGVsU3RhdGUoby5DUkVBVEVST09NKSx0aGlzLkRlbFN0YXRlKG8uSk9JTl9ST09NSU5HKSx0aGlzLkRlbFN0YXRlKG8uSU5fUk9PTSksdGhpcy5EZWxTdGF0ZShvLkxFQVZFX1JPT01JTkcpLHRoaXMuRGVsU3RhdGUoby5MRUFWRV9XQVRDSElORyksdGhpcy5EZWxTdGF0ZShvLklOX1dBVENIKSx0aGlzLkRlbFN0YXRlKG8uSU5fUk9PTSl9LHRoaXMuSGF2ZUluUm9vbT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuSGF2ZUxvZ2luKCk7cmV0dXJuIGU8MD9lOihlPXRoaXMuU3RhdGVEb2luZygpKTwwP2U6cihvLklOX1JPT00pPzA6LTZ9LHRoaXMuSW5Sb29tQ2hlY2s9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLkhhdmVMb2dpbigpO3JldHVybiBlPDA/ZTooZT10aGlzLlN0YXRlRG9pbmcoKSk8MD9lOnIoby5JTl9ST09NKT8tODpyKG8uSU5fV0FUQ0gpPy04OjB9LHRoaXMuSXNSZWNvbm5lY3Rpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gcihvLlJFQ09OTkVDVElORyk/LTk6MH0sdGhpcy5SZWNvbm5lY3RDaGVjaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuSGF2ZUluaXQoKTtyZXR1cm4gZTwwP2U6cihvLlJFQ09OTkVDVElORyk/LTk6cihvLklOX1JPT00pPy04OjB9LHRoaXMuU2V0UmVjb25uZWN0aW5nPWZ1bmN0aW9uKCl7dGhpcy5TZXRTdGF0ZShvLlJFQ09OTkVDVElORyl9LHRoaXMuRGVsUmVjb25uZWN0aW5nPWZ1bmN0aW9uKCl7dGhpcy5EZWxTdGF0ZShvLlJFQ09OTkVDVElORyl9LHRoaXMuTGVhdmVSb29tQ2hlY2s9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLkhhdmVMb2dpbigpO3JldHVybiBlPDA/ZTooZT10aGlzLlN0YXRlRG9pbmcoKSk8MD9lOjB9LHRoaXMuU2V0TGVhdmVSb29taW5nPWZ1bmN0aW9uKCl7dGhpcy5TZXRTdGF0ZShvLkxFQVZFX1JPT01JTkcpfSx0aGlzLklzTGVhdmVSb29taW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHIoby5MRUFWRV9ST09NSU5HKX0sdGhpcy5TZXRMb2dpbk91dGluZz1mdW5jdGlvbigpe3RoaXMuU2V0U3RhdGUoby5MT0dPVVRJTkcpfSx0aGlzLklzTG9naW5PdXRpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gcihvLkxPR09VVElORyl9LHRoaXMuU2V0Sm9pbldhdGNoaW5nPWZ1bmN0aW9uKCl7dGhpcy5TZXRTdGF0ZShvLklOX1dBVENISU5HKX0sdGhpcy5EZWxKb2luV2F0Y2hpbmc9ZnVuY3Rpb24oKXt0aGlzLkRlbFN0YXRlKG8uSU5fV0FUQ0hJTkcpfSx0aGlzLlNldEluV2F0Y2g9ZnVuY3Rpb24oKXt0aGlzLlNldFN0YXRlKG8uSU5fV0FUQ0gpfSx0aGlzLkhhdmVJbldhdGNoPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5IYXZlTG9naW4oKTtyZXR1cm4gMCE9PWU/ZTowIT09KGU9dGhpcy5TdGF0ZURvaW5nKCkpP2U6cihvLklOX1dBVENIKT8wOi02fSx0aGlzLkluV2F0Y2hDaGVjaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuSGF2ZUxvZ2luKCk7cmV0dXJuIDAhPT1lP2U6MCE9PShlPXRoaXMuU3RhdGVEb2luZygpKT9lOnIoby5JTl9XQVRDSCk/LTg6MH0sdGhpcy5IYXZlSW5UZWFtPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5IYXZlTG9naW4oKTtyZXR1cm4gMCE9PWU/ZTowIT09KGU9dGhpcy5TdGF0ZURvaW5nKCkpP2U6cihvLklOX1RFQU0pPzA6LTIyfSx0aGlzLlNldEluVGVhbT1mdW5jdGlvbigpe3RoaXMuU2V0U3RhdGUoby5JTl9URUFNKX0sdGhpcy5EZWxJblRlYW09ZnVuY3Rpb24oKXt0aGlzLkRlbFN0YXRlKG8uSU5fVEVBTSl9LHRoaXMuU2V0VGVhbU1hdGNoaW5nPWZ1bmN0aW9uKCl7dGhpcy5TZXRTdGF0ZShvLlRFQU1NQVRDSElORyl9LHRoaXMuRGVsVGVhbU1hdGNoaW5nPWZ1bmN0aW9uKCl7dGhpcy5EZWxTdGF0ZShvLlRFQU1NQVRDSElORyl9LHRoaXMuSXNUZWFtTWF0Y2hpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gcihvLlRFQU1NQVRDSElORyl9fX0oTVZTfHx7fSk7dmFyIGhleGNhc2U9MCxiNjRwYWQ9XCJcIixjaHJzej04O2Z1bmN0aW9uIGhleF9tZDUoZSl7cmV0dXJuIGJpbmwyaGV4KGNvcmVfbWQ1KHN0cjJiaW5sKGUpLGUubGVuZ3RoKmNocnN6KSl9ZnVuY3Rpb24gYjY0X21kNShlKXtyZXR1cm4gYmlubDJiNjQoY29yZV9tZDUoc3RyMmJpbmwoZSksZS5sZW5ndGgqY2hyc3opKX1mdW5jdGlvbiBzdHJfbWQ1KGUpe3JldHVybiBiaW5sMnN0cihjb3JlX21kNShzdHIyYmlubChlKSxlLmxlbmd0aCpjaHJzeikpfWZ1bmN0aW9uIGhleF9obWFjX21kNShlLHQpe3JldHVybiBiaW5sMmhleChjb3JlX2htYWNfbWQ1KGUsdCkpfWZ1bmN0aW9uIGI2NF9obWFjX21kNShlLHQpe3JldHVybiBiaW5sMmI2NChjb3JlX2htYWNfbWQ1KGUsdCkpfWZ1bmN0aW9uIHN0cl9obWFjX21kNShlLHQpe3JldHVybiBiaW5sMnN0cihjb3JlX2htYWNfbWQ1KGUsdCkpfWZ1bmN0aW9uIG1kNV92bV90ZXN0KCl7cmV0dXJuXCI5MDAxNTA5ODNjZDI0ZmIwZDY5NjNmN2QyOGUxN2Y3MlwiPT1oZXhfbWQ1KFwiYWJjXCIpfWZ1bmN0aW9uIGNvcmVfbWQ1KGUsdCl7ZVt0Pj41XXw9MTI4PDx0JTMyLGVbMTQrKHQrNjQ+Pj45PDw0KV09dDtmb3IodmFyIHI9MTczMjU4NDE5MyxvPS0yNzE3MzM4Nzkscz0tMTczMjU4NDE5NCxpPTI3MTczMzg3OCxhPTA7YTxlLmxlbmd0aDthKz0xNil7dmFyIG49cixwPW8sZz1zLHU9aTtvPW1kNV9paShvPW1kNV9paShvPW1kNV9paShvPW1kNV9paShvPW1kNV9oaChvPW1kNV9oaChvPW1kNV9oaChvPW1kNV9oaChvPW1kNV9nZyhvPW1kNV9nZyhvPW1kNV9nZyhvPW1kNV9nZyhvPW1kNV9mZihvPW1kNV9mZihvPW1kNV9mZihvPW1kNV9mZihvLHM9bWQ1X2ZmKHMsaT1tZDVfZmYoaSxyPW1kNV9mZihyLG8scyxpLGVbYSswXSw3LC02ODA4NzY5MzYpLG8scyxlW2ErMV0sMTIsLTM4OTU2NDU4NikscixvLGVbYSsyXSwxNyw2MDYxMDU4MTkpLGkscixlW2ErM10sMjIsLTEwNDQ1MjUzMzApLHM9bWQ1X2ZmKHMsaT1tZDVfZmYoaSxyPW1kNV9mZihyLG8scyxpLGVbYSs0XSw3LC0xNzY0MTg4OTcpLG8scyxlW2ErNV0sMTIsMTIwMDA4MDQyNikscixvLGVbYSs2XSwxNywtMTQ3MzIzMTM0MSksaSxyLGVbYSs3XSwyMiwtNDU3MDU5ODMpLHM9bWQ1X2ZmKHMsaT1tZDVfZmYoaSxyPW1kNV9mZihyLG8scyxpLGVbYSs4XSw3LDE3NzAwMzU0MTYpLG8scyxlW2ErOV0sMTIsLTE5NTg0MTQ0MTcpLHIsbyxlW2ErMTBdLDE3LC00MjA2MyksaSxyLGVbYSsxMV0sMjIsLTE5OTA0MDQxNjIpLHM9bWQ1X2ZmKHMsaT1tZDVfZmYoaSxyPW1kNV9mZihyLG8scyxpLGVbYSsxMl0sNywxODA0NjAzNjgyKSxvLHMsZVthKzEzXSwxMiwtNDAzNDExMDEpLHIsbyxlW2ErMTRdLDE3LC0xNTAyMDAyMjkwKSxpLHIsZVthKzE1XSwyMiwxMjM2NTM1MzI5KSxzPW1kNV9nZyhzLGk9bWQ1X2dnKGkscj1tZDVfZ2cocixvLHMsaSxlW2ErMV0sNSwtMTY1Nzk2NTEwKSxvLHMsZVthKzZdLDksLTEwNjk1MDE2MzIpLHIsbyxlW2ErMTFdLDE0LDY0MzcxNzcxMyksaSxyLGVbYSswXSwyMCwtMzczODk3MzAyKSxzPW1kNV9nZyhzLGk9bWQ1X2dnKGkscj1tZDVfZ2cocixvLHMsaSxlW2ErNV0sNSwtNzAxNTU4NjkxKSxvLHMsZVthKzEwXSw5LDM4MDE2MDgzKSxyLG8sZVthKzE1XSwxNCwtNjYwNDc4MzM1KSxpLHIsZVthKzRdLDIwLC00MDU1Mzc4NDgpLHM9bWQ1X2dnKHMsaT1tZDVfZ2coaSxyPW1kNV9nZyhyLG8scyxpLGVbYSs5XSw1LDU2ODQ0NjQzOCksbyxzLGVbYSsxNF0sOSwtMTAxOTgwMzY5MCkscixvLGVbYSszXSwxNCwtMTg3MzYzOTYxKSxpLHIsZVthKzhdLDIwLDExNjM1MzE1MDEpLHM9bWQ1X2dnKHMsaT1tZDVfZ2coaSxyPW1kNV9nZyhyLG8scyxpLGVbYSsxM10sNSwtMTQ0NDY4MTQ2NyksbyxzLGVbYSsyXSw5LC01MTQwMzc4NCkscixvLGVbYSs3XSwxNCwxNzM1MzI4NDczKSxpLHIsZVthKzEyXSwyMCwtMTkyNjYwNzczNCkscz1tZDVfaGgocyxpPW1kNV9oaChpLHI9bWQ1X2hoKHIsbyxzLGksZVthKzVdLDQsLTM3ODU1OCksbyxzLGVbYSs4XSwxMSwtMjAyMjU3NDQ2MykscixvLGVbYSsxMV0sMTYsMTgzOTAzMDU2MiksaSxyLGVbYSsxNF0sMjMsLTM1MzA5NTU2KSxzPW1kNV9oaChzLGk9bWQ1X2hoKGkscj1tZDVfaGgocixvLHMsaSxlW2ErMV0sNCwtMTUzMDk5MjA2MCksbyxzLGVbYSs0XSwxMSwxMjcyODkzMzUzKSxyLG8sZVthKzddLDE2LC0xNTU0OTc2MzIpLGkscixlW2ErMTBdLDIzLC0xMDk0NzMwNjQwKSxzPW1kNV9oaChzLGk9bWQ1X2hoKGkscj1tZDVfaGgocixvLHMsaSxlW2ErMTNdLDQsNjgxMjc5MTc0KSxvLHMsZVthKzBdLDExLC0zNTg1MzcyMjIpLHIsbyxlW2ErM10sMTYsLTcyMjUyMTk3OSksaSxyLGVbYSs2XSwyMyw3NjAyOTE4OSkscz1tZDVfaGgocyxpPW1kNV9oaChpLHI9bWQ1X2hoKHIsbyxzLGksZVthKzldLDQsLTY0MDM2NDQ4NyksbyxzLGVbYSsxMl0sMTEsLTQyMTgxNTgzNSkscixvLGVbYSsxNV0sMTYsNTMwNzQyNTIwKSxpLHIsZVthKzJdLDIzLC05OTUzMzg2NTEpLHM9bWQ1X2lpKHMsaT1tZDVfaWkoaSxyPW1kNV9paShyLG8scyxpLGVbYSswXSw2LC0xOTg2MzA4NDQpLG8scyxlW2ErN10sMTAsMTEyNjg5MTQxNSkscixvLGVbYSsxNF0sMTUsLTE0MTYzNTQ5MDUpLGkscixlW2ErNV0sMjEsLTU3NDM0MDU1KSxzPW1kNV9paShzLGk9bWQ1X2lpKGkscj1tZDVfaWkocixvLHMsaSxlW2ErMTJdLDYsMTcwMDQ4NTU3MSksbyxzLGVbYSszXSwxMCwtMTg5NDk4NjYwNikscixvLGVbYSsxMF0sMTUsLTEwNTE1MjMpLGkscixlW2ErMV0sMjEsLTIwNTQ5MjI3OTkpLHM9bWQ1X2lpKHMsaT1tZDVfaWkoaSxyPW1kNV9paShyLG8scyxpLGVbYSs4XSw2LDE4NzMzMTMzNTkpLG8scyxlW2ErMTVdLDEwLC0zMDYxMTc0NCkscixvLGVbYSs2XSwxNSwtMTU2MDE5ODM4MCksaSxyLGVbYSsxM10sMjEsMTMwOTE1MTY0OSkscz1tZDVfaWkocyxpPW1kNV9paShpLHI9bWQ1X2lpKHIsbyxzLGksZVthKzRdLDYsLTE0NTUyMzA3MCksbyxzLGVbYSsxMV0sMTAsLTExMjAyMTAzNzkpLHIsbyxlW2ErMl0sMTUsNzE4Nzg3MjU5KSxpLHIsZVthKzldLDIxLC0zNDM0ODU1NTEpLHI9c2FmZV9hZGQocixuKSxvPXNhZmVfYWRkKG8scCkscz1zYWZlX2FkZChzLGcpLGk9c2FmZV9hZGQoaSx1KX1yZXR1cm4gQXJyYXkocixvLHMsaSl9ZnVuY3Rpb24gbWQ1X2NtbihlLHQscixvLHMsaSl7cmV0dXJuIHNhZmVfYWRkKGJpdF9yb2woc2FmZV9hZGQoc2FmZV9hZGQodCxlKSxzYWZlX2FkZChvLGkpKSxzKSxyKX1mdW5jdGlvbiBtZDVfZmYoZSx0LHIsbyxzLGksYSl7cmV0dXJuIG1kNV9jbW4odCZyfH50Jm8sZSx0LHMsaSxhKX1mdW5jdGlvbiBtZDVfZ2coZSx0LHIsbyxzLGksYSl7cmV0dXJuIG1kNV9jbW4odCZvfHImfm8sZSx0LHMsaSxhKX1mdW5jdGlvbiBtZDVfaGgoZSx0LHIsbyxzLGksYSl7cmV0dXJuIG1kNV9jbW4odF5yXm8sZSx0LHMsaSxhKX1mdW5jdGlvbiBtZDVfaWkoZSx0LHIsbyxzLGksYSl7cmV0dXJuIG1kNV9jbW4ocl4odHx+byksZSx0LHMsaSxhKX1mdW5jdGlvbiBjb3JlX2htYWNfbWQ1KGUsdCl7dmFyIHI9c3RyMmJpbmwoZSk7MTY8ci5sZW5ndGgmJihyPWNvcmVfbWQ1KHIsZS5sZW5ndGgqY2hyc3opKTtmb3IodmFyIG89QXJyYXkoMTYpLHM9QXJyYXkoMTYpLGk9MDtpPDE2O2krKylvW2ldPTkwOTUyMjQ4Nl5yW2ldLHNbaV09MTU0OTU1NjgyOF5yW2ldO3ZhciBhPWNvcmVfbWQ1KG8uY29uY2F0KHN0cjJiaW5sKHQpKSw1MTIrdC5sZW5ndGgqY2hyc3opO3JldHVybiBjb3JlX21kNShzLmNvbmNhdChhKSw2NDApfWZ1bmN0aW9uIHNhZmVfYWRkKGUsdCl7dmFyIHI9KDY1NTM1JmUpKyg2NTUzNSZ0KTtyZXR1cm4oZT4+MTYpKyh0Pj4xNikrKHI+PjE2KTw8MTZ8NjU1MzUmcn1mdW5jdGlvbiBiaXRfcm9sKGUsdCl7cmV0dXJuIGU8PHR8ZT4+PjMyLXR9ZnVuY3Rpb24gc3RyMmJpbmwoZSl7Zm9yKHZhciB0PUFycmF5KCkscj0oMTw8Y2hyc3opLTEsbz0wO288ZS5sZW5ndGgqY2hyc3o7bys9Y2hyc3opdFtvPj41XXw9KGUuY2hhckNvZGVBdChvL2NocnN6KSZyKTw8byUzMjtyZXR1cm4gdH1mdW5jdGlvbiBiaW5sMnN0cihlKXtmb3IodmFyIHQ9XCJcIixyPSgxPDxjaHJzeiktMSxvPTA7bzwzMiplLmxlbmd0aDtvKz1jaHJzeil0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGVbbz4+NV0+Pj5vJTMyJnIpO3JldHVybiB0fWZ1bmN0aW9uIGJpbmwyaGV4KGUpe2Zvcih2YXIgdD1oZXhjYXNlP1wiMDEyMzQ1Njc4OUFCQ0RFRlwiOlwiMDEyMzQ1Njc4OWFiY2RlZlwiLHI9XCJcIixvPTA7bzw0KmUubGVuZ3RoO28rKylyKz10LmNoYXJBdChlW28+PjJdPj5vJTQqOCs0JjE1KSt0LmNoYXJBdChlW28+PjJdPj5vJTQqOCYxNSk7cmV0dXJuIHJ9ZnVuY3Rpb24gYmlubDJiNjQoZSl7Zm9yKHZhciB0PVwiXCIscj0wO3I8NCplLmxlbmd0aDtyKz0zKWZvcih2YXIgbz0oZVtyPj4yXT4+ciU0KjgmMjU1KTw8MTZ8KGVbcisxPj4yXT4+KHIrMSklNCo4JjI1NSk8PDh8ZVtyKzI+PjJdPj4ocisyKSU0KjgmMjU1LHM9MDtzPDQ7cysrKTgqcis2KnM+MzIqZS5sZW5ndGg/dCs9YjY0cGFkOnQrPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLmNoYXJBdChvPj42KigzLXMpJjYzKTtyZXR1cm4gdH12YXIgZm9ybWF0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgcixlLG8scyxpPTEsYT1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyksbj0wLHA9dC5sZW5ndGgsZz1cIlwiLHU9ITEsbD0hMSxtPWZ1bmN0aW9uKCl7cmV0dXJuIGFbaSsrXX0sYz1mdW5jdGlvbigpe2Zvcih2YXIgZT1cIlwiOy9cXGQvLnRlc3QodFtuXSk7KWUrPXRbbisrXSxyPXRbbl07cmV0dXJuIDA8ZS5sZW5ndGg/cGFyc2VJbnQoZSk6bnVsbH07bjxwOysrbilpZihyPXRbbl0sdSlzd2l0Y2godT0hMSxcIi5cIj09cj8obD0hMSxyPXRbKytuXSk6XCIwXCI9PXImJlwiLlwiPT10W24rMV0/KGw9ITAscj10W24rPTJdKTpsPSEwLHM9YygpLHIpe2Nhc2VcImJcIjpnKz1wYXJzZUludChtKCksMTApLnRvU3RyaW5nKDIpO2JyZWFrO2Nhc2VcImNcIjpcInN0cmluZ1wiPT10eXBlb2YoZT1tKCkpfHxlIGluc3RhbmNlb2YgU3RyaW5nP2crPWU6Zys9U3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChlLDEwKSk7YnJlYWs7Y2FzZVwiZFwiOmcrPXBhcnNlSW50KG0oKSwxMCk7YnJlYWs7Y2FzZVwiZlwiOm89U3RyaW5nKHBhcnNlRmxvYXQobSgpKS50b0ZpeGVkKHN8fDYpKSxnKz1sP286by5yZXBsYWNlKC9eMC8sXCJcIik7YnJlYWs7Y2FzZVwialwiOmcrPUpTT04uc3RyaW5naWZ5KG0oKSk7YnJlYWs7Y2FzZVwib1wiOmcrPVwiMFwiK3BhcnNlSW50KG0oKSwxMCkudG9TdHJpbmcoOCk7YnJlYWs7Y2FzZVwic1wiOmcrPW0oKTticmVhaztjYXNlXCJ4XCI6Zys9XCIweFwiK3BhcnNlSW50KG0oKSwxMCkudG9TdHJpbmcoMTYpO2JyZWFrO2Nhc2VcIlhcIjpnKz1cIjB4XCIrcGFyc2VJbnQobSgpLDEwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTticmVhaztkZWZhdWx0OmcrPXJ9ZWxzZVwiJVwiPT09cj91PSEwOmcrPXI7cmV0dXJuIGd9O2Z1bmN0aW9uIEluY2x1ZGVKUyhlKXtuZXdfZWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpLG5ld19lbGVtZW50LnNldEF0dHJpYnV0ZShcInR5cGVcIixcInRleHQvamF2YXNjcmlwdFwiKSxuZXdfZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzcmNcIixlKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5ld19lbGVtZW50KX1mdW5jdGlvbiBNU0V4dGVuZChlLHQpe3ZhciByPXQucHJvdG90eXBlLG89ZS5wcm90b3R5cGU7Zm9yKHZhciBzIGluIHIpb1tzXT1yW3NdfWZ1bmN0aW9uIHN0cmluZ1RvVXRmOEJ5dGVBcnJheShlKXtpZighZXx8XCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO2Zvcih2YXIgdD1bXSxyPTAsbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgcz1lLmNoYXJDb2RlQXQobyk7czwxMjg/dFtyKytdPXM6KHM8MjA0OD90W3IrK109cz4+NnwxOTI6KDU1Mjk2PT0oNjQ1MTImcykmJm8rMTxlLmxlbmd0aCYmNTYzMjA9PSg2NDUxMiZlLmNoYXJDb2RlQXQobysxKSk/KHM9NjU1MzYrKCgxMDIzJnMpPDwxMCkrKDEwMjMmZS5jaGFyQ29kZUF0KCsrbykpLHRbcisrXT1zPj4xOHwyNDAsdFtyKytdPXM+PjEyJjYzfDEyOCk6dFtyKytdPXM+PjEyfDIyNCx0W3IrK109cz4+NiY2M3wxMjgpLHRbcisrXT02MyZzfDEyOCl9Zm9yKHZhciBpPW5ldyBVaW50OEFycmF5KHQubGVuZ3RoKSxhPTA7YTxpLmxlbmd0aDthKyspaVthXT10W2FdO3JldHVybiBpfWZ1bmN0aW9uIHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhlKXtmb3IodmFyIHQ9W10scj0wLG89MDtyPGUubGVuZ3RoOyl7aWYoKGE9ZVtyKytdKTwxMjgpdFtvKytdPVN0cmluZy5mcm9tQ2hhckNvZGUoYSk7ZWxzZSBpZigxOTE8YSYmYTwyMjQpe3ZhciBzPWVbcisrXTt0W28rK109U3RyaW5nLmZyb21DaGFyQ29kZSgoMzEmYSk8PDZ8NjMmcyl9ZWxzZSBpZigyMzk8YSYmYTwzNjUpe3M9ZVtyKytdO3ZhciBpPWVbcisrXSxhPSgoNyZhKTw8MTh8KDYzJnMpPDwxMnwoNjMmaSk8PDZ8NjMmZVtyKytdKS02NTUzNjt0W28rK109U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NisoYT4+MTApKSx0W28rK109U3RyaW5nLmZyb21DaGFyQ29kZSg1NjMyMCsoMTAyMyZhKSl9ZWxzZSBzPWVbcisrXSxpPWVbcisrXSx0W28rK109U3RyaW5nLmZyb21DaGFyQ29kZSgoMTUmYSk8PDEyfCg2MyZzKTw8Nnw2MyZpKX1yZXR1cm4gdC5qb2luKFwiXCIpfWZ1bmN0aW9uIExvY2FsU3RvcmVfU2F2ZShlLHQpe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlPyhsb2NhbFN0b3JhZ2Uuc2V0SXRlbShlLHQpLCEwKTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd3gmJih3eC5zZXRTdG9yYWdlU3luYyhlLHQpLCEwKX1mdW5jdGlvbiBMb2NhbFN0b3JlX0NsZWFyKCl7cmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U/KGxvY2FsU3RvcmFnZS5jbGVhcigpLCEwKTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd3gmJih3eC5jbGVhclN0b3JhZ2VTeW5jKCksITApfWZ1bmN0aW9uIExvY2FsU3RvcmVfTG9hZChlKXtyZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZT9sb2NhbFN0b3JhZ2UuZ2V0SXRlbShlKTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd3g/d3guZ2V0U3RvcmFnZVN5bmMoZSk6bnVsbH1mdW5jdGlvbiBpc0lFKCl7cmV0dXJuISF3aW5kb3cuQWN0aXZlWE9iamVjdHx8XCJBY3RpdmVYT2JqZWN0XCJpbiB3aW5kb3d9XCJmdW5jdGlvblwiIT10eXBlb2YgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoJiYoU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNsaWNlKDAsZS5sZW5ndGgpPT09ZX0pLFwiZnVuY3Rpb25cIiE9dHlwZW9mIFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgmJihTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoPWZ1bmN0aW9uKGUpe3JldHVybi0xIT09dGhpcy5pbmRleE9mKGUsdGhpcy5sZW5ndGgtZS5sZW5ndGgpfSksZnVuY3Rpb24oZSl7dmFyIHQ9e2lzTmVlZFVzZVdTUzpmdW5jdGlvbigpe3JldHVybiEhTVZTLklzV3NzfHwoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHd4fHxcInVuZGVmaW5lZFwiIT10eXBlb2YgQkspfSxnZXRMaXZlVXJsOmZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBzPVwibGl2ZT1cIitlLmdldEhvdGVsYWRkcigpK1wiJmdhbWVJRD1cIit0K1wiJnJvb21JRD1cIityK1wiJnNldElEPVwiK287cmV0dXJuIE1WUy5Jc1dzcz9cIndzczovL1wiK2UuZ2V0V3NzcHJveHkoKStcIi93YXRjaD9cIitzOlwid3M6Ly9cIitlLmdldEhvdGVsYWRkcigpfSxnZXRIb3RlbFVybDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pc05lZWRVc2VXU1MoKT9cIndzczovL1wiK2UuZ2V0V3NzcHJveHkoKStcIi9wcm94eT9ob3RlbD1cIitlLmdldEhvdGVsYWRkcigpOlwid3M6Ly9cIitlLmdldEhvdGVsYWRkcigpfX07ZS5Nc1V0aWw9dDt2YXIgcj1mdW5jdGlvbigpe3ZhciBzPXt9LGk9MDtmdW5jdGlvbiBlKCl7fXJldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBCSz8oZS5wcm90b3R5cGUuc2V0SW50ZXJ2YWw9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgQksuVGlja2VyO3IuaW50ZXJ2YWw9Nip0LzEwMCxyLnNldFRpY2tlckNhbGxCYWNrKGUpO3ZhciBvPSsraTtyZXR1cm4gc1tvXT1yLG99LGUucHJvdG90eXBlLmNsZWFySW50ZXJ2YWw9ZnVuY3Rpb24oZSl7dmFyIHQ9c1tlXTt0JiYodC5kaXNwb3NlKCksZGVsZXRlIHNbZV0pfSk6KGUucHJvdG90eXBlLnNldEludGVydmFsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHNldEludGVydmFsKGUsdCl9LGUucHJvdG90eXBlLmNsZWFySW50ZXJ2YWw9ZnVuY3Rpb24oZSl7Y2xlYXJJbnRlcnZhbChlKX0pLGV9KCk7ZS5NdnNUaWNrZXI9cixlLnRpY2tlcj1uZXcgcn0oTVZTfHx7fSk7dmFyIE1WUz1mdW5jdGlvbihlKXt2YXIgdCxyPSgodD1mdW5jdGlvbigpe30pLnByb3RvdHlwZS5pc0ludmFpbGVkPWZ1bmN0aW9uKGUpe3JldHVybiEwfSx0KTtyZXR1cm4gZS5BcHBLZXlDaGVjaz1yLGV9KE1WU3x8e30pOyFmdW5jdGlvbiBpKGEsbixwKXtmdW5jdGlvbiBnKHQsZSl7aWYoIW5bdF0pe2lmKCFhW3RdKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBfcmVxdWlyZSYmX3JlcXVpcmU7aWYoIWUmJnIpcmV0dXJuIHIodCwhMCk7aWYodSlyZXR1cm4gdSh0LCEwKTt2YXIgbz1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK3QrXCInXCIpO3Rocm93IG8uY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixvfXZhciBzPW5bdF09e2V4cG9ydHM6e319O2FbdF1bMF0uY2FsbChzLmV4cG9ydHMsZnVuY3Rpb24oZSl7cmV0dXJuIGcoYVt0XVsxXVtlXXx8ZSl9LHMscy5leHBvcnRzLGksYSxuLHApfXJldHVybiBuW3RdLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIF9yZXF1aXJlJiZfcmVxdWlyZSxlPTA7ZTxwLmxlbmd0aDtlKyspZyhwW2VdKTtyZXR1cm4gZ30oezE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyLmJ5dGVMZW5ndGg9ZnVuY3Rpb24oZSl7dmFyIHQ9YyhlKSxyPXRbMF0sbz10WzFdO3JldHVybiAzKihyK28pLzQtb30sci50b0J5dGVBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1jKGUpLG89clswXSxzPXJbMV0saT1uZXcgbSgoZz1vLHU9cywzKihnK3UpLzQtdSkpLGE9MCxuPTA8cz9vLTQ6byxwPTA7cDxuO3ArPTQpdD1sW2UuY2hhckNvZGVBdChwKV08PDE4fGxbZS5jaGFyQ29kZUF0KHArMSldPDwxMnxsW2UuY2hhckNvZGVBdChwKzIpXTw8NnxsW2UuY2hhckNvZGVBdChwKzMpXSxpW2ErK109dD4+MTYmMjU1LGlbYSsrXT10Pj44JjI1NSxpW2ErK109MjU1JnQ7dmFyIGcsdTsyPT09cyYmKHQ9bFtlLmNoYXJDb2RlQXQocCldPDwyfGxbZS5jaGFyQ29kZUF0KHArMSldPj40LGlbYSsrXT0yNTUmdCk7MT09PXMmJih0PWxbZS5jaGFyQ29kZUF0KHApXTw8MTB8bFtlLmNoYXJDb2RlQXQocCsxKV08PDR8bFtlLmNoYXJDb2RlQXQocCsyKV0+PjIsaVthKytdPXQ+PjgmMjU1LGlbYSsrXT0yNTUmdCk7cmV0dXJuIGl9LHIuZnJvbUJ5dGVBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1lLmxlbmd0aCxvPXIlMyxzPVtdLGk9MCxhPXItbztpPGE7aSs9MTYzODMpcy5wdXNoKHAoZSxpLGE8aSsxNjM4Mz9hOmkrMTYzODMpKTsxPT09bz8odD1lW3ItMV0scy5wdXNoKG5bdD4+Ml0rblt0PDw0JjYzXStcIj09XCIpKToyPT09byYmKHQ9KGVbci0yXTw8OCkrZVtyLTFdLHMucHVzaChuW3Q+PjEwXStuW3Q+PjQmNjNdK25bdDw8MiY2M10rXCI9XCIpKTtyZXR1cm4gcy5qb2luKFwiXCIpfTtmb3IodmFyIG49W10sbD1bXSxtPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5P1VpbnQ4QXJyYXk6QXJyYXksbz1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIixzPTAsaT1vLmxlbmd0aDtzPGk7KytzKW5bc109b1tzXSxsW28uY2hhckNvZGVBdChzKV09cztmdW5jdGlvbiBjKGUpe3ZhciB0PWUubGVuZ3RoO2lmKDA8dCU0KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDRcIik7dmFyIHI9ZS5pbmRleE9mKFwiPVwiKTtyZXR1cm4tMT09PXImJihyPXQpLFtyLHI9PT10PzA6NC1yJTRdfWZ1bmN0aW9uIHAoZSx0LHIpe2Zvcih2YXIgbyxzLGk9W10sYT10O2E8cjthKz0zKW89KGVbYV08PDE2JjE2NzExNjgwKSsoZVthKzFdPDw4JjY1MjgwKSsoMjU1JmVbYSsyXSksaS5wdXNoKG5bKHM9byk+PjE4JjYzXStuW3M+PjEyJjYzXStuW3M+PjYmNjNdK25bNjMmc10pO3JldHVybiBpLmpvaW4oXCJcIil9bFtcIi1cIi5jaGFyQ29kZUF0KDApXT02MixsW1wiX1wiLmNoYXJDb2RlQXQoMCldPTYzfSx7fV0sMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBvPWUoXCJiYXNlNjQtanNcIiksaT1lKFwiaWVlZTc1NFwiKTtyLkJ1ZmZlcj1sLHIuU2xvd0J1ZmZlcj1mdW5jdGlvbihlKXsrZSE9ZSYmKGU9MCk7cmV0dXJuIGwuYWxsb2MoK2UpfSxyLklOU1BFQ1RfTUFYX0JZVEVTPTUwO3ZhciBzPTIxNDc0ODM2NDc7ZnVuY3Rpb24gYShlKXtpZihzPGUpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicrZSsnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJyk7dmFyIHQ9bmV3IFVpbnQ4QXJyYXkoZSk7cmV0dXJuIHQuX19wcm90b19fPWwucHJvdG90eXBlLHR9ZnVuY3Rpb24gbChlLHQscil7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJyk7cmV0dXJuIGcoZSl9cmV0dXJuIG4oZSx0LHIpfWZ1bmN0aW9uIG4oZSx0LHIpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBmdW5jdGlvbihlLHQpe1wic3RyaW5nXCI9PXR5cGVvZiB0JiZcIlwiIT09dHx8KHQ9XCJ1dGY4XCIpO2lmKCFsLmlzRW5jb2RpbmcodCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK3QpO3ZhciByPTB8YyhlLHQpLG89YShyKSxzPW8ud3JpdGUoZSx0KTtzIT09ciYmKG89by5zbGljZSgwLHMpKTtyZXR1cm4gb30oZSx0KTtpZihBcnJheUJ1ZmZlci5pc1ZpZXcoZSkpcmV0dXJuIHUoZSk7aWYobnVsbD09ZSl0aHJvdyBUeXBlRXJyb3IoXCJUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSBcIit0eXBlb2YgZSk7aWYoayhlLEFycmF5QnVmZmVyKXx8ZSYmayhlLmJ1ZmZlcixBcnJheUJ1ZmZlcikpcmV0dXJuIGZ1bmN0aW9uKGUsdCxyKXtpZih0PDB8fGUuYnl0ZUxlbmd0aDx0KXRocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpO2lmKGUuYnl0ZUxlbmd0aDx0KyhyfHwwKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJsZW5ndGhcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKTt2YXIgbztvPXZvaWQgMD09PXQmJnZvaWQgMD09PXI/bmV3IFVpbnQ4QXJyYXkoZSk6dm9pZCAwPT09cj9uZXcgVWludDhBcnJheShlLHQpOm5ldyBVaW50OEFycmF5KGUsdCxyKTtyZXR1cm4gby5fX3Byb3RvX189bC5wcm90b3R5cGUsb30oZSx0LHIpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJyk7dmFyIG89ZS52YWx1ZU9mJiZlLnZhbHVlT2YoKTtpZihudWxsIT1vJiZvIT09ZSlyZXR1cm4gbC5mcm9tKG8sdCxyKTt2YXIgcz1mdW5jdGlvbihlKXtpZihsLmlzQnVmZmVyKGUpKXt2YXIgdD0wfG0oZS5sZW5ndGgpLHI9YSh0KTtyZXR1cm4gMD09PXIubGVuZ3RofHxlLmNvcHkociwwLDAsdCkscn1pZih2b2lkIDAhPT1lLmxlbmd0aClyZXR1cm5cIm51bWJlclwiIT10eXBlb2YgZS5sZW5ndGh8fFAoZS5sZW5ndGgpP2EoMCk6dShlKTtpZihcIkJ1ZmZlclwiPT09ZS50eXBlJiZBcnJheS5pc0FycmF5KGUuZGF0YSkpcmV0dXJuIHUoZS5kYXRhKX0oZSk7aWYocylyZXR1cm4gcztpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZudWxsIT1TeW1ib2wudG9QcmltaXRpdmUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGVbU3ltYm9sLnRvUHJpbWl0aXZlXSlyZXR1cm4gbC5mcm9tKGVbU3ltYm9sLnRvUHJpbWl0aXZlXShcInN0cmluZ1wiKSx0LHIpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSBcIit0eXBlb2YgZSl9ZnVuY3Rpb24gcChlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJyk7aWYoZTwwKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInK2UrJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpfWZ1bmN0aW9uIGcoZSl7cmV0dXJuIHAoZSksYShlPDA/MDowfG0oZSkpfWZ1bmN0aW9uIHUoZSl7Zm9yKHZhciB0PWUubGVuZ3RoPDA/MDowfG0oZS5sZW5ndGgpLHI9YSh0KSxvPTA7bzx0O28rPTEpcltvXT0yNTUmZVtvXTtyZXR1cm4gcn1mdW5jdGlvbiBtKGUpe2lmKHM8PWUpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtIHNpemU6IDB4XCIrcy50b1N0cmluZygxNikrXCIgYnl0ZXNcIik7cmV0dXJuIDB8ZX1mdW5jdGlvbiBjKGUsdCl7aWYobC5pc0J1ZmZlcihlKSlyZXR1cm4gZS5sZW5ndGg7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpfHxrKGUsQXJyYXlCdWZmZXIpKXJldHVybiBlLmJ5dGVMZW5ndGg7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSk7dmFyIHI9ZS5sZW5ndGgsbz0yPGFyZ3VtZW50cy5sZW5ndGgmJiEwPT09YXJndW1lbnRzWzJdO2lmKCFvJiYwPT09cilyZXR1cm4gMDtmb3IodmFyIHM9ITE7Oylzd2l0Y2godCl7Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gcjtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4gQyhlKS5sZW5ndGg7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIDIqcjtjYXNlXCJoZXhcIjpyZXR1cm4gcj4+PjE7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIE4oZSkubGVuZ3RoO2RlZmF1bHQ6aWYocylyZXR1cm4gbz8tMTpDKGUpLmxlbmd0aDt0PShcIlwiK3QpLnRvTG93ZXJDYXNlKCkscz0hMH19ZnVuY3Rpb24gZChlLHQscil7dmFyIG89ZVt0XTtlW3RdPWVbcl0sZVtyXT1vfWZ1bmN0aW9uIGYoZSx0LHIsbyxzKXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuLTE7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHI/KG89cixyPTApOjIxNDc0ODM2NDc8cj9yPTIxNDc0ODM2NDc6cjwtMjE0NzQ4MzY0OCYmKHI9LTIxNDc0ODM2NDgpLFAocj0rcikmJihyPXM/MDplLmxlbmd0aC0xKSxyPDAmJihyPWUubGVuZ3RoK3IpLHI+PWUubGVuZ3RoKXtpZihzKXJldHVybi0xO3I9ZS5sZW5ndGgtMX1lbHNlIGlmKHI8MCl7aWYoIXMpcmV0dXJuLTE7cj0wfWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1sLmZyb20odCxvKSksbC5pc0J1ZmZlcih0KSlyZXR1cm4gMD09PXQubGVuZ3RoPy0xOmgoZSx0LHIsbyxzKTtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdCY9MjU1LFwiZnVuY3Rpb25cIj09dHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2Y/cz9VaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoZSx0LHIpOlVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoZSx0LHIpOmgoZSxbdF0scixvLHMpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJ2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXJcIil9ZnVuY3Rpb24gaChlLHQscixvLHMpe3ZhciBpLGE9MSxuPWUubGVuZ3RoLHA9dC5sZW5ndGg7aWYodm9pZCAwIT09byYmKFwidWNzMlwiPT09KG89U3RyaW5nKG8pLnRvTG93ZXJDYXNlKCkpfHxcInVjcy0yXCI9PT1vfHxcInV0ZjE2bGVcIj09PW98fFwidXRmLTE2bGVcIj09PW8pKXtpZihlLmxlbmd0aDwyfHx0Lmxlbmd0aDwyKXJldHVybi0xO24vPWE9MixwLz0yLHIvPTJ9ZnVuY3Rpb24gZyhlLHQpe3JldHVybiAxPT09YT9lW3RdOmUucmVhZFVJbnQxNkJFKHQqYSl9aWYocyl7dmFyIHU9LTE7Zm9yKGk9cjtpPG47aSsrKWlmKGcoZSxpKT09PWcodCwtMT09PXU/MDppLXUpKXtpZigtMT09PXUmJih1PWkpLGktdSsxPT09cClyZXR1cm4gdSphfWVsc2UtMSE9PXUmJihpLT1pLXUpLHU9LTF9ZWxzZSBmb3IobjxyK3AmJihyPW4tcCksaT1yOzA8PWk7aS0tKXtmb3IodmFyIGw9ITAsbT0wO208cDttKyspaWYoZyhlLGkrbSkhPT1nKHQsbSkpe2w9ITE7YnJlYWt9aWYobClyZXR1cm4gaX1yZXR1cm4tMX1mdW5jdGlvbiB5KGUsdCxyLG8pe3I9TnVtYmVyKHIpfHwwO3ZhciBzPWUubGVuZ3RoLXI7bz9zPChvPU51bWJlcihvKSkmJihvPXMpOm89czt2YXIgaT10Lmxlbmd0aDtpLzI8byYmKG89aS8yKTtmb3IodmFyIGE9MDthPG87KythKXt2YXIgbj1wYXJzZUludCh0LnN1YnN0cigyKmEsMiksMTYpO2lmKFAobikpcmV0dXJuIGE7ZVtyK2FdPW59cmV0dXJuIGF9ZnVuY3Rpb24gUihlLHQscixvKXtyZXR1cm4gQShmdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0wO3I8ZS5sZW5ndGg7KytyKXQucHVzaCgyNTUmZS5jaGFyQ29kZUF0KHIpKTtyZXR1cm4gdH0odCksZSxyLG8pfWZ1bmN0aW9uIE0oZSx0LHIpe3JldHVybiAwPT09dCYmcj09PWUubGVuZ3RoP28uZnJvbUJ5dGVBcnJheShlKTpvLmZyb21CeXRlQXJyYXkoZS5zbGljZSh0LHIpKX1mdW5jdGlvbiBiKGUsdCxyKXtyPU1hdGgubWluKGUubGVuZ3RoLHIpO2Zvcih2YXIgbz1bXSxzPXQ7czxyOyl7dmFyIGksYSxuLHAsZz1lW3NdLHU9bnVsbCxsPTIzOTxnPzQ6MjIzPGc/MzoxOTE8Zz8yOjE7aWYocytsPD1yKXN3aXRjaChsKXtjYXNlIDE6ZzwxMjgmJih1PWcpO2JyZWFrO2Nhc2UgMjoxMjg9PSgxOTImKGk9ZVtzKzFdKSkmJjEyNzwocD0oMzEmZyk8PDZ8NjMmaSkmJih1PXApO2JyZWFrO2Nhc2UgMzppPWVbcysxXSxhPWVbcysyXSwxMjg9PSgxOTImaSkmJjEyOD09KDE5MiZhKSYmMjA0NzwocD0oMTUmZyk8PDEyfCg2MyZpKTw8Nnw2MyZhKSYmKHA8NTUyOTZ8fDU3MzQzPHApJiYodT1wKTticmVhaztjYXNlIDQ6aT1lW3MrMV0sYT1lW3MrMl0sbj1lW3MrM10sMTI4PT0oMTkyJmkpJiYxMjg9PSgxOTImYSkmJjEyOD09KDE5MiZuKSYmNjU1MzU8KHA9KDE1JmcpPDwxOHwoNjMmaSk8PDEyfCg2MyZhKTw8Nnw2MyZuKSYmcDwxMTE0MTEyJiYodT1wKX1udWxsPT09dT8odT02NTUzMyxsPTEpOjY1NTM1PHUmJih1LT02NTUzNixvLnB1c2godT4+PjEwJjEwMjN8NTUyOTYpLHU9NTYzMjB8MTAyMyZ1KSxvLnB1c2godSkscys9bH1yZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGg7aWYodDw9UylyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZSk7dmFyIHI9XCJcIixvPTA7Zm9yKDtvPHQ7KXIrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGUuc2xpY2UobyxvKz1TKSk7cmV0dXJuIHJ9KG8pfXIua01heExlbmd0aD1zLChsLlRZUEVEX0FSUkFZX1NVUFBPUlQ9ZnVuY3Rpb24oKXt0cnl7dmFyIGU9bmV3IFVpbnQ4QXJyYXkoMSk7cmV0dXJuIGUuX19wcm90b19fPXtfX3Byb3RvX186VWludDhBcnJheS5wcm90b3R5cGUsZm9vOmZ1bmN0aW9uKCl7cmV0dXJuIDQyfX0sNDI9PT1lLmZvbygpfWNhdGNoKGUpe3JldHVybiExfX0oKSl8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBjb25zb2xlfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBjb25zb2xlLmVycm9yfHxjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5IGBidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSBfcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LlwiKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobC5wcm90b3R5cGUsXCJwYXJlbnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtpZihsLmlzQnVmZmVyKHRoaXMpKXJldHVybiB0aGlzLmJ1ZmZlcn19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkobC5wcm90b3R5cGUsXCJvZmZzZXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtpZihsLmlzQnVmZmVyKHRoaXMpKXJldHVybiB0aGlzLmJ5dGVPZmZzZXR9fSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmbnVsbCE9U3ltYm9sLnNwZWNpZXMmJmxbU3ltYm9sLnNwZWNpZXNdPT09bCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGwsU3ltYm9sLnNwZWNpZXMse3ZhbHVlOm51bGwsY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITF9KSxsLnBvb2xTaXplPTgxOTIsbC5mcm9tPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbihlLHQscil9LGwucHJvdG90eXBlLl9fcHJvdG9fXz1VaW50OEFycmF5LnByb3RvdHlwZSxsLl9fcHJvdG9fXz1VaW50OEFycmF5LGwuYWxsb2M9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBzPXQsaT1yLHAobz1lKSxvPD0wP2Eobyk6dm9pZCAwIT09cz9cInN0cmluZ1wiPT10eXBlb2YgaT9hKG8pLmZpbGwocyxpKTphKG8pLmZpbGwocyk6YShvKTt2YXIgbyxzLGl9LGwuYWxsb2NVbnNhZmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGcoZSl9LGwuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKGUpe3JldHVybiBnKGUpfSxsLmlzQnVmZmVyPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lJiYhMD09PWUuX2lzQnVmZmVyJiZlIT09bC5wcm90b3R5cGV9LGwuY29tcGFyZT1mdW5jdGlvbihlLHQpe2lmKGsoZSxVaW50OEFycmF5KSYmKGU9bC5mcm9tKGUsZS5vZmZzZXQsZS5ieXRlTGVuZ3RoKSksayh0LFVpbnQ4QXJyYXkpJiYodD1sLmZyb20odCx0Lm9mZnNldCx0LmJ5dGVMZW5ndGgpKSwhbC5pc0J1ZmZlcihlKXx8IWwuaXNCdWZmZXIodCkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheScpO2lmKGU9PT10KXJldHVybiAwO2Zvcih2YXIgcj1lLmxlbmd0aCxvPXQubGVuZ3RoLHM9MCxpPU1hdGgubWluKHIsbyk7czxpOysrcylpZihlW3NdIT09dFtzXSl7cj1lW3NdLG89dFtzXTticmVha31yZXR1cm4gcjxvPy0xOm88cj8xOjB9LGwuaXNFbmNvZGluZz1mdW5jdGlvbihlKXtzd2l0Y2goU3RyaW5nKGUpLnRvTG93ZXJDYXNlKCkpe2Nhc2VcImhleFwiOmNhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6Y2FzZVwiYmFzZTY0XCI6Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LGwuY29uY2F0PWZ1bmN0aW9uKGUsdCl7aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7aWYoMD09PWUubGVuZ3RoKXJldHVybiBsLmFsbG9jKDApO3ZhciByO2lmKHZvaWQgMD09PXQpZm9yKHI9dD0wO3I8ZS5sZW5ndGg7KytyKXQrPWVbcl0ubGVuZ3RoO3ZhciBvPWwuYWxsb2NVbnNhZmUodCkscz0wO2ZvcihyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBpPWVbcl07aWYoayhpLFVpbnQ4QXJyYXkpJiYoaT1sLmZyb20oaSkpLCFsLmlzQnVmZmVyKGkpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2kuY29weShvLHMpLHMrPWkubGVuZ3RofXJldHVybiBvfSxsLmJ5dGVMZW5ndGg9YyxsLnByb3RvdHlwZS5faXNCdWZmZXI9ITAsbC5wcm90b3R5cGUuc3dhcDE2PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSUyIT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHNcIik7Zm9yKHZhciB0PTA7dDxlO3QrPTIpZCh0aGlzLHQsdCsxKTtyZXR1cm4gdGhpc30sbC5wcm90b3R5cGUuc3dhcDMyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7aWYoZSU0IT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHNcIik7Zm9yKHZhciB0PTA7dDxlO3QrPTQpZCh0aGlzLHQsdCszKSxkKHRoaXMsdCsxLHQrMik7cmV0dXJuIHRoaXN9LGwucHJvdG90eXBlLnN3YXA2ND1mdW5jdGlvbigpe3ZhciBlPXRoaXMubGVuZ3RoO2lmKGUlOCE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzXCIpO2Zvcih2YXIgdD0wO3Q8ZTt0Kz04KWQodGhpcyx0LHQrNyksZCh0aGlzLHQrMSx0KzYpLGQodGhpcyx0KzIsdCs1KSxkKHRoaXMsdCszLHQrNCk7cmV0dXJuIHRoaXN9LGwucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nPWwucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5sZW5ndGg7cmV0dXJuIDA9PT1lP1wiXCI6MD09PWFyZ3VtZW50cy5sZW5ndGg/Yih0aGlzLDAsZSk6ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPSExO2lmKCh2b2lkIDA9PT10fHx0PDApJiYodD0wKSx0PnRoaXMubGVuZ3RoKXJldHVyblwiXCI7aWYoKHZvaWQgMD09PXJ8fHI+dGhpcy5sZW5ndGgpJiYocj10aGlzLmxlbmd0aCkscjw9MClyZXR1cm5cIlwiO2lmKChyPj4+PTApPD0odD4+Pj0wKSlyZXR1cm5cIlwiO2ZvcihlfHwoZT1cInV0ZjhcIik7Oylzd2l0Y2goZSl7Y2FzZVwiaGV4XCI6cmV0dXJuIHYodGhpcyx0LHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBiKHRoaXMsdCxyKTtjYXNlXCJhc2NpaVwiOnJldHVybiBFKHRoaXMsdCxyKTtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gVCh0aGlzLHQscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIE0odGhpcyx0LHIpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBfKHRoaXMsdCxyKTtkZWZhdWx0OmlmKG8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2UpO2U9KGUrXCJcIikudG9Mb3dlckNhc2UoKSxvPSEwfX0uYXBwbHkodGhpcyxhcmd1bWVudHMpfSxsLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24oZSl7aWYoIWwuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXJcIik7cmV0dXJuIHRoaXM9PT1lfHwwPT09bC5jb21wYXJlKHRoaXMsZSl9LGwucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24oKXt2YXIgZT1cIlwiLHQ9ci5JTlNQRUNUX01BWF9CWVRFUztyZXR1cm4gZT10aGlzLnRvU3RyaW5nKFwiaGV4XCIsMCx0KS5yZXBsYWNlKC8oLnsyfSkvZyxcIiQxIFwiKS50cmltKCksdGhpcy5sZW5ndGg+dCYmKGUrPVwiIC4uLiBcIiksXCI8QnVmZmVyIFwiK2UrXCI+XCJ9LGwucHJvdG90eXBlLmNvbXBhcmU9ZnVuY3Rpb24oZSx0LHIsbyxzKXtpZihrKGUsVWludDhBcnJheSkmJihlPWwuZnJvbShlLGUub2Zmc2V0LGUuYnl0ZUxlbmd0aCkpLCFsLmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSk7aWYodm9pZCAwPT09dCYmKHQ9MCksdm9pZCAwPT09ciYmKHI9ZT9lLmxlbmd0aDowKSx2b2lkIDA9PT1vJiYobz0wKSx2b2lkIDA9PT1zJiYocz10aGlzLmxlbmd0aCksdDwwfHxyPmUubGVuZ3RofHxvPDB8fHM+dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvdXQgb2YgcmFuZ2UgaW5kZXhcIik7aWYoczw9byYmcjw9dClyZXR1cm4gMDtpZihzPD1vKXJldHVybi0xO2lmKHI8PXQpcmV0dXJuIDE7aWYodGhpcz09PWUpcmV0dXJuIDA7Zm9yKHZhciBpPShzPj4+PTApLShvPj4+PTApLGE9KHI+Pj49MCktKHQ+Pj49MCksbj1NYXRoLm1pbihpLGEpLHA9dGhpcy5zbGljZShvLHMpLGc9ZS5zbGljZSh0LHIpLHU9MDt1PG47Kyt1KWlmKHBbdV0hPT1nW3VdKXtpPXBbdV0sYT1nW3VdO2JyZWFrfXJldHVybiBpPGE/LTE6YTxpPzE6MH0sbC5wcm90b3R5cGUuaW5jbHVkZXM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybi0xIT09dGhpcy5pbmRleE9mKGUsdCxyKX0sbC5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihlLHQscil7cmV0dXJuIGYodGhpcyxlLHQsciwhMCl9LGwucHJvdG90eXBlLmxhc3RJbmRleE9mPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZih0aGlzLGUsdCxyLCExKX0sbC5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24oZSx0LHIsbyl7aWYodm9pZCAwPT09dClvPVwidXRmOFwiLHI9dGhpcy5sZW5ndGgsdD0wO2Vsc2UgaWYodm9pZCAwPT09ciYmXCJzdHJpbmdcIj09dHlwZW9mIHQpbz10LHI9dGhpcy5sZW5ndGgsdD0wO2Vsc2V7aWYoIWlzRmluaXRlKHQpKXRocm93IG5ldyBFcnJvcihcIkJ1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkXCIpO3Q+Pj49MCxpc0Zpbml0ZShyKT8ocj4+Pj0wLHZvaWQgMD09PW8mJihvPVwidXRmOFwiKSk6KG89cixyPXZvaWQgMCl9dmFyIHM9dGhpcy5sZW5ndGgtdDtpZigodm9pZCAwPT09cnx8czxyKSYmKHI9cyksMDxlLmxlbmd0aCYmKHI8MHx8dDwwKXx8dD50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkF0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzXCIpO298fChvPVwidXRmOFwiKTtmb3IodmFyIGksYSxuLHAsZyx1LGwsbSxjLGQ9ITE7Oylzd2l0Y2gobyl7Y2FzZVwiaGV4XCI6cmV0dXJuIHkodGhpcyxlLHQscik7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIG09dCxjPXIsQShDKGUsKGw9dGhpcykubGVuZ3RoLW0pLGwsbSxjKTtjYXNlXCJhc2NpaVwiOnJldHVybiBSKHRoaXMsZSx0LHIpO2Nhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiBSKHRoaXMsZSx0LHIpO2Nhc2VcImJhc2U2NFwiOnJldHVybiBwPXRoaXMsZz10LHU9cixBKE4oZSkscCxnLHUpO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBhPXQsbj1yLEEoZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsbyxzLGk9W10sYT0wO2E8ZS5sZW5ndGgmJiEoKHQtPTIpPDApOysrYSlyPWUuY2hhckNvZGVBdChhKSxvPXI+Pjgscz1yJTI1NixpLnB1c2gocyksaS5wdXNoKG8pO3JldHVybiBpfShlLChpPXRoaXMpLmxlbmd0aC1hKSxpLGEsbik7ZGVmYXVsdDppZihkKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitvKTtvPShcIlwiK28pLnRvTG93ZXJDYXNlKCksZD0hMH19LGwucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybnt0eXBlOlwiQnVmZmVyXCIsZGF0YTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnJ8fHRoaXMsMCl9fTt2YXIgUz00MDk2O2Z1bmN0aW9uIEUoZSx0LHIpe3ZhciBvPVwiXCI7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIHM9dDtzPHI7KytzKW8rPVN0cmluZy5mcm9tQ2hhckNvZGUoMTI3JmVbc10pO3JldHVybiBvfWZ1bmN0aW9uIFQoZSx0LHIpe3ZhciBvPVwiXCI7cj1NYXRoLm1pbihlLmxlbmd0aCxyKTtmb3IodmFyIHM9dDtzPHI7KytzKW8rPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtzXSk7cmV0dXJuIG99ZnVuY3Rpb24gdihlLHQscil7dmFyIG89ZS5sZW5ndGg7KCF0fHx0PDApJiYodD0wKSwoIXJ8fHI8MHx8bzxyKSYmKHI9byk7Zm9yKHZhciBzPVwiXCIsaT10O2k8cjsrK2kpcys9VyhlW2ldKTtyZXR1cm4gc31mdW5jdGlvbiBfKGUsdCxyKXtmb3IodmFyIG89ZS5zbGljZSh0LHIpLHM9XCJcIixpPTA7aTxvLmxlbmd0aDtpKz0yKXMrPVN0cmluZy5mcm9tQ2hhckNvZGUob1tpXSsyNTYqb1tpKzFdKTtyZXR1cm4gc31mdW5jdGlvbiBJKGUsdCxyKXtpZihlJTEhPTB8fGU8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm9mZnNldCBpcyBub3QgdWludFwiKTtpZihyPGUrdCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGhcIil9ZnVuY3Rpb24gRihlLHQscixvLHMsaSl7aWYoIWwuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7aWYoczx0fHx0PGkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7aWYocitvPmUubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWZ1bmN0aW9uIEIoZSx0LHIsbyxzLGkpe2lmKHIrbz5lLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZihyPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIil9ZnVuY3Rpb24gTyhlLHQscixvLHMpe3JldHVybiB0PSt0LHI+Pj49MCxzfHxCKGUsMCxyLDQpLGkud3JpdGUoZSx0LHIsbywyMyw0KSxyKzR9ZnVuY3Rpb24gRChlLHQscixvLHMpe3JldHVybiB0PSt0LHI+Pj49MCxzfHxCKGUsMCxyLDgpLGkud3JpdGUoZSx0LHIsbyw1Miw4KSxyKzh9bC5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmxlbmd0aDsoZT1+fmUpPDA/KGUrPXIpPDAmJihlPTApOnI8ZSYmKGU9ciksKHQ9dm9pZCAwPT09dD9yOn5+dCk8MD8odCs9cik8MCYmKHQ9MCk6cjx0JiYodD1yKSx0PGUmJih0PWUpO3ZhciBvPXRoaXMuc3ViYXJyYXkoZSx0KTtyZXR1cm4gby5fX3Byb3RvX189bC5wcm90b3R5cGUsb30sbC5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbihlLHQscil7ZT4+Pj0wLHQ+Pj49MCxyfHxJKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBvPXRoaXNbZV0scz0xLGk9MDsrK2k8dCYmKHMqPTI1Nik7KW8rPXRoaXNbZStpXSpzO3JldHVybiBvfSxsLnByb3RvdHlwZS5yZWFkVUludEJFPWZ1bmN0aW9uKGUsdCxyKXtlPj4+PTAsdD4+Pj0wLHJ8fEkoZSx0LHRoaXMubGVuZ3RoKTtmb3IodmFyIG89dGhpc1tlKy0tdF0scz0xOzA8dCYmKHMqPTI1Nik7KW8rPXRoaXNbZSstLXRdKnM7cmV0dXJuIG99LGwucHJvdG90eXBlLnJlYWRVSW50OD1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8SShlLDEsdGhpcy5sZW5ndGgpLHRoaXNbZV19LGwucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8SShlLDIsdGhpcy5sZW5ndGgpLHRoaXNbZV18dGhpc1tlKzFdPDw4fSxsLnByb3RvdHlwZS5yZWFkVUludDE2QkU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSwyLHRoaXMubGVuZ3RoKSx0aGlzW2VdPDw4fHRoaXNbZSsxXX0sbC5wcm90b3R5cGUucmVhZFVJbnQzMkxFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxJKGUsNCx0aGlzLmxlbmd0aCksKHRoaXNbZV18dGhpc1tlKzFdPDw4fHRoaXNbZSsyXTw8MTYpKzE2Nzc3MjE2KnRoaXNbZSszXX0sbC5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxJKGUsNCx0aGlzLmxlbmd0aCksMTY3NzcyMTYqdGhpc1tlXSsodGhpc1tlKzFdPDwxNnx0aGlzW2UrMl08PDh8dGhpc1tlKzNdKX0sbC5wcm90b3R5cGUucmVhZEludExFPWZ1bmN0aW9uKGUsdCxyKXtlPj4+PTAsdD4+Pj0wLHJ8fEkoZSx0LHRoaXMubGVuZ3RoKTtmb3IodmFyIG89dGhpc1tlXSxzPTEsaT0wOysraTx0JiYocyo9MjU2KTspbys9dGhpc1tlK2ldKnM7cmV0dXJuKHMqPTEyOCk8PW8mJihvLT1NYXRoLnBvdygyLDgqdCkpLG99LGwucHJvdG90eXBlLnJlYWRJbnRCRT1mdW5jdGlvbihlLHQscil7ZT4+Pj0wLHQ+Pj49MCxyfHxJKGUsdCx0aGlzLmxlbmd0aCk7Zm9yKHZhciBvPXQscz0xLGk9dGhpc1tlKy0tb107MDxvJiYocyo9MjU2KTspaSs9dGhpc1tlKy0tb10qcztyZXR1cm4ocyo9MTI4KTw9aSYmKGktPU1hdGgucG93KDIsOCp0KSksaX0sbC5wcm90b3R5cGUucmVhZEludDg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSwxLHRoaXMubGVuZ3RoKSwxMjgmdGhpc1tlXT8tMSooMjU1LXRoaXNbZV0rMSk6dGhpc1tlXX0sbC5wcm90b3R5cGUucmVhZEludDE2TEU9ZnVuY3Rpb24oZSx0KXtlPj4+PTAsdHx8SShlLDIsdGhpcy5sZW5ndGgpO3ZhciByPXRoaXNbZV18dGhpc1tlKzFdPDw4O3JldHVybiAzMjc2OCZyPzQyOTQ5MDE3NjB8cjpyfSxsLnByb3RvdHlwZS5yZWFkSW50MTZCRT1mdW5jdGlvbihlLHQpe2U+Pj49MCx0fHxJKGUsMix0aGlzLmxlbmd0aCk7dmFyIHI9dGhpc1tlKzFdfHRoaXNbZV08PDg7cmV0dXJuIDMyNzY4JnI/NDI5NDkwMTc2MHxyOnJ9LGwucHJvdG90eXBlLnJlYWRJbnQzMkxFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU+Pj49MCx0fHxJKGUsNCx0aGlzLmxlbmd0aCksdGhpc1tlXXx0aGlzW2UrMV08PDh8dGhpc1tlKzJdPDwxNnx0aGlzW2UrM108PDI0fSxsLnByb3RvdHlwZS5yZWFkSW50MzJCRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8SShlLDQsdGhpcy5sZW5ndGgpLHRoaXNbZV08PDI0fHRoaXNbZSsxXTw8MTZ8dGhpc1tlKzJdPDw4fHRoaXNbZSszXX0sbC5wcm90b3R5cGUucmVhZEZsb2F0TEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT4+Pj0wLHR8fEkoZSw0LHRoaXMubGVuZ3RoKSxpLnJlYWQodGhpcyxlLCEwLDIzLDQpfSxsLnByb3RvdHlwZS5yZWFkRmxvYXRCRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8SShlLDQsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITEsMjMsNCl9LGwucHJvdG90eXBlLnJlYWREb3VibGVMRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8SShlLDgsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITAsNTIsOCl9LGwucHJvdG90eXBlLnJlYWREb3VibGVCRT1mdW5jdGlvbihlLHQpe3JldHVybiBlPj4+PTAsdHx8SShlLDgsdGhpcy5sZW5ndGgpLGkucmVhZCh0aGlzLGUsITEsNTIsOCl9LGwucHJvdG90eXBlLndyaXRlVUludExFPWZ1bmN0aW9uKGUsdCxyLG8peyhlPStlLHQ+Pj49MCxyPj4+PTAsbyl8fEYodGhpcyxlLHQscixNYXRoLnBvdygyLDgqciktMSwwKTt2YXIgcz0xLGk9MDtmb3IodGhpc1t0XT0yNTUmZTsrK2k8ciYmKHMqPTI1Nik7KXRoaXNbdCtpXT1lL3MmMjU1O3JldHVybiB0K3J9LGwucHJvdG90eXBlLndyaXRlVUludEJFPWZ1bmN0aW9uKGUsdCxyLG8peyhlPStlLHQ+Pj49MCxyPj4+PTAsbyl8fEYodGhpcyxlLHQscixNYXRoLnBvdygyLDgqciktMSwwKTt2YXIgcz1yLTEsaT0xO2Zvcih0aGlzW3Qrc109MjU1JmU7MDw9LS1zJiYoaSo9MjU2KTspdGhpc1t0K3NdPWUvaSYyNTU7cmV0dXJuIHQrcn0sbC5wcm90b3R5cGUud3JpdGVVSW50OD1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fEYodGhpcyxlLHQsMSwyNTUsMCksdGhpc1t0XT0yNTUmZSx0KzF9LGwucHJvdG90eXBlLndyaXRlVUludDE2TEU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxGKHRoaXMsZSx0LDIsNjU1MzUsMCksdGhpc1t0XT0yNTUmZSx0aGlzW3QrMV09ZT4+PjgsdCsyfSxsLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0Pj4+PTAscnx8Rih0aGlzLGUsdCwyLDY1NTM1LDApLHRoaXNbdF09ZT4+PjgsdGhpc1t0KzFdPTI1NSZlLHQrMn0sbC5wcm90b3R5cGUud3JpdGVVSW50MzJMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fEYodGhpcyxlLHQsNCw0Mjk0OTY3Mjk1LDApLHRoaXNbdCszXT1lPj4+MjQsdGhpc1t0KzJdPWU+Pj4xNix0aGlzW3QrMV09ZT4+PjgsdGhpc1t0XT0yNTUmZSx0KzR9LGwucHJvdG90eXBlLndyaXRlVUludDMyQkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxGKHRoaXMsZSx0LDQsNDI5NDk2NzI5NSwwKSx0aGlzW3RdPWU+Pj4yNCx0aGlzW3QrMV09ZT4+PjE2LHRoaXNbdCsyXT1lPj4+OCx0aGlzW3QrM109MjU1JmUsdCs0fSxsLnByb3RvdHlwZS53cml0ZUludExFPWZ1bmN0aW9uKGUsdCxyLG8pe2lmKGU9K2UsdD4+Pj0wLCFvKXt2YXIgcz1NYXRoLnBvdygyLDgqci0xKTtGKHRoaXMsZSx0LHIscy0xLC1zKX12YXIgaT0wLGE9MSxuPTA7Zm9yKHRoaXNbdF09MjU1JmU7KytpPHImJihhKj0yNTYpOyllPDAmJjA9PT1uJiYwIT09dGhpc1t0K2ktMV0mJihuPTEpLHRoaXNbdCtpXT0oZS9hPj4wKS1uJjI1NTtyZXR1cm4gdCtyfSxsLnByb3RvdHlwZS53cml0ZUludEJFPWZ1bmN0aW9uKGUsdCxyLG8pe2lmKGU9K2UsdD4+Pj0wLCFvKXt2YXIgcz1NYXRoLnBvdygyLDgqci0xKTtGKHRoaXMsZSx0LHIscy0xLC1zKX12YXIgaT1yLTEsYT0xLG49MDtmb3IodGhpc1t0K2ldPTI1NSZlOzA8PS0taSYmKGEqPTI1Nik7KWU8MCYmMD09PW4mJjAhPT10aGlzW3QraSsxXSYmKG49MSksdGhpc1t0K2ldPShlL2E+PjApLW4mMjU1O3JldHVybiB0K3J9LGwucHJvdG90eXBlLndyaXRlSW50OD1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fEYodGhpcyxlLHQsMSwxMjcsLTEyOCksZTwwJiYoZT0yNTUrZSsxKSx0aGlzW3RdPTI1NSZlLHQrMX0sbC5wcm90b3R5cGUud3JpdGVJbnQxNkxFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT0rZSx0Pj4+PTAscnx8Rih0aGlzLGUsdCwyLDMyNzY3LC0zMjc2OCksdGhpc1t0XT0yNTUmZSx0aGlzW3QrMV09ZT4+PjgsdCsyfSxsLnByb3RvdHlwZS53cml0ZUludDE2QkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxGKHRoaXMsZSx0LDIsMzI3NjcsLTMyNzY4KSx0aGlzW3RdPWU+Pj44LHRoaXNbdCsxXT0yNTUmZSx0KzJ9LGwucHJvdG90eXBlLndyaXRlSW50MzJMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9K2UsdD4+Pj0wLHJ8fEYodGhpcyxlLHQsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSx0aGlzW3RdPTI1NSZlLHRoaXNbdCsxXT1lPj4+OCx0aGlzW3QrMl09ZT4+PjE2LHRoaXNbdCszXT1lPj4+MjQsdCs0fSxsLnByb3RvdHlwZS53cml0ZUludDMyQkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPStlLHQ+Pj49MCxyfHxGKHRoaXMsZSx0LDQsMjE0NzQ4MzY0NywtMjE0NzQ4MzY0OCksZTwwJiYoZT00Mjk0OTY3Mjk1K2UrMSksdGhpc1t0XT1lPj4+MjQsdGhpc1t0KzFdPWU+Pj4xNix0aGlzW3QrMl09ZT4+PjgsdGhpc1t0KzNdPTI1NSZlLHQrNH0sbC5wcm90b3R5cGUud3JpdGVGbG9hdExFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gTyh0aGlzLGUsdCwhMCxyKX0sbC5wcm90b3R5cGUud3JpdGVGbG9hdEJFPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gTyh0aGlzLGUsdCwhMSxyKX0sbC5wcm90b3R5cGUud3JpdGVEb3VibGVMRT1mdW5jdGlvbihlLHQscil7cmV0dXJuIEQodGhpcyxlLHQsITAscil9LGwucHJvdG90eXBlLndyaXRlRG91YmxlQkU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBEKHRoaXMsZSx0LCExLHIpfSxsLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGUsdCxyLG8pe2lmKCFsLmlzQnVmZmVyKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXJcIik7aWYocnx8KHI9MCksb3x8MD09PW98fChvPXRoaXMubGVuZ3RoKSx0Pj1lLmxlbmd0aCYmKHQ9ZS5sZW5ndGgpLHR8fCh0PTApLDA8byYmbzxyJiYobz1yKSxvPT09cilyZXR1cm4gMDtpZigwPT09ZS5sZW5ndGh8fDA9PT10aGlzLmxlbmd0aClyZXR1cm4gMDtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJ0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzXCIpO2lmKHI8MHx8cj49dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIik7aWYobzwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwic291cmNlRW5kIG91dCBvZiBib3VuZHNcIik7bz50aGlzLmxlbmd0aCYmKG89dGhpcy5sZW5ndGgpLGUubGVuZ3RoLXQ8by1yJiYobz1lLmxlbmd0aC10K3IpO3ZhciBzPW8tcjtpZih0aGlzPT09ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbil0aGlzLmNvcHlXaXRoaW4odCxyLG8pO2Vsc2UgaWYodGhpcz09PWUmJnI8dCYmdDxvKWZvcih2YXIgaT1zLTE7MDw9aTstLWkpZVtpK3RdPXRoaXNbaStyXTtlbHNlIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKGUsdGhpcy5zdWJhcnJheShyLG8pLHQpO3JldHVybiBzfSxsLnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKGUsdCxyLG8pe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgdD8obz10LHQ9MCxyPXRoaXMubGVuZ3RoKTpcInN0cmluZ1wiPT10eXBlb2YgciYmKG89cixyPXRoaXMubGVuZ3RoKSx2b2lkIDAhPT1vJiZcInN0cmluZ1wiIT10eXBlb2Ygbyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgbyYmIWwuaXNFbmNvZGluZyhvKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrbyk7aWYoMT09PWUubGVuZ3RoKXt2YXIgcz1lLmNoYXJDb2RlQXQoMCk7KFwidXRmOFwiPT09byYmczwxMjh8fFwibGF0aW4xXCI9PT1vKSYmKGU9cyl9fWVsc2VcIm51bWJlclwiPT10eXBlb2YgZSYmKGUmPTI1NSk7aWYodDwwfHx0aGlzLmxlbmd0aDx0fHx0aGlzLmxlbmd0aDxyKXRocm93IG5ldyBSYW5nZUVycm9yKFwiT3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKHI8PXQpcmV0dXJuIHRoaXM7dmFyIGk7aWYodD4+Pj0wLHI9dm9pZCAwPT09cj90aGlzLmxlbmd0aDpyPj4+MCxlfHwoZT0wKSxcIm51bWJlclwiPT10eXBlb2YgZSlmb3IoaT10O2k8cjsrK2kpdGhpc1tpXT1lO2Vsc2V7dmFyIGE9bC5pc0J1ZmZlcihlKT9lOmwuZnJvbShlLG8pLG49YS5sZW5ndGg7aWYoMD09PW4pdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJytlKydcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKTtmb3IoaT0wO2k8ci10OysraSl0aGlzW2krdF09YVtpJW5dfXJldHVybiB0aGlzfTt2YXIgdz0vW14rLzAtOUEtWmEtei1fXS9nO2Z1bmN0aW9uIFcoZSl7cmV0dXJuIGU8MTY/XCIwXCIrZS50b1N0cmluZygxNik6ZS50b1N0cmluZygxNil9ZnVuY3Rpb24gQyhlLHQpe3ZhciByO3Q9dHx8MS8wO2Zvcih2YXIgbz1lLmxlbmd0aCxzPW51bGwsaT1bXSxhPTA7YTxvOysrYSl7aWYoNTUyOTU8KHI9ZS5jaGFyQ29kZUF0KGEpKSYmcjw1NzM0NCl7aWYoIXMpe2lmKDU2MzE5PHIpey0xPCh0LT0zKSYmaS5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1pZihhKzE9PT1vKXstMTwodC09MykmJmkucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9cz1yO2NvbnRpbnVlfWlmKHI8NTYzMjApey0xPCh0LT0zKSYmaS5wdXNoKDIzOSwxOTEsMTg5KSxzPXI7Y29udGludWV9cj02NTUzNisocy01NTI5Njw8MTB8ci01NjMyMCl9ZWxzZSBzJiYtMTwodC09MykmJmkucHVzaCgyMzksMTkxLDE4OSk7aWYocz1udWxsLHI8MTI4KXtpZigodC09MSk8MClicmVhaztpLnB1c2gocil9ZWxzZSBpZihyPDIwNDgpe2lmKCh0LT0yKTwwKWJyZWFrO2kucHVzaChyPj42fDE5Miw2MyZyfDEyOCl9ZWxzZSBpZihyPDY1NTM2KXtpZigodC09Myk8MClicmVhaztpLnB1c2gocj4+MTJ8MjI0LHI+PjYmNjN8MTI4LDYzJnJ8MTI4KX1lbHNle2lmKCEocjwxMTE0MTEyKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnRcIik7aWYoKHQtPTQpPDApYnJlYWs7aS5wdXNoKHI+PjE4fDI0MCxyPj4xMiY2M3wxMjgscj4+NiY2M3wxMjgsNjMmcnwxMjgpfX1yZXR1cm4gaX1mdW5jdGlvbiBOKGUpe3JldHVybiBvLnRvQnl0ZUFycmF5KGZ1bmN0aW9uKGUpe2lmKChlPShlPWUuc3BsaXQoXCI9XCIpWzBdKS50cmltKCkucmVwbGFjZSh3LFwiXCIpKS5sZW5ndGg8MilyZXR1cm5cIlwiO2Zvcig7ZS5sZW5ndGglNCE9MDspZSs9XCI9XCI7cmV0dXJuIGV9KGUpKX1mdW5jdGlvbiBBKGUsdCxyLG8pe2Zvcih2YXIgcz0wO3M8byYmIShzK3I+PXQubGVuZ3RofHxzPj1lLmxlbmd0aCk7KytzKXRbcytyXT1lW3NdO3JldHVybiBzfWZ1bmN0aW9uIGsoZSx0KXtyZXR1cm4gZSBpbnN0YW5jZW9mIHR8fG51bGwhPWUmJm51bGwhPWUuY29uc3RydWN0b3ImJm51bGwhPWUuY29uc3RydWN0b3IubmFtZSYmZS5jb25zdHJ1Y3Rvci5uYW1lPT09dC5uYW1lfWZ1bmN0aW9uIFAoZSl7cmV0dXJuIGUhPWV9fSx7XCJiYXNlNjQtanNcIjoxLGllZWU3NTQ6M31dLDM6W2Z1bmN0aW9uKGUsdCxyKXtyLnJlYWQ9ZnVuY3Rpb24oZSx0LHIsbyxzKXt2YXIgaSxhLG49OCpzLW8tMSxwPSgxPDxuKS0xLGc9cD4+MSx1PS03LGw9cj9zLTE6MCxtPXI/LTE6MSxjPWVbdCtsXTtmb3IobCs9bSxpPWMmKDE8PC11KS0xLGM+Pj0tdSx1Kz1uOzA8dTtpPTI1NippK2VbdCtsXSxsKz1tLHUtPTgpO2ZvcihhPWkmKDE8PC11KS0xLGk+Pj0tdSx1Kz1vOzA8dTthPTI1NiphK2VbdCtsXSxsKz1tLHUtPTgpO2lmKDA9PT1pKWk9MS1nO2Vsc2V7aWYoaT09PXApcmV0dXJuIGE/TmFOOjEvMCooYz8tMToxKTthKz1NYXRoLnBvdygyLG8pLGktPWd9cmV0dXJuKGM/LTE6MSkqYSpNYXRoLnBvdygyLGktbyl9LHIud3JpdGU9ZnVuY3Rpb24oZSx0LHIsbyxzLGkpe3ZhciBhLG4scCxnPTgqaS1zLTEsdT0oMTw8ZyktMSxsPXU+PjEsbT0yMz09PXM/TWF0aC5wb3coMiwtMjQpLU1hdGgucG93KDIsLTc3KTowLGM9bz8wOmktMSxkPW8/MTotMSxmPXQ8MHx8MD09PXQmJjEvdDwwPzE6MDtmb3IodD1NYXRoLmFicyh0KSxpc05hTih0KXx8dD09PTEvMD8obj1pc05hTih0KT8xOjAsYT11KTooYT1NYXRoLmZsb29yKE1hdGgubG9nKHQpL01hdGguTE4yKSx0KihwPU1hdGgucG93KDIsLWEpKTwxJiYoYS0tLHAqPTIpLDI8PSh0Kz0xPD1hK2w/bS9wOm0qTWF0aC5wb3coMiwxLWwpKSpwJiYoYSsrLHAvPTIpLHU8PWErbD8obj0wLGE9dSk6MTw9YStsPyhuPSh0KnAtMSkqTWF0aC5wb3coMixzKSxhKz1sKToobj10Kk1hdGgucG93KDIsbC0xKSpNYXRoLnBvdygyLHMpLGE9MCkpOzg8PXM7ZVtyK2NdPTI1NSZuLGMrPWQsbi89MjU2LHMtPTgpO2ZvcihhPWE8PHN8bixnKz1zOzA8ZztlW3IrY109MjU1JmEsYys9ZCxhLz0yNTYsZy09OCk7ZVtyK2MtZF18PTEyOCpmfX0se31dLDQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbz1lKFwiZ29vZ2xlLXByb3RvYnVmXCIpLHM9byxpPXdpbmRvdztzLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5BdWRpZW5jZVwiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mb1wiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mb1wiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXNcIixudWxsLGkpLHByb3RvLnN0cmVhbS5BdWRpZW5jZT1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5BdWRpZW5jZSxvLk1lc3NhZ2UpLHMuREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5BdWRpZW5jZS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5BdWRpZW5jZVwiKSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkF1ZGllbmNlLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkF1ZGllbmNlLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5BdWRpZW5jZS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXt1c2VyaWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHByb2ZpbGU6dC5nZXRQcm9maWxlX2FzQjY0KCksZW50ZXJ0aW1lOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uQXVkaWVuY2UuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5BdWRpZW5jZTtyZXR1cm4gcHJvdG8uc3RyZWFtLkF1ZGllbmNlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uQXVkaWVuY2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkQnl0ZXMoKTtlLnNldFByb2ZpbGUocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRFbnRlcnRpbWUocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkF1ZGllbmNlLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgby5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5BdWRpZW5jZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5BdWRpZW5jZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwPChyPWUuZ2V0UHJvZmlsZV9hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDIsciksMCE9PShyPWUuZ2V0RW50ZXJ0aW1lKCkpJiZ0LndyaXRlVWludDMyKDMscil9LHByb3RvLnN0cmVhbS5BdWRpZW5jZS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkF1ZGllbmNlLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkF1ZGllbmNlLnByb3RvdHlwZS5nZXRQcm9maWxlPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIlwiKX0scHJvdG8uc3RyZWFtLkF1ZGllbmNlLnByb3RvdHlwZS5nZXRQcm9maWxlX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0UHJvZmlsZSgpKX0scHJvdG8uc3RyZWFtLkF1ZGllbmNlLnByb3RvdHlwZS5nZXRQcm9maWxlX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldFByb2ZpbGUoKSl9LHByb3RvLnN0cmVhbS5BdWRpZW5jZS5wcm90b3R5cGUuc2V0UHJvZmlsZT1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5BdWRpZW5jZS5wcm90b3R5cGUuZ2V0RW50ZXJ0aW1lPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLkF1ZGllbmNlLnByb3RvdHlwZS5zZXRFbnRlcnRpbWU9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm89ZnVuY3Rpb24oZSl7by5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8uZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mb1wiKSxwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mby5yZXBlYXRlZEZpZWxkc189WzhdLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mby5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3Jvb21pZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsXCIwXCIpLHN0YXJ0dHM6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSxkZWxheW1zOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxjYWNoZW1zOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCwwKSxtYXhhdWRpZW5jZXM6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LDApLGN1cmF1ZGllbmNlczpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDYsMCkscGVha2F1ZGllbmNlczpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDcsMCksbGFzdGF1ZGllbmNlc0xpc3Q6by5NZXNzYWdlLnRvT2JqZWN0TGlzdCh0LmdldExhc3RhdWRpZW5jZXNMaXN0KCkscHJvdG8uc3RyZWFtLkF1ZGllbmNlLnRvT2JqZWN0LGUpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBvLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mbztyZXR1cm4gcHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0U3RhcnR0cyhyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldERlbGF5bXMocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRDYWNoZW1zKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFVpbnQzMigpO2Uuc2V0TWF4YXVkaWVuY2VzKHIpO2JyZWFrO2Nhc2UgNjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0Q3VyYXVkaWVuY2VzKHIpO2JyZWFrO2Nhc2UgNzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0UGVha2F1ZGllbmNlcyhyKTticmVhaztjYXNlIDg6cj1uZXcgcHJvdG8uc3RyZWFtLkF1ZGllbmNlO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uQXVkaWVuY2UuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLmFkZExhc3RhdWRpZW5jZXMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEscikscj1lLmdldFN0YXJ0dHMoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKSwwIT09KHI9ZS5nZXREZWxheW1zKCkpJiZ0LndyaXRlVWludDMyKDMsciksMCE9PShyPWUuZ2V0Q2FjaGVtcygpKSYmdC53cml0ZVVpbnQzMig0LHIpLDAhPT0ocj1lLmdldE1heGF1ZGllbmNlcygpKSYmdC53cml0ZVVpbnQzMig1LHIpLDAhPT0ocj1lLmdldEN1cmF1ZGllbmNlcygpKSYmdC53cml0ZVVpbnQzMig2LHIpLDAhPT0ocj1lLmdldFBlYWthdWRpZW5jZXMoKSkmJnQud3JpdGVVaW50MzIoNyxyKSwwPChyPWUuZ2V0TGFzdGF1ZGllbmNlc0xpc3QoKSkubGVuZ3RoJiZ0LndyaXRlUmVwZWF0ZWRNZXNzYWdlKDgscixwcm90by5zdHJlYW0uQXVkaWVuY2Uuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpfSxwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mby5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSxcIjBcIil9LHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucHJvdG90eXBlLmdldFN0YXJ0dHM9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucHJvdG90eXBlLnNldFN0YXJ0dHM9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucHJvdG90eXBlLmdldERlbGF5bXM9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApfSxwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mby5wcm90b3R5cGUuc2V0RGVsYXltcz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mby5wcm90b3R5cGUuZ2V0Q2FjaGVtcz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLnByb3RvdHlwZS5zZXRDYWNoZW1zPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLnByb3RvdHlwZS5nZXRNYXhhdWRpZW5jZXM9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApfSxwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mby5wcm90b3R5cGUuc2V0TWF4YXVkaWVuY2VzPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLnByb3RvdHlwZS5nZXRDdXJhdWRpZW5jZXM9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw2LDApfSxwcm90by5zdHJlYW0uTGl2ZVdhdGNoSW5mby5wcm90b3R5cGUuc2V0Q3VyYXVkaWVuY2VzPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLnByb3RvdHlwZS5nZXRQZWFrYXVkaWVuY2VzPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNywwKX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucHJvdG90eXBlLnNldFBlYWthdWRpZW5jZXM9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNyxlKX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucHJvdG90eXBlLmdldExhc3RhdWRpZW5jZXNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5BdWRpZW5jZSw4KX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucHJvdG90eXBlLnNldExhc3RhdWRpZW5jZXNMaXN0PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDgsZSl9LHByb3RvLnN0cmVhbS5MaXZlV2F0Y2hJbmZvLnByb3RvdHlwZS5hZGRMYXN0YXVkaWVuY2VzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8uTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsOCxlLHByb3RvLnN0cmVhbS5BdWRpZW5jZSx0KX0scHJvdG8uc3RyZWFtLkxpdmVXYXRjaEluZm8ucHJvdG90eXBlLmNsZWFyTGFzdGF1ZGllbmNlc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldExhc3RhdWRpZW5jZXNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zXCIpLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2NhbndhdGNoOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwhMSksbWF4YXVkaWVuY2VzOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxkZWxheW1zOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxjYWNoZW1zOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCwwKSxidWZmZXJieXRlczpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsMCksbGFzdHNpemU6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw2LDApLG5lZWRyZXBsYXk6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw3LCExKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5XYXRjaFBhcmFtcztyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkQm9vbCgpO2Uuc2V0Q2Fud2F0Y2gocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRNYXhhdWRpZW5jZXMocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXREZWxheW1zKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQzMigpO2Uuc2V0Q2FjaGVtcyhyKTticmVhaztjYXNlIDU6cj10LnJlYWRVaW50MzIoKTtlLnNldEJ1ZmZlcmJ5dGVzKHIpO2JyZWFrO2Nhc2UgNjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0TGFzdHNpemUocik7YnJlYWs7Y2FzZSA3OnI9dC5yZWFkQm9vbCgpO2Uuc2V0TmVlZHJlcGxheShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOyhyPWUuZ2V0Q2Fud2F0Y2goKSkmJnQud3JpdGVCb29sKDEsciksMCE9PShyPWUuZ2V0TWF4YXVkaWVuY2VzKCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0RGVsYXltcygpKSYmdC53cml0ZVVpbnQzMigzLHIpLDAhPT0ocj1lLmdldENhY2hlbXMoKSkmJnQud3JpdGVVaW50MzIoNCxyKSwwIT09KHI9ZS5nZXRCdWZmZXJieXRlcygpKSYmdC53cml0ZVVpbnQzMig1LHIpLDAhPT0ocj1lLmdldExhc3RzaXplKCkpJiZ0LndyaXRlVWludDMyKDYsciksKHI9ZS5nZXROZWVkcmVwbGF5KCkpJiZ0LndyaXRlQm9vbCg3LHIpfSxwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMucHJvdG90eXBlLmdldENhbndhdGNoPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwhMSl9LHByb3RvLnN0cmVhbS5XYXRjaFBhcmFtcy5wcm90b3R5cGUuc2V0Q2Fud2F0Y2g9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0Jvb2xlYW5GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5XYXRjaFBhcmFtcy5wcm90b3R5cGUuZ2V0TWF4YXVkaWVuY2VzPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnByb3RvdHlwZS5zZXRNYXhhdWRpZW5jZXM9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnByb3RvdHlwZS5nZXREZWxheW1zPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnByb3RvdHlwZS5zZXREZWxheW1zPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5XYXRjaFBhcmFtcy5wcm90b3R5cGUuZ2V0Q2FjaGVtcz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5XYXRjaFBhcmFtcy5wcm90b3R5cGUuc2V0Q2FjaGVtcz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMucHJvdG90eXBlLmdldEJ1ZmZlcmJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnByb3RvdHlwZS5zZXRCdWZmZXJieXRlcz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMucHJvdG90eXBlLmdldExhc3RzaXplPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnByb3RvdHlwZS5zZXRMYXN0c2l6ZT1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw2LGUpfSxwcm90by5zdHJlYW0uV2F0Y2hQYXJhbXMucHJvdG90eXBlLmdldE5lZWRyZXBsYXk9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LCExKX0scHJvdG8uc3RyZWFtLldhdGNoUGFyYW1zLnByb3RvdHlwZS5zZXROZWVkcmVwbGF5PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNCb29sZWFuRmllbGQodGhpcyw3LGUpfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mbz1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8sby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5XYXRjaEJvb2tJbmZvXCIpLHByb3RvLnN0cmVhbS5XYXRjaEJvb2tJbmZvLnJlcGVhdGVkRmllbGRzXz1bNF0sby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5XYXRjaEJvb2tJbmZvLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8udG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8udG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Ym9va2lkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSxcIlwiKSx0aWNrZXQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiXCIpLHNldGlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxsaXZlc0xpc3Q6by5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodCw0KSx3c3Nwcm94eTpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsXCJcIil9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8uZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5XYXRjaEJvb2tJbmZvO3JldHVybiBwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkU3RyaW5nKCk7ZS5zZXRCb29raWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkU3RyaW5nKCk7ZS5zZXRUaWNrZXQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRTZXRpZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRTdHJpbmcoKTtlLmFkZExpdmVzKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFN0cmluZygpO2Uuc2V0V3NzcHJveHkocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswPChyPWUuZ2V0Qm9va2lkKCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZygxLHIpLDA8KHI9ZS5nZXRUaWNrZXQoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDIsciksMCE9PShyPWUuZ2V0U2V0aWQoKSkmJnQud3JpdGVVaW50MzIoMyxyKSwwPChyPWUuZ2V0TGl2ZXNMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVJlcGVhdGVkU3RyaW5nKDQsciksMDwocj1lLmdldFdzc3Byb3h5KCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZyg1LHIpfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5wcm90b3R5cGUuZ2V0Qm9va2lkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSxcIlwiKX0scHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8ucHJvdG90eXBlLnNldEJvb2tpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5wcm90b3R5cGUuZ2V0VGlja2V0PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIlwiKX0scHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8ucHJvdG90eXBlLnNldFRpY2tldD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5wcm90b3R5cGUuZ2V0U2V0aWQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5wcm90b3R5cGUuc2V0U2V0aWQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLldhdGNoQm9va0luZm8ucHJvdG90eXBlLmdldExpdmVzTGlzdD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDQpfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5wcm90b3R5cGUuc2V0TGl2ZXNMaXN0PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDQsZXx8W10pfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5wcm90b3R5cGUuYWRkTGl2ZXM9ZnVuY3Rpb24oZSx0KXtvLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsNCxlLHQpfSxwcm90by5zdHJlYW0uV2F0Y2hCb29rSW5mby5wcm90b3R5cGUuY2xlYXJMaXZlc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldExpdmVzTGlzdChbXSl9LHByb3RvLnN0cmVhbS5XYXRjaEJvb2tJbmZvLnByb3RvdHlwZS5nZXRXc3Nwcm94eT1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsXCJcIil9LHByb3RvLnN0cmVhbS5XYXRjaEJvb2tJbmZvLnByb3RvdHlwZS5zZXRXc3Nwcm94eT1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcyw1LGUpfSxzLm9iamVjdC5leHRlbmQocixwcm90by5zdHJlYW0pfSx7XCJnb29nbGUtcHJvdG9idWZcIjo4fV0sNTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBvPWUoXCJnb29nbGUtcHJvdG9idWZcIikscz13aW5kb3c7by5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uRXJyb3JDb2RlXCIsbnVsbCxzKSxwcm90by5zdHJlYW0uRXJyb3JDb2RlPXtOT0VSUk9SOjAsT0s6MjAwLEFDQ0VQVEVEOjIwMixOT0NPTlRFTlQ6MjA0LEJBRFJFUVVFU1Q6NDAwLFVOQVVUSE9SSVpFRDo0MDEsU0lHTkFUVVJFRkFJTEVEOjQwMixGT1JCSURERU46NDAzLE5PVEZPVU5EOjQwNCxJTlRFUk5BTFNFUlZFUkVSUk9SOjUwMCxOT1RJTVBMRU1FTlRFRDo1MDEsQkFER0FURVdBWTo1MDIsU0VSVklDRVVOQVZBSUxBQkxFOjUwM30sby5vYmplY3QuZXh0ZW5kKHIscHJvdG8uc3RyZWFtKX0se1wiZ29vZ2xlLXByb3RvYnVmXCI6OH1dLDY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbz1lKFwiLi9zZGtfcGJcIikscz1lKFwiLi9nYXRld2F5X3BiXCIpLGk9ZShcIi4vZXJyb3Jjb2RlX3BiXCIpLGE9ZShcIi4vd2F0Y2hzZGtfcGJcIik7dC5leHBvcnRzPXtEYXRhUHJvdG86byxEYXRhUHJvdG86cyxEYXRhUHJvdG86aSxEYXRhUHJvdG86YX19LHtcIi4vZXJyb3Jjb2RlX3BiXCI6NSxcIi4vZ2F0ZXdheV9wYlwiOjcsXCIuL3Nka19wYlwiOjksXCIuL3dhdGNoc2RrX3BiXCI6MTB9XSw3OltmdW5jdGlvbihlLHQscil7dmFyIHM9ZShcImdvb2dsZS1wcm90b2J1ZlwiKSxvPXMsaT13aW5kb3c7ZShcIi4vZXJyb3Jjb2RlX3BiLmpzXCIpO28uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkJvb2tJbmZvXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5CcmlnYWRlSW5mb1wiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoTm90aWZ5XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSZXFcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ21kSWRcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMlwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ3JlYXRlRmxhZ1wiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJlcVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uRGVzdHJveVJvb21SZXFcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5HZXRSb29tRGV0YWlsUmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5HZXRSb29tRGV0YWlsUnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJlcVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3BcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXFcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3BcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uSGVhcnRiZWF0UnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Kb2luT3Blbk5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uSm9pbk9wZW5SZXFcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkpvaW5PcGVuUnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Kb2luT3Zlck5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uSm9pbk92ZXJSZXFcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkpvaW5PdmVyUnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uSm9pblJvb21Sc3BcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkpvaW5Sb29tVHlwZVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnlcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkpvaW5UZWFtUmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJlcVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uS2lja1BsYXllclJlcVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uS2lja1BsYXllclJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnlcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uTGVhdmVSb29tUmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MZWF2ZVJvb21Sc3BcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkxlYXZlVGVhbU5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uTGVhdmVUZWFtUmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3BcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MZWF2ZVdhdGNoUm9vbVJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uTG9naW5SZXFcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkxvZ2luUnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Mb2dvdXRSc3BcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3BcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLk5vdGljZUpvaW5cIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHlcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlBsYXlSb29tXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Sb29tRGV0YWlsXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Sb29tRmlsdGVyXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Sb29tSW5mb1wiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uUm9vbUluZm9FeFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uUm9vbUxpc3RTb3J0XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Sb29tU3RhdGVcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlJvb21UeXBlXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50Tm90aWZ5XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSZXFcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJzcFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uU29ydE9yZGVyXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlclwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uVGVhbURldGFpbFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uVGVhbURzdFR5cGVcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlRlYW1JbmZvXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXFcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uVGVhbU1hdGNoUnNwXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uVGVhbU1zZ1R5cGVcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlVzZXJWMlwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uVXNlclYyRXhcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLldhdGNoSW5mb1wiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uV2F0Y2hSb29tXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmdcIixudWxsLGkpLG8uZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLmtleVZhbHVlXCIsbnVsbCxpKSxwcm90by5zdHJlYW0uTG9naW5SZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTG9naW5SZXEscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uTG9naW5SZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uTG9naW5SZXFcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Mb2dpblJlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Mb2dpblJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uTG9naW5SZXEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxhcHBrZXk6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiXCIpLGRldmljZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMyxcIlwiKSxzaWduOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCxcIlwiKSxzZGt2ZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LFwiXCIpLHZlbmRvcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDYsMCksdG9rZW46cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw3LFwiXCIpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Mb2dpblJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxvZ2luUmVxO3JldHVybiBwcm90by5zdHJlYW0uTG9naW5SZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Mb2dpblJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRTdHJpbmcoKTtlLnNldEFwcGtleShyKTticmVhaztjYXNlIDM6cj10LnJlYWRTdHJpbmcoKTtlLnNldERldmljZWlkKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFN0cmluZygpO2Uuc2V0U2lnbihyKTticmVhaztjYXNlIDU6cj10LnJlYWRTdHJpbmcoKTtlLnNldFNka3ZlcihyKTticmVhaztjYXNlIDY6cj10LnJlYWRVaW50MzIoKTtlLnNldFZlbmRvcihyKTticmVhaztjYXNlIDc6cj10LnJlYWRTdHJpbmcoKTtlLnNldFRva2VuKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5Mb2dpblJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTG9naW5SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTG9naW5SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEsciksMDwocj1lLmdldEFwcGtleSgpKS5sZW5ndGgmJnQud3JpdGVTdHJpbmcoMixyKSwwPChyPWUuZ2V0RGV2aWNlaWQoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDMsciksMDwocj1lLmdldFNpZ24oKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDQsciksMDwocj1lLmdldFNka3ZlcigpKS5sZW5ndGgmJnQud3JpdGVTdHJpbmcoNSxyKSwwIT09KHI9ZS5nZXRWZW5kb3IoKSkmJnQud3JpdGVVaW50MzIoNixyKSwwPChyPWUuZ2V0VG9rZW4oKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDcscil9LHByb3RvLnN0cmVhbS5Mb2dpblJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkxvZ2luUmVxLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkxvZ2luUmVxLnByb3RvdHlwZS5nZXRBcHBrZXk9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiXCIpfSxwcm90by5zdHJlYW0uTG9naW5SZXEucHJvdG90eXBlLnNldEFwcGtleT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uTG9naW5SZXEucHJvdG90eXBlLmdldERldmljZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMyxcIlwiKX0scHJvdG8uc3RyZWFtLkxvZ2luUmVxLnByb3RvdHlwZS5zZXREZXZpY2VpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uTG9naW5SZXEucHJvdG90eXBlLmdldFNpZ249ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uTG9naW5SZXEucHJvdG90eXBlLnNldFNpZ249ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkxvZ2luUmVxLnByb3RvdHlwZS5nZXRTZGt2ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LFwiXCIpfSxwcm90by5zdHJlYW0uTG9naW5SZXEucHJvdG90eXBlLnNldFNka3Zlcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uTG9naW5SZXEucHJvdG90eXBlLmdldFZlbmRvcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsMCl9LHByb3RvLnN0cmVhbS5Mb2dpblJlcS5wcm90b3R5cGUuc2V0VmVuZG9yPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5Mb2dpblJlcS5wcm90b3R5cGUuZ2V0VG9rZW49ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LFwiXCIpfSxwcm90by5zdHJlYW0uTG9naW5SZXEucHJvdG90eXBlLnNldFRva2VuPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLDcsZSl9LHByb3RvLnN0cmVhbS5Mb2dpblJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Mb2dpblJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Mb2dpblJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Mb2dpblJzcFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkxvZ2luUnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkxvZ2luUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Mb2dpblJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHJvb21pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCIwXCIpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Mb2dpblJzcC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxvZ2luUnNwO3JldHVybiBwcm90by5zdHJlYW0uTG9naW5Sc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Mb2dpblJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkxvZ2luUnNwLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Mb2dpblJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Mb2dpblJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpfSxwcm90by5zdHJlYW0uTG9naW5Sc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5Mb2dpblJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTG9naW5Sc3AucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uTG9naW5Sc3AucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0UmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5IZWFydGJlYXRSZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uSGVhcnRiZWF0UmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uSGVhcnRiZWF0UmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0UmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2dhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIil9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0UmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5IZWFydGJlYXRSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0UmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXRSZXEucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0UmVxLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5IZWFydGJlYXRSc3Ascy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uSGVhcnRiZWF0UnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJzcFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5IZWFydGJlYXRSc3AudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGdzZXhpc3Q6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5IZWFydGJlYXRSc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5IZWFydGJlYXRSc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5IZWFydGJlYXRSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXRSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkSW50MzIoKTtlLnNldEdzZXhpc3Qocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uSGVhcnRiZWF0UnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRHc2V4aXN0KCkpJiZ0LndyaXRlSW50MzIoMixyKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJzcC5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFJzcC5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXRSc3AucHJvdG90eXBlLmdldEdzZXhpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0UnNwLnByb3RvdHlwZS5zZXRHc2V4aXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSZXEscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uRGlzY29ubmVjdFJlcS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uRGlzY29ubmVjdFJlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3VzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksZ2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLFwiMFwiKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uRGlzY29ubmVjdFJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSZXE7cmV0dXJuIHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uRGlzY29ubmVjdFJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uRGlzY29ubmVjdFJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uRGlzY29ubmVjdFJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigyLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMyxyKX0scHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSZXEucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSZXEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UmVxLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSZXEucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCIwXCIpfSxwcm90by5zdHJlYW0uRGlzY29ubmVjdFJlcS5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSc3Ascy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uRGlzY29ubmVjdFJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uRGlzY29ubmVjdFJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwO3JldHVybiBwcm90by5zdHJlYW0uRGlzY29ubmVjdFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkRpc2Nvbm5lY3RSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEscil9LHByb3RvLnN0cmVhbS5EaXNjb25uZWN0UnNwLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uRGlzY29ubmVjdFJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTG9nb3V0UnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkxvZ291dFJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Mb2dvdXRSc3AuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uTG9nb3V0UnNwXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTG9nb3V0UnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkxvZ291dFJzcC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uTG9nb3V0UnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxvZ291dFJzcC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxvZ291dFJzcDtyZXR1cm4gcHJvdG8uc3RyZWFtLkxvZ291dFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxvZ291dFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkxvZ291dFJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTG9nb3V0UnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkxvZ291dFJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKX0scHJvdG8uc3RyZWFtLkxvZ291dFJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkxvZ291dFJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJlcVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXt1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRpbWVvdXQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZEludDMyKCk7ZS5zZXRUaW1lb3V0KHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDEsciksMCE9PShyPWUuZ2V0VGltZW91dCgpKSYmdC53cml0ZUludDMyKDIscil9LHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxLnByb3RvdHlwZS5nZXRVc2VyaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJlcS5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxLnByb3RvdHlwZS5nZXRUaW1lb3V0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSZXEucHJvdG90eXBlLnNldFRpbWVvdXQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSc3A9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSc3BcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSc3AudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSc3AudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3RhdHVzOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJzcC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uU2V0UmVjb25uZWN0VGltZW91dFJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKX0scHJvdG8uc3RyZWFtLlNldFJlY29ubmVjdFRpbWVvdXRSc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5TZXRSZWNvbm5lY3RUaW1lb3V0UnNwLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5rZXlWYWx1ZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5rZXlWYWx1ZSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5rZXlWYWx1ZS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5rZXlWYWx1ZVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLmtleVZhbHVlLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLmtleVZhbHVlLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5rZXlWYWx1ZS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtrZXk6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiXCIpLHZhbHVlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIlwiKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0ua2V5VmFsdWUuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5rZXlWYWx1ZTtyZXR1cm4gcHJvdG8uc3RyZWFtLmtleVZhbHVlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0ua2V5VmFsdWUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkU3RyaW5nKCk7ZS5zZXRLZXkocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkU3RyaW5nKCk7ZS5zZXRWYWx1ZShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0ua2V5VmFsdWUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLmtleVZhbHVlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLmtleVZhbHVlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzA8KHI9ZS5nZXRLZXkoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDEsciksMDwocj1lLmdldFZhbHVlKCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZygyLHIpfSxwcm90by5zdHJlYW0ua2V5VmFsdWUucHJvdG90eXBlLmdldEtleT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCJcIil9LHByb3RvLnN0cmVhbS5rZXlWYWx1ZS5wcm90b3R5cGUuc2V0S2V5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5rZXlWYWx1ZS5wcm90b3R5cGUuZ2V0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiXCIpfSxwcm90by5zdHJlYW0ua2V5VmFsdWUucHJvdG90eXBlLnNldFZhbHVlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uSm9pblJvb21SZXEucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcVwiKSxwcm90by5zdHJlYW0uSm9pblJvb21SZXEucmVwZWF0ZWRGaWVsZHNfPVs1XSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByLG89e2pvaW50eXBlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxwbGF5ZXJpbmZvOihyPXQuZ2V0UGxheWVyaW5mbygpKSYmcHJvdG8uc3RyZWFtLlBsYXllckluZm8udG9PYmplY3QoZSxyKSxnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLHJvb21pbmZvOihyPXQuZ2V0Um9vbWluZm8oKSkmJnByb3RvLnN0cmVhbS5Sb29tSW5mby50b09iamVjdChlLHIpLHRhZ3NMaXN0OnMuTWVzc2FnZS50b09iamVjdExpc3QodC5nZXRUYWdzTGlzdCgpLHByb3RvLnN0cmVhbS5rZXlWYWx1ZS50b09iamVjdCxlKSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpLHdhdGNoc2V0dGluZzoocj10LmdldFdhdGNoc2V0dGluZygpKSYmcHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy50b09iamVjdChlLHIpfTtyZXR1cm4gZSYmKG8uJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCksb30pLHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxO3JldHVybiBwcm90by5zdHJlYW0uSm9pblJvb21SZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRKb2ludHlwZShyKTticmVhaztjYXNlIDI6cj1uZXcgcHJvdG8uc3RyZWFtLlBsYXllckluZm87dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRQbGF5ZXJpbmZvKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgNDpyPW5ldyBwcm90by5zdHJlYW0uUm9vbUluZm87dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5Sb29tSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0Um9vbWluZm8ocik7YnJlYWs7Y2FzZSA1OnI9bmV3IHByb3RvLnN0cmVhbS5rZXlWYWx1ZTt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLmtleVZhbHVlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5hZGRUYWdzKHIpO2JyZWFrO2Nhc2UgNjpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRDcHByb3RvKHIpO2JyZWFrO2Nhc2UgNzpyPW5ldyBwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRXYXRjaHNldHRpbmcocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRKb2ludHlwZSgpKSYmdC53cml0ZUVudW0oMSxyKSxudWxsIT0ocj1lLmdldFBsYXllcmluZm8oKSkmJnQud3JpdGVNZXNzYWdlKDIscixwcm90by5zdHJlYW0uUGxheWVySW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciksMCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDMsciksbnVsbCE9KHI9ZS5nZXRSb29taW5mbygpKSYmdC53cml0ZU1lc3NhZ2UoNCxyLHByb3RvLnN0cmVhbS5Sb29tSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciksMDwocj1lLmdldFRhZ3NMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVJlcGVhdGVkTWVzc2FnZSg1LHIscHJvdG8uc3RyZWFtLmtleVZhbHVlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDYsciksbnVsbCE9KHI9ZS5nZXRXYXRjaHNldHRpbmcoKSkmJnQud3JpdGVNZXNzYWdlKDcscixwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5nZXRKb2ludHlwZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5wcm90b3R5cGUuc2V0Sm9pbnR5cGU9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5wcm90b3R5cGUuZ2V0UGxheWVyaW5mbz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlBsYXllckluZm8sMil9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5wcm90b3R5cGUuc2V0UGxheWVyaW5mbz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5jbGVhclBsYXllcmluZm89ZnVuY3Rpb24oKXt0aGlzLnNldFBsYXllcmluZm8odm9pZCAwKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5oYXNQbGF5ZXJpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDIpfSxwcm90by5zdHJlYW0uSm9pblJvb21SZXEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5wcm90b3R5cGUuZ2V0Um9vbWluZm89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5Sb29tSW5mbyw0KX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5zZXRSb29taW5mbz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5jbGVhclJvb21pbmZvPWZ1bmN0aW9uKCl7dGhpcy5zZXRSb29taW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uSm9pblJvb21SZXEucHJvdG90eXBlLmhhc1Jvb21pbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDQpfSxwcm90by5zdHJlYW0uSm9pblJvb21SZXEucHJvdG90eXBlLmdldFRhZ3NMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5rZXlWYWx1ZSw1KX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5zZXRUYWdzTGlzdD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uSm9pblJvb21SZXEucHJvdG90eXBlLmFkZFRhZ3M9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyw1LGUscHJvdG8uc3RyZWFtLmtleVZhbHVlLHQpfSxwcm90by5zdHJlYW0uSm9pblJvb21SZXEucHJvdG90eXBlLmNsZWFyVGFnc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldFRhZ3NMaXN0KFtdKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNixcIlwiKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5wcm90b3R5cGUuZ2V0V2F0Y2hzZXR0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLDcpfSxwcm90by5zdHJlYW0uSm9pblJvb21SZXEucHJvdG90eXBlLnNldFdhdGNoc2V0dGluZz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsNyxlKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUmVxLnByb3RvdHlwZS5jbGVhcldhdGNoc2V0dGluZz1mdW5jdGlvbigpe3RoaXMuc2V0V2F0Y2hzZXR0aW5nKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJlcS5wcm90b3R5cGUuaGFzV2F0Y2hzZXR0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDcpfSxwcm90by5zdHJlYW0uSm9pblJvb21Sc3A9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnJlcGVhdGVkRmllbGRzXyxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uSm9pblJvb21Sc3Ascy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uSm9pblJvb21Sc3AuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uSm9pblJvb21Sc3BcIikscHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnJlcGVhdGVkRmllbGRzXz1bMl0scy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uSm9pblJvb21Sc3AudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcixvPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHVzZXJzTGlzdDpzLk1lc3NhZ2UudG9PYmplY3RMaXN0KHQuZ2V0VXNlcnNMaXN0KCkscHJvdG8uc3RyZWFtLlBsYXllckluZm8udG9PYmplY3QsZSkscm9vbWluZm86KHI9dC5nZXRSb29taW5mbygpKSYmcHJvdG8uc3RyZWFtLlJvb21JbmZvLnRvT2JqZWN0KGUsciksYm9va2luZm86KHI9dC5nZXRCb29raW5mbygpKSYmcHJvdG8uc3RyZWFtLkJvb2tJbmZvLnRvT2JqZWN0KGUsciksY3Bwcm90bzp0LmdldENwcHJvdG9fYXNCNjQoKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uSm9pblJvb21Sc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcDtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uSm9pblJvb21Sc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPW5ldyBwcm90by5zdHJlYW0uUGxheWVySW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLmFkZFVzZXJzKHIpO2JyZWFrO2Nhc2UgMzpyPW5ldyBwcm90by5zdHJlYW0uUm9vbUluZm87dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5Sb29tSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0Um9vbWluZm8ocik7YnJlYWs7Y2FzZSA0OnI9bmV3IHByb3RvLnN0cmVhbS5Cb29rSW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLkJvb2tJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRCb29raW5mbyhyKTticmVhaztjYXNlIDU6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSm9pblJvb21Sc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKSwwPChyPWUuZ2V0VXNlcnNMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVJlcGVhdGVkTWVzc2FnZSgyLHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLG51bGwhPShyPWUuZ2V0Um9vbWluZm8oKSkmJnQud3JpdGVNZXNzYWdlKDMscixwcm90by5zdHJlYW0uUm9vbUluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLG51bGwhPShyPWUuZ2V0Qm9va2luZm8oKSkmJnQud3JpdGVNZXNzYWdlKDQscixwcm90by5zdHJlYW0uQm9va0luZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLDA8KHI9ZS5nZXRDcHByb3RvX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoNSxyKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uSm9pblJvb21Sc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnByb3RvdHlwZS5nZXRVc2Vyc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlBsYXllckluZm8sMil9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC5wcm90b3R5cGUuc2V0VXNlcnNMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC5wcm90b3R5cGUuYWRkVXNlcnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywyLGUscHJvdG8uc3RyZWFtLlBsYXllckluZm8sdCl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC5wcm90b3R5cGUuY2xlYXJVc2Vyc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldFVzZXJzTGlzdChbXSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC5wcm90b3R5cGUuZ2V0Um9vbWluZm89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5Sb29tSW5mbywzKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnByb3RvdHlwZS5zZXRSb29taW5mbz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnByb3RvdHlwZS5jbGVhclJvb21pbmZvPWZ1bmN0aW9uKCl7dGhpcy5zZXRSb29taW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uSm9pblJvb21Sc3AucHJvdG90eXBlLmhhc1Jvb21pbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDMpfSxwcm90by5zdHJlYW0uSm9pblJvb21Sc3AucHJvdG90eXBlLmdldEJvb2tpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uQm9va0luZm8sNCl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC5wcm90b3R5cGUuc2V0Qm9va2luZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC5wcm90b3R5cGUuY2xlYXJCb29raW5mbz1mdW5jdGlvbigpe3RoaXMuc2V0Qm9va2luZm8odm9pZCAwKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnByb3RvdHlwZS5oYXNCb29raW5mbz1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcyw0KX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSxcIlwiKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkpvaW5Sb29tUnNwLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVJzcC5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlBsYXllckluZm8scy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uUGxheWVySW5mby5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uUGxheWVySW5mby5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3VzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksdXNlcnByb2ZpbGU6dC5nZXRVc2VycHJvZmlsZV9hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uUGxheWVySW5mbztyZXR1cm4gcHJvdG8uc3RyZWFtLlBsYXllckluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRVc2VycHJvZmlsZShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uUGxheWVySW5mby5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uUGxheWVySW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDA8KHI9ZS5nZXRVc2VycHJvZmlsZV9hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDIscil9LHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnByb3RvdHlwZS5nZXRVc2VyaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uUGxheWVySW5mby5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnByb3RvdHlwZS5nZXRVc2VycHJvZmlsZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCJcIil9LHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnByb3RvdHlwZS5nZXRVc2VycHJvZmlsZV9hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldFVzZXJwcm9maWxlKCkpfSxwcm90by5zdHJlYW0uUGxheWVySW5mby5wcm90b3R5cGUuZ2V0VXNlcnByb2ZpbGVfYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0VXNlcnByb2ZpbGUoKSl9LHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnByb3RvdHlwZS5zZXRVc2VycHJvZmlsZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Cb29rSW5mbz1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Cb29rSW5mbyxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Cb29rSW5mby5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Cb29rSW5mb1wiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkJvb2tJbmZvLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkJvb2tJbmZvLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Cb29rSW5mby50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtib29raWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiXCIpLGJvb2trZXk6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiXCIpLGhvdGVsYWRkcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsXCJcIiksd3NzcHJveHk6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LFwiXCIpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Cb29rSW5mby5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkJvb2tJbmZvO3JldHVybiBwcm90by5zdHJlYW0uQm9va0luZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Cb29rSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRTdHJpbmcoKTtlLnNldEJvb2tpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRTdHJpbmcoKTtlLnNldEJvb2trZXkocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkU3RyaW5nKCk7ZS5zZXRIb3RlbGFkZHIocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkU3RyaW5nKCk7ZS5zZXRXc3Nwcm94eShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uQm9va0luZm8ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkJvb2tJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkJvb2tJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzA8KHI9ZS5nZXRCb29raWQoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDEsciksMDwocj1lLmdldEJvb2trZXkoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDIsciksMDwocj1lLmdldEhvdGVsYWRkcigpKS5sZW5ndGgmJnQud3JpdGVTdHJpbmcoMyxyKSwwPChyPWUuZ2V0V3NzcHJveHkoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDQscil9LHByb3RvLnN0cmVhbS5Cb29rSW5mby5wcm90b3R5cGUuZ2V0Qm9va2lkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSxcIlwiKX0scHJvdG8uc3RyZWFtLkJvb2tJbmZvLnByb3RvdHlwZS5zZXRCb29raWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkJvb2tJbmZvLnByb3RvdHlwZS5nZXRCb29ra2V5PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIlwiKX0scHJvdG8uc3RyZWFtLkJvb2tJbmZvLnByb3RvdHlwZS5zZXRCb29ra2V5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Cb29rSW5mby5wcm90b3R5cGUuZ2V0SG90ZWxhZGRyPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMyxcIlwiKX0scHJvdG8uc3RyZWFtLkJvb2tJbmZvLnByb3RvdHlwZS5zZXRIb3RlbGFkZHI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkJvb2tJbmZvLnByb3RvdHlwZS5nZXRXc3Nwcm94eT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsXCJcIil9LHByb3RvLnN0cmVhbS5Cb29rSW5mby5wcm90b3R5cGUuc2V0V3NzcHJveHk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlJvb21JbmZvLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlJvb21JbmZvLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLlJvb21JbmZvXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uUm9vbUluZm8udG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3Jvb21pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsXCIwXCIpLHJvb21uYW1lOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIlwiKSxtYXhwbGF5ZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLG1vZGU6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LDApLGNhbndhdGNoOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNSwwKSx2aXNpYmlsaXR5OnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNiwwKSxyb29tcHJvcGVydHk6dC5nZXRSb29tcHJvcGVydHlfYXNCNjQoKSxvd25lcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDgsMCksc3RhdGU6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw5LDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Sb29tSW5mby5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLlJvb21JbmZvO3JldHVybiBwcm90by5zdHJlYW0uUm9vbUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRTdHJpbmcoKTtlLnNldFJvb21uYW1lKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0TWF4cGxheWVyKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZEludDMyKCk7ZS5zZXRNb2RlKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZEludDMyKCk7ZS5zZXRDYW53YXRjaChyKTticmVhaztjYXNlIDY6cj10LnJlYWRJbnQzMigpO2Uuc2V0VmlzaWJpbGl0eShyKTticmVhaztjYXNlIDc6cj10LnJlYWRCeXRlcygpO2Uuc2V0Um9vbXByb3BlcnR5KHIpO2JyZWFrO2Nhc2UgODpyPXQucmVhZFVpbnQzMigpO2Uuc2V0T3duZXIocik7YnJlYWs7Y2FzZSA5OnI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdGUocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlJvb21JbmZvLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Sb29tSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMDwocj1lLmdldFJvb21uYW1lKCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZygyLHIpLDAhPT0ocj1lLmdldE1heHBsYXllcigpKSYmdC53cml0ZVVpbnQzMigzLHIpLDAhPT0ocj1lLmdldE1vZGUoKSkmJnQud3JpdGVJbnQzMig0LHIpLDAhPT0ocj1lLmdldENhbndhdGNoKCkpJiZ0LndyaXRlSW50MzIoNSxyKSwwIT09KHI9ZS5nZXRWaXNpYmlsaXR5KCkpJiZ0LndyaXRlSW50MzIoNixyKSwwPChyPWUuZ2V0Um9vbXByb3BlcnR5X2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoNyxyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMig4LHIpLDAhPT0ocj1lLmdldFN0YXRlKCkpJiZ0LndyaXRlRW51bSg5LHIpfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLmdldFJvb21uYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIlwiKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvLnByb3RvdHlwZS5zZXRSb29tbmFtZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLmdldE1heHBsYXllcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mby5wcm90b3R5cGUuc2V0TWF4cGxheWVyPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5Sb29tSW5mby5wcm90b3R5cGUuZ2V0TW9kZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mby5wcm90b3R5cGUuc2V0TW9kZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLmdldENhbndhdGNoPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvLnByb3RvdHlwZS5zZXRDYW53YXRjaD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLmdldFZpc2liaWxpdHk9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw2LDApfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLnNldFZpc2liaWxpdHk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNixlKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvLnByb3RvdHlwZS5nZXRSb29tcHJvcGVydHk9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LFwiXCIpfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eV9hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldFJvb21wcm9wZXJ0eSgpKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvLnByb3RvdHlwZS5nZXRSb29tcHJvcGVydHlfYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Um9vbXByb3BlcnR5KCkpfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLnNldFJvb21wcm9wZXJ0eT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDcsZSl9LHByb3RvLnN0cmVhbS5Sb29tSW5mby5wcm90b3R5cGUuZ2V0T3duZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw4LDApfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLnNldE93bmVyPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDgsZSl9LHByb3RvLnN0cmVhbS5Sb29tSW5mby5wcm90b3R5cGUuZ2V0U3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw5LDApfSxwcm90by5zdHJlYW0uUm9vbUluZm8ucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcyw5LGUpfSxwcm90by5zdHJlYW0uTm90aWNlSm9pbj1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Ob3RpY2VKb2luLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLk5vdGljZUpvaW4uZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uTm90aWNlSm9pblwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLk5vdGljZUpvaW4ucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTm90aWNlSm9pbi50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uTm90aWNlSm9pbi50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByLG89e3VzZXI6KHI9dC5nZXRVc2VyKCkpJiZwcm90by5zdHJlYW0uUGxheWVySW5mby50b09iamVjdChlLHIpfTtyZXR1cm4gZSYmKG8uJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCksb30pLHByb3RvLnN0cmVhbS5Ob3RpY2VKb2luLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uTm90aWNlSm9pbjtyZXR1cm4gcHJvdG8uc3RyZWFtLk5vdGljZUpvaW4uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Ob3RpY2VKb2luLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPW5ldyBwcm90by5zdHJlYW0uUGxheWVySW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFVzZXIocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLk5vdGljZUpvaW4ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLk5vdGljZUpvaW4uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTm90aWNlSm9pbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByO251bGwhPShyPWUuZ2V0VXNlcigpKSYmdC53cml0ZU1lc3NhZ2UoMSxyLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLk5vdGljZUpvaW4ucHJvdG90eXBlLmdldFVzZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLDEpfSxwcm90by5zdHJlYW0uTm90aWNlSm9pbi5wcm90b3R5cGUuc2V0VXNlcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLk5vdGljZUpvaW4ucHJvdG90eXBlLmNsZWFyVXNlcj1mdW5jdGlvbigpe3RoaXMuc2V0VXNlcih2b2lkIDApfSxwcm90by5zdHJlYW0uTm90aWNlSm9pbi5wcm90b3R5cGUuaGFzVXNlcj1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywxKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTm90aWNlTGVhdmUucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTm90aWNlTGVhdmUudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3VzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIiksb3duZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uTm90aWNlTGVhdmU7cmV0dXJuIHByb3RvLnN0cmVhbS5Ob3RpY2VMZWF2ZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0T3duZXIocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Ob3RpY2VMZWF2ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Ob3RpY2VMZWF2ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMCE9PShyPWUuZ2V0T3duZXIoKSkmJnQud3JpdGVVaW50MzIoMyxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDQscil9LHByb3RvLnN0cmVhbS5Ob3RpY2VMZWF2ZS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnByb3RvdHlwZS5nZXRPd25lcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5Ob3RpY2VMZWF2ZS5wcm90b3R5cGUuc2V0T3duZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxcIlwiKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLk5vdGljZUxlYXZlLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Ob3RpY2VMZWF2ZS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkpvaW5PdmVyUmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PdmVyUmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiMFwiKSxnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCksdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uSm9pbk92ZXJSZXEuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PdmVyUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJSZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyUmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDIsciksMDwocj1lLmdldENwcHJvdG9fYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcygzLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMig0LHIpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJSZXEucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJSZXEucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJSZXEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS5wcm90b3R5cGUuZ2V0Q3Bwcm90bz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCJcIil9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJSZXEucHJvdG90eXBlLnNldENwcHJvdG89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJSZXEucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJlcS5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkpvaW5PdmVyUnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PdmVyUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkpvaW5PdmVyUnNwLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uSm9pbk92ZXJSc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZEVudW0oKTtlLnNldFN0YXR1cyhyKTticmVhaztjYXNlIDI6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSm9pbk92ZXJSc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PdmVyUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDIscil9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyUnNwLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcC5wcm90b3R5cGUuZ2V0Q3Bwcm90bz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCJcIil9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcC5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Kb2luT3ZlclJzcC5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJSc3AucHJvdG90eXBlLnNldENwcHJvdG89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJOb3RpZnk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uSm9pbk92ZXJOb3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uSm9pbk92ZXJOb3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uSm9pbk92ZXJOb3RpZnlcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Kb2luT3Zlck5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luT3Zlck5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uSm9pbk92ZXJOb3RpZnkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3JjdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Kb2luT3Zlck5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uSm9pbk92ZXJOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Kb2luT3Zlck5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFNyY3VzZXJpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSm9pbk92ZXJOb3RpZnkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFNyY3VzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDMscil9LHByb3RvLnN0cmVhbS5Kb2luT3Zlck5vdGlmeS5wcm90b3R5cGUuZ2V0U3JjdXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5LnByb3RvdHlwZS5zZXRTcmN1c2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5LnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5LnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMyxcIlwiKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkpvaW5PdmVyTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Kb2luT3Zlck5vdGlmeS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Kb2luT3BlblJlcVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkpvaW5PcGVuUmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PcGVuUmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiMFwiKSxnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHVzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksY3Bwcm90bzp0LmdldENwcHJvdG9fYXNCNjQoKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uSm9pbk9wZW5SZXEuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PcGVuUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uSm9pbk9wZW5SZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuUmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDMsciksMDwocj1lLmdldENwcHJvdG9fYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcyg0LHIpfSxwcm90by5zdHJlYW0uSm9pbk9wZW5SZXEucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uSm9pbk9wZW5SZXEucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uSm9pbk9wZW5SZXEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuUmVxLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxcIlwiKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJlcS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Kb2luT3BlblJzcFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkpvaW5PcGVuUnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PcGVuUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkpvaW5PcGVuUnNwLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uSm9pbk9wZW5Sc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZEVudW0oKTtlLnNldFN0YXR1cyhyKTticmVhaztjYXNlIDI6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSm9pbk9wZW5Sc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PcGVuUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDIscil9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuUnNwLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcC5wcm90b3R5cGUuZ2V0Q3Bwcm90bz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCJcIil9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcC5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Kb2luT3BlblJzcC5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uSm9pbk9wZW5Sc3AucHJvdG90eXBlLnNldENwcHJvdG89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uSm9pbk9wZW5Ob3RpZnk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uSm9pbk9wZW5Ob3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uSm9pbk9wZW5Ob3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uSm9pbk9wZW5Ob3RpZnlcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Kb2luT3Blbk5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luT3Blbk5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uSm9pbk9wZW5Ob3RpZnkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17dXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Kb2luT3Blbk5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uSm9pbk9wZW5Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Kb2luT3Blbk5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSm9pbk9wZW5Ob3RpZnkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDMscil9LHByb3RvLnN0cmVhbS5Kb2luT3Blbk5vdGlmeS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5LnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5LnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5LnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMyxcIlwiKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkpvaW5PcGVuTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Kb2luT3Blbk5vdGlmeS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTGVhdmVSb29tUmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJlcS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXFcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTGVhdmVSb29tUmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17dXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHJvb21pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsXCIwXCIpLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTGVhdmVSb29tUmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTGVhdmVSb29tUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigyLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMyxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDQscil9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXEucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXEucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTGVhdmVSb29tUmVxLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uTGVhdmVSb29tUmVxLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJlcS5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMyxcIjBcIil9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXEucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uTGVhdmVSb29tUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxcIlwiKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJlcS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21SZXEucHJvdG90eXBlLmdldENwcHJvdG9fYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJlcS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21Sc3A9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTGVhdmVSb29tUnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5MZWF2ZVJvb21Sc3BcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5MZWF2ZVJvb21Sc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTGVhdmVSb29tUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21Sc3AudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3RhdHVzOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcDtyZXR1cm4gcHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTGVhdmVSb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLDA8KHI9ZS5nZXRDcHByb3RvX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoNCxyKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTGVhdmVSb29tUnNwLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21Sc3AucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21Sc3AucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uTGVhdmVSb29tUnNwLnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxcIlwiKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5MZWF2ZVJvb21Sc3AucHJvdG90eXBlLmdldENwcHJvdG9fYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkxlYXZlUm9vbVJzcC5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlcixzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlci5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlclwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlci50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzaXplOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxzZXE6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGNtZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksdmVyc2lvbjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCksdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNSwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uVGNwUHJvdG9IZWFkZXIuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uVGNwUHJvdG9IZWFkZXIuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTaXplKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0U2VxKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0Q21kKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VmVyc2lvbihyKTticmVhaztjYXNlIDU6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uVGNwUHJvdG9IZWFkZXIucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFNpemUoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRTZXEoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwIT09KHI9ZS5nZXRDbWQoKSkmJnQud3JpdGVVaW50MzIoMyxyKSwwIT09KHI9ZS5nZXRWZXJzaW9uKCkpJiZ0LndyaXRlVWludDMyKDQsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDUscil9LHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlci5wcm90b3R5cGUuZ2V0U2l6ZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlci5wcm90b3R5cGUuc2V0U2l6ZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uVGNwUHJvdG9IZWFkZXIucHJvdG90eXBlLmdldFNlcT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlci5wcm90b3R5cGUuc2V0U2VxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlci5wcm90b3R5cGUuZ2V0Q21kPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLnByb3RvdHlwZS5zZXRDbWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLnByb3RvdHlwZS5nZXRWZXJzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKX0scHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLnByb3RvdHlwZS5zZXRWZXJzaW9uPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5UY3BQcm90b0hlYWRlci5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKX0scHJvdG8uc3RyZWFtLlRjcFByb3RvSGVhZGVyLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSxlKX0scHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMj1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjIscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQ29ubkRldGFpbFYyLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMlwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMi5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjIudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMi50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXt1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGdhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksZmllbGRpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCxcIjBcIiksaGVhcnRiZWF0dGltZTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsXCIwXCIpLHZlcnNpb246cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw2LDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjIuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjI7cmV0dXJuIHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjIuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjIuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRGaWVsZGlkKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0SGVhcnRiZWF0dGltZShyKTticmVhaztjYXNlIDY6cj10LnJlYWRVaW50MzIoKTtlLnNldFZlcnNpb24ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMi5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uQ29ubkRldGFpbFYyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwIT09KHI9ZS5nZXRGaWVsZGlkKCkpJiZ0LndyaXRlVWludDMyKDMscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZyg0LHIpLHI9ZS5nZXRIZWFydGJlYXR0aW1lKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDUsciksMCE9PShyPWUuZ2V0VmVyc2lvbigpKSYmdC53cml0ZVVpbnQzMig2LHIpfSxwcm90by5zdHJlYW0uQ29ubkRldGFpbFYyLnByb3RvdHlwZS5nZXRVc2VyaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uQ29ubkRldGFpbFYyLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMi5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMi5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjIucHJvdG90eXBlLmdldEZpZWxkaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApfSxwcm90by5zdHJlYW0uQ29ubkRldGFpbFYyLnByb3RvdHlwZS5zZXRGaWVsZGlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjIucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsXCIwXCIpfSxwcm90by5zdHJlYW0uQ29ubkRldGFpbFYyLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkNvbm5EZXRhaWxWMi5wcm90b3R5cGUuZ2V0SGVhcnRiZWF0dGltZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsXCIwXCIpfSxwcm90by5zdHJlYW0uQ29ubkRldGFpbFYyLnByb3RvdHlwZS5zZXRIZWFydGJlYXR0aW1lPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5Db25uRGV0YWlsVjIucHJvdG90eXBlLmdldFZlcnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw2LDApfSxwcm90by5zdHJlYW0uQ29ubkRldGFpbFYyLnByb3RvdHlwZS5zZXRWZXJzaW9uPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5Vc2VyVjI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uVXNlclYyLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlVzZXJWMi5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Vc2VyVjJcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uVXNlclYyLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Vc2VyVjIudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17dXNlcklkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxnYW1lSWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHZlcnNpb25TZGs6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLGNvbm5lY3Rpb25JZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsXCIwXCIpLHNlcnZpY2VJZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsMCkscm9vbUlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNixcIjBcIiksZGV2aWNlSWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw3LFwiXCIpLGNvbm5TdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw4LDApLHJlY29ubmVjdFRpbWVvdXQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw5LDApLHRlYW1JZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEwLFwiMFwiKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uVXNlclYyLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uVXNlclYyO3JldHVybiBwcm90by5zdHJlYW0uVXNlclYyLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uVXNlclYyLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcklkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZUlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VmVyc2lvblNkayhyKTticmVhaztjYXNlIDQ6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldENvbm5lY3Rpb25JZChyKTticmVhaztjYXNlIDU6cj10LnJlYWRVaW50MzIoKTtlLnNldFNlcnZpY2VJZChyKTticmVhaztjYXNlIDY6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21JZChyKTticmVhaztjYXNlIDc6cj10LnJlYWRTdHJpbmcoKTtlLnNldERldmljZUlkKHIpO2JyZWFrO2Nhc2UgODpyPXQucmVhZFVpbnQzMigpO2Uuc2V0Q29ublN0YXR1cyhyKTticmVhaztjYXNlIDk6cj10LnJlYWRVaW50MzIoKTtlLnNldFJlY29ubmVjdFRpbWVvdXQocik7YnJlYWs7Y2FzZSAxMDpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0VGVhbUlkKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlVzZXJWMi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Vc2VyVjIuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0VXNlcklkKCkpJiZ0LndyaXRlVWludDMyKDEsciksMCE9PShyPWUuZ2V0R2FtZUlkKCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0VmVyc2lvblNkaygpKSYmdC53cml0ZVVpbnQzMigzLHIpLHI9ZS5nZXRDb25uZWN0aW9uSWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoNCxyKSwwIT09KHI9ZS5nZXRTZXJ2aWNlSWQoKSkmJnQud3JpdGVVaW50MzIoNSxyKSxyPWUuZ2V0Um9vbUlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDYsciksMDwocj1lLmdldERldmljZUlkKCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZyg3LHIpLDAhPT0ocj1lLmdldENvbm5TdGF0dXMoKSkmJnQud3JpdGVVaW50MzIoOCxyKSwwIT09KHI9ZS5nZXRSZWNvbm5lY3RUaW1lb3V0KCkpJiZ0LndyaXRlVWludDMyKDkscikscj1lLmdldFRlYW1JZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygxMCxyKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuZ2V0VXNlcklkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuc2V0VXNlcklkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLmdldEdhbWVJZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLnNldEdhbWVJZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uVXNlclYyLnByb3RvdHlwZS5nZXRWZXJzaW9uU2RrPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuc2V0VmVyc2lvblNkaz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uVXNlclYyLnByb3RvdHlwZS5nZXRDb25uZWN0aW9uSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiMFwiKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuc2V0Q29ubmVjdGlvbklkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLmdldFNlcnZpY2VJZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCl9LHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLnNldFNlcnZpY2VJZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uVXNlclYyLnByb3RvdHlwZS5nZXRSb29tSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw2LFwiMFwiKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuc2V0Um9vbUlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLmdldERldmljZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNyxcIlwiKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuc2V0RGV2aWNlSWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsNyxlKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuZ2V0Q29ublN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDgsMCl9LHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLnNldENvbm5TdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOCxlKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuZ2V0UmVjb25uZWN0VGltZW91dD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDksMCl9LHByb3RvLnN0cmVhbS5Vc2VyVjIucHJvdG90eXBlLnNldFJlY29ubmVjdFRpbWVvdXQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOSxlKX0scHJvdG8uc3RyZWFtLlVzZXJWMi5wcm90b3R5cGUuZ2V0VGVhbUlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMTAsXCIwXCIpfSxwcm90by5zdHJlYW0uVXNlclYyLnByb3RvdHlwZS5zZXRUZWFtSWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMTAsZSl9LHByb3RvLnN0cmVhbS5Vc2VyVjJFeD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Vc2VyVjJFeCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Vc2VyVjJFeC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Vc2VyVjJFeFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlVzZXJWMkV4LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlVzZXJWMkV4LnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Vc2VyVjJFeC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXt1c2VySWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGdhbWVJZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksc2RrdmVyOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMyxcIlwiKSx2ZW5kb3I6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlVzZXJWMkV4LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uVXNlclYyRXg7cmV0dXJuIHByb3RvLnN0cmVhbS5Vc2VyVjJFeC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlVzZXJWMkV4LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcklkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZUlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFN0cmluZygpO2Uuc2V0U2RrdmVyKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VmVuZG9yKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRDcHByb3RvKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5Vc2VyVjJFeC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uVXNlclYyRXguc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uVXNlclYyRXguc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0VXNlcklkKCkpJiZ0LndyaXRlVWludDMyKDEsciksMCE9PShyPWUuZ2V0R2FtZUlkKCkpJiZ0LndyaXRlVWludDMyKDIsciksMDwocj1lLmdldFNka3ZlcigpKS5sZW5ndGgmJnQud3JpdGVTdHJpbmcoMyxyKSwwIT09KHI9ZS5nZXRWZW5kb3IoKSkmJnQud3JpdGVVaW50MzIoNCxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDUscil9LHByb3RvLnN0cmVhbS5Vc2VyVjJFeC5wcm90b3R5cGUuZ2V0VXNlcklkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLlVzZXJWMkV4LnByb3RvdHlwZS5zZXRVc2VySWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlVzZXJWMkV4LnByb3RvdHlwZS5nZXRHYW1lSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uVXNlclYyRXgucHJvdG90eXBlLnNldEdhbWVJZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uVXNlclYyRXgucHJvdG90eXBlLmdldFNka3Zlcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCJcIil9LHByb3RvLnN0cmVhbS5Vc2VyVjJFeC5wcm90b3R5cGUuc2V0U2RrdmVyPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5Vc2VyVjJFeC5wcm90b3R5cGUuZ2V0VmVuZG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKX0scHJvdG8uc3RyZWFtLlVzZXJWMkV4LnByb3RvdHlwZS5zZXRWZW5kb3I9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLlVzZXJWMkV4LnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSxcIlwiKX0scHJvdG8uc3RyZWFtLlVzZXJWMkV4LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLlVzZXJWMkV4LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5Vc2VyVjJFeC5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJlcS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSZXFcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSZXEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLHN0YXRlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxO3JldHVybiBwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQzMigpO2Uuc2V0U3RhdGUocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDMsciksMCE9PShyPWUuZ2V0U3RhdGUoKSkmJnQud3JpdGVVaW50MzIoNCxyKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSZXEucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUmVxLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJlcS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJlcS5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSZXEucHJvdG90eXBlLmdldFN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJlcS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3Ascy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlUnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJzcFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3AudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZVJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEscil9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVSc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVOb3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlTm90aWZ5LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVOb3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHN0YXRlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxvd25lcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldFN0YXRlKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQzMigpO2Uuc2V0T3duZXIocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0U3RhdGUoKSkmJnQud3JpdGVVaW50MzIoMyxyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMig0LHIpfSxwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlTm90aWZ5LnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLFwiMFwiKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVOb3RpZnkucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVOb3RpZnkucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uTmV0d29ya1N0YXRlTm90aWZ5LnByb3RvdHlwZS5nZXRTdGF0ZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVOb3RpZnkucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5OZXR3b3JrU3RhdGVOb3RpZnkucHJvdG90eXBlLmdldE93bmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKX0scHJvdG8uc3RyZWFtLk5ldHdvcmtTdGF0ZU5vdGlmeS5wcm90b3R5cGUuc2V0T3duZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21SZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21SZXFcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21SZXEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21SZXEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcixvPXtwbGF5ZXJpbmZvOihyPXQuZ2V0UGxheWVyaW5mbygpKSYmcHJvdG8uc3RyZWFtLlBsYXllckluZm8udG9PYmplY3QoZSxyKSxnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHJvb21pbmZvOihyPXQuZ2V0Um9vbWluZm8oKSkmJnByb3RvLnN0cmVhbS5Sb29tSW5mby50b09iamVjdChlLHIpLHdhdGNoc2V0dGluZzoocj10LmdldFdhdGNoc2V0dGluZygpKSYmcHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy50b09iamVjdChlLHIpfTtyZXR1cm4gZSYmKG8uJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCksb30pLHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21SZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPW5ldyBwcm90by5zdHJlYW0uUGxheWVySW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFBsYXllcmluZm8ocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAzOnI9bmV3IHByb3RvLnN0cmVhbS5Sb29tSW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlJvb21JbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRSb29taW5mbyhyKTticmVhaztjYXNlIDQ6cj1uZXcgcHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0V2F0Y2hzZXR0aW5nKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7bnVsbCE9KHI9ZS5nZXRQbGF5ZXJpbmZvKCkpJiZ0LndyaXRlTWVzc2FnZSgxLHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLDAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigyLHIpLG51bGwhPShyPWUuZ2V0Um9vbWluZm8oKSkmJnQud3JpdGVNZXNzYWdlKDMscixwcm90by5zdHJlYW0uUm9vbUluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLG51bGwhPShyPWUuZ2V0V2F0Y2hzZXR0aW5nKCkpJiZ0LndyaXRlTWVzc2FnZSg0LHIscHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcil9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5nZXRQbGF5ZXJpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUGxheWVySW5mbywxKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21SZXEucHJvdG90eXBlLnNldFBsYXllcmluZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5jbGVhclBsYXllcmluZm89ZnVuY3Rpb24oKXt0aGlzLnNldFBsYXllcmluZm8odm9pZCAwKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21SZXEucHJvdG90eXBlLmhhc1BsYXllcmluZm89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsMSl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5nZXRSb29taW5mbz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlJvb21JbmZvLDMpfSxwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJlcS5wcm90b3R5cGUuc2V0Um9vbWluZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5jbGVhclJvb21pbmZvPWZ1bmN0aW9uKCl7dGhpcy5zZXRSb29taW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJlcS5wcm90b3R5cGUuaGFzUm9vbWluZm89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsMyl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5nZXRXYXRjaHNldHRpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmcsNCl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5zZXRXYXRjaHNldHRpbmc9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5jbGVhcldhdGNoc2V0dGluZz1mdW5jdGlvbigpe3RoaXMuc2V0V2F0Y2hzZXR0aW5nKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUmVxLnByb3RvdHlwZS5oYXNXYXRjaHNldHRpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsNCl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21Sc3Ascy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5DcmVhdGVSb29tUnNwXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17c3RhdHVzOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSxib29raW5mbzoocj10LmdldEJvb2tpbmZvKCkpJiZwcm90by5zdHJlYW0uQm9va0luZm8udG9PYmplY3QoZSxyKSxvd25lcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCl9O3JldHVybiBlJiYoby4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxvfSkscHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21Sc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUnNwO3JldHVybiBwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21Sc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPW5ldyBwcm90by5zdHJlYW0uQm9va0luZm87dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5Cb29rSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0Qm9va2luZm8ocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRPd25lcihyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksbnVsbCE9KHI9ZS5nZXRCb29raW5mbygpKSYmdC53cml0ZU1lc3NhZ2UoMyxyLHByb3RvLnN0cmVhbS5Cb29rSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciksMCE9PShyPWUuZ2V0T3duZXIoKSkmJnQud3JpdGVVaW50MzIoNCxyKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21Sc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUnNwLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVSb29tUnNwLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21Sc3AucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5wcm90b3R5cGUuZ2V0Qm9va2luZm89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5Cb29rSW5mbywzKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21Sc3AucHJvdG90eXBlLnNldEJvb2tpbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5wcm90b3R5cGUuY2xlYXJCb29raW5mbz1mdW5jdGlvbigpe3RoaXMuc2V0Qm9va2luZm8odm9pZCAwKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVJvb21Sc3AucHJvdG90eXBlLmhhc0Jvb2tpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDMpfSxwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5wcm90b3R5cGUuZ2V0T3duZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApfSxwcm90by5zdHJlYW0uQ3JlYXRlUm9vbVJzcC5wcm90b3R5cGUuc2V0T3duZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSZXEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29tZmlsdGVyOihyPXQuZ2V0Um9vbWZpbHRlcigpKSYmcHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIudG9PYmplY3QoZSxyKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSZXEuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9bmV3IHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUm9vbUZpbHRlci5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0Um9vbWZpbHRlcihyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSZXEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLG51bGwhPShyPWUuZ2V0Um9vbWZpbHRlcigpKSYmdC53cml0ZU1lc3NhZ2UoMixyLHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UmVxLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSZXEucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSZXEucHJvdG90eXBlLmdldFJvb21maWx0ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLDIpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSZXEucHJvdG90eXBlLnNldFJvb21maWx0ZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJlcS5wcm90b3R5cGUuY2xlYXJSb29tZmlsdGVyPWZ1bmN0aW9uKCl7dGhpcy5zZXRSb29tZmlsdGVyKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJlcS5wcm90b3R5cGUuaGFzUm9vbWZpbHRlcj1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywyKX0scHJvdG8uc3RyZWFtLlJvb21GaWx0ZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uUm9vbUZpbHRlcixzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLlJvb21GaWx0ZXJcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17bWF4cGxheWVyOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxtb2RlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxjYW53YXRjaDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCkscm9vbXByb3BlcnR5OnQuZ2V0Um9vbXByb3BlcnR5X2FzQjY0KCksZnVsbDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsMCksc3RhdGU6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw2LDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uUm9vbUZpbHRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0TWF4cGxheWVyKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZEludDMyKCk7ZS5zZXRNb2RlKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZEludDMyKCk7ZS5zZXRDYW53YXRjaChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRCeXRlcygpO2Uuc2V0Um9vbXByb3BlcnR5KHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZEludDMyKCk7ZS5zZXRGdWxsKHIpO2JyZWFrO2Nhc2UgNjpyPXQucmVhZEVudW0oKTtlLnNldFN0YXRlKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0TWF4cGxheWVyKCkpJiZ0LndyaXRlVWludDMyKDEsciksMCE9PShyPWUuZ2V0TW9kZSgpKSYmdC53cml0ZUludDMyKDIsciksMCE9PShyPWUuZ2V0Q2Fud2F0Y2goKSkmJnQud3JpdGVJbnQzMigzLHIpLDA8KHI9ZS5nZXRSb29tcHJvcGVydHlfYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcyg0LHIpLDAhPT0ocj1lLmdldEZ1bGwoKSkmJnQud3JpdGVJbnQzMig1LHIpLDAhPT0ocj1lLmdldFN0YXRlKCkpJiZ0LndyaXRlRW51bSg2LHIpfSxwcm90by5zdHJlYW0uUm9vbUZpbHRlci5wcm90b3R5cGUuZ2V0TWF4cGxheWVyPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIucHJvdG90eXBlLnNldE1heHBsYXllcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uUm9vbUZpbHRlci5wcm90b3R5cGUuZ2V0TW9kZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS5zZXRNb2RlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS5nZXRDYW53YXRjaD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS5zZXRDYW53YXRjaD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uUm9vbUZpbHRlci5wcm90b3R5cGUuZ2V0Um9vbXByb3BlcnR5PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxcIlwiKX0scHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eV9hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldFJvb21wcm9wZXJ0eSgpKX0scHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eV9hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRSb29tcHJvcGVydHkoKSl9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS5zZXRSb29tcHJvcGVydHk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uUm9vbUZpbHRlci5wcm90b3R5cGUuZ2V0RnVsbD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCl9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS5zZXRGdWxsPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS5nZXRTdGF0ZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsMCl9LHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNixlKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJzcC5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UnNwXCIpLHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJzcC5yZXBlYXRlZEZpZWxkc189WzJdLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3AudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWluZm9MaXN0OnMuTWVzc2FnZS50b09iamVjdExpc3QodC5nZXRSb29taW5mb0xpc3QoKSxwcm90by5zdHJlYW0uUm9vbUluZm8udG9PYmplY3QsZSl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UnNwLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0UnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZEVudW0oKTtlLnNldFN0YXR1cyhyKTticmVhaztjYXNlIDI6cj1uZXcgcHJvdG8uc3RyZWFtLlJvb21JbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUm9vbUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLmFkZFJvb21pbmZvKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlRW51bSgxLHIpLDA8KHI9ZS5nZXRSb29taW5mb0xpc3QoKSkubGVuZ3RoJiZ0LndyaXRlUmVwZWF0ZWRNZXNzYWdlKDIscixwcm90by5zdHJlYW0uUm9vbUluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3AucHJvdG90eXBlLmdldFJvb21pbmZvTGlzdD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUm9vbUluZm8sMil9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJzcC5wcm90b3R5cGUuc2V0Um9vbWluZm9MaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdFJzcC5wcm90b3R5cGUuYWRkUm9vbWluZm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywyLGUscHJvdG8uc3RyZWFtLlJvb21JbmZvLHQpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RSc3AucHJvdG90eXBlLmNsZWFyUm9vbWluZm9MaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXRSb29taW5mb0xpc3QoW10pfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByLG89e2dhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWZpbHRlcjoocj10LmdldFJvb21maWx0ZXIoKSkmJnByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnRvT2JqZWN0KGUsciksc29ydDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksb3JkZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LDApLHBhZ2VubzpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsMCkscGFnZXNpemU6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw2LDApfTtyZXR1cm4gZSYmKG8uJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCksb30pLHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPW5ldyBwcm90by5zdHJlYW0uUm9vbUZpbHRlcjt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFJvb21maWx0ZXIocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkRW51bSgpO2Uuc2V0U29ydChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRFbnVtKCk7ZS5zZXRPcmRlcihyKTticmVhaztjYXNlIDU6cj10LnJlYWRJbnQzMigpO2Uuc2V0UGFnZW5vKHIpO2JyZWFrO2Nhc2UgNjpyPXQucmVhZEludDMyKCk7ZS5zZXRQYWdlc2l6ZShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLG51bGwhPShyPWUuZ2V0Um9vbWZpbHRlcigpKSYmdC53cml0ZU1lc3NhZ2UoMixyLHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKSwwIT09KHI9ZS5nZXRTb3J0KCkpJiZ0LndyaXRlRW51bSgzLHIpLDAhPT0ocj1lLmdldE9yZGVyKCkpJiZ0LndyaXRlRW51bSg0LHIpLDAhPT0ocj1lLmdldFBhZ2VubygpKSYmdC53cml0ZUludDMyKDUsciksMCE9PShyPWUuZ2V0UGFnZXNpemUoKSkmJnQud3JpdGVJbnQzMig2LHIpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSZXEucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5wcm90b3R5cGUuZ2V0Um9vbWZpbHRlcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIsMil9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLnByb3RvdHlwZS5zZXRSb29tZmlsdGVyPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5wcm90b3R5cGUuY2xlYXJSb29tZmlsdGVyPWZ1bmN0aW9uKCl7dGhpcy5zZXRSb29tZmlsdGVyKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLnByb3RvdHlwZS5oYXNSb29tZmlsdGVyPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDIpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5wcm90b3R5cGUuZ2V0U29ydD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLnByb3RvdHlwZS5zZXRTb3J0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5wcm90b3R5cGUuZ2V0T3JkZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5wcm90b3R5cGUuc2V0T3JkZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLnByb3RvdHlwZS5nZXRQYWdlbm89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJlcS5wcm90b3R5cGUuc2V0UGFnZW5vPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLnByb3RvdHlwZS5nZXRQYWdlc2l6ZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsMCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UmVxLnByb3RvdHlwZS5zZXRQYWdlc2l6ZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw2LGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlJvb21JbmZvRXguZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uUm9vbUluZm9FeFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlJvb21JbmZvRXgucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uUm9vbUluZm9FeC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByLG89e3Jvb21pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsXCIwXCIpLHJvb21uYW1lOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIlwiKSxtYXhwbGF5ZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLGdhbWVwbGF5ZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LDApLHdhdGNocGxheWVyOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNSwwKSxtb2RlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNiwwKSxjYW53YXRjaDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDcsMCkscm9vbXByb3BlcnR5OnQuZ2V0Um9vbXByb3BlcnR5X2FzQjY0KCksb3duZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw5LDApLHN0YXRlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMTAsMCksY3JlYXRldGltZTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDExLFwiMFwiKSx3YXRjaGluZm86KHI9dC5nZXRXYXRjaGluZm8oKSkmJnByb3RvLnN0cmVhbS5XYXRjaEluZm8udG9PYmplY3QoZSxyKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLlJvb21JbmZvRXg7cmV0dXJuIHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRTdHJpbmcoKTtlLnNldFJvb21uYW1lKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0TWF4cGxheWVyKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZXBsYXllcihyKTticmVhaztjYXNlIDU6cj10LnJlYWRVaW50MzIoKTtlLnNldFdhdGNocGxheWVyKHIpO2JyZWFrO2Nhc2UgNjpyPXQucmVhZEludDMyKCk7ZS5zZXRNb2RlKHIpO2JyZWFrO2Nhc2UgNzpyPXQucmVhZEludDMyKCk7ZS5zZXRDYW53YXRjaChyKTticmVhaztjYXNlIDg6cj10LnJlYWRCeXRlcygpO2Uuc2V0Um9vbXByb3BlcnR5KHIpO2JyZWFrO2Nhc2UgOTpyPXQucmVhZFVpbnQzMigpO2Uuc2V0T3duZXIocik7YnJlYWs7Y2FzZSAxMDpyPXQucmVhZEVudW0oKTtlLnNldFN0YXRlKHIpO2JyZWFrO2Nhc2UgMTE6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldENyZWF0ZXRpbWUocik7YnJlYWs7Y2FzZSAxMjpyPW5ldyBwcm90by5zdHJlYW0uV2F0Y2hJbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uV2F0Y2hJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRXYXRjaGluZm8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlJvb21JbmZvRXgucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlJvb21JbmZvRXguc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMDwocj1lLmdldFJvb21uYW1lKCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZygyLHIpLDAhPT0ocj1lLmdldE1heHBsYXllcigpKSYmdC53cml0ZVVpbnQzMigzLHIpLDAhPT0ocj1lLmdldEdhbWVwbGF5ZXIoKSkmJnQud3JpdGVVaW50MzIoNCxyKSwwIT09KHI9ZS5nZXRXYXRjaHBsYXllcigpKSYmdC53cml0ZVVpbnQzMig1LHIpLDAhPT0ocj1lLmdldE1vZGUoKSkmJnQud3JpdGVJbnQzMig2LHIpLDAhPT0ocj1lLmdldENhbndhdGNoKCkpJiZ0LndyaXRlSW50MzIoNyxyKSwwPChyPWUuZ2V0Um9vbXByb3BlcnR5X2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoOCxyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMig5LHIpLDAhPT0ocj1lLmdldFN0YXRlKCkpJiZ0LndyaXRlRW51bSgxMCxyKSxyPWUuZ2V0Q3JlYXRldGltZSgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygxMSxyKSxudWxsIT0ocj1lLmdldFdhdGNoaW5mbygpKSYmdC53cml0ZU1lc3NhZ2UoMTIscixwcm90by5zdHJlYW0uV2F0Y2hJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvRXgucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5nZXRSb29tbmFtZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCJcIil9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5zZXRSb29tbmFtZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuZ2V0TWF4cGxheWVyPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvRXgucHJvdG90eXBlLnNldE1heHBsYXllcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuZ2V0R2FtZXBsYXllcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5zZXRHYW1lcGxheWVyPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5nZXRXYXRjaHBsYXllcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5zZXRXYXRjaHBsYXllcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuZ2V0TW9kZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsMCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5zZXRNb2RlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5nZXRDYW53YXRjaD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDcsMCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5zZXRDYW53YXRjaD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw3LGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuZ2V0Um9vbXByb3BlcnR5PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsOCxcIlwiKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvRXgucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eV9hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldFJvb21wcm9wZXJ0eSgpKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvRXgucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eV9hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRSb29tcHJvcGVydHkoKSl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5zZXRSb29tcHJvcGVydHk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcyw4LGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuZ2V0T3duZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw5LDApfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuc2V0T3duZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOSxlKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvRXgucHJvdG90eXBlLmdldFN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMTAsMCl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMTAsZSl9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5nZXRDcmVhdGV0aW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMTEsXCIwXCIpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuc2V0Q3JlYXRldGltZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxMSxlKX0scHJvdG8uc3RyZWFtLlJvb21JbmZvRXgucHJvdG90eXBlLmdldFdhdGNoaW5mbz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLldhdGNoSW5mbywxMil9LHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnByb3RvdHlwZS5zZXRXYXRjaGluZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDEyLGUpfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuY2xlYXJXYXRjaGluZm89ZnVuY3Rpb24oKXt0aGlzLnNldFdhdGNoaW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC5wcm90b3R5cGUuaGFzV2F0Y2hpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDEyKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSc3A9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSc3AucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSc3AuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJzcFwiKSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJzcC5yZXBlYXRlZEZpZWxkc189WzNdLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksdG90YWw6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHJvb21pbmZvZXhMaXN0OnMuTWVzc2FnZS50b09iamVjdExpc3QodC5nZXRSb29taW5mb2V4TGlzdCgpLHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnRvT2JqZWN0LGUpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJzcDtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZEVudW0oKTtlLnNldFN0YXR1cyhyKTticmVhaztjYXNlIDI6cj10LnJlYWRJbnQzMigpO2Uuc2V0VG90YWwocik7YnJlYWs7Y2FzZSAzOnI9bmV3IHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4O3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUm9vbUluZm9FeC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuYWRkUm9vbWluZm9leChyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKSwwIT09KHI9ZS5nZXRUb3RhbCgpKSYmdC53cml0ZUludDMyKDIsciksMDwocj1lLmdldFJvb21pbmZvZXhMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVJlcGVhdGVkTWVzc2FnZSgzLHIscHJvdG8uc3RyZWFtLlJvb21JbmZvRXguc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSc3AucHJvdG90eXBlLmdldFRvdGFsPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSc3AucHJvdG90eXBlLnNldFRvdGFsPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwLnByb3RvdHlwZS5nZXRSb29taW5mb2V4TGlzdD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUm9vbUluZm9FeCwzKX0scHJvdG8uc3RyZWFtLkdldFJvb21MaXN0RXhSc3AucHJvdG90eXBlLnNldFJvb21pbmZvZXhMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5HZXRSb29tTGlzdEV4UnNwLnByb3RvdHlwZS5hZGRSb29taW5mb2V4PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHMuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMyxlLHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LHQpfSxwcm90by5zdHJlYW0uR2V0Um9vbUxpc3RFeFJzcC5wcm90b3R5cGUuY2xlYXJSb29taW5mb2V4TGlzdD1mdW5jdGlvbigpe3RoaXMuc2V0Um9vbWluZm9leExpc3QoW10pfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uS2lja1BsYXllclJlcVwiKTtzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiMFwiKSxzcmN1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHVzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksY3Bwcm90bzp0LmdldENwcHJvdG9fYXNCNjQoKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSZXE7cmV0dXJuIHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFNyY3VzZXJpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwO3I9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMSxyKSwwIT09KHI9ZS5nZXRTcmN1c2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMyxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDQscil9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUmVxLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLFwiMFwiKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSZXEucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS5wcm90b3R5cGUuZ2V0U3JjdXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSZXEucHJvdG90eXBlLnNldFNyY3VzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSZXEucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJlcS5wcm90b3R5cGUuZ2V0Q3Bwcm90bz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsXCJcIil9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSZXEucHJvdG90eXBlLmdldENwcHJvdG9fYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSZXEucHJvdG90eXBlLnNldENwcHJvdG89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSc3AuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uS2lja1BsYXllclJzcFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uS2lja1BsYXllclJzcC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHVzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMyxcIjBcIiksb3duZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUnNwLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uS2lja1BsYXllclJzcDtyZXR1cm4gcHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZEVudW0oKTtlLnNldFN0YXR1cyhyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRVaW50MzIoKTtlLnNldE93bmVyKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUnNwLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlRW51bSgxLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigyLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMyxyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMig0LHIpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSc3AucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUnNwLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJSc3AucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCIwXCIpfSxwcm90by5zdHJlYW0uS2lja1BsYXllclJzcC5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUnNwLnByb3RvdHlwZS5nZXRPd25lcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyUnNwLnByb3RvdHlwZS5zZXRPd25lcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5LaWNrUGxheWVyTm90aWZ5LHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJOb3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJOb3RpZnkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzcmN1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHVzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksY3Bwcm90bzp0LmdldENwcHJvdG9fYXNCNjQoKSxvd25lcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5LaWNrUGxheWVyTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTcmN1c2VyaWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRPd25lcihyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFNyY3VzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigyLHIpLDA8KHI9ZS5nZXRDcHByb3RvX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoMyxyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMig0LHIpfSxwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS5wcm90b3R5cGUuZ2V0U3JjdXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJOb3RpZnkucHJvdG90eXBlLnNldFNyY3VzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJOb3RpZnkucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS5wcm90b3R5cGUuZ2V0Q3Bwcm90bz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCJcIil9LHByb3RvLnN0cmVhbS5LaWNrUGxheWVyTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJOb3RpZnkucHJvdG90eXBlLmdldENwcHJvdG9fYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLktpY2tQbGF5ZXJOb3RpZnkucHJvdG90eXBlLnNldENwcHJvdG89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS5wcm90b3R5cGUuZ2V0T3duZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApfSxwcm90by5zdHJlYW0uS2lja1BsYXllck5vdGlmeS5wcm90b3R5cGUuc2V0T3duZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5HZXRSb29tRGV0YWlsUmVxLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXFcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5HZXRSb29tRGV0YWlsUmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSxsYXRlc3R3YXRjaGVybnVtOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXE7cmV0dXJuIHByb3RvLnN0cmVhbS5HZXRSb29tRGV0YWlsUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldExhdGVzdHdhdGNoZXJudW0ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMCE9PShyPWUuZ2V0TGF0ZXN0d2F0Y2hlcm51bSgpKSYmdC53cml0ZVVpbnQzMigzLHIpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXEucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJlcS5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIjBcIil9LHByb3RvLnN0cmVhbS5HZXRSb29tRGV0YWlsUmVxLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSZXEucHJvdG90eXBlLmdldExhdGVzdHdhdGNoZXJudW09ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJlcS5wcm90b3R5cGUuc2V0TGF0ZXN0d2F0Y2hlcm51bT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5HZXRSb29tRGV0YWlsUnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3AuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByLG89e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWRldGFpbDoocj10LmdldFJvb21kZXRhaWwoKSkmJnByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnRvT2JqZWN0KGUscil9O3JldHVybiBlJiYoby4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxvfSkscHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5HZXRSb29tRGV0YWlsUnNwO3JldHVybiBwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPW5ldyBwcm90by5zdHJlYW0uUm9vbURldGFpbDt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlJvb21EZXRhaWwuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFJvb21kZXRhaWwocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEsciksbnVsbCE9KHI9ZS5nZXRSb29tZGV0YWlsKCkpJiZ0LndyaXRlTWVzc2FnZSgyLHIscHJvdG8uc3RyZWFtLlJvb21EZXRhaWwuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3AucHJvdG90eXBlLmdldFJvb21kZXRhaWw9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLDIpfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcC5wcm90b3R5cGUuc2V0Um9vbWRldGFpbD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkdldFJvb21EZXRhaWxSc3AucHJvdG90eXBlLmNsZWFyUm9vbWRldGFpbD1mdW5jdGlvbigpe3RoaXMuc2V0Um9vbWRldGFpbCh2b2lkIDApfSxwcm90by5zdHJlYW0uR2V0Um9vbURldGFpbFJzcC5wcm90b3R5cGUuaGFzUm9vbWRldGFpbD1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywyKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWw9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlJvb21EZXRhaWwuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uUm9vbURldGFpbFwiKSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5yZXBlYXRlZEZpZWxkc189WzksMTFdLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17cm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSxcIjBcIiksc3RhdGU6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLG1heHBsYXllcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksbW9kZTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCksY2Fud2F0Y2g6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LDApLHJvb21wcm9wZXJ0eTp0LmdldFJvb21wcm9wZXJ0eV9hc0I2NCgpLG93bmVyOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNywwKSxjcmVhdGVmbGFnOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsOCwwKSxwbGF5ZXJpbmZvc0xpc3Q6cy5NZXNzYWdlLnRvT2JqZWN0TGlzdCh0LmdldFBsYXllcmluZm9zTGlzdCgpLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnRvT2JqZWN0LGUpLHdhdGNocm9vbToocj10LmdldFdhdGNocm9vbSgpKSYmcHJvdG8uc3RyZWFtLldhdGNoUm9vbS50b09iamVjdChlLHIpLGJyaWdhZGVzTGlzdDpzLk1lc3NhZ2UudG9PYmplY3RMaXN0KHQuZ2V0QnJpZ2FkZXNMaXN0KCkscHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLnRvT2JqZWN0LGUpfTtyZXR1cm4gZSYmKG8uJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCksb30pLHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uUm9vbURldGFpbDtyZXR1cm4gcHJvdG8uc3RyZWFtLlJvb21EZXRhaWwuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZEVudW0oKTtlLnNldFN0YXRlKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0TWF4cGxheWVyKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZEludDMyKCk7ZS5zZXRNb2RlKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZEludDMyKCk7ZS5zZXRDYW53YXRjaChyKTticmVhaztjYXNlIDY6cj10LnJlYWRCeXRlcygpO2Uuc2V0Um9vbXByb3BlcnR5KHIpO2JyZWFrO2Nhc2UgNzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0T3duZXIocik7YnJlYWs7Y2FzZSA4OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRDcmVhdGVmbGFnKHIpO2JyZWFrO2Nhc2UgOTpyPW5ldyBwcm90by5zdHJlYW0uUGxheWVySW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLmFkZFBsYXllcmluZm9zKHIpO2JyZWFrO2Nhc2UgMTA6cj1uZXcgcHJvdG8uc3RyZWFtLldhdGNoUm9vbTt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLldhdGNoUm9vbS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0V2F0Y2hyb29tKHIpO2JyZWFrO2Nhc2UgMTE6cj1uZXcgcHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uQnJpZ2FkZUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLmFkZEJyaWdhZGVzKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7cj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygxLHIpLDAhPT0ocj1lLmdldFN0YXRlKCkpJiZ0LndyaXRlRW51bSgyLHIpLDAhPT0ocj1lLmdldE1heHBsYXllcigpKSYmdC53cml0ZVVpbnQzMigzLHIpLDAhPT0ocj1lLmdldE1vZGUoKSkmJnQud3JpdGVJbnQzMig0LHIpLDAhPT0ocj1lLmdldENhbndhdGNoKCkpJiZ0LndyaXRlSW50MzIoNSxyKSwwPChyPWUuZ2V0Um9vbXByb3BlcnR5X2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoNixyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMig3LHIpLDAhPT0ocj1lLmdldENyZWF0ZWZsYWcoKSkmJnQud3JpdGVVaW50MzIoOCxyKSwwPChyPWUuZ2V0UGxheWVyaW5mb3NMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVJlcGVhdGVkTWVzc2FnZSg5LHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLG51bGwhPShyPWUuZ2V0V2F0Y2hyb29tKCkpJiZ0LndyaXRlTWVzc2FnZSgxMCxyLHByb3RvLnN0cmVhbS5XYXRjaFJvb20uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLDA8KHI9ZS5nZXRCcmlnYWRlc0xpc3QoKSkubGVuZ3RoJiZ0LndyaXRlUmVwZWF0ZWRNZXNzYWdlKDExLHIscHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5nZXRTdGF0ZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmdldE1heHBsYXllcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5zZXRNYXhwbGF5ZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmdldE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuc2V0TW9kZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuZ2V0Q2Fud2F0Y2g9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuc2V0Q2Fud2F0Y2g9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSxlKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsXCJcIil9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5nZXRSb29tcHJvcGVydHlfYXNCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNCNjQodGhpcy5nZXRSb29tcHJvcGVydHkoKSl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5nZXRSb29tcHJvcGVydHlfYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Um9vbXByb3BlcnR5KCkpfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuc2V0Um9vbXByb3BlcnR5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsNixlKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmdldE93bmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNywwKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLnNldE93bmVyPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDcsZSl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5nZXRDcmVhdGVmbGFnPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsOCwwKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLnNldENyZWF0ZWZsYWc9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsOCxlKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmdldFBsYXllcmluZm9zTGlzdD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUGxheWVySW5mbyw5KX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLnNldFBsYXllcmluZm9zTGlzdD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyw5LGUpfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuYWRkUGxheWVyaW5mb3M9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyw5LGUscHJvdG8uc3RyZWFtLlBsYXllckluZm8sdCl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5jbGVhclBsYXllcmluZm9zTGlzdD1mdW5jdGlvbigpe3RoaXMuc2V0UGxheWVyaW5mb3NMaXN0KFtdKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmdldFdhdGNocm9vbT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLldhdGNoUm9vbSwxMCl9LHByb3RvLnN0cmVhbS5Sb29tRGV0YWlsLnByb3RvdHlwZS5zZXRXYXRjaHJvb209ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDEwLGUpfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuY2xlYXJXYXRjaHJvb209ZnVuY3Rpb24oKXt0aGlzLnNldFdhdGNocm9vbSh2b2lkIDApfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuaGFzV2F0Y2hyb29tPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDEwKX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmdldEJyaWdhZGVzTGlzdD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uQnJpZ2FkZUluZm8sMTEpfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuc2V0QnJpZ2FkZXNMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDExLGUpfSxwcm90by5zdHJlYW0uUm9vbURldGFpbC5wcm90b3R5cGUuYWRkQnJpZ2FkZXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywxMSxlLHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mbyx0KX0scHJvdG8uc3RyZWFtLlJvb21EZXRhaWwucHJvdG90eXBlLmNsZWFyQnJpZ2FkZXNMaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXRCcmlnYWRlc0xpc3QoW10pfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2dhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIiksdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxyb29tcHJvcGVydHk6dC5nZXRSb29tcHJvcGVydHlfYXNCNjQoKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxO3JldHVybiBwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRSb29tcHJvcGVydHkocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDMsciksMDwocj1lLmdldFJvb21wcm9wZXJ0eV9hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDQscil9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSZXEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSZXEucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJlcS5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSZXEucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSZXEucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLnByb3RvdHlwZS5nZXRSb29tcHJvcGVydHk9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UmVxLnByb3RvdHlwZS5nZXRSb29tcHJvcGVydHlfYXNCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNCNjQodGhpcy5nZXRSb29tcHJvcGVydHkoKSl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSZXEucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eV9hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRSb29tcHJvcGVydHkoKSl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSZXEucHJvdG90eXBlLnNldFJvb21wcm9wZXJ0eT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3A9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3BcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3AudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3RhdHVzOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLHJvb21wcm9wZXJ0eTp0LmdldFJvb21wcm9wZXJ0eV9hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRSb29tcHJvcGVydHkocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLDA8KHI9ZS5nZXRSb29tcHJvcGVydHlfYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcyg0LHIpfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UnNwLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UnNwLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3AucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uU2V0Um9vbVByb3BlcnR5UnNwLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJzcC5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJzcC5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3AucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsXCJcIil9LHByb3RvLnN0cmVhbS5TZXRSb29tUHJvcGVydHlSc3AucHJvdG90eXBlLmdldFJvb21wcm9wZXJ0eV9hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldFJvb21wcm9wZXJ0eSgpKX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJzcC5wcm90b3R5cGUuZ2V0Um9vbXByb3BlcnR5X2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldFJvb21wcm9wZXJ0eSgpKX0scHJvdG8uc3RyZWFtLlNldFJvb21Qcm9wZXJ0eVJzcC5wcm90b3R5cGUuc2V0Um9vbXByb3BlcnR5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLk5vdGljZVJvb21Qcm9wZXJ0eT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uTm90aWNlUm9vbVByb3BlcnR5LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLk5vdGljZVJvb21Qcm9wZXJ0eVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLk5vdGljZVJvb21Qcm9wZXJ0eS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLk5vdGljZVJvb21Qcm9wZXJ0eS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHJvb21wcm9wZXJ0eTp0LmdldFJvb21wcm9wZXJ0eV9hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHk7cmV0dXJuIHByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkQnl0ZXMoKTtlLnNldFJvb21wcm9wZXJ0eShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTm90aWNlUm9vbVByb3BlcnR5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTm90aWNlUm9vbVByb3BlcnR5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwO3I9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMSxyKSwwIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwPChyPWUuZ2V0Um9vbXByb3BlcnR5X2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoMyxyKX0scHJvdG8uc3RyZWFtLk5vdGljZVJvb21Qcm9wZXJ0eS5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSxcIjBcIil9LHByb3RvLnN0cmVhbS5Ob3RpY2VSb29tUHJvcGVydHkucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTm90aWNlUm9vbVByb3BlcnR5LnByb3RvdHlwZS5nZXRVc2VyaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uTm90aWNlUm9vbVByb3BlcnR5LnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLk5vdGljZVJvb21Qcm9wZXJ0eS5wcm90b3R5cGUuZ2V0Um9vbXByb3BlcnR5PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMyxcIlwiKX0scHJvdG8uc3RyZWFtLk5vdGljZVJvb21Qcm9wZXJ0eS5wcm90b3R5cGUuZ2V0Um9vbXByb3BlcnR5X2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Um9vbXByb3BlcnR5KCkpfSxwcm90by5zdHJlYW0uTm90aWNlUm9vbVByb3BlcnR5LnByb3RvdHlwZS5nZXRSb29tcHJvcGVydHlfYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Um9vbXByb3BlcnR5KCkpfSxwcm90by5zdHJlYW0uTm90aWNlUm9vbVByb3BlcnR5LnByb3RvdHlwZS5zZXRSb29tcHJvcGVydHk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uRGVzdHJveVJvb21SZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uRGVzdHJveVJvb21SZXEscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uRGVzdHJveVJvb21SZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uRGVzdHJveVJvb21SZXFcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5EZXN0cm95Um9vbVJlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5EZXN0cm95Um9vbVJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uRGVzdHJveVJvb21SZXEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uRGVzdHJveVJvb21SZXEuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5EZXN0cm95Um9vbVJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uRGVzdHJveVJvb21SZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5EZXN0cm95Um9vbVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5EZXN0cm95Um9vbVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIscil9LHByb3RvLnN0cmVhbS5EZXN0cm95Um9vbVJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUmVxLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUmVxLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUmVxLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uRGVzdHJveVJvb21Sc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uRGVzdHJveVJvb21Sc3AudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uRGVzdHJveVJvb21Sc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5EZXN0cm95Um9vbVJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZEVudW0oKTtlLnNldFN0YXR1cyhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uRGVzdHJveVJvb21Sc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkRlc3Ryb3lSb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlRW51bSgxLHIpfSxwcm90by5zdHJlYW0uRGVzdHJveVJvb21Sc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5EZXN0cm95Um9vbVJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZyxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmcuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e21heHdhdGNoOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSx3YXRjaHBlcnNpc3RlbnQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLCExKSx3YXRjaGRlbGF5bXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLGNhY2hldGltZTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZztyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldE1heHdhdGNoKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZEJvb2woKTtlLnNldFdhdGNocGVyc2lzdGVudChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldFdhdGNoZGVsYXltcyhyKTticmVhaztjYXNlIDQ6cj10LnJlYWRVaW50MzIoKTtlLnNldENhY2hldGltZShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmcuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldE1heHdhdGNoKCkpJiZ0LndyaXRlVWludDMyKDEsciksKHI9ZS5nZXRXYXRjaHBlcnNpc3RlbnQoKSkmJnQud3JpdGVCb29sKDIsciksMCE9PShyPWUuZ2V0V2F0Y2hkZWxheW1zKCkpJiZ0LndyaXRlVWludDMyKDMsciksMCE9PShyPWUuZ2V0Q2FjaGV0aW1lKCkpJiZ0LndyaXRlVWludDMyKDQscil9LHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmcucHJvdG90eXBlLmdldE1heHdhdGNoPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5wcm90b3R5cGUuc2V0TWF4d2F0Y2g9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5wcm90b3R5cGUuZ2V0V2F0Y2hwZXJzaXN0ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwhMSl9LHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmcucHJvdG90eXBlLnNldFdhdGNocGVyc2lzdGVudD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5wcm90b3R5cGUuZ2V0V2F0Y2hkZWxheW1zPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5wcm90b3R5cGUuc2V0V2F0Y2hkZWxheW1zPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmcucHJvdG90eXBlLmdldENhY2hldGltZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmcucHJvdG90eXBlLnNldENhY2hldGltZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uV2F0Y2hJbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLldhdGNoSW5mbyxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5XYXRjaEluZm8uZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uV2F0Y2hJbmZvXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uV2F0Y2hJbmZvLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoSW5mby50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uV2F0Y2hJbmZvLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17cm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSxcIjBcIiksc3RhdGU6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHdhdGNoc2V0dGluZzoocj10LmdldFdhdGNoc2V0dGluZygpKSYmcHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy50b09iamVjdChlLHIpLGN1cndhdGNoOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCwwKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uV2F0Y2hJbmZvLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uV2F0Y2hJbmZvO3JldHVybiBwcm90by5zdHJlYW0uV2F0Y2hJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uV2F0Y2hJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0U3RhdGUocik7YnJlYWs7Y2FzZSAzOnI9bmV3IHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmc7dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5XYXRjaFNldHRpbmcuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFdhdGNoc2V0dGluZyhyKTticmVhaztjYXNlIDQ6cj10LnJlYWRVaW50MzIoKTtlLnNldEN1cndhdGNoKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5XYXRjaEluZm8ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5XYXRjaEluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7cj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygxLHIpLDAhPT0ocj1lLmdldFN0YXRlKCkpJiZ0LndyaXRlVWludDMyKDIsciksbnVsbCE9KHI9ZS5nZXRXYXRjaHNldHRpbmcoKSkmJnQud3JpdGVNZXNzYWdlKDMscixwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKSwwIT09KHI9ZS5nZXRDdXJ3YXRjaCgpKSYmdC53cml0ZVVpbnQzMig0LHIpfSxwcm90by5zdHJlYW0uV2F0Y2hJbmZvLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLFwiMFwiKX0scHJvdG8uc3RyZWFtLldhdGNoSW5mby5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5XYXRjaEluZm8ucHJvdG90eXBlLmdldFN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLldhdGNoSW5mby5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLldhdGNoSW5mby5wcm90b3R5cGUuZ2V0V2F0Y2hzZXR0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLDMpfSxwcm90by5zdHJlYW0uV2F0Y2hJbmZvLnByb3RvdHlwZS5zZXRXYXRjaHNldHRpbmc9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5XYXRjaEluZm8ucHJvdG90eXBlLmNsZWFyV2F0Y2hzZXR0aW5nPWZ1bmN0aW9uKCl7dGhpcy5zZXRXYXRjaHNldHRpbmcodm9pZCAwKX0scHJvdG8uc3RyZWFtLldhdGNoSW5mby5wcm90b3R5cGUuaGFzV2F0Y2hzZXR0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDMpfSxwcm90by5zdHJlYW0uV2F0Y2hJbmZvLnByb3RvdHlwZS5nZXRDdXJ3YXRjaD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5XYXRjaEluZm8ucHJvdG90eXBlLnNldEN1cndhdGNoPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5XYXRjaFJvb209ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLldhdGNoUm9vbS5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLldhdGNoUm9vbSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5XYXRjaFJvb20uZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uV2F0Y2hSb29tXCIpLHByb3RvLnN0cmVhbS5XYXRjaFJvb20ucmVwZWF0ZWRGaWVsZHNfPVsyXSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLldhdGNoUm9vbS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5XYXRjaFJvb20udG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLldhdGNoUm9vbS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByLG89e3dhdGNoaW5mbzoocj10LmdldFdhdGNoaW5mbygpKSYmcHJvdG8uc3RyZWFtLldhdGNoSW5mby50b09iamVjdChlLHIpLHdhdGNocGxheWVyc0xpc3Q6cy5NZXNzYWdlLnRvT2JqZWN0TGlzdCh0LmdldFdhdGNocGxheWVyc0xpc3QoKSxwcm90by5zdHJlYW0uUGxheWVySW5mby50b09iamVjdCxlKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uV2F0Y2hSb29tLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uV2F0Y2hSb29tO3JldHVybiBwcm90by5zdHJlYW0uV2F0Y2hSb29tLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uV2F0Y2hSb29tLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPW5ldyBwcm90by5zdHJlYW0uV2F0Y2hJbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uV2F0Y2hJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRXYXRjaGluZm8ocik7YnJlYWs7Y2FzZSAyOnI9bmV3IHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUGxheWVySW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuYWRkV2F0Y2hwbGF5ZXJzKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5XYXRjaFJvb20ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLldhdGNoUm9vbS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5XYXRjaFJvb20uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7bnVsbCE9KHI9ZS5nZXRXYXRjaGluZm8oKSkmJnQud3JpdGVNZXNzYWdlKDEscixwcm90by5zdHJlYW0uV2F0Y2hJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKSwwPChyPWUuZ2V0V2F0Y2hwbGF5ZXJzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMixyLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLldhdGNoUm9vbS5wcm90b3R5cGUuZ2V0V2F0Y2hpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uV2F0Y2hJbmZvLDEpfSxwcm90by5zdHJlYW0uV2F0Y2hSb29tLnByb3RvdHlwZS5zZXRXYXRjaGluZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5XYXRjaFJvb20ucHJvdG90eXBlLmNsZWFyV2F0Y2hpbmZvPWZ1bmN0aW9uKCl7dGhpcy5zZXRXYXRjaGluZm8odm9pZCAwKX0scHJvdG8uc3RyZWFtLldhdGNoUm9vbS5wcm90b3R5cGUuaGFzV2F0Y2hpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDEpfSxwcm90by5zdHJlYW0uV2F0Y2hSb29tLnByb3RvdHlwZS5nZXRXYXRjaHBsYXllcnNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLDIpfSxwcm90by5zdHJlYW0uV2F0Y2hSb29tLnByb3RvdHlwZS5zZXRXYXRjaHBsYXllcnNMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5XYXRjaFJvb20ucHJvdG90eXBlLmFkZFdhdGNocGxheWVycz1mdW5jdGlvbihlLHQpe3JldHVybiBzLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsZSxwcm90by5zdHJlYW0uUGxheWVySW5mbyx0KX0scHJvdG8uc3RyZWFtLldhdGNoUm9vbS5wcm90b3R5cGUuY2xlYXJXYXRjaHBsYXllcnNMaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXRXYXRjaHBsYXllcnNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLlBsYXlSb29tPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLHByb3RvLnN0cmVhbS5QbGF5Um9vbS5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlBsYXlSb29tLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlBsYXlSb29tLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLlBsYXlSb29tXCIpLHByb3RvLnN0cmVhbS5QbGF5Um9vbS5yZXBlYXRlZEZpZWxkc189WzJdLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uUGxheVJvb20ucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uUGxheVJvb20udG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlBsYXlSb29tLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17cm9vbWluZm86KHI9dC5nZXRSb29taW5mbygpKSYmcHJvdG8uc3RyZWFtLlJvb21JbmZvLnRvT2JqZWN0KGUscikscGxheWVyTGlzdDpzLk1lc3NhZ2UudG9PYmplY3RMaXN0KHQuZ2V0UGxheWVyTGlzdCgpLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnRvT2JqZWN0LGUpfTtyZXR1cm4gZSYmKG8uJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCksb30pLHByb3RvLnN0cmVhbS5QbGF5Um9vbS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLlBsYXlSb29tO3JldHVybiBwcm90by5zdHJlYW0uUGxheVJvb20uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5QbGF5Um9vbS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj1uZXcgcHJvdG8uc3RyZWFtLlJvb21JbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUm9vbUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFJvb21pbmZvKHIpO2JyZWFrO2Nhc2UgMjpyPW5ldyBwcm90by5zdHJlYW0uUGxheWVySW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLmFkZFBsYXllcihyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uUGxheVJvb20ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlBsYXlSb29tLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlBsYXlSb29tLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwO251bGwhPShyPWUuZ2V0Um9vbWluZm8oKSkmJnQud3JpdGVNZXNzYWdlKDEscixwcm90by5zdHJlYW0uUm9vbUluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLDA8KHI9ZS5nZXRQbGF5ZXJMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVJlcGVhdGVkTWVzc2FnZSgyLHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpfSxwcm90by5zdHJlYW0uUGxheVJvb20ucHJvdG90eXBlLmdldFJvb21pbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUm9vbUluZm8sMSl9LHByb3RvLnN0cmVhbS5QbGF5Um9vbS5wcm90b3R5cGUuc2V0Um9vbWluZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5QbGF5Um9vbS5wcm90b3R5cGUuY2xlYXJSb29taW5mbz1mdW5jdGlvbigpe3RoaXMuc2V0Um9vbWluZm8odm9pZCAwKX0scHJvdG8uc3RyZWFtLlBsYXlSb29tLnByb3RvdHlwZS5oYXNSb29taW5mbz1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywxKX0scHJvdG8uc3RyZWFtLlBsYXlSb29tLnByb3RvdHlwZS5nZXRQbGF5ZXJMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLDIpfSxwcm90by5zdHJlYW0uUGxheVJvb20ucHJvdG90eXBlLnNldFBsYXllckxpc3Q9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLlBsYXlSb29tLnByb3RvdHlwZS5hZGRQbGF5ZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywyLGUscHJvdG8uc3RyZWFtLlBsYXllckluZm8sdCl9LHByb3RvLnN0cmVhbS5QbGF5Um9vbS5wcm90b3R5cGUuY2xlYXJQbGF5ZXJMaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXRQbGF5ZXJMaXN0KFtdKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUmVxLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXFcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHVzZXJwcm9maWxlOnQuZ2V0VXNlcnByb2ZpbGVfYXNCNjQoKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LFwiMFwiKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXE7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRCeXRlcygpO2Uuc2V0VXNlcnByb2ZpbGUocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwPChyPWUuZ2V0VXNlcnByb2ZpbGVfYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcygzLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoNCxyKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUmVxLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUmVxLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEucHJvdG90eXBlLmdldFVzZXJwcm9maWxlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMyxcIlwiKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEucHJvdG90eXBlLmdldFVzZXJwcm9maWxlX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0VXNlcnByb2ZpbGUoKSl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUmVxLnByb3RvdHlwZS5nZXRVc2VycHJvZmlsZV9hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRVc2VycHJvZmlsZSgpKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEucHJvdG90eXBlLnNldFVzZXJwcm9maWxlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21SZXEucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsXCIwXCIpfSxwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJlcS5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21Sc3Ascy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17c3RhdHVzOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxib29raW5mbzoocj10LmdldEJvb2tpbmZvKCkpJiZwcm90by5zdHJlYW0uQm9va0luZm8udG9PYmplY3QoZSxyKSxzZXRpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCxcIjBcIil9O3JldHVybiBlJiYoby4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxvfSkscHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21Sc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwO3JldHVybiBwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21Sc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPW5ldyBwcm90by5zdHJlYW0uQm9va0luZm87dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5Cb29rSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0Qm9va2luZm8ocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRTZXRpZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKSxudWxsIT0ocj1lLmdldEJvb2tpbmZvKCkpJiZ0LndyaXRlTWVzc2FnZSgyLHIscHJvdG8uc3RyZWFtLkJvb2tJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKSwwIT09KHI9ZS5nZXRTZXRpZCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoNCxyKX0scHJvdG8uc3RyZWFtLkpvaW5XYXRjaFJvb21Sc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnByb3RvdHlwZS5nZXRCb29raW5mbz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLkJvb2tJbmZvLDIpfSxwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcC5wcm90b3R5cGUuc2V0Qm9va2luZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnByb3RvdHlwZS5jbGVhckJvb2tpbmZvPWZ1bmN0aW9uKCl7dGhpcy5zZXRCb29raW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcC5wcm90b3R5cGUuaGFzQm9va2luZm89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsMil9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnByb3RvdHlwZS5nZXRTZXRpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnByb3RvdHlwZS5zZXRTZXRpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uSm9pbldhdGNoUm9vbVJzcC5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxcIjBcIil9LHByb3RvLnN0cmVhbS5Kb2luV2F0Y2hSb29tUnNwLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2dhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLFwiMFwiKSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5MZWF2ZVdhdGNoUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxO3JldHVybiBwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5MZWF2ZVdhdGNoUm9vbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigyLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMyxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDQscil9LHByb3RvLnN0cmVhbS5MZWF2ZVdhdGNoUm9vbVJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxLnByb3RvdHlwZS5nZXRVc2VyaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCIwXCIpfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEucHJvdG90eXBlLmdldENwcHJvdG9fYXNCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNCNjQodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21SZXEucHJvdG90eXBlLmdldENwcHJvdG9fYXNVOD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUmVxLnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21Sc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21Sc3AudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21Sc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5MZWF2ZVdhdGNoUm9vbVJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZEVudW0oKTtlLnNldFN0YXR1cyhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21Sc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkxlYXZlV2F0Y2hSb29tUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlRW51bSgxLHIpfSxwcm90by5zdHJlYW0uTGVhdmVXYXRjaFJvb21Sc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5MZWF2ZVdhdGNoUm9vbVJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXt1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGdhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMyxcIjBcIiksdGFyZ2V0cm9vbXR5cGU6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LDApLHVzZXJwcm9maWxlOnQuZ2V0VXNlcnByb2ZpbGVfYXNCNjQoKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXE7cmV0dXJuIHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRFbnVtKCk7ZS5zZXRUYXJnZXRyb29tdHlwZShyKTticmVhaztjYXNlIDU6cj10LnJlYWRCeXRlcygpO2Uuc2V0VXNlcnByb2ZpbGUocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMixyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDMsciksMCE9PShyPWUuZ2V0VGFyZ2V0cm9vbXR5cGUoKSkmJnQud3JpdGVFbnVtKDQsciksMDwocj1lLmdldFVzZXJwcm9maWxlX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoNSxyKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUmVxLnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUmVxLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCIwXCIpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJlcS5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUmVxLnByb3RvdHlwZS5nZXRUYXJnZXRyb29tdHlwZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUmVxLnByb3RvdHlwZS5zZXRUYXJnZXRyb29tdHlwZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEucHJvdG90eXBlLmdldFVzZXJwcm9maWxlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSxcIlwiKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEucHJvdG90eXBlLmdldFVzZXJwcm9maWxlX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0VXNlcnByb2ZpbGUoKSl9LHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUmVxLnByb3RvdHlwZS5nZXRVc2VycHJvZmlsZV9hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRVc2VycHJvZmlsZSgpKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSZXEucHJvdG90eXBlLnNldFVzZXJwcm9maWxlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsNSxlKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3A9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3BcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcixvPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRhcmdldHJvb210eXBlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxwbGF5cm9vbToocj10LmdldFBsYXlyb29tKCkpJiZwcm90by5zdHJlYW0uUGxheVJvb20udG9PYmplY3QoZSxyKSxib29raW5mbzoocj10LmdldEJvb2tpbmZvKCkpJiZwcm90by5zdHJlYW0uQm9va0luZm8udG9PYmplY3QoZSxyKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LFwiMFwiKSxzZXRpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDYsMCl9O3JldHVybiBlJiYoby4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxvfSkscHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUnNwO3JldHVybiBwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZEVudW0oKTtlLnNldFRhcmdldHJvb210eXBlKHIpO2JyZWFrO2Nhc2UgMzpyPW5ldyBwcm90by5zdHJlYW0uUGxheVJvb207dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5QbGF5Um9vbS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0UGxheXJvb20ocik7YnJlYWs7Y2FzZSA0OnI9bmV3IHByb3RvLnN0cmVhbS5Cb29rSW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLkJvb2tJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRCb29raW5mbyhyKTticmVhaztjYXNlIDU6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDY6cj10LnJlYWRVaW50MzIoKTtlLnNldFNldGlkKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUnNwLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlRW51bSgxLHIpLDAhPT0ocj1lLmdldFRhcmdldHJvb210eXBlKCkpJiZ0LndyaXRlRW51bSgyLHIpLG51bGwhPShyPWUuZ2V0UGxheXJvb20oKSkmJnQud3JpdGVNZXNzYWdlKDMscixwcm90by5zdHJlYW0uUGxheVJvb20uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLG51bGwhPShyPWUuZ2V0Qm9va2luZm8oKSkmJnQud3JpdGVNZXNzYWdlKDQscixwcm90by5zdHJlYW0uQm9va0luZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoNSxyKSwwIT09KHI9ZS5nZXRTZXRpZCgpKSYmdC53cml0ZVVpbnQzMig2LHIpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLmdldFRhcmdldHJvb210eXBlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLnNldFRhcmdldHJvb210eXBlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcC5wcm90b3R5cGUuZ2V0UGxheXJvb209ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5QbGF5Um9vbSwzKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLnNldFBsYXlyb29tPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcC5wcm90b3R5cGUuY2xlYXJQbGF5cm9vbT1mdW5jdGlvbigpe3RoaXMuc2V0UGxheXJvb20odm9pZCAwKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLmhhc1BsYXlyb29tPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDMpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcC5wcm90b3R5cGUuZ2V0Qm9va2luZm89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5Cb29rSW5mbyw0KX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLnNldEJvb2tpbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcC5wcm90b3R5cGUuY2xlYXJCb29raW5mbz1mdW5jdGlvbigpe3RoaXMuc2V0Qm9va2luZm8odm9pZCAwKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLmhhc0Jvb2tpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDQpfSxwcm90by5zdHJlYW0uQ2hhbmdlUm9sZVJzcC5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSxcIjBcIil9LHByb3RvLnN0cmVhbS5DaGFuZ2VSb2xlUnNwLnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsNSxlKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLmdldFNldGlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKX0scHJvdG8uc3RyZWFtLkNoYW5nZVJvbGVSc3AucHJvdG90eXBlLnNldFNldGlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JlcS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29tZmlsdGVyOihyPXQuZ2V0Um9vbWZpbHRlcigpKSYmcHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIudG9PYmplY3QoZSxyKSxzb3J0OnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxvcmRlcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCkscGFnZW5vOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNSwwKSxwYWdlc2l6ZTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDYsMCl9O3JldHVybiBlJiYoby4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxvfSkscHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxO3JldHVybiBwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9bmV3IHByb3RvLnN0cmVhbS5Sb29tRmlsdGVyO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUm9vbUZpbHRlci5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0Um9vbWZpbHRlcihyKTticmVhaztjYXNlIDM6cj10LnJlYWRFbnVtKCk7ZS5zZXRTb3J0KHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZEVudW0oKTtlLnNldE9yZGVyKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZEludDMyKCk7ZS5zZXRQYWdlbm8ocik7YnJlYWs7Y2FzZSA2OnI9dC5yZWFkSW50MzIoKTtlLnNldFBhZ2VzaXplKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEsciksbnVsbCE9KHI9ZS5nZXRSb29tZmlsdGVyKCkpJiZ0LndyaXRlTWVzc2FnZSgyLHIscHJvdG8uc3RyZWFtLlJvb21GaWx0ZXIuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLDAhPT0ocj1lLmdldFNvcnQoKSkmJnQud3JpdGVFbnVtKDMsciksMCE9PShyPWUuZ2V0T3JkZXIoKSkmJnQud3JpdGVFbnVtKDQsciksMCE9PShyPWUuZ2V0UGFnZW5vKCkpJiZ0LndyaXRlSW50MzIoNSxyKSwwIT09KHI9ZS5nZXRQYWdlc2l6ZSgpKSYmdC53cml0ZUludDMyKDYscil9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnByb3RvdHlwZS5nZXRSb29tZmlsdGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUm9vbUZpbHRlciwyKX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEucHJvdG90eXBlLnNldFJvb21maWx0ZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnByb3RvdHlwZS5jbGVhclJvb21maWx0ZXI9ZnVuY3Rpb24oKXt0aGlzLnNldFJvb21maWx0ZXIodm9pZCAwKX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEucHJvdG90eXBlLmhhc1Jvb21maWx0ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsMil9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnByb3RvdHlwZS5nZXRTb3J0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEucHJvdG90eXBlLnNldFNvcnQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnByb3RvdHlwZS5nZXRPcmRlcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnByb3RvdHlwZS5zZXRPcmRlcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEucHJvdG90eXBlLmdldFBhZ2Vubz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUmVxLnByb3RvdHlwZS5zZXRQYWdlbm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSxlKX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEucHJvdG90eXBlLmdldFBhZ2VzaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSZXEucHJvdG90eXBlLnNldFBhZ2VzaXplPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUnNwLnJlcGVhdGVkRmllbGRzXyxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3BcIikscHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3AucmVwZWF0ZWRGaWVsZHNfPVszXSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JzcC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRvdGFsOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxyb29taW5mb2V4TGlzdDpzLk1lc3NhZ2UudG9PYmplY3RMaXN0KHQuZ2V0Um9vbWluZm9leExpc3QoKSxwcm90by5zdHJlYW0uUm9vbUluZm9FeC50b09iamVjdCxlKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JzcC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkSW50MzIoKTtlLnNldFRvdGFsKHIpO2JyZWFrO2Nhc2UgMzpyPW5ldyBwcm90by5zdHJlYW0uUm9vbUluZm9FeDt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlJvb21JbmZvRXguZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLmFkZFJvb21pbmZvZXgocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEsciksMCE9PShyPWUuZ2V0VG90YWwoKSkmJnQud3JpdGVJbnQzMigyLHIpLDA8KHI9ZS5nZXRSb29taW5mb2V4TGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMyxyLHByb3RvLnN0cmVhbS5Sb29tSW5mb0V4LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUnNwLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUnNwLnByb3RvdHlwZS5nZXRUb3RhbD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUnNwLnByb3RvdHlwZS5zZXRUb3RhbD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JzcC5wcm90b3R5cGUuZ2V0Um9vbWluZm9leExpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlJvb21JbmZvRXgsMyl9LHByb3RvLnN0cmVhbS5HZXRXYXRjaFJvb21zUnNwLnByb3RvdHlwZS5zZXRSb29taW5mb2V4TGlzdD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uR2V0V2F0Y2hSb29tc1JzcC5wcm90b3R5cGUuYWRkUm9vbWluZm9leD1mdW5jdGlvbihlLHQpe3JldHVybiBzLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDMsZSxwcm90by5zdHJlYW0uUm9vbUluZm9FeCx0KX0scHJvdG8uc3RyZWFtLkdldFdhdGNoUm9vbXNSc3AucHJvdG90eXBlLmNsZWFyUm9vbWluZm9leExpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldFJvb21pbmZvZXhMaXN0KFtdKX0scHJvdG8uc3RyZWFtLlRlYW1JbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlRlYW1JbmZvLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlRlYW1JbmZvLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLlRlYW1JbmZvXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uVGVhbUluZm8udG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlRlYW1JbmZvLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3RlYW1pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsXCIwXCIpLHBhc3N3b3JkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIlwiKSxjYXBhY2l0eTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksbW9kZTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCksdmlzaWJpbGl0eTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsMCksb3duZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw2LDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5UZWFtSW5mby5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLlRlYW1JbmZvO3JldHVybiBwcm90by5zdHJlYW0uVGVhbUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5UZWFtSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFRlYW1pZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRTdHJpbmcoKTtlLnNldFBhc3N3b3JkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0Q2FwYWNpdHkocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkSW50MzIoKTtlLnNldE1vZGUocik7YnJlYWs7Y2FzZSA1OnI9dC5yZWFkSW50MzIoKTtlLnNldFZpc2liaWxpdHkocik7YnJlYWs7Y2FzZSA2OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRPd25lcihyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1JbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlRlYW1JbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwO3I9ZS5nZXRUZWFtaWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMSxyKSwwPChyPWUuZ2V0UGFzc3dvcmQoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDIsciksMCE9PShyPWUuZ2V0Q2FwYWNpdHkoKSkmJnQud3JpdGVVaW50MzIoMyxyKSwwIT09KHI9ZS5nZXRNb2RlKCkpJiZ0LndyaXRlSW50MzIoNCxyKSwwIT09KHI9ZS5nZXRWaXNpYmlsaXR5KCkpJiZ0LndyaXRlSW50MzIoNSxyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMig2LHIpfSxwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLmdldFRlYW1pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLnNldFRlYW1pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLmdldFBhc3N3b3JkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIlwiKX0scHJvdG8uc3RyZWFtLlRlYW1JbmZvLnByb3RvdHlwZS5zZXRQYXNzd29yZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLmdldENhcGFjaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlRlYW1JbmZvLnByb3RvdHlwZS5zZXRDYXBhY2l0eT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLmdldE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApfSxwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLnNldE1vZGU9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLlRlYW1JbmZvLnByb3RvdHlwZS5nZXRWaXNpYmlsaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKX0scHJvdG8uc3RyZWFtLlRlYW1JbmZvLnByb3RvdHlwZS5zZXRWaXNpYmlsaXR5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5UZWFtSW5mby5wcm90b3R5cGUuZ2V0T3duZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw2LDApfSxwcm90by5zdHJlYW0uVGVhbUluZm8ucHJvdG90eXBlLnNldE93bmVyPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1SZXEscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSx0ZWFtaW5mbzoocj10LmdldFRlYW1pbmZvKCkpJiZwcm90by5zdHJlYW0uVGVhbUluZm8udG9PYmplY3QoZSxyKSxwbGF5ZXJpbmZvOihyPXQuZ2V0UGxheWVyaW5mbygpKSYmcHJvdG8uc3RyZWFtLlBsYXllckluZm8udG9PYmplY3QoZSxyKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1SZXE7cmV0dXJuIHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj1uZXcgcHJvdG8uc3RyZWFtLlRlYW1JbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uVGVhbUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFRlYW1pbmZvKHIpO2JyZWFrO2Nhc2UgMzpyPW5ldyBwcm90by5zdHJlYW0uUGxheWVySW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFBsYXllcmluZm8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1SZXEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxudWxsIT0ocj1lLmdldFRlYW1pbmZvKCkpJiZ0LndyaXRlTWVzc2FnZSgyLHIscHJvdG8uc3RyZWFtLlRlYW1JbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKSxudWxsIT0ocj1lLmdldFBsYXllcmluZm8oKSkmJnQud3JpdGVNZXNzYWdlKDMscixwcm90by5zdHJlYW0uUGxheWVySW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcil9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxLnByb3RvdHlwZS5nZXRUZWFtaW5mbz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlRlYW1JbmZvLDIpfSxwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcS5wcm90b3R5cGUuc2V0VGVhbWluZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxLnByb3RvdHlwZS5jbGVhclRlYW1pbmZvPWZ1bmN0aW9uKCl7dGhpcy5zZXRUZWFtaW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJlcS5wcm90b3R5cGUuaGFzVGVhbWluZm89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsMil9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxLnByb3RvdHlwZS5nZXRQbGF5ZXJpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUGxheWVySW5mbywzKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1SZXEucHJvdG90eXBlLnNldFBsYXllcmluZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUmVxLnByb3RvdHlwZS5jbGVhclBsYXllcmluZm89ZnVuY3Rpb24oKXt0aGlzLnNldFBsYXllcmluZm8odm9pZCAwKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1SZXEucHJvdG90eXBlLmhhc1BsYXllcmluZm89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsMyl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1Sc3Ascy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksdGVhbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIiksb3duZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJzcDtyZXR1cm4gcHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1Sc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZEVudW0oKTtlLnNldFN0YXR1cyhyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFRlYW1pZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldE93bmVyKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1Sc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlRW51bSgxLHIpLHI9ZS5nZXRUZWFtaWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMigzLHIpfSxwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1Sc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkNyZWF0ZVRlYW1Sc3AucHJvdG90eXBlLmdldFRlYW1pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uQ3JlYXRlVGVhbVJzcC5wcm90b3R5cGUuc2V0VGVhbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwLnByb3RvdHlwZS5nZXRPd25lcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5DcmVhdGVUZWFtUnNwLnByb3RvdHlwZS5zZXRPd25lcj1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uSm9pblRlYW1SZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uSm9pblRlYW1SZXEscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uSm9pblRlYW1SZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uSm9pblRlYW1SZXFcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Kb2luVGVhbVJlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luVGVhbVJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uSm9pblRlYW1SZXEudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcixvPXtnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRlYW1pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCIwXCIpLHBsYXllcmluZm86KHI9dC5nZXRQbGF5ZXJpbmZvKCkpJiZwcm90by5zdHJlYW0uUGxheWVySW5mby50b09iamVjdChlLHIpLHBhc3N3b3JkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCxcIlwiKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uSm9pblRlYW1SZXEuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Kb2luVGVhbVJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5UZWFtUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uSm9pblRlYW1SZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUZWFtaWQocik7YnJlYWs7Y2FzZSAzOnI9bmV3IHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUGxheWVySW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0UGxheWVyaW5mbyhyKTticmVhaztjYXNlIDQ6cj10LnJlYWRTdHJpbmcoKTtlLnNldFBhc3N3b3JkKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5Kb2luVGVhbVJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uSm9pblRlYW1SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uSm9pblRlYW1SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFRlYW1pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLG51bGwhPShyPWUuZ2V0UGxheWVyaW5mbygpKSYmdC53cml0ZU1lc3NhZ2UoMyxyLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKSwwPChyPWUuZ2V0UGFzc3dvcmQoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDQscil9LHByb3RvLnN0cmVhbS5Kb2luVGVhbVJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtUmVxLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtUmVxLnByb3RvdHlwZS5nZXRUZWFtaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtUmVxLnByb3RvdHlwZS5zZXRUZWFtaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtUmVxLnByb3RvdHlwZS5nZXRQbGF5ZXJpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUGxheWVySW5mbywzKX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtUmVxLnByb3RvdHlwZS5zZXRQbGF5ZXJpbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uSm9pblRlYW1SZXEucHJvdG90eXBlLmNsZWFyUGxheWVyaW5mbz1mdW5jdGlvbigpe3RoaXMuc2V0UGxheWVyaW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uSm9pblRlYW1SZXEucHJvdG90eXBlLmhhc1BsYXllcmluZm89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsMyl9LHByb3RvLnN0cmVhbS5Kb2luVGVhbVJlcS5wcm90b3R5cGUuZ2V0UGFzc3dvcmQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uSm9pblRlYW1SZXEucHJvdG90eXBlLnNldFBhc3N3b3JkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcFwiKSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AucmVwZWF0ZWRGaWVsZHNfPVszXSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkpvaW5UZWFtUnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5UZWFtUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByLG89e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksdGVhbWluZm86KHI9dC5nZXRUZWFtaW5mbygpKSYmcHJvdG8uc3RyZWFtLlRlYW1JbmZvLnRvT2JqZWN0KGUsciksdXNlcnNMaXN0OnMuTWVzc2FnZS50b09iamVjdExpc3QodC5nZXRVc2Vyc0xpc3QoKSxwcm90by5zdHJlYW0uUGxheWVySW5mby50b09iamVjdCxlKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcDtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5UZWFtUnNwLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPW5ldyBwcm90by5zdHJlYW0uVGVhbUluZm87dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5UZWFtSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0VGVhbWluZm8ocik7YnJlYWs7Y2FzZSAzOnI9bmV3IHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUGxheWVySW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuYWRkVXNlcnMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtUnNwLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEsciksbnVsbCE9KHI9ZS5nZXRUZWFtaW5mbygpKSYmdC53cml0ZU1lc3NhZ2UoMixyLHByb3RvLnN0cmVhbS5UZWFtSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciksMDwocj1lLmdldFVzZXJzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMyxyLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtUnNwLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtUnNwLnByb3RvdHlwZS5nZXRUZWFtaW5mbz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlRlYW1JbmZvLDIpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AucHJvdG90eXBlLnNldFRlYW1pbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AucHJvdG90eXBlLmNsZWFyVGVhbWluZm89ZnVuY3Rpb24oKXt0aGlzLnNldFRlYW1pbmZvKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcC5wcm90b3R5cGUuaGFzVGVhbWluZm89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsMil9LHByb3RvLnN0cmVhbS5Kb2luVGVhbVJzcC5wcm90b3R5cGUuZ2V0VXNlcnNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLDMpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AucHJvdG90eXBlLnNldFVzZXJzTGlzdD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AucHJvdG90eXBlLmFkZFVzZXJzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHMuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMyxlLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLHQpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Sc3AucHJvdG90eXBlLmNsZWFyVXNlcnNMaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXRVc2Vyc0xpc3QoW10pfSxwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnlcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Kb2luVGVhbU5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Kb2luVGVhbU5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcixvPXt1c2VyOihyPXQuZ2V0VXNlcigpKSYmcHJvdG8uc3RyZWFtLlBsYXllckluZm8udG9PYmplY3QoZSxyKX07cmV0dXJuIGUmJihvLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLG99KSxwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Kb2luVGVhbU5vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5UZWFtTm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9bmV3IHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUGxheWVySW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0VXNlcihyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkpvaW5UZWFtTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkpvaW5UZWFtTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7bnVsbCE9KHI9ZS5nZXRVc2VyKCkpJiZ0LndyaXRlTWVzc2FnZSgxLHIscHJvdG8uc3RyZWFtLlBsYXllckluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnkucHJvdG90eXBlLmdldFVzZXI9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLDEpfSxwcm90by5zdHJlYW0uSm9pblRlYW1Ob3RpZnkucHJvdG90eXBlLnNldFVzZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5Kb2luVGVhbU5vdGlmeS5wcm90b3R5cGUuY2xlYXJVc2VyPWZ1bmN0aW9uKCl7dGhpcy5zZXRVc2VyKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5Kb2luVGVhbU5vdGlmeS5wcm90b3R5cGUuaGFzVXNlcj1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywxKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1SZXEscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uTGVhdmVUZWFtUmVxLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1SZXEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRlYW1pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCIwXCIpLHVzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcTtyZXR1cm4gcHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFRlYW1pZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtUmVxLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1SZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLHI9ZS5nZXRUZWFtaWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKSwwIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMyxyKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1SZXEucHJvdG90eXBlLmdldFRlYW1pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtUmVxLnByb3RvdHlwZS5zZXRUZWFtaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJlcS5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3A9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTGVhdmVUZWFtUnNwLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3BcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTGVhdmVUZWFtUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3AudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3RhdHVzOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSx0ZWFtaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0VGVhbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlRW51bSgxLHIpLHI9ZS5nZXRUZWFtaWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKSwwIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMyxyKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtUnNwLnByb3RvdHlwZS5nZXRUZWFtaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbVJzcC5wcm90b3R5cGUuc2V0VGVhbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3AucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Sc3AucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtTm90aWZ5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkxlYXZlVGVhbU5vdGlmeSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uTGVhdmVUZWFtTm90aWZ5XCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTGVhdmVUZWFtTm90aWZ5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkxlYXZlVGVhbU5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtTm90aWZ5LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3RlYW1pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsXCIwXCIpLHVzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksb3duZXI6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnk7cmV0dXJuIHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUZWFtaWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRPd25lcihyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtTm90aWZ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwO3I9ZS5nZXRUZWFtaWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMSxyKSwwIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMigzLHIpfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtTm90aWZ5LnByb3RvdHlwZS5nZXRUZWFtaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLFwiMFwiKX0scHJvdG8uc3RyZWFtLkxlYXZlVGVhbU5vdGlmeS5wcm90b3R5cGUuc2V0VGVhbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnkucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnkucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uTGVhdmVUZWFtTm90aWZ5LnByb3RvdHlwZS5nZXRPd25lcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5MZWF2ZVRlYW1Ob3RpZnkucHJvdG90eXBlLnNldE93bmVyPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3RlYW1udW06cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRlYW1tZW1iZXJudW06cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHRpbWVvdXQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLHdlaWdodDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCksd2VpZ2h0cmFuZ2U6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LDApLHdlaWdodHJ1bGU6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw2LDApLGZ1bGw6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw3LDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZDtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0VGVhbW51bShyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFRlYW1tZW1iZXJudW0ocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRUaW1lb3V0KHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQzMigpO2Uuc2V0V2VpZ2h0KHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFVpbnQzMigpO2Uuc2V0V2VpZ2h0cmFuZ2Uocik7YnJlYWs7Y2FzZSA2OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRXZWlnaHRydWxlKHIpO2JyZWFrO2Nhc2UgNzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0RnVsbChyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFRlYW1udW0oKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRUZWFtbWVtYmVybnVtKCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0VGltZW91dCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLDAhPT0ocj1lLmdldFdlaWdodCgpKSYmdC53cml0ZVVpbnQzMig0LHIpLDAhPT0ocj1lLmdldFdlaWdodHJhbmdlKCkpJiZ0LndyaXRlVWludDMyKDUsciksMCE9PShyPWUuZ2V0V2VpZ2h0cnVsZSgpKSYmdC53cml0ZVVpbnQzMig2LHIpLDAhPT0ocj1lLmdldEZ1bGwoKSkmJnQud3JpdGVVaW50MzIoNyxyKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQucHJvdG90eXBlLmdldFRlYW1udW09ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC5wcm90b3R5cGUuc2V0VGVhbW51bT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC5wcm90b3R5cGUuZ2V0VGVhbW1lbWJlcm51bT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLnByb3RvdHlwZS5zZXRUZWFtbWVtYmVybnVtPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLnByb3RvdHlwZS5nZXRUaW1lb3V0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQucHJvdG90eXBlLnNldFRpbWVvdXQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQucHJvdG90eXBlLmdldFdlaWdodD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLnByb3RvdHlwZS5zZXRXZWlnaHQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQucHJvdG90eXBlLmdldFdlaWdodHJhbmdlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQucHJvdG90eXBlLnNldFdlaWdodHJhbmdlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kLnByb3RvdHlwZS5nZXRXZWlnaHRydWxlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQucHJvdG90eXBlLnNldFdlaWdodHJ1bGU9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNixlKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQucHJvdG90eXBlLmdldEZ1bGw9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LDApfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC5wcm90b3R5cGUuc2V0RnVsbD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw3LGUpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSx0ZWFtaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLGNvbmQ6KHI9dC5nZXRDb25kKCkpJiZwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC50b09iamVjdChlLHIpLHJvb21pbmZvOihyPXQuZ2V0Um9vbWluZm8oKSkmJnByb3RvLnN0cmVhbS5Sb29tSW5mby50b09iamVjdChlLHIpLHdhdGNoc2V0dGluZzoocj10LmdldFdhdGNoc2V0dGluZygpKSYmcHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy50b09iamVjdChlLHIpfTtyZXR1cm4gZSYmKG8uJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCksb30pLHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXE7cmV0dXJuIHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUZWFtaWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSA0OnI9bmV3IHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hDb25kO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0Q29uZChyKTticmVhaztjYXNlIDU6cj1uZXcgcHJvdG8uc3RyZWFtLlJvb21JbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUm9vbUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFJvb21pbmZvKHIpO2JyZWFrO2Nhc2UgNjpyPW5ldyBwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRXYXRjaHNldHRpbmcocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0VGVhbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDMsciksbnVsbCE9KHI9ZS5nZXRDb25kKCkpJiZ0LndyaXRlTWVzc2FnZSg0LHIscHJvdG8uc3RyZWFtLlRlYW1NYXRjaENvbmQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLG51bGwhPShyPWUuZ2V0Um9vbWluZm8oKSkmJnQud3JpdGVNZXNzYWdlKDUscixwcm90by5zdHJlYW0uUm9vbUluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpLG51bGwhPShyPWUuZ2V0V2F0Y2hzZXR0aW5nKCkpJiZ0LndyaXRlTWVzc2FnZSg2LHIscHJvdG8uc3RyZWFtLldhdGNoU2V0dGluZy5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcil9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxLnByb3RvdHlwZS5nZXRUZWFtaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcS5wcm90b3R5cGUuc2V0VGVhbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxLnByb3RvdHlwZS5nZXRDb25kPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uVGVhbU1hdGNoQ29uZCw0KX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcS5wcm90b3R5cGUuc2V0Q29uZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcS5wcm90b3R5cGUuY2xlYXJDb25kPWZ1bmN0aW9uKCl7dGhpcy5zZXRDb25kKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEucHJvdG90eXBlLmhhc0NvbmQ9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9cy5NZXNzYWdlLmdldEZpZWxkKHRoaXMsNCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEucHJvdG90eXBlLmdldFJvb21pbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUm9vbUluZm8sNSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEucHJvdG90eXBlLnNldFJvb21pbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxLnByb3RvdHlwZS5jbGVhclJvb21pbmZvPWZ1bmN0aW9uKCl7dGhpcy5zZXRSb29taW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxLnByb3RvdHlwZS5oYXNSb29taW5mbz1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcyw1KX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcS5wcm90b3R5cGUuZ2V0V2F0Y2hzZXR0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uV2F0Y2hTZXR0aW5nLDYpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVxLnByb3RvdHlwZS5zZXRXYXRjaHNldHRpbmc9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXEucHJvdG90eXBlLmNsZWFyV2F0Y2hzZXR0aW5nPWZ1bmN0aW9uKCl7dGhpcy5zZXRXYXRjaHNldHRpbmcodm9pZCAwKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlcS5wcm90b3R5cGUuaGFzV2F0Y2hzZXR0aW5nPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDYpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSc3AuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uVGVhbU1hdGNoUnNwXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uVGVhbU1hdGNoUnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUnNwLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcDtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uVGVhbU1hdGNoUnNwLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZUVudW0oMSxyKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJzcC5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uVGVhbURldGFpbD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uVGVhbURldGFpbC5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uVGVhbURldGFpbC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5UZWFtRGV0YWlsXCIpLHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLnJlcGVhdGVkRmllbGRzXz1bMl0scy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcixvPXt0ZWFtaW5mbzoocj10LmdldFRlYW1pbmZvKCkpJiZwcm90by5zdHJlYW0uVGVhbUluZm8udG9PYmplY3QoZSxyKSxwbGF5ZXJMaXN0OnMuTWVzc2FnZS50b09iamVjdExpc3QodC5nZXRQbGF5ZXJMaXN0KCkscHJvdG8uc3RyZWFtLlBsYXllckluZm8udG9PYmplY3QsZSl9O3JldHVybiBlJiYoby4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxvfSkscHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsO3JldHVybiBwcm90by5zdHJlYW0uVGVhbURldGFpbC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9bmV3IHByb3RvLnN0cmVhbS5UZWFtSW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLlRlYW1JbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRUZWFtaW5mbyhyKTticmVhaztjYXNlIDI6cj1uZXcgcHJvdG8uc3RyZWFtLlBsYXllckluZm87dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5hZGRQbGF5ZXIocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uVGVhbURldGFpbC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtudWxsIT0ocj1lLmdldFRlYW1pbmZvKCkpJiZ0LndyaXRlTWVzc2FnZSgxLHIscHJvdG8uc3RyZWFtLlRlYW1JbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKSwwPChyPWUuZ2V0UGxheWVyTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMixyLHByb3RvLnN0cmVhbS5QbGF5ZXJJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKX0scHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwucHJvdG90eXBlLmdldFRlYW1pbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uVGVhbUluZm8sMSl9LHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLnByb3RvdHlwZS5zZXRUZWFtaW5mbz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwucHJvdG90eXBlLmNsZWFyVGVhbWluZm89ZnVuY3Rpb24oKXt0aGlzLnNldFRlYW1pbmZvKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLnByb3RvdHlwZS5oYXNUZWFtaW5mbz1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywxKX0scHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwucHJvdG90eXBlLmdldFBsYXllckxpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlBsYXllckluZm8sMil9LHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLnByb3RvdHlwZS5zZXRQbGF5ZXJMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLnByb3RvdHlwZS5hZGRQbGF5ZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywyLGUscHJvdG8uc3RyZWFtLlBsYXllckluZm8sdCl9LHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLnByb3RvdHlwZS5jbGVhclBsYXllckxpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldFBsYXllckxpc3QoW10pfSxwcm90by5zdHJlYW0uQnJpZ2FkZUluZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLnJlcGVhdGVkRmllbGRzXyxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uQnJpZ2FkZUluZm8scy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQnJpZ2FkZUluZm8uZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uQnJpZ2FkZUluZm9cIikscHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLnJlcGVhdGVkRmllbGRzXz1bMl0scy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uQnJpZ2FkZUluZm8udG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17YnJpZ2FkZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSx0ZWFtc0xpc3Q6cy5NZXNzYWdlLnRvT2JqZWN0TGlzdCh0LmdldFRlYW1zTGlzdCgpLHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLnRvT2JqZWN0LGUpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvO3JldHVybiBwcm90by5zdHJlYW0uQnJpZ2FkZUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEJyaWdhZGVpZChyKTticmVhaztjYXNlIDI6cj1uZXcgcHJvdG8uc3RyZWFtLlRlYW1EZXRhaWw7dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5UZWFtRGV0YWlsLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5hZGRUZWFtcyhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uQnJpZ2FkZUluZm8ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldEJyaWdhZGVpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDA8KHI9ZS5nZXRUZWFtc0xpc3QoKSkubGVuZ3RoJiZ0LndyaXRlUmVwZWF0ZWRNZXNzYWdlKDIscixwcm90by5zdHJlYW0uVGVhbURldGFpbC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcil9LHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby5wcm90b3R5cGUuZ2V0QnJpZ2FkZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLnByb3RvdHlwZS5zZXRCcmlnYWRlaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLnByb3RvdHlwZS5nZXRUZWFtc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMscHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwsMil9LHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby5wcm90b3R5cGUuc2V0VGVhbXNMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby5wcm90b3R5cGUuYWRkVGVhbXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywyLGUscHJvdG8uc3RyZWFtLlRlYW1EZXRhaWwsdCl9LHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby5wcm90b3R5cGUuY2xlYXJUZWFtc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldFRlYW1zTGlzdChbXSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVzdWx0Tm90aWZ5XCIpLHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkucmVwZWF0ZWRGaWVsZHNfPVsyXSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByLG89e3N0YXR1czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksYnJpZ2FkZXNMaXN0OnMuTWVzc2FnZS50b09iamVjdExpc3QodC5nZXRCcmlnYWRlc0xpc3QoKSxwcm90by5zdHJlYW0uQnJpZ2FkZUluZm8udG9PYmplY3QsZSkscm9vbWluZm86KHI9dC5nZXRSb29taW5mbygpKSYmcHJvdG8uc3RyZWFtLlJvb21JbmZvLnRvT2JqZWN0KGUsciksYm9va2luZm86KHI9dC5nZXRCb29raW5mbygpKSYmcHJvdG8uc3RyZWFtLkJvb2tJbmZvLnRvT2JqZWN0KGUscil9O3JldHVybiBlJiYoby4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxvfSkscHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9bmV3IHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mbzt0LnJlYWRNZXNzYWdlKHIscHJvdG8uc3RyZWFtLkJyaWdhZGVJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5hZGRCcmlnYWRlcyhyKTticmVhaztjYXNlIDM6cj1uZXcgcHJvdG8uc3RyZWFtLlJvb21JbmZvO3QucmVhZE1lc3NhZ2Uocixwcm90by5zdHJlYW0uUm9vbUluZm8uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKSxlLnNldFJvb21pbmZvKHIpO2JyZWFrO2Nhc2UgNDpyPW5ldyBwcm90by5zdHJlYW0uQm9va0luZm87dC5yZWFkTWVzc2FnZShyLHByb3RvLnN0cmVhbS5Cb29rSW5mby5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpLGUuc2V0Qm9va2luZm8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVzdWx0Tm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEsciksMDwocj1lLmdldEJyaWdhZGVzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZE1lc3NhZ2UoMixyLHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciksbnVsbCE9KHI9ZS5nZXRSb29taW5mbygpKSYmdC53cml0ZU1lc3NhZ2UoMyxyLHByb3RvLnN0cmVhbS5Sb29tSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlciksbnVsbCE9KHI9ZS5nZXRCb29raW5mbygpKSYmdC53cml0ZU1lc3NhZ2UoNCxyLHByb3RvLnN0cmVhbS5Cb29rSW5mby5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcil9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5wcm90b3R5cGUuZ2V0QnJpZ2FkZXNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mbywyKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5wcm90b3R5cGUuc2V0QnJpZ2FkZXNMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkucHJvdG90eXBlLmFkZEJyaWdhZGVzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHMuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsMixlLHByb3RvLnN0cmVhbS5CcmlnYWRlSW5mbyx0KX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5wcm90b3R5cGUuY2xlYXJCcmlnYWRlc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldEJyaWdhZGVzTGlzdChbXSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkucHJvdG90eXBlLmdldFJvb21pbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcyxwcm90by5zdHJlYW0uUm9vbUluZm8sMyl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkucHJvdG90eXBlLnNldFJvb21pbmZvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVzdWx0Tm90aWZ5LnByb3RvdHlwZS5jbGVhclJvb21pbmZvPWZ1bmN0aW9uKCl7dGhpcy5zZXRSb29taW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoUmVzdWx0Tm90aWZ5LnByb3RvdHlwZS5oYXNSb29taW5mbz1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcywzKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5wcm90b3R5cGUuZ2V0Qm9va2luZm89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLHByb3RvLnN0cmVhbS5Cb29rSW5mbyw0KX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFJlc3VsdE5vdGlmeS5wcm90b3R5cGUuc2V0Qm9va2luZm89ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkucHJvdG90eXBlLmNsZWFyQm9va2luZm89ZnVuY3Rpb24oKXt0aGlzLnNldEJvb2tpbmZvKHZvaWQgMCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hSZXN1bHROb3RpZnkucHJvdG90eXBlLmhhc0Jvb2tpbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGwhPXMuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLDQpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoU3RhcnROb3RpZnk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uVGVhbU1hdGNoU3RhcnROb3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uVGVhbU1hdGNoU3RhcnROb3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uVGVhbU1hdGNoU3RhcnROb3RpZnlcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoU3RhcnROb3RpZnkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17dGVhbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSxcIjBcIiksdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uVGVhbU1hdGNoU3RhcnROb3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLlRlYW1NYXRjaFN0YXJ0Tm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uVGVhbU1hdGNoU3RhcnROb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUZWFtaWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFN0YXJ0Tm90aWZ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0VGVhbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDIscil9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeS5wcm90b3R5cGUuZ2V0VGVhbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSxcIjBcIil9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeS5wcm90b3R5cGUuc2V0VGVhbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5UZWFtTWF0Y2hTdGFydE5vdGlmeS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLlRlYW1NYXRjaFN0YXJ0Tm90aWZ5LnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSZXEscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUmVxLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSZXEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtnYW1laWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRlYW1pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCIwXCIpLHVzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksY3Bwcm90bzp0LmdldENwcHJvdG9fYXNCNjQoKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUmVxLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUmVxO3JldHVybiBwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0VGVhbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRDcHByb3RvKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSZXEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFRlYW1pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLDA8KHI9ZS5nZXRDcHByb3RvX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoNCxyKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcS5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSZXEucHJvdG90eXBlLmdldFRlYW1pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUmVxLnByb3RvdHlwZS5zZXRUZWFtaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcS5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSZXEucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJlcS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUmVxLnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3Ascy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoUnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJzcFwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJzcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3AudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3A7cmV0dXJuIHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaFJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEscil9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3AucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hSc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hOb3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoTm90aWZ5LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hOb3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXt0ZWFtaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFRlYW1pZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoTm90aWZ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hOb3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwO3I9ZS5nZXRUZWFtaWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMSxyKSwwIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDMscil9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hOb3RpZnkucHJvdG90eXBlLmdldFRlYW1pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoTm90aWZ5LnByb3RvdHlwZS5zZXRUZWFtaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeS5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5DYW5jZWxUZWFtTWF0Y2hOb3RpZnkucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLFwiXCIpfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkNhbmNlbFRlYW1NYXRjaE5vdGlmeS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uQ2FuY2VsVGVhbU1hdGNoTm90aWZ5LnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXE9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcVwiKSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5yZXBlYXRlZEZpZWxkc189WzZdLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2dhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksdGVhbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIiksdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxkc3R0eXBlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCwwKSxtc2d0eXBlOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNSwwKSxkc3R1aWRzTGlzdDpzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0LDYpLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxO3JldHVybiBwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUZWFtaWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkRW51bSgpO2Uuc2V0RHN0dHlwZShyKTticmVhaztjYXNlIDU6cj10LnJlYWRFbnVtKCk7ZS5zZXRNc2d0eXBlKHIpO2JyZWFrO2Nhc2UgNjpyPXQucmVhZFBhY2tlZFVpbnQzMigpO2Uuc2V0RHN0dWlkc0xpc3Qocik7YnJlYWs7Y2FzZSA3OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0VGVhbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDMsciksMCE9PShyPWUuZ2V0RHN0dHlwZSgpKSYmdC53cml0ZUVudW0oNCxyKSwwIT09KHI9ZS5nZXRNc2d0eXBlKCkpJiZ0LndyaXRlRW51bSg1LHIpLDA8KHI9ZS5nZXREc3R1aWRzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVQYWNrZWRVaW50MzIoNixyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDcscil9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLnByb3RvdHlwZS5nZXRUZWFtaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEucHJvdG90eXBlLnNldFRlYW1pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUuZ2V0RHN0dHlwZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLnByb3RvdHlwZS5zZXREc3R0eXBlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUuZ2V0TXNndHlwZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLnByb3RvdHlwZS5zZXRNc2d0eXBlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUuZ2V0RHN0dWlkc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcyw2KX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEucHJvdG90eXBlLnNldERzdHVpZHNMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDYsZXx8W10pfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUuYWRkRHN0dWlkcz1mdW5jdGlvbihlLHQpe3MuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcyw2LGUsdCl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLnByb3RvdHlwZS5jbGVhckRzdHVpZHNMaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXREc3R1aWRzTGlzdChbXSl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UmVxLnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNyxcIlwiKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSZXEucHJvdG90eXBlLmdldENwcHJvdG9fYXNCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNCNjQodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJlcS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDcsZSl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UnNwPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UnNwLnJlcGVhdGVkRmllbGRzXyxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UnNwLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3BcIikscHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3AucmVwZWF0ZWRGaWVsZHNfPVsyXSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3AucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJzcC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGRzdHVzZXJpZHNMaXN0OnMuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHQsMil9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3AuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UnNwO3JldHVybiBwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkRW51bSgpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFBhY2tlZFVpbnQzMigpO2Uuc2V0RHN0dXNlcmlkc0xpc3Qocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3AucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJzcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVFbnVtKDEsciksMDwocj1lLmdldERzdHVzZXJpZHNMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVBhY2tlZFVpbnQzMigyLHIpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJzcC5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3AucHJvdG90eXBlLmdldERzdHVzZXJpZHNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsMil9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50UnNwLnByb3RvdHlwZS5zZXREc3R1c2VyaWRzTGlzdD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywyLGV8fFtdKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnRSc3AucHJvdG90eXBlLmFkZERzdHVzZXJpZHM9ZnVuY3Rpb24oZSx0KXtzLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsMixlLHQpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudFJzcC5wcm90b3R5cGUuY2xlYXJEc3R1c2VyaWRzTGlzdD1mdW5jdGlvbigpe3RoaXMuc2V0RHN0dXNlcmlkc0xpc3QoW10pfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudE5vdGlmeT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50Tm90aWZ5LHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnROb3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudE5vdGlmeVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnROb3RpZnkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudE5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudE5vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXt0ZWFtaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnROb3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50Tm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudE5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnROb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUZWFtaWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnROb3RpZnkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnROb3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudE5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0VGVhbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDIsciksMDwocj1lLmdldENwcHJvdG9fYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcygzLHIpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudE5vdGlmeS5wcm90b3R5cGUuZ2V0VGVhbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSxcIjBcIil9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50Tm90aWZ5LnByb3RvdHlwZS5zZXRUZWFtaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnROb3RpZnkucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50Tm90aWZ5LnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLlNlbmRUZWFtRXZlbnROb3RpZnkucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLFwiXCIpfSxwcm90by5zdHJlYW0uU2VuZFRlYW1FdmVudE5vdGlmeS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50Tm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5TZW5kVGVhbUV2ZW50Tm90aWZ5LnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxXCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXEucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2dhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksdGVhbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIiksdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxkc3R1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXE7cmV0dXJuIHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJlcS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0VGVhbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQzMigpO2Uuc2V0RHN0dXNlcmlkKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRDcHByb3RvKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJlcS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFRlYW1pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLDAhPT0ocj1lLmdldERzdHVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMig0LHIpLDA8KHI9ZS5nZXRDcHByb3RvX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoNSxyKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXEucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXEucHJvdG90eXBlLmdldFRlYW1pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXEucHJvdG90eXBlLnNldFRlYW1pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSZXEucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJlcS5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJlcS5wcm90b3R5cGUuZ2V0RHN0dXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLnByb3RvdHlwZS5zZXREc3R1c2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSxcIlwiKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUmVxLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJlcS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcD1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3AucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcFwiKSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3AucmVwZWF0ZWRGaWVsZHNfPVs0XSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUnNwLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUnNwLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRlYW1pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCIwXCIpLG93bmVyOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxtZW1iZXJzTGlzdDpzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0LDQpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pO3Byb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcC5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUnNwO3JldHVybiBwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3AuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRFbnVtKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUZWFtaWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRPd25lcihyKTticmVhaztjYXNlIDQ6cj10LnJlYWRQYWNrZWRVaW50MzIoKTtlLnNldE1lbWJlcnNMaXN0KHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3Auc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlRW51bSgxLHIpLHI9ZS5nZXRUZWFtaWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKSwwIT09KHI9ZS5nZXRPd25lcigpKSYmdC53cml0ZVVpbnQzMigzLHIpLDA8KHI9ZS5nZXRNZW1iZXJzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVQYWNrZWRVaW50MzIoNCxyKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUnNwLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3AucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zRW51bUZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUnNwLnByb3RvdHlwZS5nZXRUZWFtaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUnNwLnByb3RvdHlwZS5zZXRUZWFtaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUnNwLnByb3RvdHlwZS5nZXRPd25lcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlclJzcC5wcm90b3R5cGUuc2V0T3duZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyUnNwLnByb3RvdHlwZS5nZXRNZW1iZXJzTGlzdD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDQpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3AucHJvdG90eXBlLnNldE1lbWJlcnNMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDQsZXx8W10pfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3AucHJvdG90eXBlLmFkZE1lbWJlcnM9ZnVuY3Rpb24oZSx0KXtzLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsNCxlLHQpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJSc3AucHJvdG90eXBlLmNsZWFyTWVtYmVyc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldE1lbWJlcnNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5XCIpLHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5yZXBlYXRlZEZpZWxkc189WzVdLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3RlYW1pZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsXCIwXCIpLHVzZXJpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksZHN0dXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxvd25lcjpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCksbWVtYmVyc0xpc3Q6cy5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodCw1KSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFRlYW1pZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldERzdHVzZXJpZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRVaW50MzIoKTtlLnNldE93bmVyKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFBhY2tlZFVpbnQzMigpO2Uuc2V0TWVtYmVyc0xpc3Qocik7YnJlYWs7Y2FzZSA2OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0VGVhbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0RHN0dXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDMsciksMCE9PShyPWUuZ2V0T3duZXIoKSkmJnQud3JpdGVVaW50MzIoNCxyKSwwPChyPWUuZ2V0TWVtYmVyc0xpc3QoKSkubGVuZ3RoJiZ0LndyaXRlUGFja2VkVWludDMyKDUsciksMDwocj1lLmdldENwcHJvdG9fYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcyg2LHIpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkucHJvdG90eXBlLmdldFRlYW1pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkucHJvdG90eXBlLnNldFRlYW1pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5wcm90b3R5cGUuZ2V0RHN0dXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LnByb3RvdHlwZS5zZXREc3R1c2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LnByb3RvdHlwZS5nZXRPd25lcj1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5wcm90b3R5cGUuc2V0T3duZXI9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LnByb3RvdHlwZS5nZXRNZW1iZXJzTGlzdD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDUpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkucHJvdG90eXBlLnNldE1lbWJlcnNMaXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDUsZXx8W10pfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkucHJvdG90eXBlLmFkZE1lbWJlcnM9ZnVuY3Rpb24oZSx0KXtzLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsNSxlLHQpfSxwcm90by5zdHJlYW0uS2lja1RlYW1NZW1iZXJOb3RpZnkucHJvdG90eXBlLmNsZWFyTWVtYmVyc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldE1lbWJlcnNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNixcIlwiKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLktpY2tUZWFtTWVtYmVyTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5LaWNrVGVhbU1lbWJlck5vdGlmeS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5DbWRJZD17Tk9DTUQ6MCxMT0dJTlJFUToxMTAxLExPR0lOUlNQOjExMDIsSEVBUlRCRUFUUkVROjExMDMsTE9HT1VUUkVROjExMDUsTE9HT1VUUlNQOjExMDYsU0VUUkVDT05ORUNUVElNRU9VVFJFUToxMTA5LFNFVFJFQ09OTkVDVFRJTUVPVVRSU1A6MTExMCxORVRXT1JLU1RBVEVSRVE6MTEyMCxORVRXT1JLU1RBVEVSU1A6MTEyMSxOT1RJQ0VORVRXT1JLU1RBVEVSRVE6MTEyMixKT0lOUk9PTVJFUToxMjAxLEpPSU5ST09NUlNQOjEyMDIsTk9USUNFVVNFUkpPSU5SRVE6MTMwMSxDUkVBVEVST09NUkVROjEyMDMsQ1JFQVRFUk9PTVJTUDoxMjA0LExFQVZFUk9PTVJFUToxMjA1LExFQVZFUk9PTVJTUDoxMjA2LE5PVElDRVVTRVJMRUFWRVJFUToxMzAyLEdFVFJPT01MSVNUUkVROjEyMDcsR0VUUk9PTUxJU1RSU1A6MTIwOCxHRVRST09NREVUQUlMUkVROjEyMDksR0VUUk9PTURFVEFJTFJTUDoxMjEwLFJPT01ERVRBSUxVUERBVEVOT1RJRlk6MTIxMSxKT0lOT1ZFUlJFUToxMjEzLEpPSU5PVkVSUlNQOjEyMTQsSk9JTk9WRVJOT1RJRlk6MTMwNixST09NTElTVEVYUkVROjEyMTUsUk9PTUxJU1RFWFJTUDoxMjE2LE1WU1NUQVJURURSRVE6MTIxNyxNVlNTVEFSVEVEUlNQOjEyMTgsU0VUUk9PTVBST1BFUlRZUkVROjEyMTksU0VUUk9PTVBST1BFUlRZUlNQOjEyMjAsTk9USUNFUk9PTVBST1BFUlRZOjEzMDcsSk9JTk9QRU5SRVE6MTIyMSxKT0lOT1BFTlJTUDoxMjIyLEpPSU5PUEVOTk9USUZZOjEzMDgsREVTVFJPWVJPT01SRVE6MTIyMyxERVNUUk9ZUk9PTVJTUDoxMjI0LEpPSU5XQVRDSFJPT01SRVE6MTIyNSxKT0lOV0FUQ0hST09NUlNQOjEyMjYsTEVBVkVXQVRDSFJPT01SRVE6MTIyNyxMRUFWRVdBVENIUk9PTVJTUDoxMjI4LEdFVFdBVENIUk9PTVNSRVE6MTIyOSxHRVRXQVRDSFJPT01TUlNQOjEyMzAsQ0hBTkdFUk9MRVJFUToxMjMxLENIQU5HRVJPTEVSU1A6MTIzMixLSUNLUExBWUVSUkVROjEzMDMsS0lDS1BMQVlFUlJTUDoxMzA0LEtJQ0tQTEFZRVJOT1RJRlk6MTMwNSxDUkVBVEVURUFNUkVROjEyMzMsQ1JFQVRFVEVBTVJTUDoxMjM0LEpPSU5URUFNUkVROjEyMzUsSk9JTlRFQU1SU1A6MTIzNixKT0lOVEVBTU5PVElGWToxMzA5LExFQVZFVEVBTVJFUToxMjM3LExFQVZFVEVBTVJTUDoxMjM4LExFQVZFVEVBTU5PVElGWToxMzEwLFRFQU1NQVRDSFJFUToxMjM5LFRFQU1NQVRDSFJTUDoxMjQwLFRFQU1NQVRDSFJFU1VMVE5PVElGWToxMzExLFRFQU1NQVRDSFNUQVJUTk9USUZZOjEzMTIsQ0FOQ0VMVEVBTU1BVENIUkVROjEyNDEsQ0FOQ0VMVEVBTU1BVENIUlNQOjEyNDIsQ0FOQ0VMVEVBTU1BVENITk9USUZZOjEzMTMsU0VORFRFQU1FVkVOVFJFUToxMjQzLFNFTkRURUFNRVZFTlRSU1A6MTI0NCxTRU5EVEVBTUVWRU5UTk9USUZZOjEzMTQsS0lDS1RFQU1NRU1CRVJSRVE6MTI0NSxLSUNLVEVBTU1FTUJFUlJTUDoxMjQ2LEtJQ0tURUFNTUVNQkVSTk9USUZZOjEzMTV9LHByb3RvLnN0cmVhbS5Kb2luUm9vbVR5cGU9e05PSk9JTjowLEpPSU5TUEVDSUFMUk9PTToxLEpPSU5ST09NV0lUSFBST1BFUlRZOjIsSk9JTlJBTkRPTVJPT006MyxSRUpPSU5ST09NOjQsQ1JFQVRFSk9JTlJPT006NSxXQVRDSEVSSk9JTjo2fSxwcm90by5zdHJlYW0uUm9vbVN0YXRlPXtST09NU1RBVEVOSUw6MCxST09NU1RBVEVPUEVOOjEsUk9PTVNUQVRFQ0xPU0VEOjJ9LHByb3RvLnN0cmVhbS5DcmVhdGVGbGFnPXtDUkVBVEVST09NVU5LTk9XTjowLENSRUFURVJPT01TWVNURU06MSxDUkVBVEVST09NUExBWUVSOjIsQ1JFQVRFUk9PTUdTOjN9LHByb3RvLnN0cmVhbS5Sb29tTGlzdFNvcnQ9e05JTDowLENSRUFURVRJTUU6MSxQTEFZRVJOVU06MixTVEFURTozfSxwcm90by5zdHJlYW0uU29ydE9yZGVyPXtBU0M6MCxERVNDOjF9LHByb3RvLnN0cmVhbS5Sb29tVHlwZT17R0FNRVJPT006MCxXQVRDSFJPT01UWVBFOjF9LHByb3RvLnN0cmVhbS5UZWFtRHN0VHlwZT17RFNUX1RZUEVfSU5DTFVTSVZFOjAsRFNUX1RZUEVfRVhDTFVTSVZFOjF9LHByb3RvLnN0cmVhbS5UZWFtTXNnVHlwZT17TVNHX1RZUEVfU0RLMV9HUzA6MCxNU0dfVFlQRV9TREswX0dTMToxLE1TR19UWVBFX1NESzFfR1MxOjJ9LG8ub2JqZWN0LmV4dGVuZChyLHByb3RvLnN0cmVhbSl9LHtcIi4vZXJyb3Jjb2RlX3BiLmpzXCI6NSxcImdvb2dsZS1wcm90b2J1ZlwiOjh9XSw4OltmdW5jdGlvbihfcmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7KGZ1bmN0aW9uKGdsb2JhbCxCdWZmZXIpe3ZhciAkanNjb21wPXtzY29wZTp7fSxnZXRHbG9iYWw6ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93PT09ZT9lOnZvaWQgMCE9PWdsb2JhbD9nbG9iYWw6ZX19OyRqc2NvbXAuZ2xvYmFsPSRqc2NvbXAuZ2V0R2xvYmFsKHRoaXMpLCRqc2NvbXAuaW5pdFN5bWJvbD1mdW5jdGlvbigpeyRqc2NvbXAuZ2xvYmFsLlN5bWJvbHx8KCRqc2NvbXAuZ2xvYmFsLlN5bWJvbD0kanNjb21wLlN5bWJvbCksJGpzY29tcC5pbml0U3ltYm9sPWZ1bmN0aW9uKCl7fX0sJGpzY29tcC5zeW1ib2xDb3VudGVyXz0wLCRqc2NvbXAuU3ltYm9sPWZ1bmN0aW9uKGUpe3JldHVyblwianNjb21wX3N5bWJvbF9cIitlKyRqc2NvbXAuc3ltYm9sQ291bnRlcl8rK30sJGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3I9ZnVuY3Rpb24oKXskanNjb21wLmluaXRTeW1ib2woKSwkanNjb21wLmdsb2JhbC5TeW1ib2wuaXRlcmF0b3J8fCgkanNjb21wLmdsb2JhbC5TeW1ib2wuaXRlcmF0b3I9JGpzY29tcC5nbG9iYWwuU3ltYm9sKFwiaXRlcmF0b3JcIikpLCRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yPWZ1bmN0aW9uKCl7fX0sJGpzY29tcC5tYWtlSXRlcmF0b3I9ZnVuY3Rpb24oZSl7JGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3IoKSwkanNjb21wLmluaXRTeW1ib2woKSwkanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpO3ZhciB0PWVbU3ltYm9sLml0ZXJhdG9yXTtpZih0KXJldHVybiB0LmNhbGwoZSk7dmFyIHI9MDtyZXR1cm57bmV4dDpmdW5jdGlvbigpe3JldHVybiByPGUubGVuZ3RoP3tkb25lOiExLHZhbHVlOmVbcisrXX06e2RvbmU6ITB9fX19LCRqc2NvbXAuYXJyYXlGcm9tSXRlcmF0b3I9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9W107ISh0PWUubmV4dCgpKS5kb25lOylyLnB1c2godC52YWx1ZSk7cmV0dXJuIHJ9LCRqc2NvbXAuYXJyYXlGcm9tSXRlcmFibGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBBcnJheT9lOiRqc2NvbXAuYXJyYXlGcm9tSXRlcmF0b3IoJGpzY29tcC5tYWtlSXRlcmF0b3IoZSkpfSwkanNjb21wLmluaGVyaXRzPWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcigpe31mb3IodmFyIG8gaW4gci5wcm90b3R5cGU9dC5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IHIsZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSx0KWlmKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKXt2YXIgcz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbyk7cyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbyxzKX1lbHNlIGVbb109dFtvXX0sJGpzY29tcC5hcnJheT0kanNjb21wLmFycmF5fHx7fSwkanNjb21wLml0ZXJhdG9yRnJvbUFycmF5PWZ1bmN0aW9uKHQscil7JGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3IoKSx0IGluc3RhbmNlb2YgU3RyaW5nJiYodCs9XCJcIik7dmFyIG89MCxzPXtuZXh0OmZ1bmN0aW9uKCl7aWYobzx0Lmxlbmd0aCl7dmFyIGU9bysrO3JldHVybnt2YWx1ZTpyKGUsdFtlXSksZG9uZTohMX19cmV0dXJuIHMubmV4dD1mdW5jdGlvbigpe3JldHVybntkb25lOiEwLHZhbHVlOnZvaWQgMH19LHMubmV4dCgpfX07cmV0dXJuICRqc2NvbXAuaW5pdFN5bWJvbCgpLCRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yKCksc1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHN9LHN9LCRqc2NvbXAuZmluZEludGVybmFsPWZ1bmN0aW9uKGUsdCxyKXtlIGluc3RhbmNlb2YgU3RyaW5nJiYoZT1TdHJpbmcoZSkpO2Zvcih2YXIgbz1lLmxlbmd0aCxzPTA7czxvO3MrKyl7dmFyIGk9ZVtzXTtpZih0LmNhbGwocixpLHMsZSkpcmV0dXJue2k6cyx2Oml9fXJldHVybntpOi0xLHY6dm9pZCAwfX0sJGpzY29tcC5hcnJheS5mcm9tPWZ1bmN0aW9uKGUsdCxyKXskanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpLHQ9bnVsbCE9dD90OmZ1bmN0aW9uKGUpe3JldHVybiBlfTt2YXIgbz1bXTtpZigkanNjb21wLmluaXRTeW1ib2woKSwkanNjb21wLmluaXRTeW1ib2xJdGVyYXRvcigpLFwiZnVuY3Rpb25cIj09dHlwZW9mKHM9ZVtTeW1ib2wuaXRlcmF0b3JdKSYmKGU9cy5jYWxsKGUpKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm5leHQpZm9yKDshKHM9ZS5uZXh0KCkpLmRvbmU7KW8ucHVzaCh0LmNhbGwocixzLnZhbHVlKSk7ZWxzZSBmb3IodmFyIHM9ZS5sZW5ndGgsaT0wO2k8cztpKyspby5wdXNoKHQuY2FsbChyLGVbaV0pKTtyZXR1cm4gb30sJGpzY29tcC5hcnJheS5vZj1mdW5jdGlvbihlKXtyZXR1cm4gJGpzY29tcC5hcnJheS5mcm9tKGFyZ3VtZW50cyl9LCRqc2NvbXAuYXJyYXkuZW50cmllcz1mdW5jdGlvbigpe3JldHVybiAkanNjb21wLml0ZXJhdG9yRnJvbUFycmF5KHRoaXMsZnVuY3Rpb24oZSx0KXtyZXR1cm5bZSx0XX0pfSwkanNjb21wLmFycmF5Lmluc3RhbGxIZWxwZXJfPWZ1bmN0aW9uKGUsdCl7IUFycmF5LnByb3RvdHlwZVtlXSYmT2JqZWN0LmRlZmluZVByb3BlcnRpZXMmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSxlLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCx2YWx1ZTp0fSl9LCRqc2NvbXAuYXJyYXkuZW50cmllcyRpbnN0YWxsPWZ1bmN0aW9uKCl7JGpzY29tcC5hcnJheS5pbnN0YWxsSGVscGVyXyhcImVudHJpZXNcIiwkanNjb21wLmFycmF5LmVudHJpZXMpfSwkanNjb21wLmFycmF5LmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gJGpzY29tcC5pdGVyYXRvckZyb21BcnJheSh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBlfSl9LCRqc2NvbXAuYXJyYXkua2V5cyRpbnN0YWxsPWZ1bmN0aW9uKCl7JGpzY29tcC5hcnJheS5pbnN0YWxsSGVscGVyXyhcImtleXNcIiwkanNjb21wLmFycmF5LmtleXMpfSwkanNjb21wLmFycmF5LnZhbHVlcz1mdW5jdGlvbigpe3JldHVybiAkanNjb21wLml0ZXJhdG9yRnJvbUFycmF5KHRoaXMsZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0pfSwkanNjb21wLmFycmF5LnZhbHVlcyRpbnN0YWxsPWZ1bmN0aW9uKCl7JGpzY29tcC5hcnJheS5pbnN0YWxsSGVscGVyXyhcInZhbHVlc1wiLCRqc2NvbXAuYXJyYXkudmFsdWVzKX0sJGpzY29tcC5hcnJheS5jb3B5V2l0aGluPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbz10aGlzLmxlbmd0aDtpZihlPU51bWJlcihlKSx0PU51bWJlcih0KSxyPU51bWJlcihudWxsIT1yP3I6byksZTx0KWZvcihyPU1hdGgubWluKHIsbyk7dDxyOyl0IGluIHRoaXM/dGhpc1tlKytdPXRoaXNbdCsrXTooZGVsZXRlIHRoaXNbZSsrXSx0KyspO2Vsc2UgZm9yKGUrPShyPU1hdGgubWluKHIsbyt0LWUpKS10O3Q8cjspLS1yIGluIHRoaXM/dGhpc1stLWVdPXRoaXNbcl06ZGVsZXRlIHRoaXNbZV07cmV0dXJuIHRoaXN9LCRqc2NvbXAuYXJyYXkuY29weVdpdGhpbiRpbnN0YWxsPWZ1bmN0aW9uKCl7JGpzY29tcC5hcnJheS5pbnN0YWxsSGVscGVyXyhcImNvcHlXaXRoaW5cIiwkanNjb21wLmFycmF5LmNvcHlXaXRoaW4pfSwkanNjb21wLmFycmF5LmZpbGw9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPXRoaXMubGVuZ3RofHwwO2Zvcih0PDAmJih0PU1hdGgubWF4KDAsbyt0KSksKG51bGw9PXJ8fG88cikmJihyPW8pLChyPU51bWJlcihyKSk8MCYmKHI9TWF0aC5tYXgoMCxvK3IpKSx0PU51bWJlcih0fHwwKTt0PHI7dCsrKXRoaXNbdF09ZTtyZXR1cm4gdGhpc30sJGpzY29tcC5hcnJheS5maWxsJGluc3RhbGw9ZnVuY3Rpb24oKXskanNjb21wLmFycmF5Lmluc3RhbGxIZWxwZXJfKFwiZmlsbFwiLCRqc2NvbXAuYXJyYXkuZmlsbCl9LCRqc2NvbXAuYXJyYXkuZmluZD1mdW5jdGlvbihlLHQpe3JldHVybiAkanNjb21wLmZpbmRJbnRlcm5hbCh0aGlzLGUsdCkudn0sJGpzY29tcC5hcnJheS5maW5kJGluc3RhbGw9ZnVuY3Rpb24oKXskanNjb21wLmFycmF5Lmluc3RhbGxIZWxwZXJfKFwiZmluZFwiLCRqc2NvbXAuYXJyYXkuZmluZCl9LCRqc2NvbXAuYXJyYXkuZmluZEluZGV4PWZ1bmN0aW9uKGUsdCl7cmV0dXJuICRqc2NvbXAuZmluZEludGVybmFsKHRoaXMsZSx0KS5pfSwkanNjb21wLmFycmF5LmZpbmRJbmRleCRpbnN0YWxsPWZ1bmN0aW9uKCl7JGpzY29tcC5hcnJheS5pbnN0YWxsSGVscGVyXyhcImZpbmRJbmRleFwiLCRqc2NvbXAuYXJyYXkuZmluZEluZGV4KX0sJGpzY29tcC5BU1NVTUVfTk9fTkFUSVZFX01BUD0hMSwkanNjb21wLk1hcCRpc0NvbmZvcm1hbnQ9ZnVuY3Rpb24oKXtpZigkanNjb21wLkFTU1VNRV9OT19OQVRJVkVfTUFQKXJldHVybiExO3ZhciBlPSRqc2NvbXAuZ2xvYmFsLk1hcDtpZighZXx8IWUucHJvdG90eXBlLmVudHJpZXN8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIE9iamVjdC5zZWFsKXJldHVybiExO3RyeXt2YXIgdD1PYmplY3Quc2VhbCh7eDo0fSkscj1uZXcgZSgkanNjb21wLm1ha2VJdGVyYXRvcihbW3QsXCJzXCJdXSkpO2lmKFwic1wiIT1yLmdldCh0KXx8MSE9ci5zaXplfHxyLmdldCh7eDo0fSl8fHIuc2V0KHt4OjR9LFwidFwiKSE9cnx8MiE9ci5zaXplKXJldHVybiExO3ZhciBvPXIuZW50cmllcygpLHM9by5uZXh0KCk7cmV0dXJuIXMuZG9uZSYmcy52YWx1ZVswXT09dCYmXCJzXCI9PXMudmFsdWVbMV0mJiEoKHM9by5uZXh0KCkpLmRvbmV8fDQhPXMudmFsdWVbMF0ueHx8XCJ0XCIhPXMudmFsdWVbMV18fCFvLm5leHQoKS5kb25lKX1jYXRjaChlKXtyZXR1cm4hMX19LCRqc2NvbXAuTWFwPWZ1bmN0aW9uKGUpe2lmKHRoaXMuZGF0YV89e30sdGhpcy5oZWFkXz0kanNjb21wLk1hcC5jcmVhdGVIZWFkKCksdGhpcy5zaXplPTAsZSl7ZT0kanNjb21wLm1ha2VJdGVyYXRvcihlKTtmb3IodmFyIHQ7ISh0PWUubmV4dCgpKS5kb25lOyl0PXQudmFsdWUsdGhpcy5zZXQodFswXSx0WzFdKX19LCRqc2NvbXAuTWFwLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj0kanNjb21wLk1hcC5tYXliZUdldEVudHJ5KHRoaXMsZSk7cmV0dXJuIHIubGlzdHx8KHIubGlzdD10aGlzLmRhdGFfW3IuaWRdPVtdKSxyLmVudHJ5P3IuZW50cnkudmFsdWU9dDooci5lbnRyeT17bmV4dDp0aGlzLmhlYWRfLHByZXZpb3VzOnRoaXMuaGVhZF8ucHJldmlvdXMsaGVhZDp0aGlzLmhlYWRfLGtleTplLHZhbHVlOnR9LHIubGlzdC5wdXNoKHIuZW50cnkpLHRoaXMuaGVhZF8ucHJldmlvdXMubmV4dD1yLmVudHJ5LHRoaXMuaGVhZF8ucHJldmlvdXM9ci5lbnRyeSx0aGlzLnNpemUrKyksdGhpc30sJGpzY29tcC5NYXAucHJvdG90eXBlLmRlbGV0ZT1mdW5jdGlvbihlKXtyZXR1cm4hKCEoZT0kanNjb21wLk1hcC5tYXliZUdldEVudHJ5KHRoaXMsZSkpLmVudHJ5fHwhZS5saXN0KSYmKGUubGlzdC5zcGxpY2UoZS5pbmRleCwxKSxlLmxpc3QubGVuZ3RofHxkZWxldGUgdGhpcy5kYXRhX1tlLmlkXSxlLmVudHJ5LnByZXZpb3VzLm5leHQ9ZS5lbnRyeS5uZXh0LGUuZW50cnkubmV4dC5wcmV2aW91cz1lLmVudHJ5LnByZXZpb3VzLGUuZW50cnkuaGVhZD1udWxsLHRoaXMuc2l6ZS0tLCEwKX0sJGpzY29tcC5NYXAucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5kYXRhXz17fSx0aGlzLmhlYWRfPXRoaXMuaGVhZF8ucHJldmlvdXM9JGpzY29tcC5NYXAuY3JlYXRlSGVhZCgpLHRoaXMuc2l6ZT0wfSwkanNjb21wLk1hcC5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3JldHVybiEhJGpzY29tcC5NYXAubWF5YmVHZXRFbnRyeSh0aGlzLGUpLmVudHJ5fSwkanNjb21wLk1hcC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGUpe3JldHVybihlPSRqc2NvbXAuTWFwLm1heWJlR2V0RW50cnkodGhpcyxlKS5lbnRyeSkmJmUudmFsdWV9LCRqc2NvbXAuTWFwLnByb3RvdHlwZS5lbnRyaWVzPWZ1bmN0aW9uKCl7cmV0dXJuICRqc2NvbXAuTWFwLm1ha2VJdGVyYXRvcl8odGhpcyxmdW5jdGlvbihlKXtyZXR1cm5bZS5rZXksZS52YWx1ZV19KX0sJGpzY29tcC5NYXAucHJvdG90eXBlLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gJGpzY29tcC5NYXAubWFrZUl0ZXJhdG9yXyh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiBlLmtleX0pfSwkanNjb21wLk1hcC5wcm90b3R5cGUudmFsdWVzPWZ1bmN0aW9uKCl7cmV0dXJuICRqc2NvbXAuTWFwLm1ha2VJdGVyYXRvcl8odGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gZS52YWx1ZX0pfSwkanNjb21wLk1hcC5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixvPXRoaXMuZW50cmllcygpOyEocj1vLm5leHQoKSkuZG9uZTspcj1yLnZhbHVlLGUuY2FsbCh0LHJbMV0sclswXSx0aGlzKX0sJGpzY29tcC5NYXAubWF5YmVHZXRFbnRyeT1mdW5jdGlvbihlLHQpe3ZhciByPSRqc2NvbXAuTWFwLmdldElkKHQpLG89ZS5kYXRhX1tyXTtpZihvJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZS5kYXRhXyxyKSlmb3IodmFyIHM9MDtzPG8ubGVuZ3RoO3MrKyl7dmFyIGk9b1tzXTtpZih0IT10JiZpLmtleSE9aS5rZXl8fHQ9PT1pLmtleSlyZXR1cm57aWQ6cixsaXN0Om8saW5kZXg6cyxlbnRyeTppfX1yZXR1cm57aWQ6cixsaXN0Om8saW5kZXg6LTEsZW50cnk6dm9pZCAwfX0sJGpzY29tcC5NYXAubWFrZUl0ZXJhdG9yXz1mdW5jdGlvbihlLHQpe3ZhciByPWUuaGVhZF8sbz17bmV4dDpmdW5jdGlvbigpe2lmKHIpe2Zvcig7ci5oZWFkIT1lLmhlYWRfOylyPXIucHJldmlvdXM7Zm9yKDtyLm5leHQhPXIuaGVhZDspcmV0dXJuIHI9ci5uZXh0LHtkb25lOiExLHZhbHVlOnQocil9O3I9bnVsbH1yZXR1cm57ZG9uZTohMCx2YWx1ZTp2b2lkIDB9fX07cmV0dXJuICRqc2NvbXAuaW5pdFN5bWJvbCgpLCRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yKCksb1tTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIG99LG99LCRqc2NvbXAuTWFwLm1hcEluZGV4Xz0wLCRqc2NvbXAuTWFwLmNyZWF0ZUhlYWQ9ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZS5wcmV2aW91cz1lLm5leHQ9ZS5oZWFkPWV9LCRqc2NvbXAuTWFwLmdldElkPWZ1bmN0aW9uKGUpe2lmKCEoZSBpbnN0YW5jZW9mIE9iamVjdCkpcmV0dXJuXCJwX1wiK2U7aWYoISgkanNjb21wLk1hcC5pZEtleSBpbiBlKSl0cnl7JGpzY29tcC5NYXAuZGVmaW5lUHJvcGVydHkoZSwkanNjb21wLk1hcC5pZEtleSx7dmFsdWU6KyskanNjb21wLk1hcC5tYXBJbmRleF99KX1jYXRjaChlKXt9cmV0dXJuICRqc2NvbXAuTWFwLmlkS2V5IGluIGU/ZVskanNjb21wLk1hcC5pZEtleV06XCJvXyBcIitlfSwkanNjb21wLk1hcC5kZWZpbmVQcm9wZXJ0eT1PYmplY3QuZGVmaW5lUHJvcGVydHk/ZnVuY3Rpb24oZSx0LHIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOlN0cmluZyhyKX0pfTpmdW5jdGlvbihlLHQscil7ZVt0XT1TdHJpbmcocil9LCRqc2NvbXAuTWFwLkVudHJ5PWZ1bmN0aW9uKCl7fSwkanNjb21wLk1hcCRpbnN0YWxsPWZ1bmN0aW9uKCl7JGpzY29tcC5pbml0U3ltYm9sKCksJGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3IoKSwkanNjb21wLk1hcCRpc0NvbmZvcm1hbnQoKT8kanNjb21wLk1hcD0kanNjb21wLmdsb2JhbC5NYXA6KCRqc2NvbXAuaW5pdFN5bWJvbCgpLCRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yKCksJGpzY29tcC5NYXAucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl09JGpzY29tcC5NYXAucHJvdG90eXBlLmVudHJpZXMsJGpzY29tcC5pbml0U3ltYm9sKCksJGpzY29tcC5NYXAuaWRLZXk9U3ltYm9sKFwibWFwLWlkLWtleVwiKSwkanNjb21wLk1hcCRpbnN0YWxsPWZ1bmN0aW9uKCl7fSl9LCRqc2NvbXAubWF0aD0kanNjb21wLm1hdGh8fHt9LCRqc2NvbXAubWF0aC5jbHozMj1mdW5jdGlvbihlKXtpZigwPT09KGU9TnVtYmVyKGUpPj4+MCkpcmV0dXJuIDMyO3ZhciB0PTA7cmV0dXJuIDA9PSg0Mjk0OTAxNzYwJmUpJiYoZTw8PTE2LHQrPTE2KSwwPT0oNDI3ODE5MDA4MCZlKSYmKGU8PD04LHQrPTgpLDA9PSg0MDI2NTMxODQwJmUpJiYoZTw8PTQsdCs9NCksMD09KDMyMjEyMjU0NzImZSkmJihlPDw9Mix0Kz0yKSwwPT0oMjE0NzQ4MzY0OCZlKSYmdCsrLHR9LCRqc2NvbXAubWF0aC5pbXVsPWZ1bmN0aW9uKGUsdCl7dmFyIHI9NjU1MzUmKGU9TnVtYmVyKGUpKSxvPTY1NTM1Jih0PU51bWJlcih0KSk7cmV0dXJuIHIqbysoKGU+Pj4xNiY2NTUzNSkqbytyKih0Pj4+MTYmNjU1MzUpPDwxNj4+PjApfDB9LCRqc2NvbXAubWF0aC5zaWduPWZ1bmN0aW9uKGUpe3JldHVybiAwPT09KGU9TnVtYmVyKGUpKXx8aXNOYU4oZSk/ZTowPGU/MTotMX0sJGpzY29tcC5tYXRoLmxvZzEwPWZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLmxvZyhlKS9NYXRoLkxOMTB9LCRqc2NvbXAubWF0aC5sb2cyPWZ1bmN0aW9uKGUpe3JldHVybiBNYXRoLmxvZyhlKS9NYXRoLkxOMn0sJGpzY29tcC5tYXRoLmxvZzFwPWZ1bmN0aW9uKGUpe2lmKChlPU51bWJlcihlKSk8LjI1JiYtLjI1PGUpe2Zvcih2YXIgdD1lLHI9MSxvPWUscz0wLGk9MTtzIT1vOylvPShzPW8pKyhpKj0tMSkqKHQqPWUpLysrcjtyZXR1cm4gb31yZXR1cm4gTWF0aC5sb2coMStlKX0sJGpzY29tcC5tYXRoLmV4cG0xPWZ1bmN0aW9uKGUpe2lmKChlPU51bWJlcihlKSk8LjI1JiYtLjI1PGUpe2Zvcih2YXIgdD1lLHI9MSxvPWUscz0wO3MhPW87KW89KHM9bykrKHQqPWUvKytyKTtyZXR1cm4gb31yZXR1cm4gTWF0aC5leHAoZSktMX0sJGpzY29tcC5tYXRoLmNvc2g9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9TnVtYmVyKGUpLChNYXRoLmV4cChlKStNYXRoLmV4cCgtZSkpLzJ9LCRqc2NvbXAubWF0aC5zaW5oPWZ1bmN0aW9uKGUpe3JldHVybiAwPT09KGU9TnVtYmVyKGUpKT9lOihNYXRoLmV4cChlKS1NYXRoLmV4cCgtZSkpLzJ9LCRqc2NvbXAubWF0aC50YW5oPWZ1bmN0aW9uKGUpe2lmKDA9PT0oZT1OdW1iZXIoZSkpKXJldHVybiBlO3ZhciB0PSgxLSh0PU1hdGguZXhwKC0yKk1hdGguYWJzKGUpKSkpLygxK3QpO3JldHVybiBlPDA/LXQ6dH0sJGpzY29tcC5tYXRoLmFjb3NoPWZ1bmN0aW9uKGUpe3JldHVybiBlPU51bWJlcihlKSxNYXRoLmxvZyhlK01hdGguc3FydChlKmUtMSkpfSwkanNjb21wLm1hdGguYXNpbmg9ZnVuY3Rpb24oZSl7aWYoMD09PShlPU51bWJlcihlKSkpcmV0dXJuIGU7dmFyIHQ9TWF0aC5sb2coTWF0aC5hYnMoZSkrTWF0aC5zcXJ0KGUqZSsxKSk7cmV0dXJuIGU8MD8tdDp0fSwkanNjb21wLm1hdGguYXRhbmg9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9TnVtYmVyKGUpLCgkanNjb21wLm1hdGgubG9nMXAoZSktJGpzY29tcC5tYXRoLmxvZzFwKC1lKSkvMn0sJGpzY29tcC5tYXRoLmh5cG90PWZ1bmN0aW9uKGUsdCxyKXtlPU51bWJlcihlKSx0PU51bWJlcih0KTt2YXIgbyxzLGksYT1NYXRoLm1heChNYXRoLmFicyhlKSxNYXRoLmFicyh0KSk7Zm9yKG89MjtvPGFyZ3VtZW50cy5sZW5ndGg7bysrKWE9TWF0aC5tYXgoYSxNYXRoLmFicyhhcmd1bWVudHNbb10pKTtpZigxZTEwMDxhfHxhPDFlLTEwMCl7Zm9yKGk9KGUvPWEpKmUrKHQvPWEpKnQsbz0yO288YXJndW1lbnRzLmxlbmd0aDtvKyspaSs9KHM9TnVtYmVyKGFyZ3VtZW50c1tvXSkvYSkqcztyZXR1cm4gTWF0aC5zcXJ0KGkpKmF9Zm9yKGk9ZSplK3QqdCxvPTI7bzxhcmd1bWVudHMubGVuZ3RoO28rKylpKz0ocz1OdW1iZXIoYXJndW1lbnRzW29dKSkqcztyZXR1cm4gTWF0aC5zcXJ0KGkpfSwkanNjb21wLm1hdGgudHJ1bmM9ZnVuY3Rpb24oZSl7aWYoZT1OdW1iZXIoZSksaXNOYU4oZSl8fDEvMD09PWV8fC0xLzA9PT1lfHwwPT09ZSlyZXR1cm4gZTt2YXIgdD1NYXRoLmZsb29yKE1hdGguYWJzKGUpKTtyZXR1cm4gZTwwPy10OnR9LCRqc2NvbXAubWF0aC5jYnJ0PWZ1bmN0aW9uKGUpe2lmKDA9PT1lKXJldHVybiBlO2U9TnVtYmVyKGUpO3ZhciB0PU1hdGgucG93KE1hdGguYWJzKGUpLDEvMyk7cmV0dXJuIGU8MD8tdDp0fSwkanNjb21wLm51bWJlcj0kanNjb21wLm51bWJlcnx8e30sJGpzY29tcC5udW1iZXIuaXNGaW5pdGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGUmJighaXNOYU4oZSkmJjEvMCE9PWUmJi0xLzAhPT1lKX0sJGpzY29tcC5udW1iZXIuaXNJbnRlZ2VyPWZ1bmN0aW9uKGUpe3JldHVybiEhJGpzY29tcC5udW1iZXIuaXNGaW5pdGUoZSkmJmU9PT1NYXRoLmZsb29yKGUpfSwkanNjb21wLm51bWJlci5pc05hTj1mdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZSYmaXNOYU4oZSl9LCRqc2NvbXAubnVtYmVyLmlzU2FmZUludGVnZXI9ZnVuY3Rpb24oZSl7cmV0dXJuICRqc2NvbXAubnVtYmVyLmlzSW50ZWdlcihlKSYmTWF0aC5hYnMoZSk8PSRqc2NvbXAubnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJ9LCRqc2NvbXAubnVtYmVyLkVQU0lMT049TWF0aC5wb3coMiwtNTIpLCRqc2NvbXAubnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI9OTAwNzE5OTI1NDc0MDk5MSwkanNjb21wLm51bWJlci5NSU5fU0FGRV9JTlRFR0VSPS05MDA3MTk5MjU0NzQwOTkxLCRqc2NvbXAub2JqZWN0PSRqc2NvbXAub2JqZWN0fHx7fSwkanNjb21wLm9iamVjdC5hc3NpZ249ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXt2YXIgbz1hcmd1bWVudHNbcl07aWYobylmb3IodmFyIHMgaW4gbylPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobyxzKSYmKGVbc109b1tzXSl9cmV0dXJuIGV9LCRqc2NvbXAub2JqZWN0LmlzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9PT10PzAhPT1lfHwxL2U9PTEvdDplIT1lJiZ0IT10fSwkanNjb21wLkFTU1VNRV9OT19OQVRJVkVfU0VUPSExLCRqc2NvbXAuU2V0JGlzQ29uZm9ybWFudD1mdW5jdGlvbigpe2lmKCRqc2NvbXAuQVNTVU1FX05PX05BVElWRV9TRVQpcmV0dXJuITE7dmFyIGU9JGpzY29tcC5nbG9iYWwuU2V0O2lmKCFlfHwhZS5wcm90b3R5cGUuZW50cmllc3x8XCJmdW5jdGlvblwiIT10eXBlb2YgT2JqZWN0LnNlYWwpcmV0dXJuITE7dHJ5e3ZhciB0PU9iamVjdC5zZWFsKHt4OjR9KSxyPW5ldyBlKCRqc2NvbXAubWFrZUl0ZXJhdG9yKFt0XSkpO2lmKCFyLmhhcyh0KXx8MSE9ci5zaXplfHxyLmFkZCh0KSE9cnx8MSE9ci5zaXplfHxyLmFkZCh7eDo0fSkhPXJ8fDIhPXIuc2l6ZSlyZXR1cm4hMTt2YXIgbz1yLmVudHJpZXMoKSxzPW8ubmV4dCgpO3JldHVybiFzLmRvbmUmJnMudmFsdWVbMF09PXQmJnMudmFsdWVbMV09PXQmJighKHM9by5uZXh0KCkpLmRvbmUmJnMudmFsdWVbMF0hPXQmJjQ9PXMudmFsdWVbMF0ueCYmcy52YWx1ZVsxXT09cy52YWx1ZVswXSYmby5uZXh0KCkuZG9uZSl9Y2F0Y2goZSl7cmV0dXJuITF9fSwkanNjb21wLlNldD1mdW5jdGlvbihlKXtpZih0aGlzLm1hcF89bmV3ICRqc2NvbXAuTWFwLGUpe2U9JGpzY29tcC5tYWtlSXRlcmF0b3IoZSk7Zm9yKHZhciB0OyEodD1lLm5leHQoKSkuZG9uZTspdGhpcy5hZGQodC52YWx1ZSl9dGhpcy5zaXplPXRoaXMubWFwXy5zaXplfSwkanNjb21wLlNldC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm1hcF8uc2V0KGUsZSksdGhpcy5zaXplPXRoaXMubWFwXy5zaXplLHRoaXN9LCRqc2NvbXAuU2V0LnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU9dGhpcy5tYXBfLmRlbGV0ZShlKSx0aGlzLnNpemU9dGhpcy5tYXBfLnNpemUsZX0sJGpzY29tcC5TZXQucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5tYXBfLmNsZWFyKCksdGhpcy5zaXplPTB9LCRqc2NvbXAuU2V0LnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMubWFwXy5oYXMoZSl9LCRqc2NvbXAuU2V0LnByb3RvdHlwZS5lbnRyaWVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwXy5lbnRyaWVzKCl9LCRqc2NvbXAuU2V0LnByb3RvdHlwZS52YWx1ZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXBfLnZhbHVlcygpfSwkanNjb21wLlNldC5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbih0LHIpe3ZhciBvPXRoaXM7dGhpcy5tYXBfLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2FsbChyLGUsZSxvKX0pfSwkanNjb21wLlNldCRpbnN0YWxsPWZ1bmN0aW9uKCl7JGpzY29tcC5NYXAkaW5zdGFsbCgpLCRqc2NvbXAuU2V0JGlzQ29uZm9ybWFudCgpPyRqc2NvbXAuU2V0PSRqc2NvbXAuZ2xvYmFsLlNldDooJGpzY29tcC5pbml0U3ltYm9sKCksJGpzY29tcC5pbml0U3ltYm9sSXRlcmF0b3IoKSwkanNjb21wLlNldC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT0kanNjb21wLlNldC5wcm90b3R5cGUudmFsdWVzLCRqc2NvbXAuU2V0JGluc3RhbGw9ZnVuY3Rpb24oKXt9KX0sJGpzY29tcC5zdHJpbmc9JGpzY29tcC5zdHJpbmd8fHt9LCRqc2NvbXAuY2hlY2tTdHJpbmdBcmdzPWZ1bmN0aW9uKGUsdCxyKXtpZihudWxsPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgJ3RoaXMnIHZhbHVlIGZvciBTdHJpbmcucHJvdG90eXBlLlwiK3IrXCIgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWRcIik7aWYodCBpbnN0YW5jZW9mIFJlZ0V4cCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgYXJndW1lbnQgdG8gU3RyaW5nLnByb3RvdHlwZS5cIityK1wiIG11c3Qgbm90IGJlIGEgcmVndWxhciBleHByZXNzaW9uXCIpO3JldHVybiBlK1wiXCJ9LCRqc2NvbXAuc3RyaW5nLmZyb21Db2RlUG9pbnQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCIscj0wO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3ZhciBvPU51bWJlcihhcmd1bWVudHNbcl0pO2lmKG88MHx8MTExNDExMTxvfHxvIT09TWF0aC5mbG9vcihvKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImludmFsaWRfY29kZV9wb2ludCBcIitvKTtvPD02NTUzNT90Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKG8pOihvLT02NTUzNix0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKG8+Pj4xMCYxMDIzfDU1Mjk2KSx0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKDEwMjMmb3w1NjMyMCkpfXJldHVybiB0fSwkanNjb21wLnN0cmluZy5yZXBlYXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9JGpzY29tcC5jaGVja1N0cmluZ0FyZ3ModGhpcyxudWxsLFwicmVwZWF0XCIpO2lmKGU8MHx8MTM0MjE3NzI3OTxlKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBjb3VudCB2YWx1ZVwiKTtlfD0wO2Zvcih2YXIgcj1cIlwiO2U7KTEmZSYmKHIrPXQpLChlPj4+PTEpJiYodCs9dCk7cmV0dXJuIHJ9LCRqc2NvbXAuc3RyaW5nLnJlcGVhdCRpbnN0YWxsPWZ1bmN0aW9uKCl7U3RyaW5nLnByb3RvdHlwZS5yZXBlYXR8fChTdHJpbmcucHJvdG90eXBlLnJlcGVhdD0kanNjb21wLnN0cmluZy5yZXBlYXQpfSwkanNjb21wLnN0cmluZy5jb2RlUG9pbnRBdD1mdW5jdGlvbihlKXt2YXIgdD0kanNjb21wLmNoZWNrU3RyaW5nQXJncyh0aGlzLG51bGwsXCJjb2RlUG9pbnRBdFwiKSxyPXQubGVuZ3RoO2lmKDA8PShlPU51bWJlcihlKXx8MCkmJmU8cil7ZXw9MDt2YXIgbz10LmNoYXJDb2RlQXQoZSk7cmV0dXJuIG88NTUyOTZ8fDU2MzE5PG98fGUrMT09PXI/bzooZT10LmNoYXJDb2RlQXQoZSsxKSk8NTYzMjB8fDU3MzQzPGU/bzoxMDI0KihvLTU1Mjk2KStlKzkyMTZ9fSwkanNjb21wLnN0cmluZy5jb2RlUG9pbnRBdCRpbnN0YWxsPWZ1bmN0aW9uKCl7U3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdHx8KFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQ9JGpzY29tcC5zdHJpbmcuY29kZVBvaW50QXQpfSwkanNjb21wLnN0cmluZy5pbmNsdWRlcz1mdW5jdGlvbihlLHQpe3JldHVybi0xIT09JGpzY29tcC5jaGVja1N0cmluZ0FyZ3ModGhpcyxlLFwiaW5jbHVkZXNcIikuaW5kZXhPZihlLHR8fDApfSwkanNjb21wLnN0cmluZy5pbmNsdWRlcyRpbnN0YWxsPWZ1bmN0aW9uKCl7U3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc3x8KFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXM9JGpzY29tcC5zdHJpbmcuaW5jbHVkZXMpfSwkanNjb21wLnN0cmluZy5zdGFydHNXaXRoPWZ1bmN0aW9uKGUsdCl7dmFyIHI9JGpzY29tcC5jaGVja1N0cmluZ0FyZ3ModGhpcyxlLFwic3RhcnRzV2l0aFwiKTtlKz1cIlwiO2Zvcih2YXIgbz1yLmxlbmd0aCxzPWUubGVuZ3RoLGk9TWF0aC5tYXgoMCxNYXRoLm1pbigwfHQsci5sZW5ndGgpKSxhPTA7YTxzJiZpPG87KWlmKHJbaSsrXSE9ZVthKytdKXJldHVybiExO3JldHVybiBzPD1hfSwkanNjb21wLnN0cmluZy5zdGFydHNXaXRoJGluc3RhbGw9ZnVuY3Rpb24oKXtTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGh8fChTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGg9JGpzY29tcC5zdHJpbmcuc3RhcnRzV2l0aCl9LCRqc2NvbXAuc3RyaW5nLmVuZHNXaXRoPWZ1bmN0aW9uKGUsdCl7dmFyIHI9JGpzY29tcC5jaGVja1N0cmluZ0FyZ3ModGhpcyxlLFwiZW5kc1dpdGhcIik7ZSs9XCJcIix2b2lkIDA9PT10JiYodD1yLmxlbmd0aCk7Zm9yKHZhciBvPU1hdGgubWF4KDAsTWF0aC5taW4oMHx0LHIubGVuZ3RoKSkscz1lLmxlbmd0aDswPHMmJjA8bzspaWYoclstLW9dIT1lWy0tc10pcmV0dXJuITE7cmV0dXJuIHM8PTB9LCRqc2NvbXAuc3RyaW5nLmVuZHNXaXRoJGluc3RhbGw9ZnVuY3Rpb24oKXtTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRofHwoU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aD0kanNjb21wLnN0cmluZy5lbmRzV2l0aCl9O3ZhciBDT01QSUxFRD0hMCxnb29nPWdvb2d8fHt9O2dvb2cuZ2xvYmFsPXRoaXMsZ29vZy5pc0RlZj1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZX0sZ29vZy5leHBvcnRQYXRoXz1mdW5jdGlvbihlLHQscil7ZT1lLnNwbGl0KFwiLlwiKSxyPXJ8fGdvb2cuZ2xvYmFsLGVbMF1pbiByfHwhci5leGVjU2NyaXB0fHxyLmV4ZWNTY3JpcHQoXCJ2YXIgXCIrZVswXSk7Zm9yKHZhciBvO2UubGVuZ3RoJiYobz1lLnNoaWZ0KCkpOykhZS5sZW5ndGgmJmdvb2cuaXNEZWYodCk/cltvXT10OnI9cltvXT9yW29dOnJbb109e319LGdvb2cuZGVmaW5lPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dDtDT01QSUxFRHx8KGdvb2cuZ2xvYmFsLkNMT1NVUkVfVU5DT01QSUxFRF9ERUZJTkVTJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZ29vZy5nbG9iYWwuQ0xPU1VSRV9VTkNPTVBJTEVEX0RFRklORVMsZSk/cj1nb29nLmdsb2JhbC5DTE9TVVJFX1VOQ09NUElMRURfREVGSU5FU1tlXTpnb29nLmdsb2JhbC5DTE9TVVJFX0RFRklORVMmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChnb29nLmdsb2JhbC5DTE9TVVJFX0RFRklORVMsZSkmJihyPWdvb2cuZ2xvYmFsLkNMT1NVUkVfREVGSU5FU1tlXSkpLGdvb2cuZXhwb3J0UGF0aF8oZSxyKX0sZ29vZy5ERUJVRz0hMCxnb29nLkxPQ0FMRT1cImVuXCIsZ29vZy5UUlVTVEVEX1NJVEU9ITAsZ29vZy5TVFJJQ1RfTU9ERV9DT01QQVRJQkxFPSExLGdvb2cuRElTQUxMT1dfVEVTVF9PTkxZX0NPREU9Q09NUElMRUQmJiFnb29nLkRFQlVHLGdvb2cuRU5BQkxFX0NIUk9NRV9BUFBfU0FGRV9TQ1JJUFRfTE9BRElORz0hMSxnb29nLnByb3ZpZGU9ZnVuY3Rpb24oZSl7aWYoIUNPTVBJTEVEJiZnb29nLmlzUHJvdmlkZWRfKGUpKXRocm93IEVycm9yKCdOYW1lc3BhY2UgXCInK2UrJ1wiIGFscmVhZHkgZGVjbGFyZWQuJyk7Z29vZy5jb25zdHJ1Y3ROYW1lc3BhY2VfKGUpfSxnb29nLmNvbnN0cnVjdE5hbWVzcGFjZV89ZnVuY3Rpb24oZSx0KXtpZighQ09NUElMRUQpe2RlbGV0ZSBnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bZV07Zm9yKHZhciByPWU7KHI9ci5zdWJzdHJpbmcoMCxyLmxhc3RJbmRleE9mKFwiLlwiKSkpJiYhZ29vZy5nZXRPYmplY3RCeU5hbWUocik7KWdvb2cuaW1wbGljaXROYW1lc3BhY2VzX1tyXT0hMH1nb29nLmV4cG9ydFBhdGhfKGUsdCl9LGdvb2cuVkFMSURfTU9EVUxFX1JFXz0vXlthLXpBLVpfJF1bYS16QS1aMC05Ll8kXSokLyxnb29nLm1vZHVsZT1mdW5jdGlvbihlKXtpZighZ29vZy5pc1N0cmluZyhlKXx8IWV8fC0xPT1lLnNlYXJjaChnb29nLlZBTElEX01PRFVMRV9SRV8pKXRocm93IEVycm9yKFwiSW52YWxpZCBtb2R1bGUgaWRlbnRpZmllclwiKTtpZighZ29vZy5pc0luTW9kdWxlTG9hZGVyXygpKXRocm93IEVycm9yKFwiTW9kdWxlIFwiK2UrXCIgaGFzIGJlZW4gbG9hZGVkIGluY29ycmVjdGx5LlwiKTtpZihnb29nLm1vZHVsZUxvYWRlclN0YXRlXy5tb2R1bGVOYW1lKXRocm93IEVycm9yKFwiZ29vZy5tb2R1bGUgbWF5IG9ubHkgYmUgY2FsbGVkIG9uY2UgcGVyIG1vZHVsZS5cIik7aWYoZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZT1lLCFDT01QSUxFRCl7aWYoZ29vZy5pc1Byb3ZpZGVkXyhlKSl0aHJvdyBFcnJvcignTmFtZXNwYWNlIFwiJytlKydcIiBhbHJlYWR5IGRlY2xhcmVkLicpO2RlbGV0ZSBnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bZV19fSxnb29nLm1vZHVsZS5nZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGdvb2cubW9kdWxlLmdldEludGVybmFsXyhlKX0sZ29vZy5tb2R1bGUuZ2V0SW50ZXJuYWxfPWZ1bmN0aW9uKGUpe2lmKCFDT01QSUxFRClyZXR1cm4gZ29vZy5pc1Byb3ZpZGVkXyhlKT9lIGluIGdvb2cubG9hZGVkTW9kdWxlc18/Z29vZy5sb2FkZWRNb2R1bGVzX1tlXTpnb29nLmdldE9iamVjdEJ5TmFtZShlKTpudWxsfSxnb29nLm1vZHVsZUxvYWRlclN0YXRlXz1udWxsLGdvb2cuaXNJbk1vZHVsZUxvYWRlcl89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9Z29vZy5tb2R1bGVMb2FkZXJTdGF0ZV99LGdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2U9ZnVuY3Rpb24oKXtpZighQ09NUElMRUQmJiFnb29nLmlzSW5Nb2R1bGVMb2FkZXJfKCkpdGhyb3cgRXJyb3IoXCJnb29nLm1vZHVsZS5kZWNsYXJlTGVnYWN5TmFtZXNwYWNlIG11c3QgYmUgY2FsbGVkIGZyb20gd2l0aGluIGEgZ29vZy5tb2R1bGVcIik7aWYoIUNPTVBJTEVEJiYhZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV8ubW9kdWxlTmFtZSl0aHJvdyBFcnJvcihcImdvb2cubW9kdWxlIG11c3QgYmUgY2FsbGVkIHByaW9yIHRvIGdvb2cubW9kdWxlLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2UuXCIpO2dvb2cubW9kdWxlTG9hZGVyU3RhdGVfLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2U9ITB9LGdvb2cuc2V0VGVzdE9ubHk9ZnVuY3Rpb24oZSl7aWYoZ29vZy5ESVNBTExPV19URVNUX09OTFlfQ09ERSl0aHJvdyBlPWV8fFwiXCIsRXJyb3IoXCJJbXBvcnRpbmcgdGVzdC1vbmx5IGNvZGUgaW50byBub24tZGVidWcgZW52aXJvbm1lbnRcIisoZT9cIjogXCIrZTpcIi5cIikpfSxnb29nLmZvcndhcmREZWNsYXJlPWZ1bmN0aW9uKGUpe30sQ09NUElMRUR8fChnb29nLmlzUHJvdmlkZWRfPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluIGdvb2cubG9hZGVkTW9kdWxlc198fCFnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bZV0mJmdvb2cuaXNEZWZBbmROb3ROdWxsKGdvb2cuZ2V0T2JqZWN0QnlOYW1lKGUpKX0sZ29vZy5pbXBsaWNpdE5hbWVzcGFjZXNfPXtcImdvb2cubW9kdWxlXCI6ITB9KSxnb29nLmdldE9iamVjdEJ5TmFtZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixvPWUuc3BsaXQoXCIuXCIpLHM9dHx8Z29vZy5nbG9iYWw7cj1vLnNoaWZ0KCk7KXtpZighZ29vZy5pc0RlZkFuZE5vdE51bGwoc1tyXSkpcmV0dXJuIG51bGw7cz1zW3JdfXJldHVybiBzfSxnb29nLmdsb2JhbGl6ZT1mdW5jdGlvbihlLHQpe3ZhciByLG89dHx8Z29vZy5nbG9iYWw7Zm9yKHIgaW4gZSlvW3JdPWVbcl19LGdvb2cuYWRkRGVwZW5kZW5jeT1mdW5jdGlvbihlLHQscixvKXtpZihnb29nLkRFUEVOREVOQ0lFU19FTkFCTEVEKXt2YXIgcztlPWUucmVwbGFjZSgvXFxcXC9nLFwiL1wiKTtmb3IodmFyIGk9Z29vZy5kZXBlbmRlbmNpZXNfLGE9MDtzPXRbYV07YSsrKWkubmFtZVRvUGF0aFtzXT1lLGkucGF0aElzTW9kdWxlW2VdPSEhbztmb3Iobz0wO3Q9cltvXTtvKyspZSBpbiBpLnJlcXVpcmVzfHwoaS5yZXF1aXJlc1tlXT17fSksaS5yZXF1aXJlc1tlXVt0XT0hMH19LGdvb2cuRU5BQkxFX0RFQlVHX0xPQURFUj0hMCxnb29nLmxvZ1RvQ29uc29sZV89ZnVuY3Rpb24oZSl7Z29vZy5nbG9iYWwuY29uc29sZSYmZ29vZy5nbG9iYWwuY29uc29sZS5lcnJvcihlKX0sZ29vZy5yZXF1aXJlPWZ1bmN0aW9uKGUpe2lmKCFDT01QSUxFRCl7aWYoZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSJiZnb29nLklTX09MRF9JRV8mJmdvb2cubWF5YmVQcm9jZXNzRGVmZXJyZWREZXBfKGUpLGdvb2cuaXNQcm92aWRlZF8oZSkpcmV0dXJuIGdvb2cuaXNJbk1vZHVsZUxvYWRlcl8oKT9nb29nLm1vZHVsZS5nZXRJbnRlcm5hbF8oZSk6bnVsbDtpZihnb29nLkVOQUJMRV9ERUJVR19MT0FERVIpe3ZhciB0PWdvb2cuZ2V0UGF0aEZyb21EZXBzXyhlKTtpZih0KXJldHVybiBnb29nLndyaXRlU2NyaXB0c18odCksbnVsbH10aHJvdyBlPVwiZ29vZy5yZXF1aXJlIGNvdWxkIG5vdCBmaW5kOiBcIitlLGdvb2cubG9nVG9Db25zb2xlXyhlKSxFcnJvcihlKX19LGdvb2cuYmFzZVBhdGg9XCJcIixnb29nLm51bGxGdW5jdGlvbj1mdW5jdGlvbigpe30sZ29vZy5hYnN0cmFjdE1ldGhvZD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwidW5pbXBsZW1lbnRlZCBhYnN0cmFjdCBtZXRob2RcIil9LGdvb2cuYWRkU2luZ2xldG9uR2V0dGVyPWZ1bmN0aW9uKGUpe2UuZ2V0SW5zdGFuY2U9ZnVuY3Rpb24oKXtyZXR1cm4gZS5pbnN0YW5jZV8/ZS5pbnN0YW5jZV86KGdvb2cuREVCVUcmJihnb29nLmluc3RhbnRpYXRlZFNpbmdsZXRvbnNfW2dvb2cuaW5zdGFudGlhdGVkU2luZ2xldG9uc18ubGVuZ3RoXT1lKSxlLmluc3RhbmNlXz1uZXcgZSl9fSxnb29nLmluc3RhbnRpYXRlZFNpbmdsZXRvbnNfPVtdLGdvb2cuTE9BRF9NT0RVTEVfVVNJTkdfRVZBTD0hMCxnb29nLlNFQUxfTU9EVUxFX0VYUE9SVFM9Z29vZy5ERUJVRyxnb29nLmxvYWRlZE1vZHVsZXNfPXt9LGdvb2cuREVQRU5ERU5DSUVTX0VOQUJMRUQ9IUNPTVBJTEVEJiZnb29nLkVOQUJMRV9ERUJVR19MT0FERVIsZ29vZy5ERVBFTkRFTkNJRVNfRU5BQkxFRCYmKGdvb2cuZGVwZW5kZW5jaWVzXz17cGF0aElzTW9kdWxlOnt9LG5hbWVUb1BhdGg6e30scmVxdWlyZXM6e30sdmlzaXRlZDp7fSx3cml0dGVuOnt9LGRlZmVycmVkOnt9fSxnb29nLmluSHRtbERvY3VtZW50Xz1mdW5jdGlvbigpe3ZhciBlPWdvb2cuZ2xvYmFsLmRvY3VtZW50O3JldHVybiBudWxsIT1lJiZcIndyaXRlXCJpbiBlfSxnb29nLmZpbmRCYXNlUGF0aF89ZnVuY3Rpb24oKXtpZihnb29nLmlzRGVmKGdvb2cuZ2xvYmFsLkNMT1NVUkVfQkFTRV9QQVRIKSlnb29nLmJhc2VQYXRoPWdvb2cuZ2xvYmFsLkNMT1NVUkVfQkFTRV9QQVRIO2Vsc2UgaWYoZ29vZy5pbkh0bWxEb2N1bWVudF8oKSlmb3IodmFyIGU9Z29vZy5nbG9iYWwuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJTQ1JJUFRcIiksdD1lLmxlbmd0aC0xOzA8PXQ7LS10KXt2YXIgcj1lW3RdLnNyYyxvPS0xPT0obz1yLmxhc3RJbmRleE9mKFwiP1wiKSk/ci5sZW5ndGg6bztpZihcImJhc2UuanNcIj09ci5zdWJzdHIoby03LDcpKXtnb29nLmJhc2VQYXRoPXIuc3Vic3RyKDAsby03KTticmVha319fSxnb29nLmltcG9ydFNjcmlwdF89ZnVuY3Rpb24oZSx0KXsoZ29vZy5nbG9iYWwuQ0xPU1VSRV9JTVBPUlRfU0NSSVBUfHxnb29nLndyaXRlU2NyaXB0VGFnXykoZSx0KSYmKGdvb2cuZGVwZW5kZW5jaWVzXy53cml0dGVuW2VdPSEwKX0sZ29vZy5JU19PTERfSUVfPSEoZ29vZy5nbG9iYWwuYXRvYnx8IWdvb2cuZ2xvYmFsLmRvY3VtZW50fHwhZ29vZy5nbG9iYWwuZG9jdW1lbnQuYWxsKSxnb29nLmltcG9ydE1vZHVsZV89ZnVuY3Rpb24oZSl7Z29vZy5pbXBvcnRTY3JpcHRfKFwiXCIsJ2dvb2cucmV0cmlldmVBbmRFeGVjTW9kdWxlXyhcIicrZSsnXCIpOycpJiYoZ29vZy5kZXBlbmRlbmNpZXNfLndyaXR0ZW5bZV09ITApfSxnb29nLnF1ZXVlZE1vZHVsZXNfPVtdLGdvb2cud3JhcE1vZHVsZV89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZ29vZy5MT0FEX01PRFVMRV9VU0lOR19FVkFMJiZnb29nLmlzRGVmKGdvb2cuZ2xvYmFsLkpTT04pP1wiZ29vZy5sb2FkTW9kdWxlKFwiK2dvb2cuZ2xvYmFsLkpTT04uc3RyaW5naWZ5KHQrXCJcXG4vLyMgc291cmNlVVJMPVwiK2UrXCJcXG5cIikrXCIpO1wiOidnb29nLmxvYWRNb2R1bGUoZnVuY3Rpb24oZXhwb3J0cykge1widXNlIHN0cmljdFwiOycrdCtcIlxcbjtyZXR1cm4gZXhwb3J0c30pO1xcbi8vIyBzb3VyY2VVUkw9XCIrZStcIlxcblwifSxnb29nLmxvYWRRdWV1ZWRNb2R1bGVzXz1mdW5jdGlvbigpe3ZhciBlPWdvb2cucXVldWVkTW9kdWxlc18ubGVuZ3RoO2lmKDA8ZSl7dmFyIHQ9Z29vZy5xdWV1ZWRNb2R1bGVzXztnb29nLnF1ZXVlZE1vZHVsZXNfPVtdO2Zvcih2YXIgcj0wO3I8ZTtyKyspZ29vZy5tYXliZVByb2Nlc3NEZWZlcnJlZFBhdGhfKHRbcl0pfX0sZ29vZy5tYXliZVByb2Nlc3NEZWZlcnJlZERlcF89ZnVuY3Rpb24oZSl7Z29vZy5pc0RlZmVycmVkTW9kdWxlXyhlKSYmZ29vZy5hbGxEZXBzQXJlQXZhaWxhYmxlXyhlKSYmKGU9Z29vZy5nZXRQYXRoRnJvbURlcHNfKGUpLGdvb2cubWF5YmVQcm9jZXNzRGVmZXJyZWRQYXRoXyhnb29nLmJhc2VQYXRoK2UpKX0sZ29vZy5pc0RlZmVycmVkTW9kdWxlXz1mdW5jdGlvbihlKXtyZXR1cm4hKCEoZT1nb29nLmdldFBhdGhGcm9tRGVwc18oZSkpfHwhZ29vZy5kZXBlbmRlbmNpZXNfLnBhdGhJc01vZHVsZVtlXSkmJmdvb2cuYmFzZVBhdGgrZSBpbiBnb29nLmRlcGVuZGVuY2llc18uZGVmZXJyZWR9LGdvb2cuYWxsRGVwc0FyZUF2YWlsYWJsZV89ZnVuY3Rpb24oZSl7aWYoKGU9Z29vZy5nZXRQYXRoRnJvbURlcHNfKGUpKSYmZSBpbiBnb29nLmRlcGVuZGVuY2llc18ucmVxdWlyZXMpZm9yKHZhciB0IGluIGdvb2cuZGVwZW5kZW5jaWVzXy5yZXF1aXJlc1tlXSlpZighZ29vZy5pc1Byb3ZpZGVkXyh0KSYmIWdvb2cuaXNEZWZlcnJlZE1vZHVsZV8odCkpcmV0dXJuITE7cmV0dXJuITB9LGdvb2cubWF5YmVQcm9jZXNzRGVmZXJyZWRQYXRoXz1mdW5jdGlvbihlKXtpZihlIGluIGdvb2cuZGVwZW5kZW5jaWVzXy5kZWZlcnJlZCl7dmFyIHQ9Z29vZy5kZXBlbmRlbmNpZXNfLmRlZmVycmVkW2VdO2RlbGV0ZSBnb29nLmRlcGVuZGVuY2llc18uZGVmZXJyZWRbZV0sZ29vZy5nbG9iYWxFdmFsKHQpfX0sZ29vZy5sb2FkTW9kdWxlRnJvbVVybD1mdW5jdGlvbihlKXtnb29nLnJldHJpZXZlQW5kRXhlY01vZHVsZV8oZSl9LGdvb2cubG9hZE1vZHVsZT1mdW5jdGlvbihlKXt2YXIgdD1nb29nLm1vZHVsZUxvYWRlclN0YXRlXzt0cnl7dmFyIHI7aWYoZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV89e21vZHVsZU5hbWU6dm9pZCAwLGRlY2xhcmVMZWdhY3lOYW1lc3BhY2U6ITF9LGdvb2cuaXNGdW5jdGlvbihlKSlyPWUuY2FsbChnb29nLmdsb2JhbCx7fSk7ZWxzZXtpZighZ29vZy5pc1N0cmluZyhlKSl0aHJvdyBFcnJvcihcIkludmFsaWQgbW9kdWxlIGRlZmluaXRpb25cIik7cj1nb29nLmxvYWRNb2R1bGVGcm9tU291cmNlXy5jYWxsKGdvb2cuZ2xvYmFsLGUpfXZhciBvPWdvb2cubW9kdWxlTG9hZGVyU3RhdGVfLm1vZHVsZU5hbWU7aWYoIWdvb2cuaXNTdHJpbmcobyl8fCFvKXRocm93IEVycm9yKCdJbnZhbGlkIG1vZHVsZSBuYW1lIFwiJytvKydcIicpO2dvb2cubW9kdWxlTG9hZGVyU3RhdGVfLmRlY2xhcmVMZWdhY3lOYW1lc3BhY2U/Z29vZy5jb25zdHJ1Y3ROYW1lc3BhY2VfKG8scik6Z29vZy5TRUFMX01PRFVMRV9FWFBPUlRTJiZPYmplY3Quc2VhbCYmT2JqZWN0LnNlYWwociksZ29vZy5sb2FkZWRNb2R1bGVzX1tvXT1yfWZpbmFsbHl7Z29vZy5tb2R1bGVMb2FkZXJTdGF0ZV89dH19LGdvb2cubG9hZE1vZHVsZUZyb21Tb3VyY2VfPWZ1bmN0aW9uKGEpe3JldHVybiBldmFsKGEpLHt9fSxnb29nLndyaXRlU2NyaXB0U3JjTm9kZV89ZnVuY3Rpb24oZSl7Z29vZy5nbG9iYWwuZG9jdW1lbnQud3JpdGUoJzxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiIHNyYz1cIicrZSsnXCI+PFxcL3NjcmlwdD4nKX0sZ29vZy5hcHBlbmRTY3JpcHRTcmNOb2RlXz1mdW5jdGlvbihlKXt2YXIgdD1nb29nLmdsb2JhbC5kb2N1bWVudCxyPXQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtyLnR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIixyLnNyYz1lLHIuZGVmZXI9ITEsci5hc3luYz0hMSx0LmhlYWQuYXBwZW5kQ2hpbGQocil9LGdvb2cud3JpdGVTY3JpcHRUYWdfPWZ1bmN0aW9uKGUsdCl7aWYoZ29vZy5pbkh0bWxEb2N1bWVudF8oKSl7dmFyIHI9Z29vZy5nbG9iYWwuZG9jdW1lbnQ7aWYoIWdvb2cuRU5BQkxFX0NIUk9NRV9BUFBfU0FGRV9TQ1JJUFRfTE9BRElORyYmXCJjb21wbGV0ZVwiPT1yLnJlYWR5U3RhdGUpe2lmKC9cXGJkZXBzLmpzJC8udGVzdChlKSlyZXR1cm4hMTt0aHJvdyBFcnJvcignQ2Fubm90IHdyaXRlIFwiJytlKydcIiBhZnRlciBkb2N1bWVudCBsb2FkJyl9dmFyIG89Z29vZy5JU19PTERfSUVfO3JldHVybiB2b2lkIDA9PT10P28/KG89XCIgb25yZWFkeXN0YXRlY2hhbmdlPSdnb29nLm9uU2NyaXB0TG9hZF8odGhpcywgXCIrICsrZ29vZy5sYXN0Tm9uTW9kdWxlU2NyaXB0SW5kZXhfK1wiKScgXCIsci53cml0ZSgnPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgc3JjPVwiJytlKydcIicrbytcIj48XFwvc2NyaXB0PlwiKSk6Z29vZy5FTkFCTEVfQ0hST01FX0FQUF9TQUZFX1NDUklQVF9MT0FESU5HP2dvb2cuYXBwZW5kU2NyaXB0U3JjTm9kZV8oZSk6Z29vZy53cml0ZVNjcmlwdFNyY05vZGVfKGUpOnIud3JpdGUoJzxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPicrdCtcIjxcXC9zY3JpcHQ+XCIpLCEwfXJldHVybiExfSxnb29nLmxhc3ROb25Nb2R1bGVTY3JpcHRJbmRleF89MCxnb29nLm9uU2NyaXB0TG9hZF89ZnVuY3Rpb24oZSx0KXtyZXR1cm5cImNvbXBsZXRlXCI9PWUucmVhZHlTdGF0ZSYmZ29vZy5sYXN0Tm9uTW9kdWxlU2NyaXB0SW5kZXhfPT10JiZnb29nLmxvYWRRdWV1ZWRNb2R1bGVzXygpLCEwfSxnb29nLndyaXRlU2NyaXB0c189ZnVuY3Rpb24oZSl7dmFyIG89W10scz17fSxpPWdvb2cuZGVwZW5kZW5jaWVzXztmb3IoZnVuY3Rpb24gZSh0KXtpZighKHQgaW4gaS53cml0dGVufHx0IGluIGkudmlzaXRlZCkpe2lmKGkudmlzaXRlZFt0XT0hMCx0IGluIGkucmVxdWlyZXMpZm9yKHZhciByIGluIGkucmVxdWlyZXNbdF0paWYoIWdvb2cuaXNQcm92aWRlZF8ocikpe2lmKCEociBpbiBpLm5hbWVUb1BhdGgpKXRocm93IEVycm9yKFwiVW5kZWZpbmVkIG5hbWVUb1BhdGggZm9yIFwiK3IpO2UoaS5uYW1lVG9QYXRoW3JdKX10IGluIHN8fChzW3RdPSEwLG8ucHVzaCh0KSl9fShlKSxlPTA7ZTxvLmxlbmd0aDtlKyspe3ZhciB0PW9bZV07Z29vZy5kZXBlbmRlbmNpZXNfLndyaXR0ZW5bdF09ITB9dmFyIHI9Z29vZy5tb2R1bGVMb2FkZXJTdGF0ZV87Zm9yKGdvb2cubW9kdWxlTG9hZGVyU3RhdGVfPW51bGwsZT0wO2U8by5sZW5ndGg7ZSsrKXtpZighKHQ9b1tlXSkpdGhyb3cgZ29vZy5tb2R1bGVMb2FkZXJTdGF0ZV89cixFcnJvcihcIlVuZGVmaW5lZCBzY3JpcHQgaW5wdXRcIik7aS5wYXRoSXNNb2R1bGVbdF0/Z29vZy5pbXBvcnRNb2R1bGVfKGdvb2cuYmFzZVBhdGgrdCk6Z29vZy5pbXBvcnRTY3JpcHRfKGdvb2cuYmFzZVBhdGgrdCl9Z29vZy5tb2R1bGVMb2FkZXJTdGF0ZV89cn0sZ29vZy5nZXRQYXRoRnJvbURlcHNfPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluIGdvb2cuZGVwZW5kZW5jaWVzXy5uYW1lVG9QYXRoP2dvb2cuZGVwZW5kZW5jaWVzXy5uYW1lVG9QYXRoW2VdOm51bGx9LGdvb2cuZmluZEJhc2VQYXRoXygpLGdvb2cuZ2xvYmFsLkNMT1NVUkVfTk9fREVQU3x8Z29vZy5pbXBvcnRTY3JpcHRfKGdvb2cuYmFzZVBhdGgrXCJkZXBzLmpzXCIpKSxnb29nLm5vcm1hbGl6ZVBhdGhfPWZ1bmN0aW9uKGUpe2U9ZS5zcGxpdChcIi9cIik7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDspXCIuXCI9PWVbdF0/ZS5zcGxpY2UodCwxKTp0JiZcIi4uXCI9PWVbdF0mJmVbdC0xXSYmXCIuLlwiIT1lW3QtMV0/ZS5zcGxpY2UoLS10LDIpOnQrKztyZXR1cm4gZS5qb2luKFwiL1wiKX0sZ29vZy5sb2FkRmlsZVN5bmNfPWZ1bmN0aW9uKGUpe2lmKGdvb2cuZ2xvYmFsLkNMT1NVUkVfTE9BRF9GSUxFX1NZTkMpcmV0dXJuIGdvb2cuZ2xvYmFsLkNMT1NVUkVfTE9BRF9GSUxFX1NZTkMoZSk7dmFyIHQ9bmV3IGdvb2cuZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0O3JldHVybiB0Lm9wZW4oXCJnZXRcIixlLCExKSx0LnNlbmQoKSx0LnJlc3BvbnNlVGV4dH0sZ29vZy5yZXRyaWV2ZUFuZEV4ZWNNb2R1bGVfPWZ1bmN0aW9uKGUpe2lmKCFDT01QSUxFRCl7dmFyIHQ9ZTtlPWdvb2cubm9ybWFsaXplUGF0aF8oZSk7dmFyIHI9Z29vZy5nbG9iYWwuQ0xPU1VSRV9JTVBPUlRfU0NSSVBUfHxnb29nLndyaXRlU2NyaXB0VGFnXyxvPWdvb2cubG9hZEZpbGVTeW5jXyhlKTtpZihudWxsPT1vKXRocm93IEVycm9yKFwibG9hZCBvZiBcIitlK1wiZmFpbGVkXCIpO289Z29vZy53cmFwTW9kdWxlXyhlLG8pLGdvb2cuSVNfT0xEX0lFXz8oZ29vZy5kZXBlbmRlbmNpZXNfLmRlZmVycmVkW3RdPW8sZ29vZy5xdWV1ZWRNb2R1bGVzXy5wdXNoKHQpKTpyKGUsbyl9fSxnb29nLnR5cGVPZj1mdW5jdGlvbihlKXt2YXIgdD10eXBlb2YgZTtpZihcIm9iamVjdFwiPT10KXtpZighZSlyZXR1cm5cIm51bGxcIjtpZihlIGluc3RhbmNlb2YgQXJyYXkpcmV0dXJuXCJhcnJheVwiO2lmKGUgaW5zdGFuY2VvZiBPYmplY3QpcmV0dXJuIHQ7dmFyIHI9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpO2lmKFwiW29iamVjdCBXaW5kb3ddXCI9PXIpcmV0dXJuXCJvYmplY3RcIjtpZihcIltvYmplY3QgQXJyYXldXCI9PXJ8fFwibnVtYmVyXCI9PXR5cGVvZiBlLmxlbmd0aCYmdm9pZCAwIT09ZS5zcGxpY2UmJnZvaWQgMCE9PWUucHJvcGVydHlJc0VudW1lcmFibGUmJiFlLnByb3BlcnR5SXNFbnVtZXJhYmxlKFwic3BsaWNlXCIpKXJldHVyblwiYXJyYXlcIjtpZihcIltvYmplY3QgRnVuY3Rpb25dXCI9PXJ8fHZvaWQgMCE9PWUuY2FsbCYmdm9pZCAwIT09ZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSYmIWUucHJvcGVydHlJc0VudW1lcmFibGUoXCJjYWxsXCIpKXJldHVyblwiZnVuY3Rpb25cIn1lbHNlIGlmKFwiZnVuY3Rpb25cIj09dCYmdm9pZCAwPT09ZS5jYWxsKXJldHVyblwib2JqZWN0XCI7cmV0dXJuIHR9LGdvb2cuaXNOdWxsPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZX0sZ29vZy5pc0RlZkFuZE5vdE51bGw9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWV9LGdvb2cuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cImFycmF5XCI9PWdvb2cudHlwZU9mKGUpfSxnb29nLmlzQXJyYXlMaWtlPWZ1bmN0aW9uKGUpe3ZhciB0PWdvb2cudHlwZU9mKGUpO3JldHVyblwiYXJyYXlcIj09dHx8XCJvYmplY3RcIj09dCYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RofSxnb29nLmlzRGF0ZUxpa2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGdvb2cuaXNPYmplY3QoZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZ2V0RnVsbFllYXJ9LGdvb2cuaXNTdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9LGdvb2cuaXNCb29sZWFuPWZ1bmN0aW9uKGUpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgZX0sZ29vZy5pc051bWJlcj1mdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZX0sZ29vZy5pc0Z1bmN0aW9uPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09Z29vZy50eXBlT2YoZSl9LGdvb2cuaXNPYmplY3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9dHlwZW9mIGU7cmV0dXJuXCJvYmplY3RcIj09dCYmbnVsbCE9ZXx8XCJmdW5jdGlvblwiPT10fSxnb29nLmdldFVpZD1mdW5jdGlvbihlKXtyZXR1cm4gZVtnb29nLlVJRF9QUk9QRVJUWV9dfHwoZVtnb29nLlVJRF9QUk9QRVJUWV9dPSsrZ29vZy51aWRDb3VudGVyXyl9LGdvb2cuaGFzVWlkPWZ1bmN0aW9uKGUpe3JldHVybiEhZVtnb29nLlVJRF9QUk9QRVJUWV9dfSxnb29nLnJlbW92ZVVpZD1mdW5jdGlvbihlKXtudWxsIT09ZSYmXCJyZW1vdmVBdHRyaWJ1dGVcImluIGUmJmUucmVtb3ZlQXR0cmlidXRlKGdvb2cuVUlEX1BST1BFUlRZXyk7dHJ5e2RlbGV0ZSBlW2dvb2cuVUlEX1BST1BFUlRZX119Y2F0Y2goZSl7fX0sZ29vZy5VSURfUFJPUEVSVFlfPVwiY2xvc3VyZV91aWRfXCIrKDFlOSpNYXRoLnJhbmRvbSgpPj4+MCksZ29vZy51aWRDb3VudGVyXz0wLGdvb2cuZ2V0SGFzaENvZGU9Z29vZy5nZXRVaWQsZ29vZy5yZW1vdmVIYXNoQ29kZT1nb29nLnJlbW92ZVVpZCxnb29nLmNsb25lT2JqZWN0PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PShyPWdvb2cudHlwZU9mKGUpKXx8XCJhcnJheVwiPT1yKXtpZihlLmNsb25lKXJldHVybiBlLmNsb25lKCk7dmFyIHQscj1cImFycmF5XCI9PXI/W106e307Zm9yKHQgaW4gZSlyW3RdPWdvb2cuY2xvbmVPYmplY3QoZVt0XSk7cmV0dXJuIHJ9cmV0dXJuIGV9LGdvb2cuYmluZE5hdGl2ZV89ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlLmNhbGwuYXBwbHkoZS5iaW5kLGFyZ3VtZW50cyl9LGdvb2cuYmluZEpzXz1mdW5jdGlvbih0LHIsZSl7aWYoIXQpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBvPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3JldHVybiBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShlLG8pLHQuYXBwbHkocixlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkocixhcmd1bWVudHMpfX0sZ29vZy5iaW5kPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQmJi0xIT1GdW5jdGlvbi5wcm90b3R5cGUuYmluZC50b1N0cmluZygpLmluZGV4T2YoXCJuYXRpdmUgY29kZVwiKT9nb29nLmJpbmQ9Z29vZy5iaW5kTmF0aXZlXzpnb29nLmJpbmQ9Z29vZy5iaW5kSnNfLGdvb2cuYmluZC5hcHBseShudWxsLGFyZ3VtZW50cyl9LGdvb2cucGFydGlhbD1mdW5jdGlvbih0LGUpe3ZhciByPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT1yLnNsaWNlKCk7cmV0dXJuIGUucHVzaC5hcHBseShlLGFyZ3VtZW50cyksdC5hcHBseSh0aGlzLGUpfX0sZ29vZy5taXhpbj1mdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0KWVbcl09dFtyXX0sZ29vZy5ub3c9Z29vZy5UUlVTVEVEX1NJVEUmJkRhdGUubm93fHxmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX0sZ29vZy5nbG9iYWxFdmFsPWZ1bmN0aW9uKGUpe2lmKGdvb2cuZ2xvYmFsLmV4ZWNTY3JpcHQpZ29vZy5nbG9iYWwuZXhlY1NjcmlwdChlLFwiSmF2YVNjcmlwdFwiKTtlbHNle2lmKCFnb29nLmdsb2JhbC5ldmFsKXRocm93IEVycm9yKFwiZ29vZy5nbG9iYWxFdmFsIG5vdCBhdmFpbGFibGVcIik7aWYobnVsbD09Z29vZy5ldmFsV29ya3NGb3JHbG9iYWxzXylpZihnb29nLmdsb2JhbC5ldmFsKFwidmFyIF9ldmFsVGVzdF8gPSAxO1wiKSx2b2lkIDAhPT1nb29nLmdsb2JhbC5fZXZhbFRlc3RfKXt0cnl7ZGVsZXRlIGdvb2cuZ2xvYmFsLl9ldmFsVGVzdF99Y2F0Y2goZSl7fWdvb2cuZXZhbFdvcmtzRm9yR2xvYmFsc189ITB9ZWxzZSBnb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfPSExO2lmKGdvb2cuZXZhbFdvcmtzRm9yR2xvYmFsc18pZ29vZy5nbG9iYWwuZXZhbChlKTtlbHNle3ZhciB0PWdvb2cuZ2xvYmFsLmRvY3VtZW50LHI9dC5jcmVhdGVFbGVtZW50KFwiU0NSSVBUXCIpO3IudHlwZT1cInRleHQvamF2YXNjcmlwdFwiLHIuZGVmZXI9ITEsci5hcHBlbmRDaGlsZCh0LmNyZWF0ZVRleHROb2RlKGUpKSx0LmJvZHkuYXBwZW5kQ2hpbGQociksdC5ib2R5LnJlbW92ZUNoaWxkKHIpfX19LGdvb2cuZXZhbFdvcmtzRm9yR2xvYmFsc189bnVsbCxnb29nLmdldENzc05hbWU9ZnVuY3Rpb24oZSx0KXt2YXIgbz1mdW5jdGlvbihlKXtyZXR1cm4gZ29vZy5jc3NOYW1lTWFwcGluZ19bZV18fGV9LHI9ZnVuY3Rpb24oZSl7ZT1lLnNwbGl0KFwiLVwiKTtmb3IodmFyIHQ9W10scj0wO3I8ZS5sZW5ndGg7cisrKXQucHVzaChvKGVbcl0pKTtyZXR1cm4gdC5qb2luKFwiLVwiKX07cj1nb29nLmNzc05hbWVNYXBwaW5nXz9cIkJZX1dIT0xFXCI9PWdvb2cuY3NzTmFtZU1hcHBpbmdTdHlsZV8/bzpyOmZ1bmN0aW9uKGUpe3JldHVybiBlfTtyZXR1cm4gdD9lK1wiLVwiK3IodCk6cihlKX0sZ29vZy5zZXRDc3NOYW1lTWFwcGluZz1mdW5jdGlvbihlLHQpe2dvb2cuY3NzTmFtZU1hcHBpbmdfPWUsZ29vZy5jc3NOYW1lTWFwcGluZ1N0eWxlXz10fSwhQ09NUElMRUQmJmdvb2cuZ2xvYmFsLkNMT1NVUkVfQ1NTX05BTUVfTUFQUElORyYmKGdvb2cuY3NzTmFtZU1hcHBpbmdfPWdvb2cuZ2xvYmFsLkNMT1NVUkVfQ1NTX05BTUVfTUFQUElORyksZ29vZy5nZXRNc2c9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gciYmKGU9ZS5yZXBsYWNlKC9cXHtcXCQoW159XSspfS9nLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGwhPXImJnQgaW4gcj9yW3RdOmV9KSksZX0sZ29vZy5nZXRNc2dXaXRoRmFsbGJhY2s9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZX0sZ29vZy5leHBvcnRTeW1ib2w9ZnVuY3Rpb24oZSx0LHIpe2dvb2cuZXhwb3J0UGF0aF8oZSx0LHIpfSxnb29nLmV4cG9ydFByb3BlcnR5PWZ1bmN0aW9uKGUsdCxyKXtlW3RdPXJ9LGdvb2cuaW5oZXJpdHM9ZnVuY3Rpb24oZSxpKXtmdW5jdGlvbiB0KCl7fXQucHJvdG90eXBlPWkucHJvdG90eXBlLGUuc3VwZXJDbGFzc189aS5wcm90b3R5cGUsZS5wcm90b3R5cGU9bmV3IHQsKGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUpLmJhc2U9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbz1BcnJheShhcmd1bWVudHMubGVuZ3RoLTIpLHM9MjtzPGFyZ3VtZW50cy5sZW5ndGg7cysrKW9bcy0yXT1hcmd1bWVudHNbc107cmV0dXJuIGkucHJvdG90eXBlW3RdLmFwcGx5KGUsbyl9fSxnb29nLmJhc2U9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPWFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyO2lmKGdvb2cuU1RSSUNUX01PREVfQ09NUEFUSUJMRXx8Z29vZy5ERUJVRyYmIW8pdGhyb3cgRXJyb3IoXCJhcmd1bWVudHMuY2FsbGVyIG5vdCBkZWZpbmVkLiAgZ29vZy5iYXNlKCkgY2Fubm90IGJlIHVzZWQgd2l0aCBzdHJpY3QgbW9kZSBjb2RlLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLUNcIik7aWYoby5zdXBlckNsYXNzXyl7Zm9yKHZhciBzPUFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSksaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspc1tpLTFdPWFyZ3VtZW50c1tpXTtyZXR1cm4gby5zdXBlckNsYXNzXy5jb25zdHJ1Y3Rvci5hcHBseShlLHMpfWZvcihzPUFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMiksaT0yO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspc1tpLTJdPWFyZ3VtZW50c1tpXTtpPSExO2Zvcih2YXIgYT1lLmNvbnN0cnVjdG9yO2E7YT1hLnN1cGVyQ2xhc3NfJiZhLnN1cGVyQ2xhc3NfLmNvbnN0cnVjdG9yKWlmKGEucHJvdG90eXBlW3RdPT09bylpPSEwO2Vsc2UgaWYoaSlyZXR1cm4gYS5wcm90b3R5cGVbdF0uYXBwbHkoZSxzKTtpZihlW3RdPT09bylyZXR1cm4gZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbdF0uYXBwbHkoZSxzKTt0aHJvdyBFcnJvcihcImdvb2cuYmFzZSBjYWxsZWQgZnJvbSBhIG1ldGhvZCBvZiBvbmUgbmFtZSB0byBhIG1ldGhvZCBvZiBhIGRpZmZlcmVudCBuYW1lXCIpfSxnb29nLnNjb3BlPWZ1bmN0aW9uKGUpe2UuY2FsbChnb29nLmdsb2JhbCl9LENPTVBJTEVEfHwoZ29vZy5nbG9iYWwuQ09NUElMRUQ9Q09NUElMRUQpLGdvb2cuZGVmaW5lQ2xhc3M9ZnVuY3Rpb24oZSx0KXt2YXIgcj10LmNvbnN0cnVjdG9yLG89dC5zdGF0aWNzO3JldHVybiByJiZyIT1PYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yfHwocj1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiY2Fubm90IGluc3RhbnRpYXRlIGFuIGludGVyZmFjZSAobm8gY29uc3RydWN0b3IgZGVmaW5lZCkuXCIpfSkscj1nb29nLmRlZmluZUNsYXNzLmNyZWF0ZVNlYWxpbmdDb25zdHJ1Y3Rvcl8ocixlKSxlJiZnb29nLmluaGVyaXRzKHIsZSksZGVsZXRlIHQuY29uc3RydWN0b3IsZGVsZXRlIHQuc3RhdGljcyxnb29nLmRlZmluZUNsYXNzLmFwcGx5UHJvcGVydGllc18oci5wcm90b3R5cGUsdCksbnVsbCE9byYmKG8gaW5zdGFuY2VvZiBGdW5jdGlvbj9vKHIpOmdvb2cuZGVmaW5lQ2xhc3MuYXBwbHlQcm9wZXJ0aWVzXyhyLG8pKSxyfSxnb29nLmRlZmluZUNsYXNzLlNFQUxfQ0xBU1NfSU5TVEFOQ0VTPWdvb2cuREVCVUcsZ29vZy5kZWZpbmVDbGFzcy5jcmVhdGVTZWFsaW5nQ29uc3RydWN0b3JfPWZ1bmN0aW9uKHQsZSl7aWYoZ29vZy5kZWZpbmVDbGFzcy5TRUFMX0NMQVNTX0lOU1RBTkNFUyYmT2JqZWN0LnNlYWwgaW5zdGFuY2VvZiBGdW5jdGlvbil7aWYoZSYmZS5wcm90b3R5cGUmJmUucHJvdG90eXBlW2dvb2cuVU5TRUFMQUJMRV9DT05TVFJVQ1RPUl9QUk9QRVJUWV9dKXJldHVybiB0O3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9dC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXM7cmV0dXJuIGVbZ29vZy5VSURfUFJPUEVSVFlfXT1lW2dvb2cuVUlEX1BST1BFUlRZX10sdGhpcy5jb25zdHJ1Y3Rvcj09PXImJk9iamVjdC5zZWFsKGUpLGV9O3JldHVybiByfXJldHVybiB0fSxnb29nLmRlZmluZUNsYXNzLk9CSkVDVF9QUk9UT1RZUEVfRklFTERTXz1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKSxnb29nLmRlZmluZUNsYXNzLmFwcGx5UHJvcGVydGllc189ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIgaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmKGVbcl09dFtyXSk7Zm9yKHZhciBvPTA7bzxnb29nLmRlZmluZUNsYXNzLk9CSkVDVF9QUk9UT1RZUEVfRklFTERTXy5sZW5ndGg7bysrKXI9Z29vZy5kZWZpbmVDbGFzcy5PQkpFQ1RfUFJPVE9UWVBFX0ZJRUxEU19bb10sT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikmJihlW3JdPXRbcl0pfSxnb29nLnRhZ1Vuc2VhbGFibGVDbGFzcz1mdW5jdGlvbihlKXshQ09NUElMRUQmJmdvb2cuZGVmaW5lQ2xhc3MuU0VBTF9DTEFTU19JTlNUQU5DRVMmJihlLnByb3RvdHlwZVtnb29nLlVOU0VBTEFCTEVfQ09OU1RSVUNUT1JfUFJPUEVSVFlfXT0hMCl9LGdvb2cuVU5TRUFMQUJMRV9DT05TVFJVQ1RPUl9QUk9QRVJUWV89XCJnb29nX2RlZmluZUNsYXNzX2xlZ2FjeV91bnNlYWxhYmxlXCIsZ29vZy5kb209e30sZ29vZy5kb20uTm9kZVR5cGU9e0VMRU1FTlQ6MSxBVFRSSUJVVEU6MixURVhUOjMsQ0RBVEFfU0VDVElPTjo0LEVOVElUWV9SRUZFUkVOQ0U6NSxFTlRJVFk6NixQUk9DRVNTSU5HX0lOU1RSVUNUSU9OOjcsQ09NTUVOVDo4LERPQ1VNRU5UOjksRE9DVU1FTlRfVFlQRToxMCxET0NVTUVOVF9GUkFHTUVOVDoxMSxOT1RBVElPTjoxMn0sZ29vZy5kZWJ1Zz17fSxnb29nLmRlYnVnLkVycm9yPWZ1bmN0aW9uKGUpe2lmKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKUVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsZ29vZy5kZWJ1Zy5FcnJvcik7ZWxzZXt2YXIgdD1FcnJvcigpLnN0YWNrO3QmJih0aGlzLnN0YWNrPXQpfWUmJih0aGlzLm1lc3NhZ2U9U3RyaW5nKGUpKSx0aGlzLnJlcG9ydEVycm9yVG9TZXJ2ZXI9ITB9LGdvb2cuaW5oZXJpdHMoZ29vZy5kZWJ1Zy5FcnJvcixFcnJvciksZ29vZy5kZWJ1Zy5FcnJvci5wcm90b3R5cGUubmFtZT1cIkN1c3RvbUVycm9yXCIsZ29vZy5zdHJpbmc9e30sZ29vZy5zdHJpbmcuREVURUNUX0RPVUJMRV9FU0NBUElORz0hMSxnb29nLnN0cmluZy5GT1JDRV9OT05fRE9NX0hUTUxfVU5FU0NBUElORz0hMSxnb29nLnN0cmluZy5Vbmljb2RlPXtOQlNQOlwiwqBcIn0sZ29vZy5zdHJpbmcuc3RhcnRzV2l0aD1mdW5jdGlvbihlLHQpe3JldHVybiAwPT1lLmxhc3RJbmRleE9mKHQsMCl9LGdvb2cuc3RyaW5nLmVuZHNXaXRoPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5sZW5ndGgtdC5sZW5ndGg7cmV0dXJuIDA8PXImJmUuaW5kZXhPZih0LHIpPT1yfSxnb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVTdGFydHNXaXRoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA9PWdvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUNvbXBhcmUodCxlLnN1YnN0cigwLHQubGVuZ3RoKSl9LGdvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUVuZHNXaXRoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA9PWdvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUNvbXBhcmUodCxlLnN1YnN0cihlLmxlbmd0aC10Lmxlbmd0aCx0Lmxlbmd0aCkpfSxnb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVFcXVhbHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS50b0xvd2VyQ2FzZSgpPT10LnRvTG93ZXJDYXNlKCl9LGdvb2cuc3RyaW5nLnN1YnM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9ZS5zcGxpdChcIiVzXCIpLG89XCJcIixzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtzLmxlbmd0aCYmMTxyLmxlbmd0aDspbys9ci5zaGlmdCgpK3Muc2hpZnQoKTtyZXR1cm4gbytyLmpvaW4oXCIlc1wiKX0sZ29vZy5zdHJpbmcuY29sbGFwc2VXaGl0ZXNwYWNlPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1tcXHNcXHhhMF0rL2csXCIgXCIpLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9LGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuL15bXFxzXFx4YTBdKiQvLnRlc3QoZSl9LGdvb2cuc3RyaW5nLmlzRW1wdHlTdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PWUubGVuZ3RofSxnb29nLnN0cmluZy5pc0VtcHR5PWdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UsZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZVNhZmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGdvb2cuc3RyaW5nLmlzRW1wdHlPcldoaXRlc3BhY2UoZ29vZy5zdHJpbmcubWFrZVNhZmUoZSkpfSxnb29nLnN0cmluZy5pc0VtcHR5U2FmZT1nb29nLnN0cmluZy5pc0VtcHR5T3JXaGl0ZXNwYWNlU2FmZSxnb29nLnN0cmluZy5pc0JyZWFraW5nV2hpdGVzcGFjZT1mdW5jdGlvbihlKXtyZXR1cm4hL1teXFx0XFxuXFxyIF0vLnRlc3QoZSl9LGdvb2cuc3RyaW5nLmlzQWxwaGE9ZnVuY3Rpb24oZSl7cmV0dXJuIS9bXmEtekEtWl0vLnRlc3QoZSl9LGdvb2cuc3RyaW5nLmlzTnVtZXJpYz1mdW5jdGlvbihlKXtyZXR1cm4hL1teMC05XS8udGVzdChlKX0sZ29vZy5zdHJpbmcuaXNBbHBoYU51bWVyaWM9ZnVuY3Rpb24oZSl7cmV0dXJuIS9bXmEtekEtWjAtOV0vLnRlc3QoZSl9LGdvb2cuc3RyaW5nLmlzU3BhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuXCIgXCI9PWV9LGdvb2cuc3RyaW5nLmlzVW5pY29kZUNoYXI9ZnVuY3Rpb24oZSl7cmV0dXJuIDE9PWUubGVuZ3RoJiZcIiBcIjw9ZSYmZTw9XCJ+XCJ8fFwiwoBcIjw9ZSYmZTw9XCLvv71cIn0sZ29vZy5zdHJpbmcuc3RyaXBOZXdsaW5lcz1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC8oXFxyXFxufFxccnxcXG4pKy9nLFwiIFwiKX0sZ29vZy5zdHJpbmcuY2Fub25pY2FsaXplTmV3bGluZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvKFxcclxcbnxcXHJ8XFxuKS9nLFwiXFxuXCIpfSxnb29nLnN0cmluZy5ub3JtYWxpemVXaGl0ZXNwYWNlPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xceGEwfFxccy9nLFwiIFwiKX0sZ29vZy5zdHJpbmcubm9ybWFsaXplU3BhY2VzPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xceGEwfFsgXFx0XSsvZyxcIiBcIil9LGdvb2cuc3RyaW5nLmNvbGxhcHNlQnJlYWtpbmdTcGFjZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvW1xcdFxcclxcbiBdKy9nLFwiIFwiKS5yZXBsYWNlKC9eW1xcdFxcclxcbiBdK3xbXFx0XFxyXFxuIF0rJC9nLFwiXCIpfSxnb29nLnN0cmluZy50cmltPWdvb2cuVFJVU1RFRF9TSVRFJiZTdHJpbmcucHJvdG90eXBlLnRyaW0/ZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJpbSgpfTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9eW1xcc1xceGEwXSt8W1xcc1xceGEwXSskL2csXCJcIil9LGdvb2cuc3RyaW5nLnRyaW1MZWZ0PWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL15bXFxzXFx4YTBdKy8sXCJcIil9LGdvb2cuc3RyaW5nLnRyaW1SaWdodD1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFxzXFx4YTBdKyQvLFwiXCIpfSxnb29nLnN0cmluZy5jYXNlSW5zZW5zaXRpdmVDb21wYXJlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9U3RyaW5nKGUpLnRvTG93ZXJDYXNlKCksbz1TdHJpbmcodCkudG9Mb3dlckNhc2UoKTtyZXR1cm4gcjxvPy0xOnI9PW8/MDoxfSxnb29nLnN0cmluZy5udW1iZXJBd2FyZUNvbXBhcmVfPWZ1bmN0aW9uKGUsdCxyKXtpZihlPT10KXJldHVybiAwO2lmKCFlKXJldHVybi0xO2lmKCF0KXJldHVybiAxO2Zvcih2YXIgbz1lLnRvTG93ZXJDYXNlKCkubWF0Y2gocikscz10LnRvTG93ZXJDYXNlKCkubWF0Y2gociksaT1NYXRoLm1pbihvLmxlbmd0aCxzLmxlbmd0aCksYT0wO2E8aTthKyspe3I9b1thXTt2YXIgbj1zW2FdO2lmKHIhPW4pcmV0dXJuIGU9cGFyc2VJbnQociwxMCksIWlzTmFOKGUpJiYodD1wYXJzZUludChuLDEwKSwhaXNOYU4odCkmJmUtdCk/ZS10OnI8bj8tMToxfXJldHVybiBvLmxlbmd0aCE9cy5sZW5ndGg/by5sZW5ndGgtcy5sZW5ndGg6ZTx0Py0xOjF9LGdvb2cuc3RyaW5nLmludEF3YXJlQ29tcGFyZT1mdW5jdGlvbihlLHQpe3JldHVybiBnb29nLnN0cmluZy5udW1iZXJBd2FyZUNvbXBhcmVfKGUsdCwvXFxkK3xcXEQrL2cpfSxnb29nLnN0cmluZy5mbG9hdEF3YXJlQ29tcGFyZT1mdW5jdGlvbihlLHQpe3JldHVybiBnb29nLnN0cmluZy5udW1iZXJBd2FyZUNvbXBhcmVfKGUsdCwvXFxkK3xcXC5cXGQrfFxcRCsvZyl9LGdvb2cuc3RyaW5nLm51bWVyYXRlQ29tcGFyZT1nb29nLnN0cmluZy5mbG9hdEF3YXJlQ29tcGFyZSxnb29nLnN0cmluZy51cmxFbmNvZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZSkpfSxnb29nLnN0cmluZy51cmxEZWNvZGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlLnJlcGxhY2UoL1xcKy9nLFwiIFwiKSl9LGdvb2cuc3RyaW5nLm5ld0xpbmVUb0JyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUucmVwbGFjZSgvKFxcclxcbnxcXHJ8XFxuKS9nLHQ/XCI8YnIgLz5cIjpcIjxicj5cIil9LGdvb2cuc3RyaW5nLmh0bWxFc2NhcGU9ZnVuY3Rpb24oZSx0KXtpZih0KWU9ZS5yZXBsYWNlKGdvb2cuc3RyaW5nLkFNUF9SRV8sXCImYW1wO1wiKS5yZXBsYWNlKGdvb2cuc3RyaW5nLkxUX1JFXyxcIiZsdDtcIikucmVwbGFjZShnb29nLnN0cmluZy5HVF9SRV8sXCImZ3Q7XCIpLnJlcGxhY2UoZ29vZy5zdHJpbmcuUVVPVF9SRV8sXCImcXVvdDtcIikucmVwbGFjZShnb29nLnN0cmluZy5TSU5HTEVfUVVPVEVfUkVfLFwiJiMzOTtcIikucmVwbGFjZShnb29nLnN0cmluZy5OVUxMX1JFXyxcIiYjMDtcIiksZ29vZy5zdHJpbmcuREVURUNUX0RPVUJMRV9FU0NBUElORyYmKGU9ZS5yZXBsYWNlKGdvb2cuc3RyaW5nLkVfUkVfLFwiJiMxMDE7XCIpKTtlbHNle2lmKCFnb29nLnN0cmluZy5BTExfUkVfLnRlc3QoZSkpcmV0dXJuIGU7LTEhPWUuaW5kZXhPZihcIiZcIikmJihlPWUucmVwbGFjZShnb29nLnN0cmluZy5BTVBfUkVfLFwiJmFtcDtcIikpLC0xIT1lLmluZGV4T2YoXCI8XCIpJiYoZT1lLnJlcGxhY2UoZ29vZy5zdHJpbmcuTFRfUkVfLFwiJmx0O1wiKSksLTEhPWUuaW5kZXhPZihcIj5cIikmJihlPWUucmVwbGFjZShnb29nLnN0cmluZy5HVF9SRV8sXCImZ3Q7XCIpKSwtMSE9ZS5pbmRleE9mKCdcIicpJiYoZT1lLnJlcGxhY2UoZ29vZy5zdHJpbmcuUVVPVF9SRV8sXCImcXVvdDtcIikpLC0xIT1lLmluZGV4T2YoXCInXCIpJiYoZT1lLnJlcGxhY2UoZ29vZy5zdHJpbmcuU0lOR0xFX1FVT1RFX1JFXyxcIiYjMzk7XCIpKSwtMSE9ZS5pbmRleE9mKFwiXFwwXCIpJiYoZT1lLnJlcGxhY2UoZ29vZy5zdHJpbmcuTlVMTF9SRV8sXCImIzA7XCIpKSxnb29nLnN0cmluZy5ERVRFQ1RfRE9VQkxFX0VTQ0FQSU5HJiYtMSE9ZS5pbmRleE9mKFwiZVwiKSYmKGU9ZS5yZXBsYWNlKGdvb2cuc3RyaW5nLkVfUkVfLFwiJiMxMDE7XCIpKX1yZXR1cm4gZX0sZ29vZy5zdHJpbmcuQU1QX1JFXz0vJi9nLGdvb2cuc3RyaW5nLkxUX1JFXz0vPC9nLGdvb2cuc3RyaW5nLkdUX1JFXz0vPi9nLGdvb2cuc3RyaW5nLlFVT1RfUkVfPS9cIi9nLGdvb2cuc3RyaW5nLlNJTkdMRV9RVU9URV9SRV89LycvZyxnb29nLnN0cmluZy5OVUxMX1JFXz0vXFx4MDAvZyxnb29nLnN0cmluZy5FX1JFXz0vZS9nLGdvb2cuc3RyaW5nLkFMTF9SRV89Z29vZy5zdHJpbmcuREVURUNUX0RPVUJMRV9FU0NBUElORz8vW1xceDAwJjw+XCInZV0vOi9bXFx4MDAmPD5cIiddLyxnb29nLnN0cmluZy51bmVzY2FwZUVudGl0aWVzPWZ1bmN0aW9uKGUpe3JldHVybiBnb29nLnN0cmluZy5jb250YWlucyhlLFwiJlwiKT8hZ29vZy5zdHJpbmcuRk9SQ0VfTk9OX0RPTV9IVE1MX1VORVNDQVBJTkcmJlwiZG9jdW1lbnRcImluIGdvb2cuZ2xvYmFsP2dvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXNVc2luZ0RvbV8oZSk6Z29vZy5zdHJpbmcudW5lc2NhcGVQdXJlWG1sRW50aXRpZXNfKGUpOmV9LGdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXNXaXRoRG9jdW1lbnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZ29vZy5zdHJpbmcuY29udGFpbnMoZSxcIiZcIik/Z29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllc1VzaW5nRG9tXyhlLHQpOmV9LGdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXNVc2luZ0RvbV89ZnVuY3Rpb24oZSx0KXt2YXIgcyxpPXtcIiZhbXA7XCI6XCImXCIsXCImbHQ7XCI6XCI8XCIsXCImZ3Q7XCI6XCI+XCIsXCImcXVvdDtcIjonXCInfTtyZXR1cm4gcz10P3QuY3JlYXRlRWxlbWVudChcImRpdlwiKTpnb29nLmdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUucmVwbGFjZShnb29nLnN0cmluZy5IVE1MX0VOVElUWV9QQVRURVJOXyxmdW5jdGlvbihlLHQpe3ZhciByPWlbZV07aWYocilyZXR1cm4gcjtpZihcIiNcIj09dC5jaGFyQXQoMCkpe3ZhciBvPU51bWJlcihcIjBcIit0LnN1YnN0cigxKSk7aXNOYU4obyl8fChyPVN0cmluZy5mcm9tQ2hhckNvZGUobykpfXJldHVybiByfHwocy5pbm5lckhUTUw9ZStcIiBcIixyPXMuZmlyc3RDaGlsZC5ub2RlVmFsdWUuc2xpY2UoMCwtMSkpLGlbZV09cn0pfSxnb29nLnN0cmluZy51bmVzY2FwZVB1cmVYbWxFbnRpdGllc189ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvJihbXjtdKyk7L2csZnVuY3Rpb24oZSx0KXtzd2l0Y2godCl7Y2FzZVwiYW1wXCI6cmV0dXJuXCImXCI7Y2FzZVwibHRcIjpyZXR1cm5cIjxcIjtjYXNlXCJndFwiOnJldHVyblwiPlwiO2Nhc2VcInF1b3RcIjpyZXR1cm4nXCInO2RlZmF1bHQ6aWYoXCIjXCI9PXQuY2hhckF0KDApKXt2YXIgcj1OdW1iZXIoXCIwXCIrdC5zdWJzdHIoMSkpO2lmKCFpc05hTihyKSlyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShyKX1yZXR1cm4gZX19KX0sZ29vZy5zdHJpbmcuSFRNTF9FTlRJVFlfUEFUVEVSTl89LyYoW147XFxzPCZdKyk7Py9nLGdvb2cuc3RyaW5nLndoaXRlc3BhY2VFc2NhcGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZ29vZy5zdHJpbmcubmV3TGluZVRvQnIoZS5yZXBsYWNlKC8gIC9nLFwiICYjMTYwO1wiKSx0KX0sZ29vZy5zdHJpbmcucHJlc2VydmVTcGFjZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvKF58W1xcbiBdKSAvZyxcIiQxXCIrZ29vZy5zdHJpbmcuVW5pY29kZS5OQlNQKX0sZ29vZy5zdHJpbmcuc3RyaXBRdW90ZXM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9dC5sZW5ndGgsbz0wO288cjtvKyspe3ZhciBzPTE9PXI/dDp0LmNoYXJBdChvKTtpZihlLmNoYXJBdCgwKT09cyYmZS5jaGFyQXQoZS5sZW5ndGgtMSk9PXMpcmV0dXJuIGUuc3Vic3RyaW5nKDEsZS5sZW5ndGgtMSl9cmV0dXJuIGV9LGdvb2cuc3RyaW5nLnRydW5jYXRlPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gciYmKGU9Z29vZy5zdHJpbmcudW5lc2NhcGVFbnRpdGllcyhlKSksZS5sZW5ndGg+dCYmKGU9ZS5zdWJzdHJpbmcoMCx0LTMpK1wiLi4uXCIpLHImJihlPWdvb2cuc3RyaW5nLmh0bWxFc2NhcGUoZSkpLGV9LGdvb2cuc3RyaW5nLnRydW5jYXRlTWlkZGxlPWZ1bmN0aW9uKGUsdCxyLG8pe2lmKHImJihlPWdvb2cuc3RyaW5nLnVuZXNjYXBlRW50aXRpZXMoZSkpLG8mJmUubGVuZ3RoPnQpe3Q8byYmKG89dCk7dmFyIHM9ZS5sZW5ndGgtbztlPWUuc3Vic3RyaW5nKDAsdC1vKStcIi4uLlwiK2Uuc3Vic3RyaW5nKHMpfWVsc2UgZS5sZW5ndGg+dCYmKG89TWF0aC5mbG9vcih0LzIpLHM9ZS5sZW5ndGgtbyxlPWUuc3Vic3RyaW5nKDAsbyt0JTIpK1wiLi4uXCIrZS5zdWJzdHJpbmcocykpO3JldHVybiByJiYoZT1nb29nLnN0cmluZy5odG1sRXNjYXBlKGUpKSxlfSxnb29nLnN0cmluZy5zcGVjaWFsRXNjYXBlQ2hhcnNfPXtcIlxcMFwiOlwiXFxcXDBcIixcIlxcYlwiOlwiXFxcXGJcIixcIlxcZlwiOlwiXFxcXGZcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcclwiOlwiXFxcXHJcIixcIlxcdFwiOlwiXFxcXHRcIixcIlxcdlwiOlwiXFxcXHgwQlwiLCdcIic6J1xcXFxcIicsXCJcXFxcXCI6XCJcXFxcXFxcXFwiLFwiPFwiOlwiPFwifSxnb29nLnN0cmluZy5qc0VzY2FwZUNhY2hlXz17XCInXCI6XCJcXFxcJ1wifSxnb29nLnN0cmluZy5xdW90ZT1mdW5jdGlvbihlKXtlPVN0cmluZyhlKTtmb3IodmFyIHQ9WydcIiddLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG89ZS5jaGFyQXQocikscz1vLmNoYXJDb2RlQXQoMCk7dFtyKzFdPWdvb2cuc3RyaW5nLnNwZWNpYWxFc2NhcGVDaGFyc19bb118fCgzMTxzJiZzPDEyNz9vOmdvb2cuc3RyaW5nLmVzY2FwZUNoYXIobykpfXJldHVybiB0LnB1c2goJ1wiJyksdC5qb2luKFwiXCIpfSxnb29nLnN0cmluZy5lc2NhcGVTdHJpbmc9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLHI9MDtyPGUubGVuZ3RoO3IrKyl0W3JdPWdvb2cuc3RyaW5nLmVzY2FwZUNoYXIoZS5jaGFyQXQocikpO3JldHVybiB0LmpvaW4oXCJcIil9LGdvb2cuc3RyaW5nLmVzY2FwZUNoYXI9ZnVuY3Rpb24oZSl7aWYoZSBpbiBnb29nLnN0cmluZy5qc0VzY2FwZUNhY2hlXylyZXR1cm4gZ29vZy5zdHJpbmcuanNFc2NhcGVDYWNoZV9bZV07aWYoZSBpbiBnb29nLnN0cmluZy5zcGVjaWFsRXNjYXBlQ2hhcnNfKXJldHVybiBnb29nLnN0cmluZy5qc0VzY2FwZUNhY2hlX1tlXT1nb29nLnN0cmluZy5zcGVjaWFsRXNjYXBlQ2hhcnNfW2VdO3ZhciB0LHI9ZS5jaGFyQ29kZUF0KDApO3JldHVybiAzMTxyJiZyPDEyNz90PWU6KHI8MjU2Pyh0PVwiXFxcXHhcIiwocjwxNnx8MjU2PHIpJiYodCs9XCIwXCIpKToodD1cIlxcXFx1XCIscjw0MDk2JiYodCs9XCIwXCIpKSx0Kz1yLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKSxnb29nLnN0cmluZy5qc0VzY2FwZUNhY2hlX1tlXT10fSxnb29nLnN0cmluZy5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybi0xIT1lLmluZGV4T2YodCl9LGdvb2cuc3RyaW5nLmNhc2VJbnNlbnNpdGl2ZUNvbnRhaW5zPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGdvb2cuc3RyaW5nLmNvbnRhaW5zKGUudG9Mb3dlckNhc2UoKSx0LnRvTG93ZXJDYXNlKCkpfSxnb29nLnN0cmluZy5jb3VudE9mPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUmJnQ/ZS5zcGxpdCh0KS5sZW5ndGgtMTowfSxnb29nLnN0cmluZy5yZW1vdmVBdD1mdW5jdGlvbihlLHQscil7dmFyIG89ZTtyZXR1cm4gMDw9dCYmdDxlLmxlbmd0aCYmMDxyJiYobz1lLnN1YnN0cigwLHQpK2Uuc3Vic3RyKHQrcixlLmxlbmd0aC10LXIpKSxvfSxnb29nLnN0cmluZy5yZW1vdmU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgUmVnRXhwKGdvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZSh0KSxcIlwiKTtyZXR1cm4gZS5yZXBsYWNlKHIsXCJcIil9LGdvb2cuc3RyaW5nLnJlbW92ZUFsbD1mdW5jdGlvbihlLHQpe3ZhciByPW5ldyBSZWdFeHAoZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlKHQpLFwiZ1wiKTtyZXR1cm4gZS5yZXBsYWNlKHIsXCJcIil9LGdvb2cuc3RyaW5nLnJlZ0V4cEVzY2FwZT1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nKGUpLnJlcGxhY2UoLyhbLSgpXFxbXFxde30rPyouJFxcXnwsOiM8IVxcXFxdKS9nLFwiXFxcXCQxXCIpLnJlcGxhY2UoL1xceDA4L2csXCJcXFxceDA4XCIpfSxnb29nLnN0cmluZy5yZXBlYXQ9U3RyaW5nLnByb3RvdHlwZS5yZXBlYXQ/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5yZXBlYXQodCl9OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIEFycmF5KHQrMSkuam9pbihlKX0sZ29vZy5zdHJpbmcucGFkTnVtYmVyPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4tMT09KHI9KGU9Z29vZy5pc0RlZihyKT9lLnRvRml4ZWQocik6U3RyaW5nKGUpKS5pbmRleE9mKFwiLlwiKSkmJihyPWUubGVuZ3RoKSxnb29nLnN0cmluZy5yZXBlYXQoXCIwXCIsTWF0aC5tYXgoMCx0LXIpKStlfSxnb29nLnN0cmluZy5tYWtlU2FmZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9cIlwiOlN0cmluZyhlKX0sZ29vZy5zdHJpbmcuYnVpbGRTdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwoYXJndW1lbnRzLFwiXCIpfSxnb29nLnN0cmluZy5nZXRSYW5kb21TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcigyMTQ3NDgzNjQ4Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDM2KStNYXRoLmFicyhNYXRoLmZsb29yKDIxNDc0ODM2NDgqTWF0aC5yYW5kb20oKSleZ29vZy5ub3coKSkudG9TdHJpbmcoMzYpfSxnb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MCxvPWdvb2cuc3RyaW5nLnRyaW0oU3RyaW5nKGUpKS5zcGxpdChcIi5cIikscz1nb29nLnN0cmluZy50cmltKFN0cmluZyh0KSkuc3BsaXQoXCIuXCIpLGk9TWF0aC5tYXgoby5sZW5ndGgscy5sZW5ndGgpLGE9MDswPT1yJiZhPGk7YSsrKXt2YXIgbj1vW2FdfHxcIlwiLHA9c1thXXx8XCJcIixnPVJlZ0V4cChcIihcXFxcZCopKFxcXFxEKilcIixcImdcIiksdT1SZWdFeHAoXCIoXFxcXGQqKShcXFxcRCopXCIsXCJnXCIpO2Rve3ZhciBsPWcuZXhlYyhuKXx8W1wiXCIsXCJcIixcIlwiXSxtPXUuZXhlYyhwKXx8W1wiXCIsXCJcIixcIlwiXTtpZigwPT1sWzBdLmxlbmd0aCYmMD09bVswXS5sZW5ndGgpYnJlYWs7cj0wPT1sWzFdLmxlbmd0aD8wOnBhcnNlSW50KGxbMV0sMTApO3ZhciBjPTA9PW1bMV0ubGVuZ3RoPzA6cGFyc2VJbnQobVsxXSwxMCk7cj1nb29nLnN0cmluZy5jb21wYXJlRWxlbWVudHNfKHIsYyl8fGdvb2cuc3RyaW5nLmNvbXBhcmVFbGVtZW50c18oMD09bFsyXS5sZW5ndGgsMD09bVsyXS5sZW5ndGgpfHxnb29nLnN0cmluZy5jb21wYXJlRWxlbWVudHNfKGxbMl0sbVsyXSl9d2hpbGUoMD09cil9cmV0dXJuIHJ9LGdvb2cuc3RyaW5nLmNvbXBhcmVFbGVtZW50c189ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTx0Py0xOnQ8ZT8xOjB9LGdvb2cuc3RyaW5nLmhhc2hDb2RlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLHI9MDtyPGUubGVuZ3RoOysrcil0PTMxKnQrZS5jaGFyQ29kZUF0KHIpPj4+MDtyZXR1cm4gdH0sZ29vZy5zdHJpbmcudW5pcXVlU3RyaW5nQ291bnRlcl89MjE0NzQ4MzY0OCpNYXRoLnJhbmRvbSgpfDAsZ29vZy5zdHJpbmcuY3JlYXRlVW5pcXVlU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJnb29nX1wiK2dvb2cuc3RyaW5nLnVuaXF1ZVN0cmluZ0NvdW50ZXJfKyt9LGdvb2cuc3RyaW5nLnRvTnVtYmVyPWZ1bmN0aW9uKGUpe3ZhciB0PU51bWJlcihlKTtyZXR1cm4gMD09dCYmZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZShlKT9OYU46dH0sZ29vZy5zdHJpbmcuaXNMb3dlckNhbWVsQ2FzZT1mdW5jdGlvbihlKXtyZXR1cm4vXlthLXpdKyhbQS1aXVthLXpdKikqJC8udGVzdChlKX0sZ29vZy5zdHJpbmcuaXNVcHBlckNhbWVsQ2FzZT1mdW5jdGlvbihlKXtyZXR1cm4vXihbQS1aXVthLXpdKikrJC8udGVzdChlKX0sZ29vZy5zdHJpbmcudG9DYW1lbENhc2U9ZnVuY3Rpb24oZSl7cmV0dXJuIFN0cmluZyhlKS5yZXBsYWNlKC9cXC0oW2Etel0pL2csZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC50b1VwcGVyQ2FzZSgpfSl9LGdvb2cuc3RyaW5nLnRvU2VsZWN0b3JDYXNlPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcoZSkucmVwbGFjZSgvKFtBLVpdKS9nLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCl9LGdvb2cuc3RyaW5nLnRvVGl0bGVDYXNlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9Z29vZy5pc1N0cmluZyh0KT9nb29nLnN0cmluZy5yZWdFeHBFc2NhcGUodCk6XCJcXFxcc1wiO3JldHVybiBlLnJlcGxhY2UobmV3IFJlZ0V4cChcIiheXCIrKHI/XCJ8W1wiK3IrXCJdK1wiOlwiXCIpK1wiKShbYS16XSlcIixcImdcIiksZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0K3IudG9VcHBlckNhc2UoKX0pfSxnb29nLnN0cmluZy5jYXBpdGFsaXplPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcoZS5jaGFyQXQoMCkpLnRvVXBwZXJDYXNlKCkrU3RyaW5nKGUuc3Vic3RyKDEpKS50b0xvd2VyQ2FzZSgpfSxnb29nLnN0cmluZy5wYXJzZUludD1mdW5jdGlvbihlKXtyZXR1cm4gaXNGaW5pdGUoZSkmJihlPVN0cmluZyhlKSksZ29vZy5pc1N0cmluZyhlKT8vXlxccyotPzB4L2kudGVzdChlKT9wYXJzZUludChlLDE2KTpwYXJzZUludChlLDEwKTpOYU59LGdvb2cuc3RyaW5nLnNwbGl0TGltaXQ9ZnVuY3Rpb24oZSx0LHIpe2U9ZS5zcGxpdCh0KTtmb3IodmFyIG89W107MDxyJiZlLmxlbmd0aDspby5wdXNoKGUuc2hpZnQoKSksci0tO3JldHVybiBlLmxlbmd0aCYmby5wdXNoKGUuam9pbih0KSksb30sZ29vZy5zdHJpbmcuZWRpdERpc3RhbmNlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9W10sbz1bXTtpZihlPT10KXJldHVybiAwO2lmKCFlLmxlbmd0aHx8IXQubGVuZ3RoKXJldHVybiBNYXRoLm1heChlLmxlbmd0aCx0Lmxlbmd0aCk7Zm9yKHZhciBzPTA7czx0Lmxlbmd0aCsxO3MrKylyW3NdPXM7Zm9yKHM9MDtzPGUubGVuZ3RoO3MrKyl7b1swXT1zKzE7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspb1tpKzFdPU1hdGgubWluKG9baV0rMSxyW2krMV0rMSxyW2ldK051bWJlcihlW3NdIT10W2ldKSk7Zm9yKGk9MDtpPHIubGVuZ3RoO2krKylyW2ldPW9baV19cmV0dXJuIG9bdC5sZW5ndGhdfSxnb29nLmFzc2VydHM9e30sZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTPWdvb2cuREVCVUcsZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yPWZ1bmN0aW9uKGUsdCl7dC51bnNoaWZ0KGUpLGdvb2cuZGVidWcuRXJyb3IuY2FsbCh0aGlzLGdvb2cuc3RyaW5nLnN1YnMuYXBwbHkobnVsbCx0KSksdC5zaGlmdCgpLHRoaXMubWVzc2FnZVBhdHRlcm49ZX0sZ29vZy5pbmhlcml0cyhnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3IsZ29vZy5kZWJ1Zy5FcnJvciksZ29vZy5hc3NlcnRzLkFzc2VydGlvbkVycm9yLnByb3RvdHlwZS5uYW1lPVwiQXNzZXJ0aW9uRXJyb3JcIixnb29nLmFzc2VydHMuREVGQVVMVF9FUlJPUl9IQU5ETEVSPWZ1bmN0aW9uKGUpe3Rocm93IGV9LGdvb2cuYXNzZXJ0cy5lcnJvckhhbmRsZXJfPWdvb2cuYXNzZXJ0cy5ERUZBVUxUX0VSUk9SX0hBTkRMRVIsZ29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV89ZnVuY3Rpb24oZSx0LHIsbyl7dmFyIHM9XCJBc3NlcnRpb24gZmFpbGVkXCI7aWYocil7cz1zK1wiOiBcIityO3ZhciBpPW99ZWxzZSBlJiYocys9XCI6IFwiK2UsaT10KTtlPW5ldyBnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3IoXCJcIitzLGl8fFtdKSxnb29nLmFzc2VydHMuZXJyb3JIYW5kbGVyXyhlKX0sZ29vZy5hc3NlcnRzLnNldEVycm9ySGFuZGxlcj1mdW5jdGlvbihlKXtnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMmJihnb29nLmFzc2VydHMuZXJyb3JIYW5kbGVyXz1lKX0sZ29vZy5hc3NlcnRzLmFzc2VydD1mdW5jdGlvbihlLHQscil7cmV0dXJuIGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyYmIWUmJmdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKFwiXCIsbnVsbCx0LEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSksZX0sZ29vZy5hc3NlcnRzLmZhaWw9ZnVuY3Rpb24oZSx0KXtnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMmJmdvb2cuYXNzZXJ0cy5lcnJvckhhbmRsZXJfKG5ldyBnb29nLmFzc2VydHMuQXNzZXJ0aW9uRXJyb3IoXCJGYWlsdXJlXCIrKGU/XCI6IFwiK2U6XCJcIiksQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKSl9LGdvb2cuYXNzZXJ0cy5hc3NlcnROdW1iZXI9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMmJiFnb29nLmlzTnVtYmVyKGUpJiZnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXyhcIkV4cGVjdGVkIG51bWJlciBidXQgZ290ICVzOiAlcy5cIixbZ29vZy50eXBlT2YoZSksZV0sdCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpLGV9LGdvb2cuYXNzZXJ0cy5hc3NlcnRTdHJpbmc9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMmJiFnb29nLmlzU3RyaW5nKGUpJiZnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXyhcIkV4cGVjdGVkIHN0cmluZyBidXQgZ290ICVzOiAlcy5cIixbZ29vZy50eXBlT2YoZSksZV0sdCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpLGV9LGdvb2cuYXNzZXJ0cy5hc3NlcnRGdW5jdGlvbj1mdW5jdGlvbihlLHQscil7cmV0dXJuIGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyYmIWdvb2cuaXNGdW5jdGlvbihlKSYmZ29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV8oXCJFeHBlY3RlZCBmdW5jdGlvbiBidXQgZ290ICVzOiAlcy5cIixbZ29vZy50eXBlT2YoZSksZV0sdCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpLGV9LGdvb2cuYXNzZXJ0cy5hc3NlcnRPYmplY3Q9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBnb29nLmFzc2VydHMuRU5BQkxFX0FTU0VSVFMmJiFnb29nLmlzT2JqZWN0KGUpJiZnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXyhcIkV4cGVjdGVkIG9iamVjdCBidXQgZ290ICVzOiAlcy5cIixbZ29vZy50eXBlT2YoZSksZV0sdCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpLGV9LGdvb2cuYXNzZXJ0cy5hc3NlcnRBcnJheT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGdvb2cuYXNzZXJ0cy5FTkFCTEVfQVNTRVJUUyYmIWdvb2cuaXNBcnJheShlKSYmZ29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV8oXCJFeHBlY3RlZCBhcnJheSBidXQgZ290ICVzOiAlcy5cIixbZ29vZy50eXBlT2YoZSksZV0sdCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpLGV9LGdvb2cuYXNzZXJ0cy5hc3NlcnRCb29sZWFuPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTJiYhZ29vZy5pc0Jvb2xlYW4oZSkmJmdvb2cuYXNzZXJ0cy5kb0Fzc2VydEZhaWx1cmVfKFwiRXhwZWN0ZWQgYm9vbGVhbiBidXQgZ290ICVzOiAlcy5cIixbZ29vZy50eXBlT2YoZSksZV0sdCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMikpLGV9LGdvb2cuYXNzZXJ0cy5hc3NlcnRFbGVtZW50PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4hZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTfHxnb29nLmlzT2JqZWN0KGUpJiZlLm5vZGVUeXBlPT1nb29nLmRvbS5Ob2RlVHlwZS5FTEVNRU5UfHxnb29nLmFzc2VydHMuZG9Bc3NlcnRGYWlsdXJlXyhcIkV4cGVjdGVkIEVsZW1lbnQgYnV0IGdvdCAlczogJXMuXCIsW2dvb2cudHlwZU9mKGUpLGVdLHQsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpKSxlfSxnb29nLmFzc2VydHMuYXNzZXJ0SW5zdGFuY2VvZj1mdW5jdGlvbihlLHQscixvKXtyZXR1cm4hZ29vZy5hc3NlcnRzLkVOQUJMRV9BU1NFUlRTfHxlIGluc3RhbmNlb2YgdHx8Z29vZy5hc3NlcnRzLmRvQXNzZXJ0RmFpbHVyZV8oXCJFeHBlY3RlZCBpbnN0YW5jZW9mICVzIGJ1dCBnb3QgJXMuXCIsW2dvb2cuYXNzZXJ0cy5nZXRUeXBlXyh0KSxnb29nLmFzc2VydHMuZ2V0VHlwZV8oZSldLHIsQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpKSxlfSxnb29nLmFzc2VydHMuYXNzZXJ0T2JqZWN0UHJvdG90eXBlSXNJbnRhY3Q9ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gT2JqZWN0LnByb3RvdHlwZSlnb29nLmFzc2VydHMuZmFpbChlK1wiIHNob3VsZCBub3QgYmUgZW51bWVyYWJsZSBpbiBPYmplY3QucHJvdG90eXBlLlwiKX0sZ29vZy5hc3NlcnRzLmdldFR5cGVfPWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgRnVuY3Rpb24/ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcInVua25vd24gdHlwZSBuYW1lXCI6ZSBpbnN0YW5jZW9mIE9iamVjdD9lLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lfHxlLmNvbnN0cnVjdG9yLm5hbWV8fE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKTpudWxsPT09ZT9cIm51bGxcIjp0eXBlb2YgZX07dmFyIGpzcGI9e01hcDpmdW5jdGlvbihlLHQpe3RoaXMuYXJyXz1lLHRoaXMudmFsdWVDdG9yXz10LHRoaXMubWFwXz17fSx0aGlzLmFyckNsZWFuPSEwLDA8dGhpcy5hcnJfLmxlbmd0aCYmdGhpcy5sb2FkRnJvbUFycmF5XygpfX0sdmhhLHdoYTtqc3BiLk1hcC5wcm90b3R5cGUubG9hZEZyb21BcnJheV89ZnVuY3Rpb24oKXtmb3IodmFyIGU9MDtlPHRoaXMuYXJyXy5sZW5ndGg7ZSsrKXt2YXIgdD10aGlzLmFycl9bZV0scj10WzBdO3RoaXMubWFwX1tyLnRvU3RyaW5nKCldPW5ldyBqc3BiLk1hcC5FbnRyeV8ocix0WzFdKX10aGlzLmFyckNsZWFuPSEwfSxqc3BiLk1hcC5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe2lmKHRoaXMuYXJyQ2xlYW4pe2lmKHRoaXMudmFsdWVDdG9yXyl7dmFyIGUsdD10aGlzLm1hcF87Zm9yKGUgaW4gdClpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKSl7dmFyIHI9dFtlXS52YWx1ZVdyYXBwZXI7ciYmci50b0FycmF5KCl9fX1lbHNle2Zvcih0aGlzLmFycl8ubGVuZ3RoPTAsKHQ9dGhpcy5zdHJpbmdLZXlzXygpKS5zb3J0KCksZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbz10aGlzLm1hcF9bdFtlXV07KHI9by52YWx1ZVdyYXBwZXIpJiZyLnRvQXJyYXkoKSx0aGlzLmFycl8ucHVzaChbby5rZXksby52YWx1ZV0pfXRoaXMuYXJyQ2xlYW49ITB9cmV0dXJuIHRoaXMuYXJyX30sanNwYi5NYXAucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMudG9BcnJheSgpLG89W10scz0wO3M8ci5sZW5ndGg7cysrKXt2YXIgaT10aGlzLm1hcF9bcltzXVswXS50b1N0cmluZygpXTt0aGlzLndyYXBFbnRyeV8oaSk7dmFyIGE9aS52YWx1ZVdyYXBwZXI7YT8oZ29vZy5hc3NlcnRzLmFzc2VydCh0KSxvLnB1c2goW2kua2V5LHQoZSxhKV0pKTpvLnB1c2goW2kua2V5LGkudmFsdWVdKX1yZXR1cm4gb30sanNwYi5NYXAuZnJvbU9iamVjdD1mdW5jdGlvbihlLHQscil7dD1uZXcganNwYi5NYXAoW10sdCk7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciBzPWVbb11bMF0saT1yKGVbb11bMV0pO3Quc2V0KHMsaSl9cmV0dXJuIHR9LGpzcGIuTWFwLkFycmF5SXRlcmF0b3JJdGVyYWJsZV89ZnVuY3Rpb24oZSl7dGhpcy5pZHhfPTAsdGhpcy5hcnJfPWV9LGpzcGIuTWFwLkFycmF5SXRlcmF0b3JJdGVyYWJsZV8ucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pZHhfPHRoaXMuYXJyXy5sZW5ndGg/e2RvbmU6ITEsdmFsdWU6dGhpcy5hcnJfW3RoaXMuaWR4XysrXX06e2RvbmU6ITAsdmFsdWU6dm9pZCAwfX0sJGpzY29tcC5pbml0U3ltYm9sKCksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmKCRqc2NvbXAuaW5pdFN5bWJvbCgpLCRqc2NvbXAuaW5pdFN5bWJvbEl0ZXJhdG9yKCksanNwYi5NYXAuQXJyYXlJdGVyYXRvckl0ZXJhYmxlXy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSksanNwYi5NYXAucHJvdG90eXBlLmdldExlbmd0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0cmluZ0tleXNfKCkubGVuZ3RofSxqc3BiLk1hcC5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLm1hcF89e30sdGhpcy5hcnJDbGVhbj0hMX0sanNwYi5NYXAucHJvdG90eXBlLmRlbD1mdW5jdGlvbihlKXtlPWUudG9TdHJpbmcoKTt2YXIgdD10aGlzLm1hcF8uaGFzT3duUHJvcGVydHkoZSk7cmV0dXJuIGRlbGV0ZSB0aGlzLm1hcF9bZV0sdGhpcy5hcnJDbGVhbj0hMSx0fSxqc3BiLk1hcC5wcm90b3R5cGUuZ2V0RW50cnlMaXN0PWZ1bmN0aW9uKCl7dmFyIGU9W10sdD10aGlzLnN0cmluZ0tleXNfKCk7dC5zb3J0KCk7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBvPXRoaXMubWFwX1t0W3JdXTtlLnB1c2goW28ua2V5LG8udmFsdWVdKX1yZXR1cm4gZX0sanNwYi5NYXAucHJvdG90eXBlLmVudHJpZXM9ZnVuY3Rpb24oKXt2YXIgZT1bXSx0PXRoaXMuc3RyaW5nS2V5c18oKTt0LnNvcnQoKTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG89dGhpcy5tYXBfW3Rbcl1dO2UucHVzaChbby5rZXksdGhpcy53cmFwRW50cnlfKG8pXSl9cmV0dXJuIG5ldyBqc3BiLk1hcC5BcnJheUl0ZXJhdG9ySXRlcmFibGVfKGUpfSxqc3BiLk1hcC5wcm90b3R5cGUua2V5cz1mdW5jdGlvbigpe3ZhciBlPVtdLHQ9dGhpcy5zdHJpbmdLZXlzXygpO3Quc29ydCgpO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKWUucHVzaCh0aGlzLm1hcF9bdFtyXV0ua2V5KTtyZXR1cm4gbmV3IGpzcGIuTWFwLkFycmF5SXRlcmF0b3JJdGVyYWJsZV8oZSl9LGpzcGIuTWFwLnByb3RvdHlwZS52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgZT1bXSx0PXRoaXMuc3RyaW5nS2V5c18oKTt0LnNvcnQoKTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyllLnB1c2godGhpcy53cmFwRW50cnlfKHRoaXMubWFwX1t0W3JdXSkpO3JldHVybiBuZXcganNwYi5NYXAuQXJyYXlJdGVyYXRvckl0ZXJhYmxlXyhlKX0sanNwYi5NYXAucHJvdG90eXBlLmZvckVhY2g9ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLnN0cmluZ0tleXNfKCk7ci5zb3J0KCk7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspe3ZhciBzPXRoaXMubWFwX1tyW29dXTtlLmNhbGwodCx0aGlzLndyYXBFbnRyeV8ocykscy5rZXksdGhpcyl9fSxqc3BiLk1hcC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IGpzcGIuTWFwLkVudHJ5XyhlKTtyZXR1cm4gdGhpcy52YWx1ZUN0b3JfPyhyLnZhbHVlV3JhcHBlcj10LHIudmFsdWU9dC50b0FycmF5KCkpOnIudmFsdWU9dCx0aGlzLm1hcF9bZS50b1N0cmluZygpXT1yLHRoaXMuYXJyQ2xlYW49ITEsdGhpc30sanNwYi5NYXAucHJvdG90eXBlLndyYXBFbnRyeV89ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudmFsdWVDdG9yXz8oZS52YWx1ZVdyYXBwZXJ8fChlLnZhbHVlV3JhcHBlcj1uZXcgdGhpcy52YWx1ZUN0b3JfKGUudmFsdWUpKSxlLnZhbHVlV3JhcHBlcik6ZS52YWx1ZX0sanNwYi5NYXAucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtpZihlPXRoaXMubWFwX1tlLnRvU3RyaW5nKCldKXJldHVybiB0aGlzLndyYXBFbnRyeV8oZSl9LGpzcGIuTWFwLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUudG9TdHJpbmcoKWluIHRoaXMubWFwX30sanNwYi5NYXAucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlLHQscixvLHMpe3ZhciBpPXRoaXMuc3RyaW5nS2V5c18oKTtpLnNvcnQoKTtmb3IodmFyIGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIG49dGhpcy5tYXBfW2lbYV1dO3QuYmVnaW5TdWJNZXNzYWdlKGUpLHIuY2FsbCh0LDEsbi5rZXkpLHRoaXMudmFsdWVDdG9yXz9vLmNhbGwodCwyLHRoaXMud3JhcEVudHJ5XyhuKSxzKTpvLmNhbGwodCwyLG4udmFsdWUpLHQuZW5kU3ViTWVzc2FnZSgpfX0sanNwYi5NYXAuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSx0LHIsbyxzLGkpe2Zvcih2YXIgYT12b2lkIDA7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7dmFyIG49dC5nZXRGaWVsZE51bWJlcigpOzE9PW4/aT1yLmNhbGwodCk6Mj09biYmKGUudmFsdWVDdG9yXz8oZ29vZy5hc3NlcnRzLmFzc2VydChzKSxhPW5ldyBlLnZhbHVlQ3Rvcl8sby5jYWxsKHQsYSxzKSk6YT1vLmNhbGwodCkpfWdvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9aSksZ29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1hKSxlLnNldChpLGEpfSxqc3BiLk1hcC5wcm90b3R5cGUuc3RyaW5nS2V5c189ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMubWFwXyxyPVtdO2ZvcihlIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkmJnIucHVzaChlKTtyZXR1cm4gcn0sanNwYi5NYXAuRW50cnlfPWZ1bmN0aW9uKGUsdCl7dGhpcy5rZXk9ZSx0aGlzLnZhbHVlPXQsdGhpcy52YWx1ZVdyYXBwZXI9dm9pZCAwfSxnb29nLmFycmF5PXt9LGdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVM9Z29vZy5UUlVTVEVEX1NJVEUsZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OUz0hMSxnb29nLmFycmF5LnBlZWs9ZnVuY3Rpb24oZSl7cmV0dXJuIGVbZS5sZW5ndGgtMV19LGdvb2cuYXJyYXkubGFzdD1nb29nLmFycmF5LnBlZWssZ29vZy5hcnJheS5pbmRleE9mPWdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMmJihnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TfHxBcnJheS5wcm90b3R5cGUuaW5kZXhPZik/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KG51bGwhPWUubGVuZ3RoKSxBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGUsdCxyKX06ZnVuY3Rpb24oZSx0LHIpe2lmKHI9bnVsbD09cj8wOnI8MD9NYXRoLm1heCgwLGUubGVuZ3RoK3IpOnIsZ29vZy5pc1N0cmluZyhlKSlyZXR1cm4gZ29vZy5pc1N0cmluZyh0KSYmMT09dC5sZW5ndGg/ZS5pbmRleE9mKHQscik6LTE7Zm9yKDtyPGUubGVuZ3RoO3IrKylpZihyIGluIGUmJmVbcl09PT10KXJldHVybiByO3JldHVybi0xfSxnb29nLmFycmF5Lmxhc3RJbmRleE9mPWdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMmJihnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TfHxBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YpP2Z1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1lLmxlbmd0aCksQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoZSx0LG51bGw9PXI/ZS5sZW5ndGgtMTpyKX06ZnVuY3Rpb24oZSx0LHIpe2lmKChyPW51bGw9PXI/ZS5sZW5ndGgtMTpyKTwwJiYocj1NYXRoLm1heCgwLGUubGVuZ3RoK3IpKSxnb29nLmlzU3RyaW5nKGUpKXJldHVybiBnb29nLmlzU3RyaW5nKHQpJiYxPT10Lmxlbmd0aD9lLmxhc3RJbmRleE9mKHQscik6LTE7Zm9yKDswPD1yO3ItLSlpZihyIGluIGUmJmVbcl09PT10KXJldHVybiByO3JldHVybi0xfSxnb29nLmFycmF5LmZvckVhY2g9Z29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyYmKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlN8fEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKT9mdW5jdGlvbihlLHQscil7Z29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1lLmxlbmd0aCksQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlLHQscil9OmZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG89ZS5sZW5ndGgscz1nb29nLmlzU3RyaW5nKGUpP2Uuc3BsaXQoXCJcIik6ZSxpPTA7aTxvO2krKylpIGluIHMmJnQuY2FsbChyLHNbaV0saSxlKX0sZ29vZy5hcnJheS5mb3JFYWNoUmlnaHQ9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPWUubGVuZ3RoLHM9Z29vZy5pc1N0cmluZyhlKT9lLnNwbGl0KFwiXCIpOmU7Zm9yKG89by0xOzA8PW87LS1vKW8gaW4gcyYmdC5jYWxsKHIsc1tvXSxvLGUpfSxnb29nLmFycmF5LmZpbHRlcj1nb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTJiYoZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OU3x8QXJyYXkucHJvdG90eXBlLmZpbHRlcik/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KG51bGwhPWUubGVuZ3RoKSxBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZSx0LHIpfTpmdW5jdGlvbihlLHQscil7Zm9yKHZhciBvPWUubGVuZ3RoLHM9W10saT0wLGE9Z29vZy5pc1N0cmluZyhlKT9lLnNwbGl0KFwiXCIpOmUsbj0wO248bztuKyspaWYobiBpbiBhKXt2YXIgcD1hW25dO3QuY2FsbChyLHAsbixlKSYmKHNbaSsrXT1wKX1yZXR1cm4gc30sZ29vZy5hcnJheS5tYXA9Z29vZy5OQVRJVkVfQVJSQVlfUFJPVE9UWVBFUyYmKGdvb2cuYXJyYXkuQVNTVU1FX05BVElWRV9GVU5DVElPTlN8fEFycmF5LnByb3RvdHlwZS5tYXApP2Z1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1lLmxlbmd0aCksQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGUsdCxyKX06ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbz1lLmxlbmd0aCxzPUFycmF5KG8pLGk9Z29vZy5pc1N0cmluZyhlKT9lLnNwbGl0KFwiXCIpOmUsYT0wO2E8bzthKyspYSBpbiBpJiYoc1thXT10LmNhbGwocixpW2FdLGEsZSkpO3JldHVybiBzfSxnb29nLmFycmF5LnJlZHVjZT1nb29nLk5BVElWRV9BUlJBWV9QUk9UT1RZUEVTJiYoZ29vZy5hcnJheS5BU1NVTUVfTkFUSVZFX0ZVTkNUSU9OU3x8QXJyYXkucHJvdG90eXBlLnJlZHVjZSk/ZnVuY3Rpb24oZSx0LHIsbyl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9ZS5sZW5ndGgpLG8mJih0PWdvb2cuYmluZCh0LG8pKSxBcnJheS5wcm90b3R5cGUucmVkdWNlLmNhbGwoZSx0LHIpfTpmdW5jdGlvbihyLG8sZSxzKXt2YXIgaT1lO3JldHVybiBnb29nLmFycmF5LmZvckVhY2gocixmdW5jdGlvbihlLHQpe2k9by5jYWxsKHMsaSxlLHQscil9KSxpfSxnb29nLmFycmF5LnJlZHVjZVJpZ2h0PWdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMmJihnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TfHxBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQpP2Z1bmN0aW9uKGUsdCxyLG8pe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KG51bGwhPWUubGVuZ3RoKSxnb29nLmFzc2VydHMuYXNzZXJ0KG51bGwhPXQpLG8mJih0PWdvb2cuYmluZCh0LG8pKSxBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQuY2FsbChlLHQscil9OmZ1bmN0aW9uKHIsbyxlLHMpe3ZhciBpPWU7cmV0dXJuIGdvb2cuYXJyYXkuZm9yRWFjaFJpZ2h0KHIsZnVuY3Rpb24oZSx0KXtpPW8uY2FsbChzLGksZSx0LHIpfSksaX0sZ29vZy5hcnJheS5zb21lPWdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMmJihnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TfHxBcnJheS5wcm90b3R5cGUuc29tZSk/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KG51bGwhPWUubGVuZ3RoKSxBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGUsdCxyKX06ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbz1lLmxlbmd0aCxzPWdvb2cuaXNTdHJpbmcoZSk/ZS5zcGxpdChcIlwiKTplLGk9MDtpPG87aSsrKWlmKGkgaW4gcyYmdC5jYWxsKHIsc1tpXSxpLGUpKXJldHVybiEwO3JldHVybiExfSxnb29nLmFycmF5LmV2ZXJ5PWdvb2cuTkFUSVZFX0FSUkFZX1BST1RPVFlQRVMmJihnb29nLmFycmF5LkFTU1VNRV9OQVRJVkVfRlVOQ1RJT05TfHxBcnJheS5wcm90b3R5cGUuZXZlcnkpP2Z1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1lLmxlbmd0aCksQXJyYXkucHJvdG90eXBlLmV2ZXJ5LmNhbGwoZSx0LHIpfTpmdW5jdGlvbihlLHQscil7Zm9yKHZhciBvPWUubGVuZ3RoLHM9Z29vZy5pc1N0cmluZyhlKT9lLnNwbGl0KFwiXCIpOmUsaT0wO2k8bztpKyspaWYoaSBpbiBzJiYhdC5jYWxsKHIsc1tpXSxpLGUpKXJldHVybiExO3JldHVybiEwfSxnb29nLmFycmF5LmNvdW50PWZ1bmN0aW9uKGUsbyxzKXt2YXIgaT0wO3JldHVybiBnb29nLmFycmF5LmZvckVhY2goZSxmdW5jdGlvbihlLHQscil7by5jYWxsKHMsZSx0LHIpJiYrK2l9LHMpLGl9LGdvb2cuYXJyYXkuZmluZD1mdW5jdGlvbihlLHQscil7cmV0dXJuKHQ9Z29vZy5hcnJheS5maW5kSW5kZXgoZSx0LHIpKTwwP251bGw6Z29vZy5pc1N0cmluZyhlKT9lLmNoYXJBdCh0KTplW3RdfSxnb29nLmFycmF5LmZpbmRJbmRleD1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBvPWUubGVuZ3RoLHM9Z29vZy5pc1N0cmluZyhlKT9lLnNwbGl0KFwiXCIpOmUsaT0wO2k8bztpKyspaWYoaSBpbiBzJiZ0LmNhbGwocixzW2ldLGksZSkpcmV0dXJuIGk7cmV0dXJuLTF9LGdvb2cuYXJyYXkuZmluZFJpZ2h0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4odD1nb29nLmFycmF5LmZpbmRJbmRleFJpZ2h0KGUsdCxyKSk8MD9udWxsOmdvb2cuaXNTdHJpbmcoZSk/ZS5jaGFyQXQodCk6ZVt0XX0sZ29vZy5hcnJheS5maW5kSW5kZXhSaWdodD1mdW5jdGlvbihlLHQscil7dmFyIG89ZS5sZW5ndGgscz1nb29nLmlzU3RyaW5nKGUpP2Uuc3BsaXQoXCJcIik6ZTtmb3Iobz1vLTE7MDw9bztvLS0paWYobyBpbiBzJiZ0LmNhbGwocixzW29dLG8sZSkpcmV0dXJuIG87cmV0dXJuLTF9LGdvb2cuYXJyYXkuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gMDw9Z29vZy5hcnJheS5pbmRleE9mKGUsdCl9LGdvb2cuYXJyYXkuaXNFbXB0eT1mdW5jdGlvbihlKXtyZXR1cm4gMD09ZS5sZW5ndGh9LGdvb2cuYXJyYXkuY2xlYXI9ZnVuY3Rpb24oZSl7aWYoIWdvb2cuaXNBcnJheShlKSlmb3IodmFyIHQ9ZS5sZW5ndGgtMTswPD10O3QtLSlkZWxldGUgZVt0XTtlLmxlbmd0aD0wfSxnb29nLmFycmF5Lmluc2VydD1mdW5jdGlvbihlLHQpe2dvb2cuYXJyYXkuY29udGFpbnMoZSx0KXx8ZS5wdXNoKHQpfSxnb29nLmFycmF5Lmluc2VydEF0PWZ1bmN0aW9uKGUsdCxyKXtnb29nLmFycmF5LnNwbGljZShlLHIsMCx0KX0sZ29vZy5hcnJheS5pbnNlcnRBcnJheUF0PWZ1bmN0aW9uKGUsdCxyKXtnb29nLnBhcnRpYWwoZ29vZy5hcnJheS5zcGxpY2UsZSxyLDApLmFwcGx5KG51bGwsdCl9LGdvb2cuYXJyYXkuaW5zZXJ0QmVmb3JlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbzsyPT1hcmd1bWVudHMubGVuZ3RofHwobz1nb29nLmFycmF5LmluZGV4T2YoZSxyKSk8MD9lLnB1c2godCk6Z29vZy5hcnJheS5pbnNlcnRBdChlLHQsbyl9LGdvb2cuYXJyYXkucmVtb3ZlPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbz1nb29nLmFycmF5LmluZGV4T2YoZSx0KTtyZXR1cm4ocj0wPD1vKSYmZ29vZy5hcnJheS5yZW1vdmVBdChlLG8pLHJ9LGdvb2cuYXJyYXkucmVtb3ZlQXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydChudWxsIT1lLmxlbmd0aCksMT09QXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGUsdCwxKS5sZW5ndGh9LGdvb2cuYXJyYXkucmVtb3ZlSWY9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiAwPD0odD1nb29nLmFycmF5LmZpbmRJbmRleChlLHQscikpJiYoZ29vZy5hcnJheS5yZW1vdmVBdChlLHQpLCEwKX0sZ29vZy5hcnJheS5yZW1vdmVBbGxJZj1mdW5jdGlvbihyLG8scyl7dmFyIGk9MDtyZXR1cm4gZ29vZy5hcnJheS5mb3JFYWNoUmlnaHQocixmdW5jdGlvbihlLHQpe28uY2FsbChzLGUsdCxyKSYmZ29vZy5hcnJheS5yZW1vdmVBdChyLHQpJiZpKyt9KSxpfSxnb29nLmFycmF5LmNvbmNhdD1mdW5jdGlvbihlKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShBcnJheS5wcm90b3R5cGUsYXJndW1lbnRzKX0sZ29vZy5hcnJheS5qb2luPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KEFycmF5LnByb3RvdHlwZSxhcmd1bWVudHMpfSxnb29nLmFycmF5LnRvQXJyYXk9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGg7aWYoMDx0KXtmb3IodmFyIHI9QXJyYXkodCksbz0wO288dDtvKyspcltvXT1lW29dO3JldHVybiByfXJldHVybltdfSxnb29nLmFycmF5LmNsb25lPWdvb2cuYXJyYXkudG9BcnJheSxnb29nLmFycmF5LmV4dGVuZD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3ZhciBvPWFyZ3VtZW50c1tyXTtpZihnb29nLmlzQXJyYXlMaWtlKG8pKXt2YXIgcz1lLmxlbmd0aHx8MCxpPW8ubGVuZ3RofHwwO2UubGVuZ3RoPXMraTtmb3IodmFyIGE9MDthPGk7YSsrKWVbcythXT1vW2FdfWVsc2UgZS5wdXNoKG8pfX0sZ29vZy5hcnJheS5zcGxpY2U9ZnVuY3Rpb24oZSx0LHIsbyl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9ZS5sZW5ndGgpLEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoZSxnb29nLmFycmF5LnNsaWNlKGFyZ3VtZW50cywxKSl9LGdvb2cuYXJyYXkuc2xpY2U9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KG51bGwhPWUubGVuZ3RoKSxhcmd1bWVudHMubGVuZ3RoPD0yP0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUsdCk6QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSx0LHIpfSxnb29nLmFycmF5LnJlbW92ZUR1cGxpY2F0ZXM9ZnVuY3Rpb24oZSx0LHIpe3Q9dHx8ZTt2YXIgbz1mdW5jdGlvbihlKXtyZXR1cm4gZ29vZy5pc09iamVjdChlKT9cIm9cIitnb29nLmdldFVpZChlKToodHlwZW9mIGUpLmNoYXJBdCgwKStlfTtyPXJ8fG87bz17fTtmb3IodmFyIHM9MCxpPTA7aTxlLmxlbmd0aDspe3ZhciBhPWVbaSsrXSxuPXIoYSk7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sbil8fChvW25dPSEwLHRbcysrXT1hKX10Lmxlbmd0aD1zfSxnb29nLmFycmF5LmJpbmFyeVNlYXJjaD1mdW5jdGlvbihlLHQscil7cmV0dXJuIGdvb2cuYXJyYXkuYmluYXJ5U2VhcmNoXyhlLHJ8fGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmUsITEsdCl9LGdvb2cuYXJyYXkuYmluYXJ5U2VsZWN0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZ29vZy5hcnJheS5iaW5hcnlTZWFyY2hfKGUsdCwhMCx2b2lkIDAscil9LGdvb2cuYXJyYXkuYmluYXJ5U2VhcmNoXz1mdW5jdGlvbihlLHQscixvLHMpe2Zvcih2YXIgaSxhPTAsbj1lLmxlbmd0aDthPG47KXt2YXIgcCxnPWErbj4+MTswPChwPXI/dC5jYWxsKHMsZVtnXSxnLGUpOnQobyxlW2ddKSk/YT1nKzE6KG49ZyxpPSFwKX1yZXR1cm4gaT9hOn5hfSxnb29nLmFycmF5LnNvcnQ9ZnVuY3Rpb24oZSx0KXtlLnNvcnQodHx8Z29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZSl9LGdvb2cuYXJyYXkuc3RhYmxlU29ydD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWVbcl09e2luZGV4OnIsdmFsdWU6ZVtyXX07dmFyIG89dHx8Z29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZTtmb3IoZ29vZy5hcnJheS5zb3J0KGUsZnVuY3Rpb24oZSx0KXtyZXR1cm4gbyhlLnZhbHVlLHQudmFsdWUpfHxlLmluZGV4LXQuaW5kZXh9KSxyPTA7cjxlLmxlbmd0aDtyKyspZVtyXT1lW3JdLnZhbHVlfSxnb29nLmFycmF5LnNvcnRCeUtleT1mdW5jdGlvbihlLHIsdCl7dmFyIG89dHx8Z29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZTtnb29nLmFycmF5LnNvcnQoZSxmdW5jdGlvbihlLHQpe3JldHVybiBvKHIoZSkscih0KSl9KX0sZ29vZy5hcnJheS5zb3J0T2JqZWN0c0J5S2V5PWZ1bmN0aW9uKGUsdCxyKXtnb29nLmFycmF5LnNvcnRCeUtleShlLGZ1bmN0aW9uKGUpe3JldHVybiBlW3RdfSxyKX0sZ29vZy5hcnJheS5pc1NvcnRlZD1mdW5jdGlvbihlLHQscil7dD10fHxnb29nLmFycmF5LmRlZmF1bHRDb21wYXJlO2Zvcih2YXIgbz0xO288ZS5sZW5ndGg7bysrKXt2YXIgcz10KGVbby0xXSxlW29dKTtpZigwPHN8fDA9PXMmJnIpcmV0dXJuITF9cmV0dXJuITB9LGdvb2cuYXJyYXkuZXF1YWxzPWZ1bmN0aW9uKGUsdCxyKXtpZighZ29vZy5pc0FycmF5TGlrZShlKXx8IWdvb2cuaXNBcnJheUxpa2UodCl8fGUubGVuZ3RoIT10Lmxlbmd0aClyZXR1cm4hMTt2YXIgbz1lLmxlbmd0aDtyPXJ8fGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmVFcXVhbGl0eTtmb3IodmFyIHM9MDtzPG87cysrKWlmKCFyKGVbc10sdFtzXSkpcmV0dXJuITE7cmV0dXJuITB9LGdvb2cuYXJyYXkuY29tcGFyZTM9ZnVuY3Rpb24oZSx0LHIpe3I9cnx8Z29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZTtmb3IodmFyIG89TWF0aC5taW4oZS5sZW5ndGgsdC5sZW5ndGgpLHM9MDtzPG87cysrKXt2YXIgaT1yKGVbc10sdFtzXSk7aWYoMCE9aSlyZXR1cm4gaX1yZXR1cm4gZ29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZShlLmxlbmd0aCx0Lmxlbmd0aCl9LGdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdDxlPzE6ZTx0Py0xOjB9LGdvb2cuYXJyYXkuaW52ZXJzZURlZmF1bHRDb21wYXJlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuLWdvb2cuYXJyYXkuZGVmYXVsdENvbXBhcmUoZSx0KX0sZ29vZy5hcnJheS5kZWZhdWx0Q29tcGFyZUVxdWFsaXR5PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9PT10fSxnb29nLmFycmF5LmJpbmFyeUluc2VydD1mdW5jdGlvbihlLHQscil7cmV0dXJuKHI9Z29vZy5hcnJheS5iaW5hcnlTZWFyY2goZSx0LHIpKTwwJiYoZ29vZy5hcnJheS5pbnNlcnRBdChlLHQsLShyKzEpKSwhMCl9LGdvb2cuYXJyYXkuYmluYXJ5UmVtb3ZlPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gMDw9KHQ9Z29vZy5hcnJheS5iaW5hcnlTZWFyY2goZSx0LHIpKSYmZ29vZy5hcnJheS5yZW1vdmVBdChlLHQpfSxnb29nLmFycmF5LmJ1Y2tldD1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBvPXt9LHM9MDtzPGUubGVuZ3RoO3MrKyl7dmFyIGk9ZVtzXSxhPXQuY2FsbChyLGkscyxlKTtnb29nLmlzRGVmKGEpJiYob1thXXx8KG9bYV09W10pKS5wdXNoKGkpfXJldHVybiBvfSxnb29nLmFycmF5LnRvT2JqZWN0PWZ1bmN0aW9uKHIsbyxzKXt2YXIgaT17fTtyZXR1cm4gZ29vZy5hcnJheS5mb3JFYWNoKHIsZnVuY3Rpb24oZSx0KXtpW28uY2FsbChzLGUsdCxyKV09ZX0pLGl9LGdvb2cuYXJyYXkucmFuZ2U9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPVtdLHM9MCxpPWU7aWYodm9pZCAwIT09dCYmKHM9ZSxpPXQpLChyPXJ8fDEpKihpLXMpPDApcmV0dXJuW107aWYoMDxyKWZvcihlPXM7ZTxpO2UrPXIpby5wdXNoKGUpO2Vsc2UgZm9yKGU9cztpPGU7ZSs9cilvLnB1c2goZSk7cmV0dXJuIG99LGdvb2cuYXJyYXkucmVwZWF0PWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPVtdLG89MDtvPHQ7bysrKXJbb109ZTtyZXR1cm4gcn0sZ29vZy5hcnJheS5mbGF0dGVuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTA7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl7dmFyIG89YXJndW1lbnRzW3JdO2lmKGdvb2cuaXNBcnJheShvKSlmb3IodmFyIHM9MDtzPG8ubGVuZ3RoO3MrPTgxOTIpZm9yKHZhciBpPWdvb2cuYXJyYXkuc2xpY2UobyxzLHMrODE5MiksYT0oaT1nb29nLmFycmF5LmZsYXR0ZW4uYXBwbHkobnVsbCxpKSwwKTthPGkubGVuZ3RoO2ErKyl0LnB1c2goaVthXSk7ZWxzZSB0LnB1c2gobyl9cmV0dXJuIHR9LGdvb2cuYXJyYXkucm90YXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQobnVsbCE9ZS5sZW5ndGgpLGUubGVuZ3RoJiYoMDwodCU9ZS5sZW5ndGgpP0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGUsZS5zcGxpY2UoLXQsdCkpOnQ8MCYmQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZSxlLnNwbGljZSgwLC10KSkpLGV9LGdvb2cuYXJyYXkubW92ZUl0ZW09ZnVuY3Rpb24oZSx0LHIpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9dCYmdDxlLmxlbmd0aCksZ29vZy5hc3NlcnRzLmFzc2VydCgwPD1yJiZyPGUubGVuZ3RoKSx0PUFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChlLHQsMSksQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGUsciwwLHRbMF0pfSxnb29nLmFycmF5LnppcD1mdW5jdGlvbihlKXtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm5bXTtmb3IodmFyIHQ9W10scj1lLmxlbmd0aCxvPTE7bzxhcmd1bWVudHMubGVuZ3RoO28rKylhcmd1bWVudHNbb10ubGVuZ3RoPHImJihyPWFyZ3VtZW50c1tvXS5sZW5ndGgpO2ZvcihvPTA7bzxyO28rKyl7Zm9yKHZhciBzPVtdLGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXMucHVzaChhcmd1bWVudHNbaV1bb10pO3QucHVzaChzKX1yZXR1cm4gdH0sZ29vZy5hcnJheS5zaHVmZmxlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXR8fE1hdGgucmFuZG9tLG89ZS5sZW5ndGgtMTswPG87by0tKXt2YXIgcz1NYXRoLmZsb29yKHIoKSoobysxKSksaT1lW29dO2Vbb109ZVtzXSxlW3NdPWl9fSxnb29nLmFycmF5LmNvcHlCeUluZGV4PWZ1bmN0aW9uKHQsZSl7dmFyIHI9W107cmV0dXJuIGdvb2cuYXJyYXkuZm9yRWFjaChlLGZ1bmN0aW9uKGUpe3IucHVzaCh0W2VdKX0pLHJ9LGdvb2cuY3J5cHQ9e30sZ29vZy5jcnlwdC5zdHJpbmdUb0J5dGVBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0wLG89MDtvPGUubGVuZ3RoO28rKyl7Zm9yKHZhciBzPWUuY2hhckNvZGVBdChvKTsyNTU8czspdFtyKytdPTI1NSZzLHM+Pj04O3RbcisrXT1zfXJldHVybiB0fSxnb29nLmNyeXB0LmJ5dGVBcnJheVRvU3RyaW5nPWZ1bmN0aW9uKGUpe2lmKGUubGVuZ3RoPD04MTkyKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZSk7Zm9yKHZhciB0PVwiXCIscj0wO3I8ZS5sZW5ndGg7cis9ODE5Mil7dmFyIG89Z29vZy5hcnJheS5zbGljZShlLHIscis4MTkyKTt0PXQrU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG8pfXJldHVybiB0fSxnb29nLmNyeXB0LmJ5dGVBcnJheVRvSGV4PWZ1bmN0aW9uKGUpe3JldHVybiBnb29nLmFycmF5Lm1hcChlLGZ1bmN0aW9uKGUpe3JldHVybiAxPChlPWUudG9TdHJpbmcoMTYpKS5sZW5ndGg/ZTpcIjBcIitlfSkuam9pbihcIlwiKX0sZ29vZy5jcnlwdC5oZXhUb0J5dGVBcnJheT1mdW5jdGlvbihlKXtnb29nLmFzc2VydHMuYXNzZXJ0KDA9PWUubGVuZ3RoJTIsXCJLZXkgc3RyaW5nIGxlbmd0aCBtdXN0IGJlIG11bHRpcGxlIG9mIDJcIik7Zm9yKHZhciB0PVtdLHI9MDtyPGUubGVuZ3RoO3IrPTIpdC5wdXNoKHBhcnNlSW50KGUuc3Vic3RyaW5nKHIscisyKSwxNikpO3JldHVybiB0fSxnb29nLmNyeXB0LnN0cmluZ1RvVXRmOEJ5dGVBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0wLG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHM9ZS5jaGFyQ29kZUF0KG8pO3M8MTI4P3RbcisrXT1zOihzPDIwNDg/dFtyKytdPXM+PjZ8MTkyOig1NTI5Nj09KDY0NTEyJnMpJiZvKzE8ZS5sZW5ndGgmJjU2MzIwPT0oNjQ1MTImZS5jaGFyQ29kZUF0KG8rMSkpPyhzPTY1NTM2KygoMTAyMyZzKTw8MTApKygxMDIzJmUuY2hhckNvZGVBdCgrK28pKSx0W3IrK109cz4+MTh8MjQwLHRbcisrXT1zPj4xMiY2M3wxMjgpOnRbcisrXT1zPj4xMnwyMjQsdFtyKytdPXM+PjYmNjN8MTI4KSx0W3IrK109NjMmc3wxMjgpfXJldHVybiB0fSxnb29nLmNyeXB0LnV0ZjhCeXRlQXJyYXlUb1N0cmluZz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0wLG89MDtyPGUubGVuZ3RoOyl7aWYoKGE9ZVtyKytdKTwxMjgpdFtvKytdPVN0cmluZy5mcm9tQ2hhckNvZGUoYSk7ZWxzZSBpZigxOTE8YSYmYTwyMjQpe3ZhciBzPWVbcisrXTt0W28rK109U3RyaW5nLmZyb21DaGFyQ29kZSgoMzEmYSk8PDZ8NjMmcyl9ZWxzZSBpZigyMzk8YSYmYTwzNjUpe3M9ZVtyKytdO3ZhciBpPWVbcisrXSxhPSgoNyZhKTw8MTh8KDYzJnMpPDwxMnwoNjMmaSk8PDZ8NjMmZVtyKytdKS02NTUzNjt0W28rK109U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NisoYT4+MTApKSx0W28rK109U3RyaW5nLmZyb21DaGFyQ29kZSg1NjMyMCsoMTAyMyZhKSl9ZWxzZSBzPWVbcisrXSxpPWVbcisrXSx0W28rK109U3RyaW5nLmZyb21DaGFyQ29kZSgoMTUmYSk8PDEyfCg2MyZzKTw8Nnw2MyZpKX1yZXR1cm4gdC5qb2luKFwiXCIpfSxnb29nLmNyeXB0LnhvckJ5dGVBcnJheT1mdW5jdGlvbihlLHQpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZS5sZW5ndGg9PXQubGVuZ3RoLFwiWE9SIGFycmF5IGxlbmd0aHMgbXVzdCBtYXRjaFwiKTtmb3IodmFyIHI9W10sbz0wO288ZS5sZW5ndGg7bysrKXIucHVzaChlW29dXnRbb10pO3JldHVybiByfSxnb29nLmxhYnM9e30sZ29vZy5sYWJzLnVzZXJBZ2VudD17fSxnb29nLmxhYnMudXNlckFnZW50LnV0aWw9e30sZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldE5hdGl2ZVVzZXJBZ2VudFN0cmluZ189ZnVuY3Rpb24oKXt2YXIgZT1nb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0TmF2aWdhdG9yXygpO3JldHVybiBlJiYoZT1lLnVzZXJBZ2VudCk/ZTpcIlwifSxnb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0TmF2aWdhdG9yXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmdsb2JhbC5uYXZpZ2F0b3J9LGdvb2cubGFicy51c2VyQWdlbnQudXRpbC51c2VyQWdlbnRfPWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXROYXRpdmVVc2VyQWdlbnRTdHJpbmdfKCksZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLnNldFVzZXJBZ2VudD1mdW5jdGlvbihlKXtnb29nLmxhYnMudXNlckFnZW50LnV0aWwudXNlckFnZW50Xz1lfHxnb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0TmF0aXZlVXNlckFnZW50U3RyaW5nXygpfSxnb29nLmxhYnMudXNlckFnZW50LnV0aWwuZ2V0VXNlckFnZW50PWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC51c2VyQWdlbnRffSxnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldFVzZXJBZ2VudCgpO3JldHVybiBnb29nLnN0cmluZy5jb250YWlucyh0LGUpfSxnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnRJZ25vcmVDYXNlPWZ1bmN0aW9uKGUpe3ZhciB0PWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKTtyZXR1cm4gZ29vZy5zdHJpbmcuY2FzZUluc2Vuc2l0aXZlQ29udGFpbnModCxlKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmV4dHJhY3RWZXJzaW9uVHVwbGVzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPVJlZ0V4cChcIihcXFxcd1tcXFxcdyBdKykvKFteXFxcXHNdKylcXFxccyooPzpcXFxcKCguKj8pXFxcXCkpP1wiLFwiZ1wiKSxvPVtdO3Q9ci5leGVjKGUpOylvLnB1c2goW3RbMV0sdFsyXSx0WzNdfHx2b2lkIDBdKTtyZXR1cm4gb30sZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybT17fSxnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzQW5kcm9pZD1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJBbmRyb2lkXCIpfSxnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBvZD1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJpUG9kXCIpfSxnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBob25lPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcImlQaG9uZVwiKSYmIWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcImlQb2RcIikmJiFnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJpUGFkXCIpfSxnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBhZD1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJpUGFkXCIpfSxnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSW9zPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJcGhvbmUoKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwYWQoKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwb2QoKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc01hY2ludG9zaD1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJNYWNpbnRvc2hcIil9LGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNMaW51eD1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJMaW51eFwiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc1dpbmRvd3M9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiV2luZG93c1wiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0Nocm9tZU9TPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIkNyT1NcIil9LGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uZ2V0VmVyc2lvbj1mdW5jdGlvbigpe3ZhciBlPWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKSx0PVwiXCI7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNXaW5kb3dzKCk/dD0oZT0odD0vV2luZG93cyAoPzpOVHxQaG9uZSkgKFswLTkuXSspLykuZXhlYyhlKSk/ZVsxXTpcIjAuMFwiOmdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJb3MoKT90PShlPSh0PS8oPzppUGhvbmV8aVBvZHxpUGFkfENQVSlcXHMrT1NcXHMrKFxcUyspLykuZXhlYyhlKSkmJmVbMV0ucmVwbGFjZSgvXy9nLFwiLlwiKTpnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzTWFjaW50b3NoKCk/dD0oZT0odD0vTWFjIE9TIFggKFswLTlfLl0rKS8pLmV4ZWMoZSkpP2VbMV0ucmVwbGFjZSgvXy9nLFwiLlwiKTpcIjEwXCI6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0FuZHJvaWQoKT90PShlPSh0PS9BbmRyb2lkXFxzKyhbXlxcKTtdKykoXFwpfDspLykuZXhlYyhlKSkmJmVbMV06Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0Nocm9tZU9TKCkmJih0PShlPSh0PS8oPzpDck9TXFxzKyg/Omk2ODZ8eDg2XzY0KVxccysoWzAtOS5dKykpLykuZXhlYyhlKSkmJmVbMV0pLHR8fFwiXCJ9LGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNWZXJzaW9uT3JIaWdoZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIDA8PWdvb2cuc3RyaW5nLmNvbXBhcmVWZXJzaW9ucyhnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmdldFZlcnNpb24oKSxlKX0sZ29vZy5vYmplY3Q9e30sZ29vZy5vYmplY3QuZm9yRWFjaD1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBvIGluIGUpdC5jYWxsKHIsZVtvXSxvLGUpfSxnb29nLm9iamVjdC5maWx0ZXI9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvLHM9e307Zm9yKG8gaW4gZSl0LmNhbGwocixlW29dLG8sZSkmJihzW29dPWVbb10pO3JldHVybiBzfSxnb29nLm9iamVjdC5tYXA9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvLHM9e307Zm9yKG8gaW4gZSlzW29dPXQuY2FsbChyLGVbb10sbyxlKTtyZXR1cm4gc30sZ29vZy5vYmplY3Quc29tZT1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBvIGluIGUpaWYodC5jYWxsKHIsZVtvXSxvLGUpKXJldHVybiEwO3JldHVybiExfSxnb29nLm9iamVjdC5ldmVyeT1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBvIGluIGUpaWYoIXQuY2FsbChyLGVbb10sbyxlKSlyZXR1cm4hMTtyZXR1cm4hMH0sZ29vZy5vYmplY3QuZ2V0Q291bnQ9ZnVuY3Rpb24oZSl7dmFyIHQscj0wO2Zvcih0IGluIGUpcisrO3JldHVybiByfSxnb29nLm9iamVjdC5nZXRBbnlLZXk9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpcmV0dXJuIHR9LGdvb2cub2JqZWN0LmdldEFueVZhbHVlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBlKXJldHVybiBlW3RdfSxnb29nLm9iamVjdC5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybiBnb29nLm9iamVjdC5jb250YWluc1ZhbHVlKGUsdCl9LGdvb2cub2JqZWN0LmdldFZhbHVlcz1mdW5jdGlvbihlKXt2YXIgdCxyPVtdLG89MDtmb3IodCBpbiBlKXJbbysrXT1lW3RdO3JldHVybiByfSxnb29nLm9iamVjdC5nZXRLZXlzPWZ1bmN0aW9uKGUpe3ZhciB0LHI9W10sbz0wO2Zvcih0IGluIGUpcltvKytdPXQ7cmV0dXJuIHJ9LGdvb2cub2JqZWN0LmdldFZhbHVlQnlLZXlzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPShvPWdvb2cuaXNBcnJheUxpa2UodCkpP3Q6YXJndW1lbnRzLG89bz8wOjE7bzxyLmxlbmd0aCYmKGU9ZVtyW29dXSxnb29nLmlzRGVmKGUpKTtvKyspO3JldHVybiBlfSxnb29nLm9iamVjdC5jb250YWluc0tleT1mdW5jdGlvbihlLHQpe3JldHVybiBudWxsIT09ZSYmdCBpbiBlfSxnb29nLm9iamVjdC5jb250YWluc1ZhbHVlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIGUpaWYoZVtyXT09dClyZXR1cm4hMDtyZXR1cm4hMX0sZ29vZy5vYmplY3QuZmluZEtleT1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBvIGluIGUpaWYodC5jYWxsKHIsZVtvXSxvLGUpKXJldHVybiBvfSxnb29nLm9iamVjdC5maW5kVmFsdWU9ZnVuY3Rpb24oZSx0LHIpe3JldHVybih0PWdvb2cub2JqZWN0LmZpbmRLZXkoZSx0LHIpKSYmZVt0XX0sZ29vZy5vYmplY3QuaXNFbXB0eT1mdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gZSlyZXR1cm4hMTtyZXR1cm4hMH0sZ29vZy5vYmplY3QuY2xlYXI9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpZGVsZXRlIGVbdF19LGdvb2cub2JqZWN0LnJlbW92ZT1mdW5jdGlvbihlLHQpe3ZhciByO3JldHVybihyPXQgaW4gZSkmJmRlbGV0ZSBlW3RdLHJ9LGdvb2cub2JqZWN0LmFkZD1mdW5jdGlvbihlLHQscil7aWYobnVsbCE9PWUmJnQgaW4gZSl0aHJvdyBFcnJvcignVGhlIG9iamVjdCBhbHJlYWR5IGNvbnRhaW5zIHRoZSBrZXkgXCInK3QrJ1wiJyk7Z29vZy5vYmplY3Quc2V0KGUsdCxyKX0sZ29vZy5vYmplY3QuZ2V0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbnVsbCE9PWUmJnQgaW4gZT9lW3RdOnJ9LGdvb2cub2JqZWN0LnNldD1mdW5jdGlvbihlLHQscil7ZVt0XT1yfSxnb29nLm9iamVjdC5zZXRJZlVuZGVmaW5lZD1mdW5jdGlvbihlLHQscil7cmV0dXJuIHQgaW4gZT9lW3RdOmVbdF09cn0sZ29vZy5vYmplY3Quc2V0V2l0aFJldHVyblZhbHVlSWZOb3RTZXQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0IGluIGU/ZVt0XToocj1yKCksZVt0XT1yKX0sZ29vZy5vYmplY3QuZXF1YWxzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIGUpaWYoIShyIGluIHQpfHxlW3JdIT09dFtyXSlyZXR1cm4hMTtmb3IociBpbiB0KWlmKCEociBpbiBlKSlyZXR1cm4hMTtyZXR1cm4hMH0sZ29vZy5vYmplY3QuY2xvbmU9ZnVuY3Rpb24oZSl7dmFyIHQscj17fTtmb3IodCBpbiBlKXJbdF09ZVt0XTtyZXR1cm4gcn0sZ29vZy5vYmplY3QudW5zYWZlQ2xvbmU9ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIj09KHI9Z29vZy50eXBlT2YoZSkpfHxcImFycmF5XCI9PXIpe2lmKGdvb2cuaXNGdW5jdGlvbihlLmNsb25lKSlyZXR1cm4gZS5jbG9uZSgpO3ZhciB0LHI9XCJhcnJheVwiPT1yP1tdOnt9O2Zvcih0IGluIGUpclt0XT1nb29nLm9iamVjdC51bnNhZmVDbG9uZShlW3RdKTtyZXR1cm4gcn1yZXR1cm4gZX0sZ29vZy5vYmplY3QudHJhbnNwb3NlPWZ1bmN0aW9uKGUpe3ZhciB0LHI9e307Zm9yKHQgaW4gZSlyW2VbdF1dPXQ7cmV0dXJuIHJ9LGdvb2cub2JqZWN0LlBST1RPVFlQRV9GSUVMRFNfPVwiY29uc3RydWN0b3IgaGFzT3duUHJvcGVydHkgaXNQcm90b3R5cGVPZiBwcm9wZXJ0eUlzRW51bWVyYWJsZSB0b0xvY2FsZVN0cmluZyB0b1N0cmluZyB2YWx1ZU9mXCIuc3BsaXQoXCIgXCIpLGdvb2cub2JqZWN0LmV4dGVuZD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixvLHM9MTtzPGFyZ3VtZW50cy5sZW5ndGg7cysrKXtmb3IociBpbiBvPWFyZ3VtZW50c1tzXSllW3JdPW9bcl07Zm9yKHZhciBpPTA7aTxnb29nLm9iamVjdC5QUk9UT1RZUEVfRklFTERTXy5sZW5ndGg7aSsrKXI9Z29vZy5vYmplY3QuUFJPVE9UWVBFX0ZJRUxEU19baV0sT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8scikmJihlW3JdPW9bcl0pfX0sZ29vZy5vYmplY3QuY3JlYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg7aWYoMT09dCYmZ29vZy5pc0FycmF5KGUpKXJldHVybiBnb29nLm9iamVjdC5jcmVhdGUuYXBwbHkobnVsbCxlKTtpZih0JTIpdGhyb3cgRXJyb3IoXCJVbmV2ZW4gbnVtYmVyIG9mIGFyZ3VtZW50c1wiKTtmb3IodmFyIHI9e30sbz0wO288dDtvKz0yKXJbYXJndW1lbnRzW29dXT1hcmd1bWVudHNbbysxXTtyZXR1cm4gcn0sZ29vZy5vYmplY3QuY3JlYXRlU2V0PWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg7aWYoMT09dCYmZ29vZy5pc0FycmF5KGUpKXJldHVybiBnb29nLm9iamVjdC5jcmVhdGVTZXQuYXBwbHkobnVsbCxlKTtmb3IodmFyIHI9e30sbz0wO288dDtvKyspclthcmd1bWVudHNbb11dPSEwO3JldHVybiByfSxnb29nLm9iamVjdC5jcmVhdGVJbW11dGFibGVWaWV3PWZ1bmN0aW9uKGUpe3ZhciB0PWU7cmV0dXJuIE9iamVjdC5pc0Zyb3plbiYmIU9iamVjdC5pc0Zyb3plbihlKSYmKHQ9T2JqZWN0LmNyZWF0ZShlKSxPYmplY3QuZnJlZXplKHQpKSx0fSxnb29nLm9iamVjdC5pc0ltbXV0YWJsZVZpZXc9ZnVuY3Rpb24oZSl7cmV0dXJuISFPYmplY3QuaXNGcm96ZW4mJk9iamVjdC5pc0Zyb3plbihlKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyPXt9LGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaE9wZXJhXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJPcGVyYVwiKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiT1BSXCIpfSxnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hJRV89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiVHJpZGVudFwiKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiTVNJRVwiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRWRnZV89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiRWRnZVwiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRmlyZWZveF89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiRmlyZWZveFwiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoU2FmYXJpXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJTYWZhcmlcIikmJiEoZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ2hyb21lXygpfHxnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIubWF0Y2hDb2FzdF8oKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoT3BlcmFfKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEVkZ2VfKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc1NpbGsoKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiQW5kcm9pZFwiKSl9LGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaENvYXN0Xz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJDb2FzdFwiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoSW9zV2Vidmlld189ZnVuY3Rpb24oKXtyZXR1cm4oZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiaVBhZFwiKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiaVBob25lXCIpKSYmIWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaFNhZmFyaV8oKSYmIWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaENocm9tZV8oKSYmIWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaENvYXN0XygpJiZnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJBcHBsZVdlYktpdFwiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ2hyb21lXz1mdW5jdGlvbigpe3JldHVybihnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJDaHJvbWVcIil8fGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIkNyaU9TXCIpKSYmIWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaE9wZXJhXygpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRWRnZV8oKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQW5kcm9pZEJyb3dzZXJfPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIkFuZHJvaWRcIikmJiEoZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzQ2hyb21lKCl8fGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0ZpcmVmb3goKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzT3BlcmEoKXx8Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzU2lsaygpKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzT3BlcmE9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoT3BlcmFfLGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0lFPWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaElFXyxnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNFZGdlPWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaEVkZ2VfLGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0ZpcmVmb3g9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoRmlyZWZveF8sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzU2FmYXJpPWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaFNhZmFyaV8sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzQ29hc3Q9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQ29hc3RfLGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0lvc1dlYnZpZXc9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoSW9zV2Vidmlld18sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzQ2hyb21lPWdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5tYXRjaENocm9tZV8sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzQW5kcm9pZEJyb3dzZXI9Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLm1hdGNoQW5kcm9pZEJyb3dzZXJfLGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc1NpbGs9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiU2lsa1wiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmdldFZlcnNpb249ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3JldHVybiBlPWdvb2cuYXJyYXkuZmluZChlLG8pLHJbZV18fFwiXCJ9dmFyIHQ9Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldFVzZXJBZ2VudCgpO2lmKGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0lFKCkpcmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5nZXRJRVZlcnNpb25fKHQpO3Q9Z29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmV4dHJhY3RWZXJzaW9uVHVwbGVzKHQpO3ZhciByPXt9O2dvb2cuYXJyYXkuZm9yRWFjaCh0LGZ1bmN0aW9uKGUpe3JbZVswXV09ZVsxXX0pO3ZhciBvPWdvb2cucGFydGlhbChnb29nLm9iamVjdC5jb250YWluc0tleSxyKTtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzT3BlcmEoKT9lKFtcIlZlcnNpb25cIixcIk9wZXJhXCIsXCJPUFJcIl0pOmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0VkZ2UoKT9lKFtcIkVkZ2VcIl0pOmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0Nocm9tZSgpP2UoW1wiQ2hyb21lXCIsXCJDcmlPU1wiXSk6KHQ9dFsyXSkmJnRbMV18fFwiXCJ9LGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc1ZlcnNpb25PckhpZ2hlcj1mdW5jdGlvbihlKXtyZXR1cm4gMDw9Z29vZy5zdHJpbmcuY29tcGFyZVZlcnNpb25zKGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5nZXRWZXJzaW9uKCksZSl9LGdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5nZXRJRVZlcnNpb25fPWZ1bmN0aW9uKGUpe2lmKCh0PS9ydjogKihbXFxkXFwuXSopLy5leGVjKGUpKSYmdFsxXSlyZXR1cm4gdFsxXTt2YXIgdD1cIlwiLHI9L01TSUUgKyhbXFxkXFwuXSspLy5leGVjKGUpO2lmKHImJnJbMV0paWYoZT0vVHJpZGVudFxcLyhcXGQuXFxkKS8uZXhlYyhlKSxcIjcuMFwiPT1yWzFdKWlmKGUmJmVbMV0pc3dpdGNoKGVbMV0pe2Nhc2VcIjQuMFwiOnQ9XCI4LjBcIjticmVhaztjYXNlXCI1LjBcIjp0PVwiOS4wXCI7YnJlYWs7Y2FzZVwiNi4wXCI6dD1cIjEwLjBcIjticmVhaztjYXNlXCI3LjBcIjp0PVwiMTEuMFwifWVsc2UgdD1cIjcuMFwiO2Vsc2UgdD1yWzFdO3JldHVybiB0fSxnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZT17fSxnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc1ByZXN0bz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJQcmVzdG9cIil9LGdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzVHJpZGVudD1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJUcmlkZW50XCIpfHxnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJNU0lFXCIpfSxnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc0VkZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50KFwiRWRnZVwiKX0sZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNXZWJLaXQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLm1hdGNoVXNlckFnZW50SWdub3JlQ2FzZShcIldlYktpdFwiKSYmIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpfSxnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc0dlY2tvPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQudXRpbC5tYXRjaFVzZXJBZ2VudChcIkdlY2tvXCIpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNXZWJLaXQoKSYmIWdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzVHJpZGVudCgpJiYhZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNFZGdlKCl9LGdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmdldFZlcnNpb249ZnVuY3Rpb24oKXtpZih0PWdvb2cubGFicy51c2VyQWdlbnQudXRpbC5nZXRVc2VyQWdlbnQoKSl7dmFyIGUsdD1nb29nLmxhYnMudXNlckFnZW50LnV0aWwuZXh0cmFjdFZlcnNpb25UdXBsZXModCkscj1nb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5nZXRFbmdpbmVUdXBsZV8odCk7aWYocilyZXR1cm5cIkdlY2tvXCI9PXJbMF0/Z29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuZ2V0VmVyc2lvbkZvcktleV8odCxcIkZpcmVmb3hcIik6clsxXTtpZigodD10WzBdKSYmKGU9dFsyXSkmJihlPS9UcmlkZW50XFwvKFteXFxzO10rKS8uZXhlYyhlKSkpcmV0dXJuIGVbMV19cmV0dXJuXCJcIn0sZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuZ2V0RW5naW5lVHVwbGVfPWZ1bmN0aW9uKGUpe2lmKCFnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5pc0VkZ2UoKSlyZXR1cm4gZVsxXTtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7dmFyIHI9ZVt0XTtpZihcIkVkZ2VcIj09clswXSlyZXR1cm4gcn19LGdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzVmVyc2lvbk9ySGlnaGVyPWZ1bmN0aW9uKGUpe3JldHVybiAwPD1nb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnMoZ29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuZ2V0VmVyc2lvbigpLGUpfSxnb29nLmxhYnMudXNlckFnZW50LmVuZ2luZS5nZXRWZXJzaW9uRm9yS2V5Xz1mdW5jdGlvbihlLHQpe3ZhciByPWdvb2cuYXJyYXkuZmluZChlLGZ1bmN0aW9uKGUpe3JldHVybiB0PT1lWzBdfSk7cmV0dXJuIHImJnJbMV18fFwiXCJ9LGdvb2cudXNlckFnZW50PXt9LGdvb2cudXNlckFnZW50LkFTU1VNRV9JRT0hMSxnb29nLnVzZXJBZ2VudC5BU1NVTUVfRURHRT0hMSxnb29nLnVzZXJBZ2VudC5BU1NVTUVfR0VDS089ITEsZ29vZy51c2VyQWdlbnQuQVNTVU1FX1dFQktJVD0hMSxnb29nLnVzZXJBZ2VudC5BU1NVTUVfTU9CSUxFX1dFQktJVD0hMSxnb29nLnVzZXJBZ2VudC5BU1NVTUVfT1BFUkE9ITEsZ29vZy51c2VyQWdlbnQuQVNTVU1FX0FOWV9WRVJTSU9OPSExLGdvb2cudXNlckFnZW50LkJST1dTRVJfS05PV05fPWdvb2cudXNlckFnZW50LkFTU1VNRV9JRXx8Z29vZy51c2VyQWdlbnQuQVNTVU1FX0VER0V8fGdvb2cudXNlckFnZW50LkFTU1VNRV9HRUNLT3x8Z29vZy51c2VyQWdlbnQuQVNTVU1FX01PQklMRV9XRUJLSVR8fGdvb2cudXNlckFnZW50LkFTU1VNRV9XRUJLSVR8fGdvb2cudXNlckFnZW50LkFTU1VNRV9PUEVSQSxnb29nLnVzZXJBZ2VudC5nZXRVc2VyQWdlbnRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC51dGlsLmdldFVzZXJBZ2VudCgpfSxnb29nLnVzZXJBZ2VudC5nZXROYXZpZ2F0b3I9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5nbG9iYWwubmF2aWdhdG9yfHxudWxsfSxnb29nLnVzZXJBZ2VudC5PUEVSQT1nb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfT1BFUkE6Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzT3BlcmEoKSxnb29nLnVzZXJBZ2VudC5JRT1nb29nLnVzZXJBZ2VudC5CUk9XU0VSX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfSUU6Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzSUUoKSxnb29nLnVzZXJBZ2VudC5FREdFPWdvb2cudXNlckFnZW50LkJST1dTRVJfS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9FREdFOmdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzRWRnZSgpLGdvb2cudXNlckFnZW50LkVER0VfT1JfSUU9Z29vZy51c2VyQWdlbnQuRURHRXx8Z29vZy51c2VyQWdlbnQuSUUsZ29vZy51c2VyQWdlbnQuR0VDS089Z29vZy51c2VyQWdlbnQuQlJPV1NFUl9LTk9XTl8/Z29vZy51c2VyQWdlbnQuQVNTVU1FX0dFQ0tPOmdvb2cubGFicy51c2VyQWdlbnQuZW5naW5lLmlzR2Vja28oKSxnb29nLnVzZXJBZ2VudC5XRUJLSVQ9Z29vZy51c2VyQWdlbnQuQlJPV1NFUl9LTk9XTl8/Z29vZy51c2VyQWdlbnQuQVNTVU1FX1dFQktJVHx8Z29vZy51c2VyQWdlbnQuQVNTVU1FX01PQklMRV9XRUJLSVQ6Z29vZy5sYWJzLnVzZXJBZ2VudC5lbmdpbmUuaXNXZWJLaXQoKSxnb29nLnVzZXJBZ2VudC5pc01vYmlsZV89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy51c2VyQWdlbnQuV0VCS0lUJiZnb29nLmxhYnMudXNlckFnZW50LnV0aWwubWF0Y2hVc2VyQWdlbnQoXCJNb2JpbGVcIil9LGdvb2cudXNlckFnZW50Lk1PQklMRT1nb29nLnVzZXJBZ2VudC5BU1NVTUVfTU9CSUxFX1dFQktJVHx8Z29vZy51c2VyQWdlbnQuaXNNb2JpbGVfKCksZ29vZy51c2VyQWdlbnQuU0FGQVJJPWdvb2cudXNlckFnZW50LldFQktJVCxnb29nLnVzZXJBZ2VudC5kZXRlcm1pbmVQbGF0Zm9ybV89ZnVuY3Rpb24oKXt2YXIgZT1nb29nLnVzZXJBZ2VudC5nZXROYXZpZ2F0b3IoKTtyZXR1cm4gZSYmZS5wbGF0Zm9ybXx8XCJcIn0sZ29vZy51c2VyQWdlbnQuUExBVEZPUk09Z29vZy51c2VyQWdlbnQuZGV0ZXJtaW5lUGxhdGZvcm1fKCksZ29vZy51c2VyQWdlbnQuQVNTVU1FX01BQz0hMSxnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0lORE9XUz0hMSxnb29nLnVzZXJBZ2VudC5BU1NVTUVfTElOVVg9ITEsZ29vZy51c2VyQWdlbnQuQVNTVU1FX1gxMT0hMSxnb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5EUk9JRD0hMSxnb29nLnVzZXJBZ2VudC5BU1NVTUVfSVBIT05FPSExLGdvb2cudXNlckFnZW50LkFTU1VNRV9JUEFEPSExLGdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXz1nb29nLnVzZXJBZ2VudC5BU1NVTUVfTUFDfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfV0lORE9XU3x8Z29vZy51c2VyQWdlbnQuQVNTVU1FX0xJTlVYfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfWDExfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfQU5EUk9JRHx8Z29vZy51c2VyQWdlbnQuQVNTVU1FX0lQSE9ORXx8Z29vZy51c2VyQWdlbnQuQVNTVU1FX0lQQUQsZ29vZy51c2VyQWdlbnQuTUFDPWdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfTUFDOmdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNNYWNpbnRvc2goKSxnb29nLnVzZXJBZ2VudC5XSU5ET1dTPWdvb2cudXNlckFnZW50LlBMQVRGT1JNX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5BU1NVTUVfV0lORE9XUzpnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzV2luZG93cygpLGdvb2cudXNlckFnZW50LmlzTGVnYWN5TGludXhfPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNMaW51eCgpfHxnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzQ2hyb21lT1MoKX0sZ29vZy51c2VyQWdlbnQuTElOVVg9Z29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9MSU5VWDpnb29nLnVzZXJBZ2VudC5pc0xlZ2FjeUxpbnV4XygpLGdvb2cudXNlckFnZW50LmlzWDExXz1mdW5jdGlvbigpe3ZhciBlPWdvb2cudXNlckFnZW50LmdldE5hdmlnYXRvcigpO3JldHVybiEhZSYmZ29vZy5zdHJpbmcuY29udGFpbnMoZS5hcHBWZXJzaW9ufHxcIlwiLFwiWDExXCIpfSxnb29nLnVzZXJBZ2VudC5YMTE9Z29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9YMTE6Z29vZy51c2VyQWdlbnQuaXNYMTFfKCksZ29vZy51c2VyQWdlbnQuQU5EUk9JRD1nb29nLnVzZXJBZ2VudC5QTEFURk9STV9LTk9XTl8/Z29vZy51c2VyQWdlbnQuQVNTVU1FX0FORFJPSUQ6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0FuZHJvaWQoKSxnb29nLnVzZXJBZ2VudC5JUEhPTkU9Z29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9JUEhPTkU6Z29vZy5sYWJzLnVzZXJBZ2VudC5wbGF0Zm9ybS5pc0lwaG9uZSgpLGdvb2cudXNlckFnZW50LklQQUQ9Z29vZy51c2VyQWdlbnQuUExBVEZPUk1fS05PV05fP2dvb2cudXNlckFnZW50LkFTU1VNRV9JUEFEOmdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJcGFkKCksZ29vZy51c2VyQWdlbnQub3BlcmFWZXJzaW9uXz1mdW5jdGlvbigpe3ZhciB0PWdvb2cuZ2xvYmFsLm9wZXJhLnZlcnNpb247dHJ5e3JldHVybiB0KCl9Y2F0Y2goZSl7cmV0dXJuIHR9fSxnb29nLnVzZXJBZ2VudC5kZXRlcm1pbmVWZXJzaW9uXz1mdW5jdGlvbigpe2lmKGdvb2cudXNlckFnZW50Lk9QRVJBJiZnb29nLmdsb2JhbC5vcGVyYSlyZXR1cm4gZ29vZy51c2VyQWdlbnQub3BlcmFWZXJzaW9uXygpO3ZhciBlPVwiXCIsdD1nb29nLnVzZXJBZ2VudC5nZXRWZXJzaW9uUmVnZXhSZXN1bHRfKCk7cmV0dXJuIHQmJihlPXQ/dFsxXTpcIlwiKSxnb29nLnVzZXJBZ2VudC5JRSYmKHQ9Z29vZy51c2VyQWdlbnQuZ2V0RG9jdW1lbnRNb2RlXygpKT5wYXJzZUZsb2F0KGUpP1N0cmluZyh0KTplfSxnb29nLnVzZXJBZ2VudC5nZXRWZXJzaW9uUmVnZXhSZXN1bHRfPWZ1bmN0aW9uKCl7dmFyIGU9Z29vZy51c2VyQWdlbnQuZ2V0VXNlckFnZW50U3RyaW5nKCk7cmV0dXJuIGdvb2cudXNlckFnZW50LkdFQ0tPPy9ydlxcOihbXlxcKTtdKykoXFwpfDspLy5leGVjKGUpOmdvb2cudXNlckFnZW50LkVER0U/L0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhlKTpnb29nLnVzZXJBZ2VudC5JRT8vXFxiKD86TVNJRXxydilbOiBdKFteXFwpO10rKShcXCl8OykvLmV4ZWMoZSk6Z29vZy51c2VyQWdlbnQuV0VCS0lUPy9XZWJLaXRcXC8oXFxTKykvLmV4ZWMoZSk6dm9pZCAwfSxnb29nLnVzZXJBZ2VudC5nZXREb2N1bWVudE1vZGVfPWZ1bmN0aW9uKCl7dmFyIGU9Z29vZy5nbG9iYWwuZG9jdW1lbnQ7cmV0dXJuIGU/ZS5kb2N1bWVudE1vZGU6dm9pZCAwfSxnb29nLnVzZXJBZ2VudC5WRVJTSU9OPWdvb2cudXNlckFnZW50LmRldGVybWluZVZlcnNpb25fKCksZ29vZy51c2VyQWdlbnQuY29tcGFyZT1mdW5jdGlvbihlLHQpe3JldHVybiBnb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnMoZSx0KX0sZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXJDYWNoZV89e30sZ29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXI9ZnVuY3Rpb24oZSl7cmV0dXJuIGdvb2cudXNlckFnZW50LkFTU1VNRV9BTllfVkVSU0lPTnx8Z29vZy51c2VyQWdlbnQuaXNWZXJzaW9uT3JIaWdoZXJDYWNoZV9bZV18fChnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlckNhY2hlX1tlXT0wPD1nb29nLnN0cmluZy5jb21wYXJlVmVyc2lvbnMoZ29vZy51c2VyQWdlbnQuVkVSU0lPTixlKSl9LGdvb2cudXNlckFnZW50LmlzVmVyc2lvbj1nb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcixnb29nLnVzZXJBZ2VudC5pc0RvY3VtZW50TW9kZU9ySGlnaGVyPWZ1bmN0aW9uKGUpe3JldHVybiBOdW1iZXIoZ29vZy51c2VyQWdlbnQuRE9DVU1FTlRfTU9ERSk+PWV9LGdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlPWdvb2cudXNlckFnZW50LmlzRG9jdW1lbnRNb2RlT3JIaWdoZXIsZ29vZy51c2VyQWdlbnQuRE9DVU1FTlRfTU9ERT0odmhhPWdvb2cuZ2xvYmFsLmRvY3VtZW50LHdoYT1nb29nLnVzZXJBZ2VudC5nZXREb2N1bWVudE1vZGVfKCksdmhhJiZnb29nLnVzZXJBZ2VudC5JRT93aGF8fChcIkNTUzFDb21wYXRcIj09dmhhLmNvbXBhdE1vZGU/cGFyc2VJbnQoZ29vZy51c2VyQWdlbnQuVkVSU0lPTiwxMCk6NSk6dm9pZCAwKSxnb29nLnVzZXJBZ2VudC5wcm9kdWN0PXt9LGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0ZJUkVGT1g9ITEsZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBIT05FPSExLGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0lQQUQ9ITEsZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfQU5EUk9JRD0hMSxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9DSFJPTUU9ITEsZ29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfU0FGQVJJPSExLGdvb2cudXNlckFnZW50LnByb2R1Y3QuUFJPRFVDVF9LTk9XTl89Z29vZy51c2VyQWdlbnQuQVNTVU1FX0lFfHxnb29nLnVzZXJBZ2VudC5BU1NVTUVfRURHRXx8Z29vZy51c2VyQWdlbnQuQVNTVU1FX09QRVJBfHxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9GSVJFRk9YfHxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9JUEhPTkV8fGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0lQQUR8fGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0FORFJPSUR8fGdvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0NIUk9NRXx8Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfU0FGQVJJLGdvb2cudXNlckFnZW50LnByb2R1Y3QuT1BFUkE9Z29vZy51c2VyQWdlbnQuT1BFUkEsZ29vZy51c2VyQWdlbnQucHJvZHVjdC5JRT1nb29nLnVzZXJBZ2VudC5JRSxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkVER0U9Z29vZy51c2VyQWdlbnQuRURHRSxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkZJUkVGT1g9Z29vZy51c2VyQWdlbnQucHJvZHVjdC5QUk9EVUNUX0tOT1dOXz9nb29nLnVzZXJBZ2VudC5wcm9kdWN0LkFTU1VNRV9GSVJFRk9YOmdvb2cubGFicy51c2VyQWdlbnQuYnJvd3Nlci5pc0ZpcmVmb3goKSxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LmlzSXBob25lT3JJcG9kXz1mdW5jdGlvbigpe3JldHVybiBnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBob25lKCl8fGdvb2cubGFicy51c2VyQWdlbnQucGxhdGZvcm0uaXNJcG9kKCl9LGdvb2cudXNlckFnZW50LnByb2R1Y3QuSVBIT05FPWdvb2cudXNlckFnZW50LnByb2R1Y3QuUFJPRFVDVF9LTk9XTl8/Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBIT05FOmdvb2cudXNlckFnZW50LnByb2R1Y3QuaXNJcGhvbmVPcklwb2RfKCksZ29vZy51c2VyQWdlbnQucHJvZHVjdC5JUEFEPWdvb2cudXNlckFnZW50LnByb2R1Y3QuUFJPRFVDVF9LTk9XTl8/Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfSVBBRDpnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSXBhZCgpLGdvb2cudXNlckFnZW50LnByb2R1Y3QuQU5EUk9JRD1nb29nLnVzZXJBZ2VudC5wcm9kdWN0LlBST0RVQ1RfS05PV05fP2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0FORFJPSUQ6Z29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzQW5kcm9pZEJyb3dzZXIoKSxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LkNIUk9NRT1nb29nLnVzZXJBZ2VudC5wcm9kdWN0LlBST0RVQ1RfS05PV05fP2dvb2cudXNlckFnZW50LnByb2R1Y3QuQVNTVU1FX0NIUk9NRTpnb29nLmxhYnMudXNlckFnZW50LmJyb3dzZXIuaXNDaHJvbWUoKSxnb29nLnVzZXJBZ2VudC5wcm9kdWN0LmlzU2FmYXJpRGVza3RvcF89ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5sYWJzLnVzZXJBZ2VudC5icm93c2VyLmlzU2FmYXJpKCkmJiFnb29nLmxhYnMudXNlckFnZW50LnBsYXRmb3JtLmlzSW9zKCl9LGdvb2cudXNlckFnZW50LnByb2R1Y3QuU0FGQVJJPWdvb2cudXNlckFnZW50LnByb2R1Y3QuUFJPRFVDVF9LTk9XTl8/Z29vZy51c2VyQWdlbnQucHJvZHVjdC5BU1NVTUVfU0FGQVJJOmdvb2cudXNlckFnZW50LnByb2R1Y3QuaXNTYWZhcmlEZXNrdG9wXygpLGdvb2cuY3J5cHQuYmFzZTY0PXt9LGdvb2cuY3J5cHQuYmFzZTY0LmJ5dGVUb0NoYXJNYXBfPW51bGwsZ29vZy5jcnlwdC5iYXNlNjQuY2hhclRvQnl0ZU1hcF89bnVsbCxnb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwV2ViU2FmZV89bnVsbCxnb29nLmNyeXB0LmJhc2U2NC5FTkNPREVEX1ZBTFNfQkFTRT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCIsZ29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTPWdvb2cuY3J5cHQuYmFzZTY0LkVOQ09ERURfVkFMU19CQVNFK1wiKy89XCIsZ29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTX1dFQlNBRkU9Z29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTX0JBU0UrXCItXy5cIixnb29nLmNyeXB0LmJhc2U2NC5BU1NVTUVfTkFUSVZFX1NVUFBPUlRfPWdvb2cudXNlckFnZW50LkdFQ0tPfHxnb29nLnVzZXJBZ2VudC5XRUJLSVQmJiFnb29nLnVzZXJBZ2VudC5wcm9kdWN0LlNBRkFSSXx8Z29vZy51c2VyQWdlbnQuT1BFUkEsZ29vZy5jcnlwdC5iYXNlNjQuSEFTX05BVElWRV9FTkNPREVfPWdvb2cuY3J5cHQuYmFzZTY0LkFTU1VNRV9OQVRJVkVfU1VQUE9SVF98fFwiZnVuY3Rpb25cIj09dHlwZW9mIGdvb2cuZ2xvYmFsLmJ0b2EsZ29vZy5jcnlwdC5iYXNlNjQuSEFTX05BVElWRV9ERUNPREVfPWdvb2cuY3J5cHQuYmFzZTY0LkFTU1VNRV9OQVRJVkVfU1VQUE9SVF98fCFnb29nLnVzZXJBZ2VudC5wcm9kdWN0LlNBRkFSSSYmIWdvb2cudXNlckFnZW50LklFJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBnb29nLmdsb2JhbC5hdG9iLGdvb2cuY3J5cHQuYmFzZTY0LmVuY29kZUJ5dGVBcnJheT1mdW5jdGlvbihlLHQpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZ29vZy5pc0FycmF5TGlrZShlKSxcImVuY29kZUJ5dGVBcnJheSB0YWtlcyBhbiBhcnJheSBhcyBhIHBhcmFtZXRlclwiKSxnb29nLmNyeXB0LmJhc2U2NC5pbml0XygpO2Zvcih2YXIgcj10P2dvb2cuY3J5cHQuYmFzZTY0LmJ5dGVUb0NoYXJNYXBXZWJTYWZlXzpnb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwXyxvPVtdLHM9MDtzPGUubGVuZ3RoO3MrPTMpe3ZhciBpPWVbc10sYT1zKzE8ZS5sZW5ndGgsbj1hP2VbcysxXTowLHA9cysyPGUubGVuZ3RoLGc9aT4+Mix1PShpPSgzJmkpPDw0fG4+PjQsbj0oMTUmbik8PDJ8KHU9cD9lW3MrMl06MCk+PjYsNjMmdSk7cHx8KHU9NjQsYXx8KG49NjQpKSxvLnB1c2gocltnXSxyW2ldLHJbbl0sclt1XSl9cmV0dXJuIG8uam9pbihcIlwiKX0sZ29vZy5jcnlwdC5iYXNlNjQuZW5jb2RlU3RyaW5nPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGdvb2cuY3J5cHQuYmFzZTY0LkhBU19OQVRJVkVfRU5DT0RFXyYmIXQ/Z29vZy5nbG9iYWwuYnRvYShlKTpnb29nLmNyeXB0LmJhc2U2NC5lbmNvZGVCeXRlQXJyYXkoZ29vZy5jcnlwdC5zdHJpbmdUb0J5dGVBcnJheShlKSx0KX0sZ29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYoZ29vZy5jcnlwdC5iYXNlNjQuSEFTX05BVElWRV9ERUNPREVfJiYhdClyZXR1cm4gZ29vZy5nbG9iYWwuYXRvYihlKTt2YXIgcj1cIlwiO3JldHVybiBnb29nLmNyeXB0LmJhc2U2NC5kZWNvZGVTdHJpbmdJbnRlcm5hbF8oZSxmdW5jdGlvbihlKXtyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpfSkscn0sZ29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXk9ZnVuY3Rpb24oZSx0KXt2YXIgcj1bXTtyZXR1cm4gZ29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nSW50ZXJuYWxfKGUsZnVuY3Rpb24oZSl7ci5wdXNoKGUpfSkscn0sZ29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nVG9VaW50OEFycmF5PWZ1bmN0aW9uKGUpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoIWdvb2cudXNlckFnZW50LklFfHxnb29nLnVzZXJBZ2VudC5pc1ZlcnNpb25PckhpZ2hlcihcIjEwXCIpLFwiQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5c1wiKTt2YXIgdD1uZXcgVWludDhBcnJheShNYXRoLmNlaWwoMyplLmxlbmd0aC80KSkscj0wO3JldHVybiBnb29nLmNyeXB0LmJhc2U2NC5kZWNvZGVTdHJpbmdJbnRlcm5hbF8oZSxmdW5jdGlvbihlKXt0W3IrK109ZX0pLHQuc3ViYXJyYXkoMCxyKX0sZ29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nSW50ZXJuYWxfPWZ1bmN0aW9uKG8sZSl7ZnVuY3Rpb24gdChlKXtmb3IoO3M8by5sZW5ndGg7KXt2YXIgdD1vLmNoYXJBdChzKyspLHI9Z29vZy5jcnlwdC5iYXNlNjQuY2hhclRvQnl0ZU1hcF9bdF07aWYobnVsbCE9cilyZXR1cm4gcjtpZighZ29vZy5zdHJpbmcuaXNFbXB0eU9yV2hpdGVzcGFjZSh0KSl0aHJvdyBFcnJvcihcIlVua25vd24gYmFzZTY0IGVuY29kaW5nIGF0IGNoYXI6IFwiK3QpfXJldHVybiBlfWdvb2cuY3J5cHQuYmFzZTY0LmluaXRfKCk7Zm9yKHZhciBzPTA7Oyl7dmFyIHI9dCgtMSksaT10KDApLGE9dCg2NCksbj10KDY0KTtpZig2ND09PW4mJi0xPT09cilicmVhaztlKHI8PDJ8aT4+NCksNjQhPWEmJihlKGk8PDQmMjQwfGE+PjIpLDY0IT1uJiZlKGE8PDYmMTkyfG4pKX19LGdvb2cuY3J5cHQuYmFzZTY0LmluaXRfPWZ1bmN0aW9uKCl7aWYoIWdvb2cuY3J5cHQuYmFzZTY0LmJ5dGVUb0NoYXJNYXBfKXtnb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwXz17fSxnb29nLmNyeXB0LmJhc2U2NC5jaGFyVG9CeXRlTWFwXz17fSxnb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwV2ViU2FmZV89e307Zm9yKHZhciBlPTA7ZTxnb29nLmNyeXB0LmJhc2U2NC5FTkNPREVEX1ZBTFMubGVuZ3RoO2UrKylnb29nLmNyeXB0LmJhc2U2NC5ieXRlVG9DaGFyTWFwX1tlXT1nb29nLmNyeXB0LmJhc2U2NC5FTkNPREVEX1ZBTFMuY2hhckF0KGUpLGdvb2cuY3J5cHQuYmFzZTY0LmNoYXJUb0J5dGVNYXBfW2dvb2cuY3J5cHQuYmFzZTY0LmJ5dGVUb0NoYXJNYXBfW2VdXT1lLGdvb2cuY3J5cHQuYmFzZTY0LmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tlXT1nb29nLmNyeXB0LmJhc2U2NC5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoZSksZT49Z29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTX0JBU0UubGVuZ3RoJiYoZ29vZy5jcnlwdC5iYXNlNjQuY2hhclRvQnl0ZU1hcF9bZ29vZy5jcnlwdC5iYXNlNjQuRU5DT0RFRF9WQUxTX1dFQlNBRkUuY2hhckF0KGUpXT1lKX19LGpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvPWZ1bmN0aW9uKGUsdCxyLG8scyl7dGhpcy5maWVsZEluZGV4PWUsdGhpcy5maWVsZE5hbWU9dCx0aGlzLmN0b3I9cix0aGlzLnRvT2JqZWN0Rm49byx0aGlzLmlzUmVwZWF0ZWQ9c30sanNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm89ZnVuY3Rpb24oZSx0LHIsbyxzLGkpe3RoaXMuZmllbGRJbmZvPWUsdGhpcy5iaW5hcnlSZWFkZXJGbj10LHRoaXMuYmluYXJ5V3JpdGVyRm49cix0aGlzLmJpbmFyeU1lc3NhZ2VTZXJpYWxpemVGbj1vLHRoaXMuYmluYXJ5TWVzc2FnZURlc2VyaWFsaXplRm49cyx0aGlzLmlzUGFja2VkPWl9LGpzcGIuRXh0ZW5zaW9uRmllbGRJbmZvLnByb3RvdHlwZS5pc01lc3NhZ2VUeXBlPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmN0b3J9LGpzcGIuTWVzc2FnZT1mdW5jdGlvbigpe30sanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVD0hMCxqc3BiLk1lc3NhZ2UuR0VORVJBVEVfRlJPTV9PQkpFQ1Q9IWdvb2cuRElTQUxMT1dfVEVTVF9PTkxZX0NPREUsanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX1NUUklORz0hMCxqc3BiLk1lc3NhZ2UuQVNTVU1FX0xPQ0FMX0FSUkFZUz0hMSxqc3BiLk1lc3NhZ2UuU0VSSUFMSVpFX0VNUFRZX1RSQUlMSU5HX0ZJRUxEUz0hMCxqc3BiLk1lc3NhZ2UuU1VQUE9SVFNfVUlOVDhBUlJBWV89XCJmdW5jdGlvblwiPT10eXBlb2YgVWludDhBcnJheSxqc3BiLk1lc3NhZ2UucHJvdG90eXBlLmdldEpzUGJNZXNzYWdlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tZXNzYWdlSWRffSxqc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQrZS5hcnJheUluZGV4T2Zmc2V0X30sanNwYi5NZXNzYWdlLmdldEZpZWxkTnVtYmVyXz1mdW5jdGlvbihlLHQpe3JldHVybiB0LWUuYXJyYXlJbmRleE9mZnNldF99LGpzcGIuTWVzc2FnZS5pbml0aWFsaXplPWZ1bmN0aW9uKGUsdCxyLG8scyxpKXtpZihlLndyYXBwZXJzXz1udWxsLHR8fCh0PXI/W3JdOltdKSxlLm1lc3NhZ2VJZF89cj9TdHJpbmcocik6dm9pZCAwLGUuYXJyYXlJbmRleE9mZnNldF89MD09PXI/LTE6MCxlLmFycmF5PXQsanNwYi5NZXNzYWdlLmluaXRQaXZvdEFuZEV4dGVuc2lvbk9iamVjdF8oZSxvKSxlLmNvbnZlcnRlZEZsb2F0aW5nUG9pbnRGaWVsZHNfPXt9LGpzcGIuTWVzc2FnZS5TRVJJQUxJWkVfRU1QVFlfVFJBSUxJTkdfRklFTERTfHwoZS5yZXBlYXRlZEZpZWxkcz1zKSxzKWZvcih0PTA7dDxzLmxlbmd0aDt0KyspKHI9c1t0XSk8ZS5waXZvdF8/KHI9anNwYi5NZXNzYWdlLmdldEluZGV4XyhlLHIpLGUuYXJyYXlbcl09ZS5hcnJheVtyXXx8anNwYi5NZXNzYWdlLkVNUFRZX0xJU1RfU0VOVElORUxfKTooanNwYi5NZXNzYWdlLm1heWJlSW5pdEVtcHR5RXh0ZW5zaW9uT2JqZWN0XyhlKSxlLmV4dGVuc2lvbk9iamVjdF9bcl09ZS5leHRlbnNpb25PYmplY3RfW3JdfHxqc3BiLk1lc3NhZ2UuRU1QVFlfTElTVF9TRU5USU5FTF8pO2lmKGkmJmkubGVuZ3RoKWZvcih0PTA7dDxpLmxlbmd0aDt0KyspanNwYi5NZXNzYWdlLmNvbXB1dGVPbmVvZkNhc2UoZSxpW3RdKX0sanNwYi5NZXNzYWdlLkVNUFRZX0xJU1RfU0VOVElORUxfPWdvb2cuREVCVUcmJk9iamVjdC5mcmVlemU/T2JqZWN0LmZyZWV6ZShbXSk6W10sanNwYi5NZXNzYWdlLmlzQXJyYXlfPWZ1bmN0aW9uKGUpe3JldHVybiBqc3BiLk1lc3NhZ2UuQVNTVU1FX0xPQ0FMX0FSUkFZUz9lIGluc3RhbmNlb2YgQXJyYXk6Z29vZy5pc0FycmF5KGUpfSxqc3BiLk1lc3NhZ2UuaW5pdFBpdm90QW5kRXh0ZW5zaW9uT2JqZWN0Xz1mdW5jdGlvbihlLHQpe2lmKGUuYXJyYXkubGVuZ3RoKXt2YXIgcj1lLmFycmF5Lmxlbmd0aC0xLG89ZS5hcnJheVtyXTtpZihvJiZcIm9iamVjdFwiPT10eXBlb2YgbyYmIWpzcGIuTWVzc2FnZS5pc0FycmF5XyhvKSYmIShqc3BiLk1lc3NhZ2UuU1VQUE9SVFNfVUlOVDhBUlJBWV8mJm8gaW5zdGFuY2VvZiBVaW50OEFycmF5KSlyZXR1cm4gZS5waXZvdF89anNwYi5NZXNzYWdlLmdldEZpZWxkTnVtYmVyXyhlLHIpLHZvaWQoZS5leHRlbnNpb25PYmplY3RfPW8pfS0xPHQ/KGUucGl2b3RfPXQsZS5leHRlbnNpb25PYmplY3RfPW51bGwpOmUucGl2b3RfPU51bWJlci5NQVhfVkFMVUV9LGpzcGIuTWVzc2FnZS5tYXliZUluaXRFbXB0eUV4dGVuc2lvbk9iamVjdF89ZnVuY3Rpb24oZSl7dmFyIHQ9anNwYi5NZXNzYWdlLmdldEluZGV4XyhlLGUucGl2b3RfKTtlLmFycmF5W3RdfHwoZS5leHRlbnNpb25PYmplY3RfPWUuYXJyYXlbdF09e30pfSxqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0PWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG89W10scz0wO3M8ZS5sZW5ndGg7cysrKW9bc109dC5jYWxsKGVbc10scixlW3NdKTtyZXR1cm4gb30sanNwYi5NZXNzYWdlLnRvT2JqZWN0RXh0ZW5zaW9uPWZ1bmN0aW9uKGUsdCxyLG8scyl7Zm9yKHZhciBpIGluIHIpe3ZhciBhPXJbaV0sbj1vLmNhbGwoZSxhKTtpZihudWxsIT1uKXtmb3IodmFyIHAgaW4gYS5maWVsZE5hbWUpaWYoYS5maWVsZE5hbWUuaGFzT3duUHJvcGVydHkocCkpYnJlYWs7dFtwXT1hLnRvT2JqZWN0Rm4/YS5pc1JlcGVhdGVkP2pzcGIuTWVzc2FnZS50b09iamVjdExpc3QobixhLnRvT2JqZWN0Rm4scyk6YS50b09iamVjdEZuKHMsbik6bn19fSxqc3BiLk1lc3NhZ2Uuc2VyaWFsaXplQmluYXJ5RXh0ZW5zaW9ucz1mdW5jdGlvbihlLHQscixvKXtmb3IodmFyIHMgaW4gcil7dmFyIGk9cltzXSxhPWkuZmllbGRJbmZvO2lmKCFpLmJpbmFyeVdyaXRlckZuKXRocm93IEVycm9yKFwiTWVzc2FnZSBleHRlbnNpb24gcHJlc2VudCB0aGF0IHdhcyBnZW5lcmF0ZWQgd2l0aG91dCBiaW5hcnkgc2VyaWFsaXphdGlvbiBzdXBwb3J0XCIpO3ZhciBuPW8uY2FsbChlLGEpO2lmKG51bGwhPW4paWYoYS5pc01lc3NhZ2VUeXBlKCkpe2lmKCFpLmJpbmFyeU1lc3NhZ2VTZXJpYWxpemVGbil0aHJvdyBFcnJvcihcIk1lc3NhZ2UgZXh0ZW5zaW9uIHByZXNlbnQgaG9sZGluZyBzdWJtZXNzYWdlIHdpdGhvdXQgYmluYXJ5IHN1cHBvcnQgZW5hYmxlZCwgYW5kIG1lc3NhZ2UgaXMgYmVpbmcgc2VyaWFsaXplZCB0byBiaW5hcnkgZm9ybWF0XCIpO2kuYmluYXJ5V3JpdGVyRm4uY2FsbCh0LGEuZmllbGRJbmRleCxuLGkuYmluYXJ5TWVzc2FnZVNlcmlhbGl6ZUZuKX1lbHNlIGkuYmluYXJ5V3JpdGVyRm4uY2FsbCh0LGEuZmllbGRJbmRleCxuKX19LGpzcGIuTWVzc2FnZS5yZWFkQmluYXJ5RXh0ZW5zaW9uPWZ1bmN0aW9uKGUsdCxyLG8scyl7dmFyIGk9clt0LmdldEZpZWxkTnVtYmVyKCldO2lmKGkpe2lmKHI9aS5maWVsZEluZm8sIWkuYmluYXJ5UmVhZGVyRm4pdGhyb3cgRXJyb3IoXCJEZXNlcmlhbGl6aW5nIGV4dGVuc2lvbiB3aG9zZSBnZW5lcmF0ZWQgY29kZSBkb2VzIG5vdCBzdXBwb3J0IGJpbmFyeSBmb3JtYXRcIik7dmFyIGE7ci5pc01lc3NhZ2VUeXBlKCk/KGE9bmV3IHIuY3RvcixpLmJpbmFyeVJlYWRlckZuLmNhbGwodCxhLGkuYmluYXJ5TWVzc2FnZURlc2VyaWFsaXplRm4pKTphPWkuYmluYXJ5UmVhZGVyRm4uY2FsbCh0KSxyLmlzUmVwZWF0ZWQmJiFpLmlzUGFja2VkPyh0PW8uY2FsbChlLHIpKT90LnB1c2goYSk6cy5jYWxsKGUscixbYV0pOnMuY2FsbChlLHIsYSl9ZWxzZSB0LnNraXBGaWVsZCgpfSxqc3BiLk1lc3NhZ2UuZ2V0RmllbGQ9ZnVuY3Rpb24oZSx0KXtpZih0PGUucGl2b3RfKXt2YXIgcj1qc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfKGUsdCksbz1lLmFycmF5W3JdO3JldHVybiBvPT09anNwYi5NZXNzYWdlLkVNUFRZX0xJU1RfU0VOVElORUxfP2UuYXJyYXlbcl09W106b31pZihlLmV4dGVuc2lvbk9iamVjdF8pcmV0dXJuKG89ZS5leHRlbnNpb25PYmplY3RfW3RdKT09PWpzcGIuTWVzc2FnZS5FTVBUWV9MSVNUX1NFTlRJTkVMXz9lLmV4dGVuc2lvbk9iamVjdF9bdF09W106b30sanNwYi5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQ9ZnVuY3Rpb24oZSx0KXtpZih0PGUucGl2b3RfKXt2YXIgcj1qc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfKGUsdCksbz1lLmFycmF5W3JdO3JldHVybiBvPT09anNwYi5NZXNzYWdlLkVNUFRZX0xJU1RfU0VOVElORUxfP2UuYXJyYXlbcl09W106b31yZXR1cm4obz1lLmV4dGVuc2lvbk9iamVjdF9bdF0pPT09anNwYi5NZXNzYWdlLkVNUFRZX0xJU1RfU0VOVElORUxfP2UuZXh0ZW5zaW9uT2JqZWN0X1t0XT1bXTpvfSxqc3BiLk1lc3NhZ2UuZ2V0T3B0aW9uYWxGbG9hdGluZ1BvaW50RmllbGQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1qc3BiLk1lc3NhZ2UuZ2V0RmllbGQoZSx0KTtyZXR1cm4gbnVsbD09cj9yOityfSxqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGbG9hdGluZ1BvaW50RmllbGQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1qc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChlLHQpO2lmKGUuY29udmVydGVkRmxvYXRpbmdQb2ludEZpZWxkc198fChlLmNvbnZlcnRlZEZsb2F0aW5nUG9pbnRGaWVsZHNfPXt9KSwhZS5jb252ZXJ0ZWRGbG9hdGluZ1BvaW50RmllbGRzX1t0XSl7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcltvXT0rcltvXTtlLmNvbnZlcnRlZEZsb2F0aW5nUG9pbnRGaWVsZHNfW3RdPSEwfXJldHVybiByfSxqc3BiLk1lc3NhZ2UuYnl0ZXNBc0I2ND1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZXx8Z29vZy5pc1N0cmluZyhlKT9lOmpzcGIuTWVzc2FnZS5TVVBQT1JUU19VSU5UOEFSUkFZXyYmZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/Z29vZy5jcnlwdC5iYXNlNjQuZW5jb2RlQnl0ZUFycmF5KGUpOihnb29nLmFzc2VydHMuZmFpbChcIkNhbm5vdCBjb2VyY2UgdG8gYjY0IHN0cmluZzogXCIrZ29vZy50eXBlT2YoZSkpLG51bGwpfSxqc3BiLk1lc3NhZ2UuYnl0ZXNBc1U4PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lfHxlIGluc3RhbmNlb2YgVWludDhBcnJheT9lOmdvb2cuaXNTdHJpbmcoZSk/Z29vZy5jcnlwdC5iYXNlNjQuZGVjb2RlU3RyaW5nVG9VaW50OEFycmF5KGUpOihnb29nLmFzc2VydHMuZmFpbChcIkNhbm5vdCBjb2VyY2UgdG8gVWludDhBcnJheTogXCIrZ29vZy50eXBlT2YoZSkpLG51bGwpfSxqc3BiLk1lc3NhZ2UuYnl0ZXNMaXN0QXNCNjQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGpzcGIuTWVzc2FnZS5hc3NlcnRDb25zaXN0ZW50VHlwZXNfKGUpLCFlLmxlbmd0aHx8Z29vZy5pc1N0cmluZyhlWzBdKT9lOmdvb2cuYXJyYXkubWFwKGUsanNwYi5NZXNzYWdlLmJ5dGVzQXNCNjQpfSxqc3BiLk1lc3NhZ2UuYnl0ZXNMaXN0QXNVOD1mdW5jdGlvbihlKXtyZXR1cm4ganNwYi5NZXNzYWdlLmFzc2VydENvbnNpc3RlbnRUeXBlc18oZSksIWUubGVuZ3RofHxlWzBdaW5zdGFuY2VvZiBVaW50OEFycmF5P2U6Z29vZy5hcnJheS5tYXAoZSxqc3BiLk1lc3NhZ2UuYnl0ZXNBc1U4KX0sanNwYi5NZXNzYWdlLmFzc2VydENvbnNpc3RlbnRUeXBlc189ZnVuY3Rpb24oZSl7aWYoZ29vZy5ERUJVRyYmZSYmMTxlLmxlbmd0aCl7dmFyIHQ9Z29vZy50eXBlT2YoZVswXSk7Z29vZy5hcnJheS5mb3JFYWNoKGUsZnVuY3Rpb24oZSl7Z29vZy50eXBlT2YoZSkhPXQmJmdvb2cuYXNzZXJ0cy5mYWlsKFwiSW5jb25zaXN0ZW50IHR5cGUgaW4gSlNQQiByZXBlYXRlZCBmaWVsZCBhcnJheS4gR290IFwiK2dvb2cudHlwZU9mKGUpK1wiIGV4cGVjdGVkIFwiK3QpfSl9fSxqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdD1mdW5jdGlvbihlLHQscil7cmV0dXJuIG51bGw9PShlPWpzcGIuTWVzc2FnZS5nZXRGaWVsZChlLHQpKT9yOmV9LGpzcGIuTWVzc2FnZS5nZXRGaWVsZFByb3RvMz1qc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCxqc3BiLk1lc3NhZ2UuZ2V0TWFwRmllbGQ9ZnVuY3Rpb24oZSx0LHIsbyl7cmV0dXJuIGUud3JhcHBlcnNffHwoZS53cmFwcGVyc189e30pLHQgaW4gZS53cmFwcGVyc18/ZS53cmFwcGVyc19bdF06cj92b2lkIDA6KChyPWpzcGIuTWVzc2FnZS5nZXRGaWVsZChlLHQpKXx8KHI9W10sanNwYi5NZXNzYWdlLnNldEZpZWxkKGUsdCxyKSksZS53cmFwcGVyc19bdF09bmV3IGpzcGIuTWFwKHIsbykpfSxqc3BiLk1lc3NhZ2Uuc2V0RmllbGQ9ZnVuY3Rpb24oZSx0LHIpe3Q8ZS5waXZvdF8/ZS5hcnJheVtqc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfKGUsdCldPXI6KGpzcGIuTWVzc2FnZS5tYXliZUluaXRFbXB0eUV4dGVuc2lvbk9iamVjdF8oZSksZS5leHRlbnNpb25PYmplY3RfW3RdPXIpfSxqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQ9ZnVuY3Rpb24oZSx0LHIpe2pzcGIuTWVzc2FnZS5zZXRGaWVsZElnbm9yaW5nRGVmYXVsdF8oZSx0LHIsMCl9LGpzcGIuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZD1mdW5jdGlvbihlLHQscil7anNwYi5NZXNzYWdlLnNldEZpZWxkSWdub3JpbmdEZWZhdWx0XyhlLHQscixcIjBcIil9LGpzcGIuTWVzc2FnZS5zZXRQcm90bzNGbG9hdEZpZWxkPWZ1bmN0aW9uKGUsdCxyKXtqc3BiLk1lc3NhZ2Uuc2V0RmllbGRJZ25vcmluZ0RlZmF1bHRfKGUsdCxyLDApfSxqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkPWZ1bmN0aW9uKGUsdCxyKXtqc3BiLk1lc3NhZ2Uuc2V0RmllbGRJZ25vcmluZ0RlZmF1bHRfKGUsdCxyLCExKX0sanNwYi5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkPWZ1bmN0aW9uKGUsdCxyKXtqc3BiLk1lc3NhZ2Uuc2V0RmllbGRJZ25vcmluZ0RlZmF1bHRfKGUsdCxyLFwiXCIpfSxqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZD1mdW5jdGlvbihlLHQscil7anNwYi5NZXNzYWdlLnNldEZpZWxkSWdub3JpbmdEZWZhdWx0XyhlLHQscixcIlwiKX0sanNwYi5NZXNzYWdlLnNldFByb3RvM0VudW1GaWVsZD1mdW5jdGlvbihlLHQscil7anNwYi5NZXNzYWdlLnNldEZpZWxkSWdub3JpbmdEZWZhdWx0XyhlLHQsciwwKX0sanNwYi5NZXNzYWdlLnNldEZpZWxkSWdub3JpbmdEZWZhdWx0Xz1mdW5jdGlvbihlLHQscixvKXtyIT1vP2pzcGIuTWVzc2FnZS5zZXRGaWVsZChlLHQscik6ZS5hcnJheVtqc3BiLk1lc3NhZ2UuZ2V0SW5kZXhfKGUsdCldPW51bGx9LGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQ9ZnVuY3Rpb24oZSx0LHIsbyl7ZT1qc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChlLHQpLG51bGwhPW8/ZS5zcGxpY2UobywwLHIpOmUucHVzaChyKX0sanNwYi5NZXNzYWdlLnNldE9uZW9mRmllbGQ9ZnVuY3Rpb24oZSx0LHIsbyl7KHI9anNwYi5NZXNzYWdlLmNvbXB1dGVPbmVvZkNhc2UoZSxyKSkmJnIhPT10JiZ2b2lkIDAhPT1vJiYoZS53cmFwcGVyc18mJnIgaW4gZS53cmFwcGVyc18mJihlLndyYXBwZXJzX1tyXT12b2lkIDApLGpzcGIuTWVzc2FnZS5zZXRGaWVsZChlLHIsdm9pZCAwKSksanNwYi5NZXNzYWdlLnNldEZpZWxkKGUsdCxvKX0sanNwYi5NZXNzYWdlLmNvbXB1dGVPbmVvZkNhc2U9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsbyxzPTA7czx0Lmxlbmd0aDtzKyspe3ZhciBpPXRbc10sYT1qc3BiLk1lc3NhZ2UuZ2V0RmllbGQoZSxpKTtudWxsIT1hJiYocj1pLG89YSxqc3BiLk1lc3NhZ2Uuc2V0RmllbGQoZSxpLHZvaWQgMCkpfXJldHVybiByPyhqc3BiLk1lc3NhZ2Uuc2V0RmllbGQoZSxyLG8pLHIpOjB9LGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQ9ZnVuY3Rpb24oZSx0LHIsbyl7aWYoZS53cmFwcGVyc198fChlLndyYXBwZXJzXz17fSksIWUud3JhcHBlcnNfW3JdKXt2YXIgcz1qc3BiLk1lc3NhZ2UuZ2V0RmllbGQoZSxyKTsob3x8cykmJihlLndyYXBwZXJzX1tyXT1uZXcgdChzKSl9cmV0dXJuIGUud3JhcHBlcnNfW3JdfSxqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQ9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBqc3BiLk1lc3NhZ2Uud3JhcFJlcGVhdGVkRmllbGRfKGUsdCxyKSwodD1lLndyYXBwZXJzX1tyXSk9PWpzcGIuTWVzc2FnZS5FTVBUWV9MSVNUX1NFTlRJTkVMXyYmKHQ9ZS53cmFwcGVyc19bcl09W10pLHR9LGpzcGIuTWVzc2FnZS53cmFwUmVwZWF0ZWRGaWVsZF89ZnVuY3Rpb24oZSx0LHIpe2lmKGUud3JhcHBlcnNffHwoZS53cmFwcGVyc189e30pLCFlLndyYXBwZXJzX1tyXSl7Zm9yKHZhciBvPWpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKGUscikscz1bXSxpPTA7aTxvLmxlbmd0aDtpKyspc1tpXT1uZXcgdChvW2ldKTtlLndyYXBwZXJzX1tyXT1zfX0sanNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZD1mdW5jdGlvbihlLHQscil7ZS53cmFwcGVyc198fChlLndyYXBwZXJzXz17fSk7dmFyIG89cj9yLnRvQXJyYXkoKTpyO2Uud3JhcHBlcnNfW3RdPXIsanNwYi5NZXNzYWdlLnNldEZpZWxkKGUsdCxvKX0sanNwYi5NZXNzYWdlLnNldE9uZW9mV3JhcHBlckZpZWxkPWZ1bmN0aW9uKGUsdCxyLG8pe2Uud3JhcHBlcnNffHwoZS53cmFwcGVyc189e30pO3ZhciBzPW8/by50b0FycmF5KCk6bztlLndyYXBwZXJzX1t0XT1vLGpzcGIuTWVzc2FnZS5zZXRPbmVvZkZpZWxkKGUsdCxyLHMpfSxqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQ9ZnVuY3Rpb24oZSx0LHIpe2Uud3JhcHBlcnNffHwoZS53cmFwcGVyc189e30pLHI9cnx8W107Zm9yKHZhciBvPVtdLHM9MDtzPHIubGVuZ3RoO3MrKylvW3NdPXJbc10udG9BcnJheSgpO2Uud3JhcHBlcnNfW3RdPXIsanNwYi5NZXNzYWdlLnNldEZpZWxkKGUsdCxvKX0sanNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQ9ZnVuY3Rpb24oZSx0LHIsbyxzKXtqc3BiLk1lc3NhZ2Uud3JhcFJlcGVhdGVkRmllbGRfKGUsbyx0KTt2YXIgaT1lLndyYXBwZXJzX1t0XTtyZXR1cm4gaXx8KGk9ZS53cmFwcGVyc19bdF09W10pLHI9cnx8bmV3IG8sZT1qc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZChlLHQpLG51bGwhPXM/KGkuc3BsaWNlKHMsMCxyKSxlLnNwbGljZShzLDAsci50b0FycmF5KCkpKTooaS5wdXNoKHIpLGUucHVzaChyLnRvQXJyYXkoKSkpLHJ9LGpzcGIuTWVzc2FnZS50b01hcD1mdW5jdGlvbihlLHQscixvKXtmb3IodmFyIHM9e30saT0wO2k8ZS5sZW5ndGg7aSsrKXNbdC5jYWxsKGVbaV0pXT1yP3IuY2FsbChlW2ldLG8sZVtpXSk6ZVtpXTtyZXR1cm4gc30sanNwYi5NZXNzYWdlLnByb3RvdHlwZS5zeW5jTWFwRmllbGRzXz1mdW5jdGlvbigpe2lmKHRoaXMud3JhcHBlcnNfKWZvcih2YXIgZSBpbiB0aGlzLndyYXBwZXJzXyl7dmFyIHQ9dGhpcy53cmFwcGVyc19bZV07aWYoZ29vZy5pc0FycmF5KHQpKWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRbcl0mJnRbcl0udG9BcnJheSgpO2Vsc2UgdCYmdC50b0FycmF5KCl9fSxqc3BiLk1lc3NhZ2UucHJvdG90eXBlLnRvQXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zeW5jTWFwRmllbGRzXygpLHRoaXMuYXJyYXl9LGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19TVFJJTkcmJihqc3BiLk1lc3NhZ2UucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3luY01hcEZpZWxkc18oKSx0aGlzLmFycmF5LnRvU3RyaW5nKCl9KSxqc3BiLk1lc3NhZ2UucHJvdG90eXBlLmdldEV4dGVuc2lvbj1mdW5jdGlvbih0KXtpZih0aGlzLmV4dGVuc2lvbk9iamVjdF8pe3RoaXMud3JhcHBlcnNffHwodGhpcy53cmFwcGVyc189e30pO3ZhciBlPXQuZmllbGRJbmRleDtpZih0LmlzUmVwZWF0ZWQpe2lmKHQuaXNNZXNzYWdlVHlwZSgpKXJldHVybiB0aGlzLndyYXBwZXJzX1tlXXx8KHRoaXMud3JhcHBlcnNfW2VdPWdvb2cuYXJyYXkubWFwKHRoaXMuZXh0ZW5zaW9uT2JqZWN0X1tlXXx8W10sZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyB0LmN0b3IoZSl9KSksdGhpcy53cmFwcGVyc19bZV19ZWxzZSBpZih0LmlzTWVzc2FnZVR5cGUoKSlyZXR1cm4hdGhpcy53cmFwcGVyc19bZV0mJnRoaXMuZXh0ZW5zaW9uT2JqZWN0X1tlXSYmKHRoaXMud3JhcHBlcnNfW2VdPW5ldyB0LmN0b3IodGhpcy5leHRlbnNpb25PYmplY3RfW2VdKSksdGhpcy53cmFwcGVyc19bZV07cmV0dXJuIHRoaXMuZXh0ZW5zaW9uT2JqZWN0X1tlXX19LGpzcGIuTWVzc2FnZS5wcm90b3R5cGUuc2V0RXh0ZW5zaW9uPWZ1bmN0aW9uKGUsdCl7dGhpcy53cmFwcGVyc198fCh0aGlzLndyYXBwZXJzXz17fSksanNwYi5NZXNzYWdlLm1heWJlSW5pdEVtcHR5RXh0ZW5zaW9uT2JqZWN0Xyh0aGlzKTt2YXIgcj1lLmZpZWxkSW5kZXg7cmV0dXJuIGUuaXNSZXBlYXRlZD8odD10fHxbXSxlLmlzTWVzc2FnZVR5cGUoKT8odGhpcy53cmFwcGVyc19bcl09dCx0aGlzLmV4dGVuc2lvbk9iamVjdF9bcl09Z29vZy5hcnJheS5tYXAodCxmdW5jdGlvbihlKXtyZXR1cm4gZS50b0FycmF5KCl9KSk6dGhpcy5leHRlbnNpb25PYmplY3RfW3JdPXQpOmUuaXNNZXNzYWdlVHlwZSgpPyh0aGlzLndyYXBwZXJzX1tyXT10LHRoaXMuZXh0ZW5zaW9uT2JqZWN0X1tyXT10P3QudG9BcnJheSgpOnQpOnRoaXMuZXh0ZW5zaW9uT2JqZWN0X1tyXT10LHRoaXN9LGpzcGIuTWVzc2FnZS5kaWZmZXJlbmNlPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdC5jb25zdHJ1Y3RvcikpdGhyb3cgRXJyb3IoXCJNZXNzYWdlcyBoYXZlIGRpZmZlcmVudCB0eXBlcy5cIik7dmFyIHI9ZS50b0FycmF5KCksbz10LnRvQXJyYXkoKSxzPVtdLGk9MCxhPXIubGVuZ3RoPm8ubGVuZ3RoP3IubGVuZ3RoOm8ubGVuZ3RoO2ZvcihlLmdldEpzUGJNZXNzYWdlSWQoKSYmKHNbMF09ZS5nZXRKc1BiTWVzc2FnZUlkKCksaT0xKTtpPGE7aSsrKWpzcGIuTWVzc2FnZS5jb21wYXJlRmllbGRzKHJbaV0sb1tpXSl8fChzW2ldPW9baV0pO3JldHVybiBuZXcgZS5jb25zdHJ1Y3RvcihzKX0sanNwYi5NZXNzYWdlLmVxdWFscz1mdW5jdGlvbihlLHQpe3JldHVybiBlPT10fHwhKCFlfHwhdCkmJmUgaW5zdGFuY2VvZiB0LmNvbnN0cnVjdG9yJiZqc3BiLk1lc3NhZ2UuY29tcGFyZUZpZWxkcyhlLnRvQXJyYXkoKSx0LnRvQXJyYXkoKSl9LGpzcGIuTWVzc2FnZS5jb21wYXJlRXh0ZW5zaW9ucz1mdW5jdGlvbihlLHQpe2U9ZXx8e30sdD10fHx7fTt2YXIgcixvPXt9O2ZvcihyIGluIGUpb1tyXT0wO2ZvcihyIGluIHQpb1tyXT0wO2ZvcihyIGluIG8paWYoIWpzcGIuTWVzc2FnZS5jb21wYXJlRmllbGRzKGVbcl0sdFtyXSkpcmV0dXJuITE7cmV0dXJuITB9LGpzcGIuTWVzc2FnZS5jb21wYXJlRmllbGRzPWZ1bmN0aW9uKGUsdCl7aWYoZT09dClyZXR1cm4hMDtpZighZ29vZy5pc09iamVjdChlKXx8IWdvb2cuaXNPYmplY3QodCkpcmV0dXJuISEoZ29vZy5pc051bWJlcihlKSYmaXNOYU4oZSl8fGdvb2cuaXNOdW1iZXIodCkmJmlzTmFOKHQpKSYmU3RyaW5nKGUpPT1TdHJpbmcodCk7aWYoZS5jb25zdHJ1Y3RvciE9dC5jb25zdHJ1Y3RvcilyZXR1cm4hMTtpZihqc3BiLk1lc3NhZ2UuU1VQUE9SVFNfVUlOVDhBUlJBWV8mJmUuY29uc3RydWN0b3I9PT1VaW50OEFycmF5KXtpZihlLmxlbmd0aCE9dC5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspaWYoZVtyXSE9dFtyXSlyZXR1cm4hMTtyZXR1cm4hMH1pZihlLmNvbnN0cnVjdG9yPT09QXJyYXkpe3ZhciBvPXZvaWQgMCxzPXZvaWQgMCxpPU1hdGgubWF4KGUubGVuZ3RoLHQubGVuZ3RoKTtmb3Iocj0wO3I8aTtyKyspe3ZhciBhPWVbcl0sbj10W3JdO2lmKGEmJmEuY29uc3RydWN0b3I9PU9iamVjdCYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQodm9pZCAwPT09byksZ29vZy5hc3NlcnRzLmFzc2VydChyPT09ZS5sZW5ndGgtMSksbz1hLGE9dm9pZCAwKSxuJiZuLmNvbnN0cnVjdG9yPT1PYmplY3QmJihnb29nLmFzc2VydHMuYXNzZXJ0KHZvaWQgMD09PXMpLGdvb2cuYXNzZXJ0cy5hc3NlcnQocj09PXQubGVuZ3RoLTEpLHM9bixuPXZvaWQgMCksIWpzcGIuTWVzc2FnZS5jb21wYXJlRmllbGRzKGEsbikpcmV0dXJuITF9cmV0dXJuIW8mJiFzfHwobz1vfHx7fSxzPXN8fHt9LGpzcGIuTWVzc2FnZS5jb21wYXJlRXh0ZW5zaW9ucyhvLHMpKX1pZihlLmNvbnN0cnVjdG9yPT09T2JqZWN0KXJldHVybiBqc3BiLk1lc3NhZ2UuY29tcGFyZUV4dGVuc2lvbnMoZSx0KTt0aHJvdyBFcnJvcihcIkludmFsaWQgdHlwZSBpbiBKU1BCIGFycmF5XCIpfSxqc3BiLk1lc3NhZ2UucHJvdG90eXBlLmNsb25lTWVzc2FnZT1mdW5jdGlvbigpe3JldHVybiBqc3BiLk1lc3NhZ2UuY2xvbmVNZXNzYWdlKHRoaXMpfSxqc3BiLk1lc3NhZ2UucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuTWVzc2FnZS5jbG9uZU1lc3NhZ2UodGhpcyl9LGpzcGIuTWVzc2FnZS5jbG9uZT1mdW5jdGlvbihlKXtyZXR1cm4ganNwYi5NZXNzYWdlLmNsb25lTWVzc2FnZShlKX0sanNwYi5NZXNzYWdlLmNsb25lTWVzc2FnZT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGUuY29uc3RydWN0b3IoanNwYi5NZXNzYWdlLmNsb25lXyhlLnRvQXJyYXkoKSkpfSxqc3BiLk1lc3NhZ2UuY29weUludG89ZnVuY3Rpb24oZSx0KXtnb29nLmFzc2VydHMuYXNzZXJ0SW5zdGFuY2VvZihlLGpzcGIuTWVzc2FnZSksZ29vZy5hc3NlcnRzLmFzc2VydEluc3RhbmNlb2YodCxqc3BiLk1lc3NhZ2UpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoZS5jb25zdHJ1Y3Rvcj09dC5jb25zdHJ1Y3RvcixcIkNvcHkgc291cmNlIGFuZCB0YXJnZXQgbWVzc2FnZSBzaG91bGQgaGF2ZSB0aGUgc2FtZSB0eXBlLlwiKTtmb3IodmFyIHI9anNwYi5NZXNzYWdlLmNsb25lKGUpLG89dC50b0FycmF5KCkscz1yLnRvQXJyYXkoKSxpPW8ubGVuZ3RoPTA7aTxzLmxlbmd0aDtpKyspb1tpXT1zW2ldO3Qud3JhcHBlcnNfPXIud3JhcHBlcnNfLHQuZXh0ZW5zaW9uT2JqZWN0Xz1yLmV4dGVuc2lvbk9iamVjdF99LGpzcGIuTWVzc2FnZS5jbG9uZV89ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoZ29vZy5pc0FycmF5KGUpKXtmb3IodmFyIHI9QXJyYXkoZS5sZW5ndGgpLG89MDtvPGUubGVuZ3RoO28rKyludWxsIT0odD1lW29dKSYmKHJbb109XCJvYmplY3RcIj09dHlwZW9mIHQ/anNwYi5NZXNzYWdlLmNsb25lXyhnb29nLmFzc2VydHMuYXNzZXJ0KHQpKTp0KTtyZXR1cm4gcn1pZihqc3BiLk1lc3NhZ2UuU1VQUE9SVFNfVUlOVDhBUlJBWV8mJmUgaW5zdGFuY2VvZiBVaW50OEFycmF5KXJldHVybiBuZXcgVWludDhBcnJheShlKTtmb3IobyBpbiByPXt9LGUpbnVsbCE9KHQ9ZVtvXSkmJihyW29dPVwib2JqZWN0XCI9PXR5cGVvZiB0P2pzcGIuTWVzc2FnZS5jbG9uZV8oZ29vZy5hc3NlcnRzLmFzc2VydCh0KSk6dCk7cmV0dXJuIHJ9LGpzcGIuTWVzc2FnZS5yZWdpc3Rlck1lc3NhZ2VUeXBlPWZ1bmN0aW9uKGUsdCl7KGpzcGIuTWVzc2FnZS5yZWdpc3RyeV9bZV09dCkubWVzc2FnZUlkPWV9LGpzcGIuTWVzc2FnZS5yZWdpc3RyeV89e30sanNwYi5NZXNzYWdlLm1lc3NhZ2VTZXRFeHRlbnNpb25zPXt9LGpzcGIuTWVzc2FnZS5tZXNzYWdlU2V0RXh0ZW5zaW9uc0JpbmFyeT17fSxqc3BiLmFyaXRoPXt9LGpzcGIuYXJpdGguVUludDY0PWZ1bmN0aW9uKGUsdCl7dGhpcy5sbz1lLHRoaXMuaGk9dH0sanNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmNtcD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5oaTxlLmhpfHx0aGlzLmhpPT1lLmhpJiZ0aGlzLmxvPGUubG8/LTE6dGhpcy5oaT09ZS5oaSYmdGhpcy5sbz09ZS5sbz8wOjF9LGpzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS5yaWdodFNoaWZ0PWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLlVJbnQ2NCgodGhpcy5sbz4+PjF8KDEmdGhpcy5oaSk8PDMxKT4+PjAsdGhpcy5oaT4+PjE+Pj4wKX0sanNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmxlZnRTaGlmdD1mdW5jdGlvbigpe3JldHVybiBuZXcganNwYi5hcml0aC5VSW50NjQodGhpcy5sbzw8MT4+PjAsKHRoaXMuaGk8PDF8dGhpcy5sbz4+PjMxKT4+PjApfSxqc3BiLmFyaXRoLlVJbnQ2NC5wcm90b3R5cGUubXNiPWZ1bmN0aW9uKCl7cmV0dXJuISEoMjE0NzQ4MzY0OCZ0aGlzLmhpKX0sanNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmxzYj1mdW5jdGlvbigpe3JldHVybiEhKDEmdGhpcy5sbyl9LGpzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS56ZXJvPWZ1bmN0aW9uKCl7cmV0dXJuIDA9PXRoaXMubG8mJjA9PXRoaXMuaGl9LGpzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLlVJbnQ2NCgodGhpcy5sbytlLmxvJjQyOTQ5NjcyOTUpPj4+MD4+PjAsKCh0aGlzLmhpK2UuaGkmNDI5NDk2NzI5NSk+Pj4wKSsoNDI5NDk2NzI5Njw9dGhpcy5sbytlLmxvPzE6MCk+Pj4wKX0sanNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLnN1Yj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGpzcGIuYXJpdGguVUludDY0KCh0aGlzLmxvLWUubG8mNDI5NDk2NzI5NSk+Pj4wPj4+MCwoKHRoaXMuaGktZS5oaSY0Mjk0OTY3Mjk1KT4+PjApLSh0aGlzLmxvLWUubG88MD8xOjApPj4+MCl9LGpzcGIuYXJpdGguVUludDY0Lm11bDMyeDMyPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPWU+Pj4xNixvPTY1NTM1JnQscz10Pj4+MTYsaT0oYT02NTUzNSZlKSpvKzY1NTM2KihhKnMmNjU1MzUpKzY1NTM2KihyKm8mNjU1MzUpLGE9cipzKyhhKnM+Pj4xNikrKHIqbz4+PjE2KTs0Mjk0OTY3Mjk2PD1pOylpLT00Mjk0OTY3Mjk2LGErPTE7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLlVJbnQ2NChpPj4+MCxhPj4+MCl9LGpzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS5tdWw9ZnVuY3Rpb24oZSl7dmFyIHQ9anNwYi5hcml0aC5VSW50NjQubXVsMzJ4MzIodGhpcy5sbyxlKTtyZXR1cm4oZT1qc3BiLmFyaXRoLlVJbnQ2NC5tdWwzMngzMih0aGlzLmhpLGUpKS5oaT1lLmxvLGUubG89MCx0LmFkZChlKX0sanNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmRpdj1mdW5jdGlvbihlKXtpZigwPT1lKXJldHVybltdO3ZhciB0PW5ldyBqc3BiLmFyaXRoLlVJbnQ2NCgwLDApLHI9bmV3IGpzcGIuYXJpdGguVUludDY0KHRoaXMubG8sdGhpcy5oaSk7ZT1uZXcganNwYi5hcml0aC5VSW50NjQoZSwwKTtmb3IodmFyIG89bmV3IGpzcGIuYXJpdGguVUludDY0KDEsMCk7IWUubXNiKCk7KWU9ZS5sZWZ0U2hpZnQoKSxvPW8ubGVmdFNoaWZ0KCk7Zm9yKDshby56ZXJvKCk7KWUuY21wKHIpPD0wJiYodD10LmFkZChvKSxyPXIuc3ViKGUpKSxlPWUucmlnaHRTaGlmdCgpLG89by5yaWdodFNoaWZ0KCk7cmV0dXJuW3Qscl19LGpzcGIuYXJpdGguVUludDY0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe2Zvcih2YXIgZT1cIlwiLHQ9dGhpczshdC56ZXJvKCk7KXt2YXIgcj0odD10LmRpdigxMCkpWzBdO2U9dFsxXS5sbytlLHQ9cn1yZXR1cm5cIlwiPT1lJiYoZT1cIjBcIiksZX0sanNwYi5hcml0aC5VSW50NjQuZnJvbVN0cmluZz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IGpzcGIuYXJpdGguVUludDY0KDAsMCkscj1uZXcganNwYi5hcml0aC5VSW50NjQoMCwwKSxvPTA7bzxlLmxlbmd0aDtvKyspe2lmKGVbb108XCIwXCJ8fFwiOVwiPGVbb10pcmV0dXJuIG51bGw7dmFyIHM9cGFyc2VJbnQoZVtvXSwxMCk7ci5sbz1zLHQ9dC5tdWwoMTApLmFkZChyKX1yZXR1cm4gdH0sanNwYi5hcml0aC5VSW50NjQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBqc3BiLmFyaXRoLlVJbnQ2NCh0aGlzLmxvLHRoaXMuaGkpfSxqc3BiLmFyaXRoLkludDY0PWZ1bmN0aW9uKGUsdCl7dGhpcy5sbz1lLHRoaXMuaGk9dH0sanNwYi5hcml0aC5JbnQ2NC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcganNwYi5hcml0aC5JbnQ2NCgodGhpcy5sbytlLmxvJjQyOTQ5NjcyOTUpPj4+MD4+PjAsKCh0aGlzLmhpK2UuaGkmNDI5NDk2NzI5NSk+Pj4wKSsoNDI5NDk2NzI5Njw9dGhpcy5sbytlLmxvPzE6MCk+Pj4wKX0sanNwYi5hcml0aC5JbnQ2NC5wcm90b3R5cGUuc3ViPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcganNwYi5hcml0aC5JbnQ2NCgodGhpcy5sby1lLmxvJjQyOTQ5NjcyOTUpPj4+MD4+PjAsKCh0aGlzLmhpLWUuaGkmNDI5NDk2NzI5NSk+Pj4wKS0odGhpcy5sby1lLmxvPDA/MTowKT4+PjApfSxqc3BiLmFyaXRoLkludDY0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcganNwYi5hcml0aC5JbnQ2NCh0aGlzLmxvLHRoaXMuaGkpfSxqc3BiLmFyaXRoLkludDY0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPTAhPSgyMTQ3NDgzNjQ4JnRoaXMuaGkpLHQ9bmV3IGpzcGIuYXJpdGguVUludDY0KHRoaXMubG8sdGhpcy5oaSk7cmV0dXJuIGUmJih0PW5ldyBqc3BiLmFyaXRoLlVJbnQ2NCgwLDApLnN1Yih0KSksKGU/XCItXCI6XCJcIikrdC50b1N0cmluZygpfSxqc3BiLmFyaXRoLkludDY0LmZyb21TdHJpbmc9ZnVuY3Rpb24oZSl7dmFyIHQ9MDxlLmxlbmd0aCYmXCItXCI9PWVbMF07cmV0dXJuIHQmJihlPWUuc3Vic3RyaW5nKDEpKSxudWxsPT09KGU9anNwYi5hcml0aC5VSW50NjQuZnJvbVN0cmluZyhlKSk/bnVsbDoodCYmKGU9bmV3IGpzcGIuYXJpdGguVUludDY0KDAsMCkuc3ViKGUpKSxuZXcganNwYi5hcml0aC5JbnQ2NChlLmxvLGUuaGkpKX0sanNwYi5CaW5hcnlDb25zdGFudHM9e30sanNwYi5Db25zdEJpbmFyeU1lc3NhZ2U9ZnVuY3Rpb24oKXt9LGpzcGIuQmluYXJ5TWVzc2FnZT1mdW5jdGlvbigpe30sanNwYi5CaW5hcnlDb25zdGFudHMuRmllbGRUeXBlPXtJTlZBTElEOi0xLERPVUJMRToxLEZMT0FUOjIsSU5UNjQ6MyxVSU5UNjQ6NCxJTlQzMjo1LEZJWEVENjQ6NixGSVhFRDMyOjcsQk9PTDo4LFNUUklORzo5LEdST1VQOjEwLE1FU1NBR0U6MTEsQllURVM6MTIsVUlOVDMyOjEzLEVOVU06MTQsU0ZJWEVEMzI6MTUsU0ZJWEVENjQ6MTYsU0lOVDMyOjE3LFNJTlQ2NDoxOCxGSEFTSDY0OjMwLFZIQVNINjQ6MzF9LGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlPXtJTlZBTElEOi0xLFZBUklOVDowLEZJWEVENjQ6MSxERUxJTUlURUQ6MixTVEFSVF9HUk9VUDozLEVORF9HUk9VUDo0LEZJWEVEMzI6NX0sanNwYi5CaW5hcnlDb25zdGFudHMuRmllbGRUeXBlVG9XaXJlVHlwZT1mdW5jdGlvbihlKXt2YXIgdD1qc3BiLkJpbmFyeUNvbnN0YW50cy5GaWVsZFR5cGUscj1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZTtzd2l0Y2goZSl7Y2FzZSB0LklOVDMyOmNhc2UgdC5JTlQ2NDpjYXNlIHQuVUlOVDMyOmNhc2UgdC5VSU5UNjQ6Y2FzZSB0LlNJTlQzMjpjYXNlIHQuU0lOVDY0OmNhc2UgdC5CT09MOmNhc2UgdC5FTlVNOmNhc2UgdC5WSEFTSDY0OnJldHVybiByLlZBUklOVDtjYXNlIHQuRE9VQkxFOmNhc2UgdC5GSVhFRDY0OmNhc2UgdC5TRklYRUQ2NDpjYXNlIHQuRkhBU0g2NDpyZXR1cm4gci5GSVhFRDY0O2Nhc2UgdC5TVFJJTkc6Y2FzZSB0Lk1FU1NBR0U6Y2FzZSB0LkJZVEVTOnJldHVybiByLkRFTElNSVRFRDtjYXNlIHQuRkxPQVQ6Y2FzZSB0LkZJWEVEMzI6Y2FzZSB0LlNGSVhFRDMyOnJldHVybiByLkZJWEVEMzI7ZGVmYXVsdDpyZXR1cm4gci5JTlZBTElEfX0sanNwYi5CaW5hcnlDb25zdGFudHMuSU5WQUxJRF9GSUVMRF9OVU1CRVI9LTEsanNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQzMl9FUFM9MTQwMTI5ODQ2NDMyNDgxN2UtNjAsanNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQzMl9NSU49MTE3NTQ5NDM1MDgyMjI4NzVlLTU0LGpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUMzJfTUFYPTM0MDI4MjM0NjYzODUyODg2ZTIyLGpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUNjRfRVBTPTVlLTMyNCxqc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDY0X01JTj0yMjI1MDczODU4NTA3MjAxNGUtMzI0LGpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUNjRfTUFYPTE3OTc2OTMxMzQ4NjIzMTU3ZTI5Mixqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMjA9MTA0ODU3Nixqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMjM9ODM4ODYwOCxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzE9MjE0NzQ4MzY0OCxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzI9NDI5NDk2NzI5Nixqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNTI9NDUwMzU5OTYyNzM3MDQ5Nixqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjM9MHg4MDAwMDAwMDAwMDAwMDAwLGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182ND0weDEwMDAwMDAwMDAwMDAwMDAwLGpzcGIuQmluYXJ5Q29uc3RhbnRzLlpFUk9fSEFTSD1cIlxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFwiLGpzcGIudXRpbHM9e30sanNwYi51dGlscy5zcGxpdDY0TG93PTAsanNwYi51dGlscy5zcGxpdDY0SGlnaD0wLGpzcGIudXRpbHMuc3BsaXRVaW50NjQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZT4+PjA7ZT1NYXRoLmZsb29yKChlLXQpL2pzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMik+Pj4wLGpzcGIudXRpbHMuc3BsaXQ2NExvdz10LGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9ZX0sanNwYi51dGlscy5zcGxpdEludDY0PWZ1bmN0aW9uKGUpe3ZhciB0PWU8MCxyPShlPU1hdGguYWJzKGUpKT4+PjA7ZT1NYXRoLmZsb29yKChlLXIpL2pzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMiksZT4+Pj0wLHQmJihlPX5lPj4+MCw0Mjk0OTY3Mjk1PChyPTErKH5yPj4+MCkpJiYocj0wLDQyOTQ5NjcyOTU8KytlJiYoZT0wKSkpLGpzcGIudXRpbHMuc3BsaXQ2NExvdz1yLGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9ZX0sanNwYi51dGlscy5zcGxpdFppZ3phZzY0PWZ1bmN0aW9uKGUpe3ZhciB0PWU8MDtlPTIqTWF0aC5hYnMoZSksanNwYi51dGlscy5zcGxpdFVpbnQ2NChlKSxlPWpzcGIudXRpbHMuc3BsaXQ2NExvdzt2YXIgcj1qc3BiLnV0aWxzLnNwbGl0NjRIaWdoO3QmJigwPT1lPzA9PXI/cj1lPTQyOTQ5NjcyOTU6KHItLSxlPTQyOTQ5NjcyOTUpOmUtLSksanNwYi51dGlscy5zcGxpdDY0TG93PWUsanNwYi51dGlscy5zcGxpdDY0SGlnaD1yfSxqc3BiLnV0aWxzLnNwbGl0RmxvYXQzMj1mdW5jdGlvbihlKXt2YXIgdCxyPWU8MD8xOjA7MD09PShlPXI/LWU6ZSk/MDwxL2U/KGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9MCxqc3BiLnV0aWxzLnNwbGl0NjRMb3c9MCk6KGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9MCxqc3BiLnV0aWxzLnNwbGl0NjRMb3c9MjE0NzQ4MzY0OCk6aXNOYU4oZSk/KGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9MCxqc3BiLnV0aWxzLnNwbGl0NjRMb3c9MjE0NzQ4MzY0Nyk6ZT5qc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDMyX01BWD8oanNwYi51dGlscy5zcGxpdDY0SGlnaD0wLGpzcGIudXRpbHMuc3BsaXQ2NExvdz0ocjw8MzF8MjEzOTA5NTA0MCk+Pj4wKTplPGpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUMzJfTUlOPyhlPU1hdGgucm91bmQoZS9NYXRoLnBvdygyLC0xNDkpKSxqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPTAsanNwYi51dGlscy5zcGxpdDY0TG93PShyPDwzMXxlKT4+PjApOih0PU1hdGguZmxvb3IoTWF0aC5sb2coZSkvTWF0aC5MTjIpLGUqPU1hdGgucG93KDIsLXQpLGU9ODM4ODYwNyZNYXRoLnJvdW5kKGUqanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzIzKSxqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPTAsanNwYi51dGlscy5zcGxpdDY0TG93PShyPDwzMXx0KzEyNzw8MjN8ZSk+Pj4wKX0sanNwYi51dGlscy5zcGxpdEZsb2F0NjQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZTwwPzE6MDtpZigwPT09KGU9dD8tZTplKSlqc3BiLnV0aWxzLnNwbGl0NjRIaWdoPTA8MS9lPzA6MjE0NzQ4MzY0OCxqc3BiLnV0aWxzLnNwbGl0NjRMb3c9MDtlbHNlIGlmKGlzTmFOKGUpKWpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9MjE0NzQ4MzY0Nyxqc3BiLnV0aWxzLnNwbGl0NjRMb3c9NDI5NDk2NzI5NTtlbHNlIGlmKGU+anNwYi5CaW5hcnlDb25zdGFudHMuRkxPQVQ2NF9NQVgpanNwYi51dGlscy5zcGxpdDY0SGlnaD0odDw8MzF8MjE0NjQzNTA3Mik+Pj4wLGpzcGIudXRpbHMuc3BsaXQ2NExvdz0wO2Vsc2UgaWYoZTxqc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDY0X01JTil7dmFyIHI9ZS9NYXRoLnBvdygyLC0xMDc0KTtlPXIvanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMyLGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9KHQ8PDMxfGUpPj4+MCxqc3BiLnV0aWxzLnNwbGl0NjRMb3c9cj4+PjB9ZWxzZXt2YXIgbz1NYXRoLmZsb29yKE1hdGgubG9nKGUpL01hdGguTE4yKTsxMDI0PT1vJiYobz0xMDIzKSxlPShyPWUqTWF0aC5wb3coMiwtbykpKmpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18yMCYxMDQ4NTc1LHI9cipqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNTI+Pj4wLGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g9KHQ8PDMxfG8rMTAyMzw8MjB8ZSk+Pj4wLGpzcGIudXRpbHMuc3BsaXQ2NExvdz1yfX0sanNwYi51dGlscy5zcGxpdEhhc2g2ND1mdW5jdGlvbihlKXt2YXIgdD1lLmNoYXJDb2RlQXQoMCkscj1lLmNoYXJDb2RlQXQoMSksbz1lLmNoYXJDb2RlQXQoMikscz1lLmNoYXJDb2RlQXQoMyksaT1lLmNoYXJDb2RlQXQoNCksYT1lLmNoYXJDb2RlQXQoNSksbj1lLmNoYXJDb2RlQXQoNik7ZT1lLmNoYXJDb2RlQXQoNyksanNwYi51dGlscy5zcGxpdDY0TG93PXQrKHI8PDgpKyhvPDwxNikrKHM8PDI0KT4+PjAsanNwYi51dGlscy5zcGxpdDY0SGlnaD1pKyhhPDw4KSsobjw8MTYpKyhlPDwyNCk+Pj4wfSxqc3BiLnV0aWxzLmpvaW5VaW50NjQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCpqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIrZX0sanNwYi51dGlscy5qb2luSW50NjQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj0yMTQ3NDgzNjQ4JnQ7ciYmKHQ9fnQ+Pj4wLDA9PShlPTErfmU+Pj4wKSYmKHQ9dCsxPj4+MCkpO3ZhciBvPWpzcGIudXRpbHMuam9pblVpbnQ2NChlLHQpO3JldHVybiByPy1vOm99LGpzcGIudXRpbHMuam9pblppZ3phZzY0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9MSZlO2U9KGU+Pj4xfHQ8PDMxKT4+PjAsdD4+Pj0xLHImJigwPT0oZT1lKzE+Pj4wKSYmKHQ9dCsxPj4+MCkpO3ZhciBvPWpzcGIudXRpbHMuam9pblVpbnQ2NChlLHQpO3JldHVybiByPy1vOm99LGpzcGIudXRpbHMuam9pbkZsb2F0MzI9ZnVuY3Rpb24oZSx0KXt2YXIgcj0yKihlPj4zMSkrMSxvPWU+Pj4yMyYyNTUscz04Mzg4NjA3JmU7cmV0dXJuIDI1NT09bz9zP05hTjoxLzAqcjowPT1vP3IqTWF0aC5wb3coMiwtMTQ5KSpzOnIqTWF0aC5wb3coMixvLTE1MCkqKHMrTWF0aC5wb3coMiwyMykpfSxqc3BiLnV0aWxzLmpvaW5GbG9hdDY0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9MioodD4+MzEpKzEsbz10Pj4+MjAmMjA0NyxzPWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMiooMTA0ODU3NSZ0KStlO3JldHVybiAyMDQ3PT1vP3M/TmFOOjEvMCpyOjA9PW8/cipNYXRoLnBvdygyLC0xMDc0KSpzOnIqTWF0aC5wb3coMixvLTEwNzUpKihzK2pzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT181Mil9LGpzcGIudXRpbHMuam9pbkhhc2g2ND1mdW5jdGlvbihlLHQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGU+Pj4wJjI1NSxlPj4+OCYyNTUsZT4+PjE2JjI1NSxlPj4+MjQmMjU1LHQ+Pj4wJjI1NSx0Pj4+OCYyNTUsdD4+PjE2JjI1NSx0Pj4+MjQmMjU1KX0sanNwYi51dGlscy5ESUdJVFM9XCIwMTIzNDU2Nzg5YWJjZGVmXCIuc3BsaXQoXCJcIiksanNwYi51dGlscy5qb2luVW5zaWduZWREZWNpbWFsU3RyaW5nPWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gcihlKXtmb3IodmFyIHQ9MWU3LHI9MDtyPDc7cisrKXt2YXIgbz1lLyh0PXQvMTApJTEwPj4+MDsoMCE9b3x8bikmJihuPSEwLHArPWFbb10pfX1pZih0PD0yMDk3MTUxKXJldHVyblwiXCIrKGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMip0K2UpO3ZhciBvPSgxNjc3NzIxNSZlKSs2Nzc3MjE2KihzPShlPj4+MjR8dDw8OCk+Pj4wJjE2Nzc3MjE1KSs2NzEwNjU2KihpPXQ+PjE2JjY1NTM1KSxzPXMrODE0NzQ5NyppLGk9MippOzFlNzw9byYmKHMrPU1hdGguZmxvb3Ioby8xZTcpLG8lPTFlNyksMWU3PD1zJiYoaSs9TWF0aC5mbG9vcihzLzFlNykscyU9MWU3KTt2YXIgYT1qc3BiLnV0aWxzLkRJR0lUUyxuPSExLHA9XCJcIjtyZXR1cm4oaXx8bikmJnIoaSksKHN8fG4pJiZyKHMpLChvfHxuKSYmcihvKSxwfSxqc3BiLnV0aWxzLmpvaW5TaWduZWREZWNpbWFsU3RyaW5nPWZ1bmN0aW9uKGUsdCl7dmFyIHI9MjE0NzQ4MzY0OCZ0O3ImJih0PX50KygwPT0oZT0xK35lPj4+MCk/MTowKT4+PjApO3ZhciBvPWpzcGIudXRpbHMuam9pblVuc2lnbmVkRGVjaW1hbFN0cmluZyhlLHQpO3JldHVybiByP1wiLVwiK286b30sanNwYi51dGlscy5oYXNoNjRUb0RlY2ltYWxTdHJpbmc9ZnVuY3Rpb24oZSx0KXtqc3BiLnV0aWxzLnNwbGl0SGFzaDY0KGUpO3ZhciByPWpzcGIudXRpbHMuc3BsaXQ2NExvdyxvPWpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g7cmV0dXJuIHQ/anNwYi51dGlscy5qb2luU2lnbmVkRGVjaW1hbFN0cmluZyhyLG8pOmpzcGIudXRpbHMuam9pblVuc2lnbmVkRGVjaW1hbFN0cmluZyhyLG8pfSxqc3BiLnV0aWxzLmhhc2g2NEFycmF5VG9EZWNpbWFsU3RyaW5ncz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1BcnJheShlLmxlbmd0aCksbz0wO288ZS5sZW5ndGg7bysrKXJbb109anNwYi51dGlscy5oYXNoNjRUb0RlY2ltYWxTdHJpbmcoZVtvXSx0KTtyZXR1cm4gcn0sanNwYi51dGlscy5kZWNpbWFsU3RyaW5nVG9IYXNoNjQ9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHQpe2Zvcih2YXIgcj0wO3I8OCYmKDEhPT1lfHwwPHQpO3IrKyl7dmFyIG89ZSpzW3JdK3Q7c1tyXT0yNTUmbyx0PW8+Pj44fX1nb29nLmFzc2VydHMuYXNzZXJ0KDA8ZS5sZW5ndGgpO3ZhciByPSExO1wiLVwiPT09ZVswXSYmKHI9ITAsZT1lLnNsaWNlKDEpKTtmb3IodmFyIHM9WzAsMCwwLDAsMCwwLDAsMF0sbz0wO288ZS5sZW5ndGg7bysrKXQoMTAsanNwYi51dGlscy5ESUdJVFMuaW5kZXhPZihlW29dKSk7cmV0dXJuIHImJihmdW5jdGlvbigpe2Zvcih2YXIgZT0wO2U8ODtlKyspc1tlXT0yNTUmfnNbZV19KCksdCgxLDEpKSxnb29nLmNyeXB0LmJ5dGVBcnJheVRvU3RyaW5nKHMpfSxqc3BiLnV0aWxzLnNwbGl0RGVjaW1hbFN0cmluZz1mdW5jdGlvbihlKXtqc3BiLnV0aWxzLnNwbGl0SGFzaDY0KGpzcGIudXRpbHMuZGVjaW1hbFN0cmluZ1RvSGFzaDY0KGUpKX0sanNwYi51dGlscy5oYXNoNjRUb0hleFN0cmluZz1mdW5jdGlvbihlKXt2YXIgdD1BcnJheSgxOCk7dFswXT1cIjBcIix0WzFdPVwieFwiO2Zvcih2YXIgcj0wO3I8ODtyKyspe3ZhciBvPWUuY2hhckNvZGVBdCg3LXIpO3RbMipyKzJdPWpzcGIudXRpbHMuRElHSVRTW28+PjRdLHRbMipyKzNdPWpzcGIudXRpbHMuRElHSVRTWzE1Jm9dfXJldHVybiB0LmpvaW4oXCJcIil9LGpzcGIudXRpbHMuaGV4U3RyaW5nVG9IYXNoNjQ9ZnVuY3Rpb24oZSl7ZT1lLnRvTG93ZXJDYXNlKCksZ29vZy5hc3NlcnRzLmFzc2VydCgxOD09ZS5sZW5ndGgpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoXCIwXCI9PWVbMF0pLGdvb2cuYXNzZXJ0cy5hc3NlcnQoXCJ4XCI9PWVbMV0pO2Zvcih2YXIgdD1cIlwiLHI9MDtyPDg7cisrKXt2YXIgbz1qc3BiLnV0aWxzLkRJR0lUUy5pbmRleE9mKGVbMipyKzJdKSxzPWpzcGIudXRpbHMuRElHSVRTLmluZGV4T2YoZVsyKnIrM10pO3Q9U3RyaW5nLmZyb21DaGFyQ29kZSgxNipvK3MpK3R9cmV0dXJuIHR9LGpzcGIudXRpbHMuaGFzaDY0VG9OdW1iZXI9ZnVuY3Rpb24oZSx0KXtqc3BiLnV0aWxzLnNwbGl0SGFzaDY0KGUpO3ZhciByPWpzcGIudXRpbHMuc3BsaXQ2NExvdyxvPWpzcGIudXRpbHMuc3BsaXQ2NEhpZ2g7cmV0dXJuIHQ/anNwYi51dGlscy5qb2luSW50NjQocixvKTpqc3BiLnV0aWxzLmpvaW5VaW50NjQocixvKX0sanNwYi51dGlscy5udW1iZXJUb0hhc2g2ND1mdW5jdGlvbihlKXtyZXR1cm4ganNwYi51dGlscy5zcGxpdEludDY0KGUpLGpzcGIudXRpbHMuam9pbkhhc2g2NChqc3BiLnV0aWxzLnNwbGl0NjRMb3csanNwYi51dGlscy5zcGxpdDY0SGlnaCl9LGpzcGIudXRpbHMuY291bnRWYXJpbnRzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG89MCxzPXQ7czxyO3MrKylvKz1lW3NdPj43O3JldHVybiByLXQtb30sanNwYi51dGlscy5jb3VudFZhcmludEZpZWxkcz1mdW5jdGlvbihlLHQscixvKXt2YXIgcz0wO2lmKChvPTgqbytqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpPDEyOClmb3IoO3Q8ciYmZVt0KytdPT1vOylmb3IocysrOzspe3ZhciBpPWVbdCsrXTtpZigwPT0oMTI4JmkpKWJyZWFrfWVsc2UgZm9yKDt0PHI7KXtmb3IoaT1vOzEyODxpOyl7aWYoZVt0XSE9KDEyNyZpfDEyOCkpcmV0dXJuIHM7dCsrLGk+Pj03fWlmKGVbdCsrXSE9aSlicmVhaztmb3IocysrOzAhPSgxMjgmKGk9ZVt0KytdKSk7KTt9cmV0dXJuIHN9LGpzcGIudXRpbHMuY291bnRGaXhlZEZpZWxkc189ZnVuY3Rpb24oZSx0LHIsbyxzKXt2YXIgaT0wO2lmKG88MTI4KWZvcig7dDxyJiZlW3QrK109PW87KWkrKyx0Kz1zO2Vsc2UgZm9yKDt0PHI7KXtmb3IodmFyIGE9bzsxMjg8YTspe2lmKGVbdCsrXSE9KDEyNyZhfDEyOCkpcmV0dXJuIGk7YT4+PTd9aWYoZVt0KytdIT1hKWJyZWFrO2krKyx0Kz1zfXJldHVybiBpfSxqc3BiLnV0aWxzLmNvdW50Rml4ZWQzMkZpZWxkcz1mdW5jdGlvbihlLHQscixvKXtyZXR1cm4ganNwYi51dGlscy5jb3VudEZpeGVkRmllbGRzXyhlLHQsciw4Km8ranNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMiw0KX0sanNwYi51dGlscy5jb3VudEZpeGVkNjRGaWVsZHM9ZnVuY3Rpb24oZSx0LHIsbyl7cmV0dXJuIGpzcGIudXRpbHMuY291bnRGaXhlZEZpZWxkc18oZSx0LHIsOCpvK2pzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQsOCl9LGpzcGIudXRpbHMuY291bnREZWxpbWl0ZWRGaWVsZHM9ZnVuY3Rpb24oZSx0LHIsbyl7dmFyIHM9MDtmb3Iobz04Km8ranNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEO3Q8cjspe2Zvcih2YXIgaT1vOzEyODxpOyl7aWYoZVt0KytdIT0oMTI3Jml8MTI4KSlyZXR1cm4gcztpPj49N31pZihlW3QrK10hPWkpYnJlYWs7cysrO2Zvcih2YXIgYT0wLG49MTthKz0oMTI3JihpPWVbdCsrXSkpKm4sbio9MTI4LDAhPSgxMjgmaSk7KTt0Kz1hfXJldHVybiBzfSxqc3BiLnV0aWxzLmRlYnVnQnl0ZXNUb1RleHRGb3JtYXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9J1wiJztpZihlKXtlPWpzcGIudXRpbHMuYnl0ZVNvdXJjZVRvVWludDhBcnJheShlKTtmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl0Kz1cIlxcXFx4XCIsZVtyXTwxNiYmKHQrPVwiMFwiKSx0Kz1lW3JdLnRvU3RyaW5nKDE2KX1yZXR1cm4gdCsnXCInfSxqc3BiLnV0aWxzLmRlYnVnU2NhbGFyVG9UZXh0Rm9ybWF0PWZ1bmN0aW9uKGUpe3JldHVybiBnb29nLmlzU3RyaW5nKGUpP2dvb2cuc3RyaW5nLnF1b3RlKGUpOmUudG9TdHJpbmcoKX0sanNwYi51dGlscy5zdHJpbmdUb0J5dGVBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG89ZS5jaGFyQ29kZUF0KHIpO2lmKDI1NTxvKXRocm93IEVycm9yKFwiQ29udmVyc2lvbiBlcnJvcjogc3RyaW5nIGNvbnRhaW5zIGNvZGVwb2ludCBvdXRzaWRlIG9mIGJ5dGUgcmFuZ2VcIik7dFtyXT1vfXJldHVybiB0fSxqc3BiLnV0aWxzLmJ5dGVTb3VyY2VUb1VpbnQ4QXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuY29uc3RydWN0b3I9PT1VaW50OEFycmF5P2U6ZS5jb25zdHJ1Y3Rvcj09PUFycmF5QnVmZmVyfHxlLmNvbnN0cnVjdG9yPT09QnVmZmVyfHxlLmNvbnN0cnVjdG9yPT09QXJyYXk/bmV3IFVpbnQ4QXJyYXkoZSk6ZS5jb25zdHJ1Y3Rvcj09PVN0cmluZz9nb29nLmNyeXB0LmJhc2U2NC5kZWNvZGVTdHJpbmdUb1VpbnQ4QXJyYXkoZSk6KGdvb2cuYXNzZXJ0cy5mYWlsKFwiVHlwZSBub3QgY29udmVydGlibGUgdG8gVWludDhBcnJheS5cIiksbmV3IFVpbnQ4QXJyYXkoMCkpfSxqc3BiLkJpbmFyeUVuY29kZXI9ZnVuY3Rpb24oKXt0aGlzLmJ1ZmZlcl89W119LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUubGVuZ3RoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnVmZmVyXy5sZW5ndGh9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUuZW5kPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5idWZmZXJfO3JldHVybiB0aGlzLmJ1ZmZlcl89W10sZX0sanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZVNwbGl0VmFyaW50NjQ9ZnVuY3Rpb24oZSx0KXtmb3IoZ29vZy5hc3NlcnRzLmFzc2VydChlPT1NYXRoLmZsb29yKGUpKSxnb29nLmFzc2VydHMuYXNzZXJ0KHQ9PU1hdGguZmxvb3IodCkpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9ZSYmZTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9dCYmdDxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIpOzA8dHx8MTI3PGU7KXRoaXMuYnVmZmVyXy5wdXNoKDEyNyZlfDEyOCksZT0oZT4+Pjd8dDw8MjUpPj4+MCx0Pj4+PTc7dGhpcy5idWZmZXJfLnB1c2goZSl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVTcGxpdEZpeGVkNjQ9ZnVuY3Rpb24oZSx0KXtnb29nLmFzc2VydHMuYXNzZXJ0KGU9PU1hdGguZmxvb3IoZSkpLGdvb2cuYXNzZXJ0cy5hc3NlcnQodD09TWF0aC5mbG9vcih0KSksZ29vZy5hc3NlcnRzLmFzc2VydCgwPD1lJiZlPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMiksZ29vZy5hc3NlcnRzLmFzc2VydCgwPD10JiZ0PGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMiksdGhpcy53cml0ZVVpbnQzMihlKSx0aGlzLndyaXRlVWludDMyKHQpfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlVW5zaWduZWRWYXJpbnQzMj1mdW5jdGlvbihlKXtmb3IoZ29vZy5hc3NlcnRzLmFzc2VydChlPT1NYXRoLmZsb29yKGUpKSxnb29nLmFzc2VydHMuYXNzZXJ0KDA8PWUmJmU8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMyKTsxMjc8ZTspdGhpcy5idWZmZXJfLnB1c2goMTI3JmV8MTI4KSxlPj4+PTc7dGhpcy5idWZmZXJfLnB1c2goZSl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVTaWduZWRWYXJpbnQzMj1mdW5jdGlvbihlKXtpZihnb29nLmFzc2VydHMuYXNzZXJ0KGU9PU1hdGguZmxvb3IoZSkpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoZT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSYmZTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEpLDA8PWUpdGhpcy53cml0ZVVuc2lnbmVkVmFyaW50MzIoZSk7ZWxzZXtmb3IodmFyIHQ9MDt0PDk7dCsrKXRoaXMuYnVmZmVyXy5wdXNoKDEyNyZlfDEyOCksZT4+PTc7dGhpcy5idWZmZXJfLnB1c2goMSl9fSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlVW5zaWduZWRWYXJpbnQ2ND1mdW5jdGlvbihlKXtnb29nLmFzc2VydHMuYXNzZXJ0KGU9PU1hdGguZmxvb3IoZSkpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9ZSYmZTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjQpLGpzcGIudXRpbHMuc3BsaXRJbnQ2NChlKSx0aGlzLndyaXRlU3BsaXRWYXJpbnQ2NChqc3BiLnV0aWxzLnNwbGl0NjRMb3csanNwYi51dGlscy5zcGxpdDY0SGlnaCl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVTaWduZWRWYXJpbnQ2ND1mdW5jdGlvbihlKXtnb29nLmFzc2VydHMuYXNzZXJ0KGU9PU1hdGguZmxvb3IoZSkpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoZT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182MyYmZTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMpLGpzcGIudXRpbHMuc3BsaXRJbnQ2NChlKSx0aGlzLndyaXRlU3BsaXRWYXJpbnQ2NChqc3BiLnV0aWxzLnNwbGl0NjRMb3csanNwYi51dGlscy5zcGxpdDY0SGlnaCl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVaaWd6YWdWYXJpbnQzMj1mdW5jdGlvbihlKXtnb29nLmFzc2VydHMuYXNzZXJ0KGU9PU1hdGguZmxvb3IoZSkpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoZT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSYmZTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEpLHRoaXMud3JpdGVVbnNpZ25lZFZhcmludDMyKChlPDwxXmU+PjMxKT4+PjApfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlWmlnemFnVmFyaW50NjQ9ZnVuY3Rpb24oZSl7Z29vZy5hc3NlcnRzLmFzc2VydChlPT1NYXRoLmZsb29yKGUpKSxnb29nLmFzc2VydHMuYXNzZXJ0KGU+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMmJmU8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzKSxqc3BiLnV0aWxzLnNwbGl0WmlnemFnNjQoZSksdGhpcy53cml0ZVNwbGl0VmFyaW50NjQoanNwYi51dGlscy5zcGxpdDY0TG93LGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2gpfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlWmlnemFnVmFyaW50NjRTdHJpbmc9ZnVuY3Rpb24oZSl7dGhpcy53cml0ZVppZ3phZ1ZhcmludDY0KHBhcnNlSW50KGUsMTApKX0sanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZVVpbnQ4PWZ1bmN0aW9uKGUpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZT09TWF0aC5mbG9vcihlKSksZ29vZy5hc3NlcnRzLmFzc2VydCgwPD1lJiZlPDI1NiksdGhpcy5idWZmZXJfLnB1c2goZT4+PjAmMjU1KX0sanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZVVpbnQxNj1mdW5jdGlvbihlKXtnb29nLmFzc2VydHMuYXNzZXJ0KGU9PU1hdGguZmxvb3IoZSkpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9ZSYmZTw2NTUzNiksdGhpcy5idWZmZXJfLnB1c2goZT4+PjAmMjU1KSx0aGlzLmJ1ZmZlcl8ucHVzaChlPj4+OCYyNTUpfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlVWludDMyPWZ1bmN0aW9uKGUpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZT09TWF0aC5mbG9vcihlKSksZ29vZy5hc3NlcnRzLmFzc2VydCgwPD1lJiZlPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMiksdGhpcy5idWZmZXJfLnB1c2goZT4+PjAmMjU1KSx0aGlzLmJ1ZmZlcl8ucHVzaChlPj4+OCYyNTUpLHRoaXMuYnVmZmVyXy5wdXNoKGU+Pj4xNiYyNTUpLHRoaXMuYnVmZmVyXy5wdXNoKGU+Pj4yNCYyNTUpfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlVWludDY0PWZ1bmN0aW9uKGUpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZT09TWF0aC5mbG9vcihlKSksZ29vZy5hc3NlcnRzLmFzc2VydCgwPD1lJiZlPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182NCksanNwYi51dGlscy5zcGxpdFVpbnQ2NChlKSx0aGlzLndyaXRlVWludDMyKGpzcGIudXRpbHMuc3BsaXQ2NExvdyksdGhpcy53cml0ZVVpbnQzMihqc3BiLnV0aWxzLnNwbGl0NjRIaWdoKX0sanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZUludDg9ZnVuY3Rpb24oZSl7Z29vZy5hc3NlcnRzLmFzc2VydChlPT1NYXRoLmZsb29yKGUpKSxnb29nLmFzc2VydHMuYXNzZXJ0KC0xMjg8PWUmJmU8MTI4KSx0aGlzLmJ1ZmZlcl8ucHVzaChlPj4+MCYyNTUpfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlSW50MTY9ZnVuY3Rpb24oZSl7Z29vZy5hc3NlcnRzLmFzc2VydChlPT1NYXRoLmZsb29yKGUpKSxnb29nLmFzc2VydHMuYXNzZXJ0KC0zMjc2ODw9ZSYmZTwzMjc2OCksdGhpcy5idWZmZXJfLnB1c2goZT4+PjAmMjU1KSx0aGlzLmJ1ZmZlcl8ucHVzaChlPj4+OCYyNTUpfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlSW50MzI9ZnVuY3Rpb24oZSl7Z29vZy5hc3NlcnRzLmFzc2VydChlPT1NYXRoLmZsb29yKGUpKSxnb29nLmFzc2VydHMuYXNzZXJ0KGU+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEmJmU8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxKSx0aGlzLmJ1ZmZlcl8ucHVzaChlPj4+MCYyNTUpLHRoaXMuYnVmZmVyXy5wdXNoKGU+Pj44JjI1NSksdGhpcy5idWZmZXJfLnB1c2goZT4+PjE2JjI1NSksdGhpcy5idWZmZXJfLnB1c2goZT4+PjI0JjI1NSl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVJbnQ2ND1mdW5jdGlvbihlKXtnb29nLmFzc2VydHMuYXNzZXJ0KGU9PU1hdGguZmxvb3IoZSkpLGdvb2cuYXNzZXJ0cy5hc3NlcnQoZT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182MyYmZTxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMpLGpzcGIudXRpbHMuc3BsaXRJbnQ2NChlKSx0aGlzLndyaXRlU3BsaXRGaXhlZDY0KGpzcGIudXRpbHMuc3BsaXQ2NExvdyxqc3BiLnV0aWxzLnNwbGl0NjRIaWdoKX0sanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZUludDY0U3RyaW5nPWZ1bmN0aW9uKGUpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZT09TWF0aC5mbG9vcihlKSksZ29vZy5hc3NlcnRzLmFzc2VydCgrZT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182MyYmK2U8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzKSxqc3BiLnV0aWxzLnNwbGl0SGFzaDY0KGpzcGIudXRpbHMuZGVjaW1hbFN0cmluZ1RvSGFzaDY0KGUpKSx0aGlzLndyaXRlU3BsaXRGaXhlZDY0KGpzcGIudXRpbHMuc3BsaXQ2NExvdyxqc3BiLnV0aWxzLnNwbGl0NjRIaWdoKX0sanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZUZsb2F0PWZ1bmN0aW9uKGUpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUMzJfTUFYJiZlPD1qc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDMyX01BWCksanNwYi51dGlscy5zcGxpdEZsb2F0MzIoZSksdGhpcy53cml0ZVVpbnQzMihqc3BiLnV0aWxzLnNwbGl0NjRMb3cpfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlRG91YmxlPWZ1bmN0aW9uKGUpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZT49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLkZMT0FUNjRfTUFYJiZlPD1qc3BiLkJpbmFyeUNvbnN0YW50cy5GTE9BVDY0X01BWCksanNwYi51dGlscy5zcGxpdEZsb2F0NjQoZSksdGhpcy53cml0ZVVpbnQzMihqc3BiLnV0aWxzLnNwbGl0NjRMb3cpLHRoaXMud3JpdGVVaW50MzIoanNwYi51dGlscy5zcGxpdDY0SGlnaCl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVCb29sPWZ1bmN0aW9uKGUpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoZ29vZy5pc0Jvb2xlYW4oZSl8fGdvb2cuaXNOdW1iZXIoZSkpLHRoaXMuYnVmZmVyXy5wdXNoKGU/MTowKX0sanNwYi5CaW5hcnlFbmNvZGVyLnByb3RvdHlwZS53cml0ZUVudW09ZnVuY3Rpb24oZSl7Z29vZy5hc3NlcnRzLmFzc2VydChlPT1NYXRoLmZsb29yKGUpKSxnb29nLmFzc2VydHMuYXNzZXJ0KGU+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEmJmU8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxKSx0aGlzLndyaXRlU2lnbmVkVmFyaW50MzIoZSl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVCeXRlcz1mdW5jdGlvbihlKXt0aGlzLmJ1ZmZlcl8ucHVzaC5hcHBseSh0aGlzLmJ1ZmZlcl8sZSl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVWYXJpbnRIYXNoNjQ9ZnVuY3Rpb24oZSl7anNwYi51dGlscy5zcGxpdEhhc2g2NChlKSx0aGlzLndyaXRlU3BsaXRWYXJpbnQ2NChqc3BiLnV0aWxzLnNwbGl0NjRMb3csanNwYi51dGlscy5zcGxpdDY0SGlnaCl9LGpzcGIuQmluYXJ5RW5jb2Rlci5wcm90b3R5cGUud3JpdGVGaXhlZEhhc2g2ND1mdW5jdGlvbihlKXtqc3BiLnV0aWxzLnNwbGl0SGFzaDY0KGUpLHRoaXMud3JpdGVVaW50MzIoanNwYi51dGlscy5zcGxpdDY0TG93KSx0aGlzLndyaXRlVWludDMyKGpzcGIudXRpbHMuc3BsaXQ2NEhpZ2gpfSxqc3BiLkJpbmFyeUVuY29kZXIucHJvdG90eXBlLndyaXRlU3RyaW5nPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLmJ1ZmZlcl8ubGVuZ3RoLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG89ZS5jaGFyQ29kZUF0KHIpO2lmKG88MTI4KXRoaXMuYnVmZmVyXy5wdXNoKG8pO2Vsc2UgaWYobzwyMDQ4KXRoaXMuYnVmZmVyXy5wdXNoKG8+PjZ8MTkyKSx0aGlzLmJ1ZmZlcl8ucHVzaCg2MyZvfDEyOCk7ZWxzZSBpZihvPDY1NTM2KWlmKDU1Mjk2PD1vJiZvPD01NjMxOSYmcisxPGUubGVuZ3RoKXt2YXIgcz1lLmNoYXJDb2RlQXQocisxKTs1NjMyMDw9cyYmczw9NTczNDMmJihvPTEwMjQqKG8tNTUyOTYpK3MtNTYzMjArNjU1MzYsdGhpcy5idWZmZXJfLnB1c2gobz4+MTh8MjQwKSx0aGlzLmJ1ZmZlcl8ucHVzaChvPj4xMiY2M3wxMjgpLHRoaXMuYnVmZmVyXy5wdXNoKG8+PjYmNjN8MTI4KSx0aGlzLmJ1ZmZlcl8ucHVzaCg2MyZvfDEyOCkscisrKX1lbHNlIHRoaXMuYnVmZmVyXy5wdXNoKG8+PjEyfDIyNCksdGhpcy5idWZmZXJfLnB1c2gobz4+NiY2M3wxMjgpLHRoaXMuYnVmZmVyXy5wdXNoKDYzJm98MTI4KX1yZXR1cm4gdGhpcy5idWZmZXJfLmxlbmd0aC10fSxqc3BiLkJpbmFyeVdyaXRlcj1mdW5jdGlvbigpe3RoaXMuYmxvY2tzXz1bXSx0aGlzLnRvdGFsTGVuZ3RoXz0wLHRoaXMuZW5jb2Rlcl89bmV3IGpzcGIuQmluYXJ5RW5jb2Rlcix0aGlzLmJvb2ttYXJrc189W119LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5hcHBlbmRVaW50OEFycmF5Xz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmVuY29kZXJfLmVuZCgpO3RoaXMuYmxvY2tzXy5wdXNoKHQpLHRoaXMuYmxvY2tzXy5wdXNoKGUpLHRoaXMudG90YWxMZW5ndGhfKz10Lmxlbmd0aCtlLmxlbmd0aH0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLmJlZ2luRGVsaW1pdGVkXz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCksZT10aGlzLmVuY29kZXJfLmVuZCgpLHRoaXMuYmxvY2tzXy5wdXNoKGUpLHRoaXMudG90YWxMZW5ndGhfKz1lLmxlbmd0aCxlLnB1c2godGhpcy50b3RhbExlbmd0aF8pLGV9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5lbmREZWxpbWl0ZWRfPWZ1bmN0aW9uKGUpe3ZhciB0PWUucG9wKCk7dD10aGlzLnRvdGFsTGVuZ3RoXyt0aGlzLmVuY29kZXJfLmxlbmd0aCgpLXQ7Zm9yKGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9dCk7MTI3PHQ7KWUucHVzaCgxMjcmdHwxMjgpLHQ+Pj49Nyx0aGlzLnRvdGFsTGVuZ3RoXysrO2UucHVzaCh0KSx0aGlzLnRvdGFsTGVuZ3RoXysrfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTZXJpYWxpemVkTWVzc2FnZT1mdW5jdGlvbihlLHQscil7dGhpcy5hcHBlbmRVaW50OEFycmF5XyhlLnN1YmFycmF5KHQscikpfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUubWF5YmVXcml0ZVNlcmlhbGl6ZWRNZXNzYWdlPWZ1bmN0aW9uKGUsdCxyKXtudWxsIT1lJiZudWxsIT10JiZudWxsIT1yJiZ0aGlzLndyaXRlU2VyaWFsaXplZE1lc3NhZ2UoZSx0LHIpfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmJsb2Nrc189W10sdGhpcy5lbmNvZGVyXy5lbmQoKSx0aGlzLnRvdGFsTGVuZ3RoXz0wLHRoaXMuYm9va21hcmtzXz1bXX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLmdldFJlc3VsdEJ1ZmZlcj1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoMD09dGhpcy5ib29rbWFya3NfLmxlbmd0aCk7Zm9yKHZhciBlPW5ldyBVaW50OEFycmF5KHRoaXMudG90YWxMZW5ndGhfK3RoaXMuZW5jb2Rlcl8ubGVuZ3RoKCkpLHQ9dGhpcy5ibG9ja3NfLHI9dC5sZW5ndGgsbz0wLHM9MDtzPHI7cysrKXt2YXIgaT10W3NdO2Uuc2V0KGksbyksbys9aS5sZW5ndGh9cmV0dXJuIHQ9dGhpcy5lbmNvZGVyXy5lbmQoKSxlLnNldCh0LG8pLG8rPXQubGVuZ3RoLGdvb2cuYXNzZXJ0cy5hc3NlcnQobz09ZS5sZW5ndGgpLHRoaXMuYmxvY2tzXz1bZV0sZX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLmdldFJlc3VsdEJhc2U2NFN0cmluZz1mdW5jdGlvbihlKXtyZXR1cm4gZ29vZy5jcnlwdC5iYXNlNjQuZW5jb2RlQnl0ZUFycmF5KHRoaXMuZ2V0UmVzdWx0QnVmZmVyKCksZSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5iZWdpblN1Yk1lc3NhZ2U9ZnVuY3Rpb24oZSl7dGhpcy5ib29rbWFya3NfLnB1c2godGhpcy5iZWdpbkRlbGltaXRlZF8oZSkpfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUuZW5kU3ViTWVzc2FnZT1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9dGhpcy5ib29rbWFya3NfLmxlbmd0aCksdGhpcy5lbmREZWxpbWl0ZWRfKHRoaXMuYm9va21hcmtzXy5wb3AoKSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUZpZWxkSGVhZGVyXz1mdW5jdGlvbihlLHQpe2dvb2cuYXNzZXJ0cy5hc3NlcnQoMTw9ZSYmZT09TWF0aC5mbG9vcihlKSksdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoOCplK3QpfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVBbnk9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPWpzcGIuQmluYXJ5Q29uc3RhbnRzLkZpZWxkVHlwZTtzd2l0Y2goZSl7Y2FzZSBvLkRPVUJMRTp0aGlzLndyaXRlRG91YmxlKHQscik7YnJlYWs7Y2FzZSBvLkZMT0FUOnRoaXMud3JpdGVGbG9hdCh0LHIpO2JyZWFrO2Nhc2Ugby5JTlQ2NDp0aGlzLndyaXRlSW50NjQodCxyKTticmVhaztjYXNlIG8uVUlOVDY0OnRoaXMud3JpdGVVaW50NjQodCxyKTticmVhaztjYXNlIG8uSU5UMzI6dGhpcy53cml0ZUludDMyKHQscik7YnJlYWs7Y2FzZSBvLkZJWEVENjQ6dGhpcy53cml0ZUZpeGVkNjQodCxyKTticmVhaztjYXNlIG8uRklYRUQzMjp0aGlzLndyaXRlRml4ZWQzMih0LHIpO2JyZWFrO2Nhc2Ugby5CT09MOnRoaXMud3JpdGVCb29sKHQscik7YnJlYWs7Y2FzZSBvLlNUUklORzp0aGlzLndyaXRlU3RyaW5nKHQscik7YnJlYWs7Y2FzZSBvLkdST1VQOmdvb2cuYXNzZXJ0cy5mYWlsKFwiR3JvdXAgZmllbGQgdHlwZSBub3Qgc3VwcG9ydGVkIGluIHdyaXRlQW55KClcIik7YnJlYWs7Y2FzZSBvLk1FU1NBR0U6Z29vZy5hc3NlcnRzLmZhaWwoXCJNZXNzYWdlIGZpZWxkIHR5cGUgbm90IHN1cHBvcnRlZCBpbiB3cml0ZUFueSgpXCIpO2JyZWFrO2Nhc2Ugby5CWVRFUzp0aGlzLndyaXRlQnl0ZXModCxyKTticmVhaztjYXNlIG8uVUlOVDMyOnRoaXMud3JpdGVVaW50MzIodCxyKTticmVhaztjYXNlIG8uRU5VTTp0aGlzLndyaXRlRW51bSh0LHIpO2JyZWFrO2Nhc2Ugby5TRklYRUQzMjp0aGlzLndyaXRlU2ZpeGVkMzIodCxyKTticmVhaztjYXNlIG8uU0ZJWEVENjQ6dGhpcy53cml0ZVNmaXhlZDY0KHQscik7YnJlYWs7Y2FzZSBvLlNJTlQzMjp0aGlzLndyaXRlU2ludDMyKHQscik7YnJlYWs7Y2FzZSBvLlNJTlQ2NDp0aGlzLndyaXRlU2ludDY0KHQscik7YnJlYWs7Y2FzZSBvLkZIQVNINjQ6dGhpcy53cml0ZUZpeGVkSGFzaDY0KHQscik7YnJlYWs7Y2FzZSBvLlZIQVNINjQ6dGhpcy53cml0ZVZhcmludEhhc2g2NCh0LHIpO2JyZWFrO2RlZmF1bHQ6Z29vZy5hc3NlcnRzLmZhaWwoXCJJbnZhbGlkIGZpZWxkIHR5cGUgaW4gd3JpdGVBbnkoKVwiKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVVuc2lnbmVkVmFyaW50MzJfPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU2lnbmVkVmFyaW50MzJfPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVTaWduZWRWYXJpbnQzMih0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVVuc2lnbmVkVmFyaW50NjRfPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDY0KHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU2lnbmVkVmFyaW50NjRfPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVTaWduZWRWYXJpbnQ2NCh0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVppZ3phZ1ZhcmludDMyXz1mdW5jdGlvbihlLHQpe251bGwhPXQmJih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmVuY29kZXJfLndyaXRlWmlnemFnVmFyaW50MzIodCkpfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVaaWd6YWdWYXJpbnQ2NF89ZnVuY3Rpb24oZSx0KXtudWxsIT10JiYodGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5lbmNvZGVyXy53cml0ZVppZ3phZ1ZhcmludDY0KHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlWmlnemFnVmFyaW50NjRTdHJpbmdfPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVaaWd6YWdWYXJpbnQ2NFN0cmluZyh0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUludDMyPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQodD49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSYmdDxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEpLHRoaXMud3JpdGVTaWduZWRWYXJpbnQzMl8oZSx0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUludDMyU3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCl7dmFyIHI9cGFyc2VJbnQodCwxMCk7Z29vZy5hc3NlcnRzLmFzc2VydChyPj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxJiZyPGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSksdGhpcy53cml0ZVNpZ25lZFZhcmludDMyXyhlLHIpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlSW50NjQ9ZnVuY3Rpb24oZSx0KXtudWxsIT10JiYoZ29vZy5hc3NlcnRzLmFzc2VydCh0Pj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzJiZ0PGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182MyksdGhpcy53cml0ZVNpZ25lZFZhcmludDY0XyhlLHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlSW50NjRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KXt2YXIgcj1qc3BiLmFyaXRoLkludDY0LmZyb21TdHJpbmcodCk7dGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5lbmNvZGVyXy53cml0ZVNwbGl0VmFyaW50NjQoci5sbyxyLmhpKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVVpbnQzMj1mdW5jdGlvbihlLHQpe251bGwhPXQmJihnb29nLmFzc2VydHMuYXNzZXJ0KDA8PXQmJnQ8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMyKSx0aGlzLndyaXRlVW5zaWduZWRWYXJpbnQzMl8oZSx0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVVpbnQzMlN0cmluZz1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpe3ZhciByPXBhcnNlSW50KHQsMTApO2dvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9ciYmcjxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIpLHRoaXMud3JpdGVVbnNpZ25lZFZhcmludDMyXyhlLHIpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlVWludDY0PWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9dCYmdDxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjQpLHRoaXMud3JpdGVVbnNpZ25lZFZhcmludDY0XyhlLHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlVWludDY0U3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCl7dmFyIHI9anNwYi5hcml0aC5VSW50NjQuZnJvbVN0cmluZyh0KTt0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmVuY29kZXJfLndyaXRlU3BsaXRWYXJpbnQ2NChyLmxvLHIuaGkpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU2ludDMyPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQodD49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSYmdDxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEpLHRoaXMud3JpdGVaaWd6YWdWYXJpbnQzMl8oZSx0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVNpbnQ2ND1mdW5jdGlvbihlLHQpe251bGwhPXQmJihnb29nLmFzc2VydHMuYXNzZXJ0KHQ+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fNjMmJnQ8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzKSx0aGlzLndyaXRlWmlnemFnVmFyaW50NjRfKGUsdCkpfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTaW50NjRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtudWxsIT10JiYoZ29vZy5hc3NlcnRzLmFzc2VydCgrdD49LWpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182MyYmK3Q8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzKSx0aGlzLndyaXRlWmlnemFnVmFyaW50NjRTdHJpbmdfKGUsdCkpfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVGaXhlZDMyPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKGdvb2cuYXNzZXJ0cy5hc3NlcnQoMDw9dCYmdDxqc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzIpLHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDMyKSx0aGlzLmVuY29kZXJfLndyaXRlVWludDMyKHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlRml4ZWQ2ND1mdW5jdGlvbihlLHQpe251bGwhPXQmJihnb29nLmFzc2VydHMuYXNzZXJ0KDA8PXQmJnQ8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzY0KSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCksdGhpcy5lbmNvZGVyXy53cml0ZVVpbnQ2NCh0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUZpeGVkNjRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KXt2YXIgcj1qc3BiLmFyaXRoLlVJbnQ2NC5mcm9tU3RyaW5nKHQpO3RoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KSx0aGlzLmVuY29kZXJfLndyaXRlU3BsaXRGaXhlZDY0KHIubG8sci5oaSl9fSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVTZml4ZWQzMj1mdW5jdGlvbihlLHQpe251bGwhPXQmJihnb29nLmFzc2VydHMuYXNzZXJ0KHQ+PS1qc3BiLkJpbmFyeUNvbnN0YW50cy5UV09fVE9fMzEmJnQ8anNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMiksdGhpcy5lbmNvZGVyXy53cml0ZUludDMyKHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU2ZpeGVkNjQ9ZnVuY3Rpb24oZSx0KXtudWxsIT10JiYoZ29vZy5hc3NlcnRzLmFzc2VydCh0Pj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzYzJiZ0PGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT182MyksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVJbnQ2NCh0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVNmaXhlZDY0U3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCl7dmFyIHI9anNwYi5hcml0aC5JbnQ2NC5mcm9tU3RyaW5nKHQpO3RoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KSx0aGlzLmVuY29kZXJfLndyaXRlU3BsaXRGaXhlZDY0KHIubG8sci5oaSl9fSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVGbG9hdD1mdW5jdGlvbihlLHQpe251bGwhPXQmJih0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMiksdGhpcy5lbmNvZGVyXy53cml0ZUZsb2F0KHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlRG91YmxlPWZ1bmN0aW9uKGUsdCl7bnVsbCE9dCYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KSx0aGlzLmVuY29kZXJfLndyaXRlRG91YmxlKHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlQm9vbD1mdW5jdGlvbihlLHQpe251bGwhPXQmJihnb29nLmFzc2VydHMuYXNzZXJ0KGdvb2cuaXNCb29sZWFuKHQpfHxnb29nLmlzTnVtYmVyKHQpKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmVuY29kZXJfLndyaXRlQm9vbCh0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZUVudW09ZnVuY3Rpb24oZSx0KXtudWxsIT10JiYoZ29vZy5hc3NlcnRzLmFzc2VydCh0Pj0tanNwYi5CaW5hcnlDb25zdGFudHMuVFdPX1RPXzMxJiZ0PGpzcGIuQmluYXJ5Q29uc3RhbnRzLlRXT19UT18zMSksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5lbmNvZGVyXy53cml0ZVNpZ25lZFZhcmludDMyKHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlU3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCl7dmFyIHI9dGhpcy5iZWdpbkRlbGltaXRlZF8oZSk7dGhpcy5lbmNvZGVyXy53cml0ZVN0cmluZyh0KSx0aGlzLmVuZERlbGltaXRlZF8ocil9fSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVCeXRlcz1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpe3ZhciByPWpzcGIudXRpbHMuYnl0ZVNvdXJjZVRvVWludDhBcnJheSh0KTt0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMihyLmxlbmd0aCksdGhpcy5hcHBlbmRVaW50OEFycmF5XyhyKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZU1lc3NhZ2U9ZnVuY3Rpb24oZSx0LHIpe251bGwhPXQmJihlPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGUpLHIodCx0aGlzKSx0aGlzLmVuZERlbGltaXRlZF8oZSkpfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVHcm91cD1mdW5jdGlvbihlLHQscil7bnVsbCE9dCYmKHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5TVEFSVF9HUk9VUCkscih0LHRoaXMpLHRoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5FTkRfR1JPVVApKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlRml4ZWRIYXNoNjQ9ZnVuY3Rpb24oZSx0KXtudWxsIT10JiYoZ29vZy5hc3NlcnRzLmFzc2VydCg4PT10Lmxlbmd0aCksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVGaXhlZEhhc2g2NCh0KSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVZhcmludEhhc2g2ND1mdW5jdGlvbihlLHQpe251bGwhPXQmJihnb29nLmFzc2VydHMuYXNzZXJ0KDg9PXQubGVuZ3RoKSx0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmVuY29kZXJfLndyaXRlVmFyaW50SGFzaDY0KHQpKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRJbnQzMj1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZVNpZ25lZFZhcmludDMyXyhlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEludDMyU3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLndyaXRlSW50MzJTdHJpbmcoZSx0W3JdKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRJbnQ2ND1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZVNpZ25lZFZhcmludDY0XyhlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEludDY0U3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLndyaXRlSW50NjRTdHJpbmcoZSx0W3JdKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRVaW50MzI9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMud3JpdGVVbnNpZ25lZFZhcmludDMyXyhlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFVpbnQzMlN0cmluZz1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZVVpbnQzMlN0cmluZyhlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFVpbnQ2ND1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZVVuc2lnbmVkVmFyaW50NjRfKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkVWludDY0U3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLndyaXRlVWludDY0U3RyaW5nKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ludDMyPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLndyaXRlWmlnemFnVmFyaW50MzJfKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ludDY0PWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLndyaXRlWmlnemFnVmFyaW50NjRfKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ludDY0U3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLndyaXRlWmlnemFnVmFyaW50NjRTdHJpbmdfKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkRml4ZWQzMj1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZUZpeGVkMzIoZSx0W3JdKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRGaXhlZDY0PWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLndyaXRlRml4ZWQ2NChlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEZpeGVkNjRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMud3JpdGVGaXhlZDY0U3RyaW5nKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkU2ZpeGVkMzI9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMud3JpdGVTZml4ZWQzMihlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFNmaXhlZDY0PWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dClmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLndyaXRlU2ZpeGVkNjQoZSx0W3JdKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTZml4ZWQ2NFN0cmluZz1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZVNmaXhlZDY0U3RyaW5nKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkRmxvYXQ9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMud3JpdGVGbG9hdChlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZERvdWJsZT1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZURvdWJsZShlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZEJvb2w9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMud3JpdGVCb29sKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkRW51bT1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZUVudW0oZSx0W3JdKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMud3JpdGVTdHJpbmcoZSx0W3JdKX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUmVwZWF0ZWRCeXRlcz1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZUJ5dGVzKGUsdFtyXSl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkTWVzc2FnZT1mdW5jdGlvbihlLHQscil7aWYobnVsbCE9dClmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIHM9dGhpcy5iZWdpbkRlbGltaXRlZF8oZSk7cih0W29dLHRoaXMpLHRoaXMuZW5kRGVsaW1pdGVkXyhzKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkR3JvdXA9ZnVuY3Rpb24oZSx0LHIpe2lmKG51bGwhPXQpZm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlNUQVJUX0dST1VQKSxyKHRbb10sdGhpcyksdGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkVORF9HUk9VUCl9LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVJlcGVhdGVkRml4ZWRIYXNoNjQ9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10KWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMud3JpdGVGaXhlZEhhc2g2NChlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVSZXBlYXRlZFZhcmludEhhc2g2ND1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy53cml0ZVZhcmludEhhc2g2NChlLHRbcl0pfSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRJbnQzMj1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQmJnQubGVuZ3RoKXtmb3IodmFyIHI9dGhpcy5iZWdpbkRlbGltaXRlZF8oZSksbz0wO288dC5sZW5ndGg7bysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVTaWduZWRWYXJpbnQzMih0W29dKTt0aGlzLmVuZERlbGltaXRlZF8ocil9fSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRJbnQzMlN0cmluZz1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQmJnQubGVuZ3RoKXtmb3IodmFyIHI9dGhpcy5iZWdpbkRlbGltaXRlZF8oZSksbz0wO288dC5sZW5ndGg7bysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVTaWduZWRWYXJpbnQzMihwYXJzZUludCh0W29dLDEwKSk7dGhpcy5lbmREZWxpbWl0ZWRfKHIpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkSW50NjQ9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10JiZ0Lmxlbmd0aCl7Zm9yKHZhciByPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGUpLG89MDtvPHQubGVuZ3RoO28rKyl0aGlzLmVuY29kZXJfLndyaXRlU2lnbmVkVmFyaW50NjQodFtvXSk7dGhpcy5lbmREZWxpbWl0ZWRfKHIpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkSW50NjRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10JiZ0Lmxlbmd0aCl7Zm9yKHZhciByPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGUpLG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIHM9anNwYi5hcml0aC5JbnQ2NC5mcm9tU3RyaW5nKHRbb10pO3RoaXMuZW5jb2Rlcl8ud3JpdGVTcGxpdFZhcmludDY0KHMubG8scy5oaSl9dGhpcy5lbmREZWxpbWl0ZWRfKHIpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkVWludDMyPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe2Zvcih2YXIgcj10aGlzLmJlZ2luRGVsaW1pdGVkXyhlKSxvPTA7bzx0Lmxlbmd0aDtvKyspdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIodFtvXSk7dGhpcy5lbmREZWxpbWl0ZWRfKHIpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkVWludDMyU3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe2Zvcih2YXIgcj10aGlzLmJlZ2luRGVsaW1pdGVkXyhlKSxvPTA7bzx0Lmxlbmd0aDtvKyspdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIocGFyc2VJbnQodFtvXSwxMCkpO3RoaXMuZW5kRGVsaW1pdGVkXyhyKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQ2ND1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQmJnQubGVuZ3RoKXtmb3IodmFyIHI9dGhpcy5iZWdpbkRlbGltaXRlZF8oZSksbz0wO288dC5sZW5ndGg7bysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDY0KHRbb10pO3RoaXMuZW5kRGVsaW1pdGVkXyhyKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFVpbnQ2NFN0cmluZz1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQmJnQubGVuZ3RoKXtmb3IodmFyIHI9dGhpcy5iZWdpbkRlbGltaXRlZF8oZSksbz0wO288dC5sZW5ndGg7bysrKXt2YXIgcz1qc3BiLmFyaXRoLlVJbnQ2NC5mcm9tU3RyaW5nKHRbb10pO3RoaXMuZW5jb2Rlcl8ud3JpdGVTcGxpdFZhcmludDY0KHMubG8scy5oaSl9dGhpcy5lbmREZWxpbWl0ZWRfKHIpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkU2ludDMyPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe2Zvcih2YXIgcj10aGlzLmJlZ2luRGVsaW1pdGVkXyhlKSxvPTA7bzx0Lmxlbmd0aDtvKyspdGhpcy5lbmNvZGVyXy53cml0ZVppZ3phZ1ZhcmludDMyKHRbb10pO3RoaXMuZW5kRGVsaW1pdGVkXyhyKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFNpbnQ2ND1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQmJnQubGVuZ3RoKXtmb3IodmFyIHI9dGhpcy5iZWdpbkRlbGltaXRlZF8oZSksbz0wO288dC5sZW5ndGg7bysrKXRoaXMuZW5jb2Rlcl8ud3JpdGVaaWd6YWdWYXJpbnQ2NCh0W29dKTt0aGlzLmVuZERlbGltaXRlZF8ocil9fSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRTaW50NjRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10JiZ0Lmxlbmd0aCl7Zm9yKHZhciByPXRoaXMuYmVnaW5EZWxpbWl0ZWRfKGUpLG89MDtvPHQubGVuZ3RoO28rKyl0aGlzLmVuY29kZXJfLndyaXRlWmlnemFnVmFyaW50NjQocGFyc2VJbnQodFtvXSwxMCkpO3RoaXMuZW5kRGVsaW1pdGVkXyhyKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZEZpeGVkMzI9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10JiZ0Lmxlbmd0aCl7dGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCksdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoNCp0Lmxlbmd0aCk7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy5lbmNvZGVyXy53cml0ZVVpbnQzMih0W3JdKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZEZpeGVkNjQ9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10JiZ0Lmxlbmd0aCl7dGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCksdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoOCp0Lmxlbmd0aCk7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy5lbmNvZGVyXy53cml0ZVVpbnQ2NCh0W3JdKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZEZpeGVkNjRTdHJpbmc9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10JiZ0Lmxlbmd0aCl7dGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCksdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoOCp0Lmxlbmd0aCk7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBvPWpzcGIuYXJpdGguVUludDY0LmZyb21TdHJpbmcodFtyXSk7dGhpcy5lbmNvZGVyXy53cml0ZVNwbGl0Rml4ZWQ2NChvLmxvLG8uaGkpfX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFNmaXhlZDMyPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe3RoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKDQqdC5sZW5ndGgpO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMuZW5jb2Rlcl8ud3JpdGVJbnQzMih0W3JdKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFNmaXhlZDY0PWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe3RoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKDgqdC5sZW5ndGgpO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMuZW5jb2Rlcl8ud3JpdGVJbnQ2NCh0W3JdKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZFNmaXhlZDY0U3RyaW5nPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe3RoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKDgqdC5sZW5ndGgpO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMuZW5jb2Rlcl8ud3JpdGVJbnQ2NFN0cmluZyh0W3JdKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZEZsb2F0PWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe3RoaXMud3JpdGVGaWVsZEhlYWRlcl8oZSxqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpLHRoaXMuZW5jb2Rlcl8ud3JpdGVVbnNpZ25lZFZhcmludDMyKDQqdC5sZW5ndGgpO2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXRoaXMuZW5jb2Rlcl8ud3JpdGVGbG9hdCh0W3JdKX19LGpzcGIuQmluYXJ5V3JpdGVyLnByb3RvdHlwZS53cml0ZVBhY2tlZERvdWJsZT1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQmJnQubGVuZ3RoKXt0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMig4KnQubGVuZ3RoKTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl0aGlzLmVuY29kZXJfLndyaXRlRG91YmxlKHRbcl0pfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkQm9vbD1mdW5jdGlvbihlLHQpe2lmKG51bGwhPXQmJnQubGVuZ3RoKXt0aGlzLndyaXRlRmllbGRIZWFkZXJfKGUsanNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKSx0aGlzLmVuY29kZXJfLndyaXRlVW5zaWduZWRWYXJpbnQzMih0Lmxlbmd0aCk7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy5lbmNvZGVyXy53cml0ZUJvb2wodFtyXSl9fSxqc3BiLkJpbmFyeVdyaXRlci5wcm90b3R5cGUud3JpdGVQYWNrZWRFbnVtPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe2Zvcih2YXIgcj10aGlzLmJlZ2luRGVsaW1pdGVkXyhlKSxvPTA7bzx0Lmxlbmd0aDtvKyspdGhpcy5lbmNvZGVyXy53cml0ZUVudW0odFtvXSk7dGhpcy5lbmREZWxpbWl0ZWRfKHIpfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkRml4ZWRIYXNoNjQ9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT10JiZ0Lmxlbmd0aCl7dGhpcy53cml0ZUZpZWxkSGVhZGVyXyhlLGpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCksdGhpcy5lbmNvZGVyXy53cml0ZVVuc2lnbmVkVmFyaW50MzIoOCp0Lmxlbmd0aCk7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdGhpcy5lbmNvZGVyXy53cml0ZUZpeGVkSGFzaDY0KHRbcl0pfX0sanNwYi5CaW5hcnlXcml0ZXIucHJvdG90eXBlLndyaXRlUGFja2VkVmFyaW50SGFzaDY0PWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9dCYmdC5sZW5ndGgpe2Zvcih2YXIgcj10aGlzLmJlZ2luRGVsaW1pdGVkXyhlKSxvPTA7bzx0Lmxlbmd0aDtvKyspdGhpcy5lbmNvZGVyXy53cml0ZVZhcmludEhhc2g2NCh0W29dKTt0aGlzLmVuZERlbGltaXRlZF8ocil9fSxqc3BiLkJpbmFyeUl0ZXJhdG9yPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLmVsZW1lbnRzXz10aGlzLm5leHRNZXRob2RfPXRoaXMuZGVjb2Rlcl89bnVsbCx0aGlzLmN1cnNvcl89MCx0aGlzLm5leHRWYWx1ZV89bnVsbCx0aGlzLmF0RW5kXz0hMCx0aGlzLmluaXRfKGUsdCxyKX0sanNwYi5CaW5hcnlJdGVyYXRvci5wcm90b3R5cGUuaW5pdF89ZnVuY3Rpb24oZSx0LHIpe2UmJnQmJih0aGlzLmRlY29kZXJfPWUsdGhpcy5uZXh0TWV0aG9kXz10KSx0aGlzLmVsZW1lbnRzXz1yfHxudWxsLHRoaXMuY3Vyc29yXz0wLHRoaXMubmV4dFZhbHVlXz1udWxsLHRoaXMuYXRFbmRfPSF0aGlzLmRlY29kZXJfJiYhdGhpcy5lbGVtZW50c18sdGhpcy5uZXh0KCl9LGpzcGIuQmluYXJ5SXRlcmF0b3IuaW5zdGFuY2VDYWNoZV89W10sanNwYi5CaW5hcnlJdGVyYXRvci5hbGxvYz1mdW5jdGlvbihlLHQscil7aWYoanNwYi5CaW5hcnlJdGVyYXRvci5pbnN0YW5jZUNhY2hlXy5sZW5ndGgpe3ZhciBvPWpzcGIuQmluYXJ5SXRlcmF0b3IuaW5zdGFuY2VDYWNoZV8ucG9wKCk7cmV0dXJuIG8uaW5pdF8oZSx0LHIpLG99cmV0dXJuIG5ldyBqc3BiLkJpbmFyeUl0ZXJhdG9yKGUsdCxyKX0sanNwYi5CaW5hcnlJdGVyYXRvci5wcm90b3R5cGUuZnJlZT1mdW5jdGlvbigpe3RoaXMuY2xlYXIoKSxqc3BiLkJpbmFyeUl0ZXJhdG9yLmluc3RhbmNlQ2FjaGVfLmxlbmd0aDwxMDAmJmpzcGIuQmluYXJ5SXRlcmF0b3IuaW5zdGFuY2VDYWNoZV8ucHVzaCh0aGlzKX0sanNwYi5CaW5hcnlJdGVyYXRvci5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmRlY29kZXJfJiZ0aGlzLmRlY29kZXJfLmZyZWUoKSx0aGlzLmVsZW1lbnRzXz10aGlzLm5leHRNZXRob2RfPXRoaXMuZGVjb2Rlcl89bnVsbCx0aGlzLmN1cnNvcl89MCx0aGlzLm5leHRWYWx1ZV89bnVsbCx0aGlzLmF0RW5kXz0hMH0sanNwYi5CaW5hcnlJdGVyYXRvci5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmV4dFZhbHVlX30sanNwYi5CaW5hcnlJdGVyYXRvci5wcm90b3R5cGUuYXRFbmQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hdEVuZF99LGpzcGIuQmluYXJ5SXRlcmF0b3IucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm5leHRWYWx1ZV87cmV0dXJuIHRoaXMuZGVjb2Rlcl8/dGhpcy5kZWNvZGVyXy5hdEVuZCgpPyh0aGlzLm5leHRWYWx1ZV89bnVsbCx0aGlzLmF0RW5kXz0hMCk6dGhpcy5uZXh0VmFsdWVfPXRoaXMubmV4dE1ldGhvZF8uY2FsbCh0aGlzLmRlY29kZXJfKTp0aGlzLmVsZW1lbnRzXyYmKHRoaXMuY3Vyc29yXz09dGhpcy5lbGVtZW50c18ubGVuZ3RoPyh0aGlzLm5leHRWYWx1ZV89bnVsbCx0aGlzLmF0RW5kXz0hMCk6dGhpcy5uZXh0VmFsdWVfPXRoaXMuZWxlbWVudHNfW3RoaXMuY3Vyc29yXysrXSksZX0sanNwYi5CaW5hcnlEZWNvZGVyPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLmJ5dGVzXz1udWxsLHRoaXMudGVtcEhpZ2hfPXRoaXMudGVtcExvd189dGhpcy5jdXJzb3JfPXRoaXMuZW5kXz10aGlzLnN0YXJ0Xz0wLHRoaXMuZXJyb3JfPSExLGUmJnRoaXMuc2V0QmxvY2soZSx0LHIpfSxqc3BiLkJpbmFyeURlY29kZXIuaW5zdGFuY2VDYWNoZV89W10sanNwYi5CaW5hcnlEZWNvZGVyLmFsbG9jPWZ1bmN0aW9uKGUsdCxyKXtpZihqc3BiLkJpbmFyeURlY29kZXIuaW5zdGFuY2VDYWNoZV8ubGVuZ3RoKXt2YXIgbz1qc3BiLkJpbmFyeURlY29kZXIuaW5zdGFuY2VDYWNoZV8ucG9wKCk7cmV0dXJuIGUmJm8uc2V0QmxvY2soZSx0LHIpLG99cmV0dXJuIG5ldyBqc3BiLkJpbmFyeURlY29kZXIoZSx0LHIpfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmZyZWU9ZnVuY3Rpb24oKXt0aGlzLmNsZWFyKCksanNwYi5CaW5hcnlEZWNvZGVyLmluc3RhbmNlQ2FjaGVfLmxlbmd0aDwxMDAmJmpzcGIuQmluYXJ5RGVjb2Rlci5pbnN0YW5jZUNhY2hlXy5wdXNoKHRoaXMpfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGpzcGIuQmluYXJ5RGVjb2Rlci5hbGxvYyh0aGlzLmJ5dGVzXyx0aGlzLnN0YXJ0Xyx0aGlzLmVuZF8tdGhpcy5zdGFydF8pfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5ieXRlc189bnVsbCx0aGlzLmN1cnNvcl89dGhpcy5lbmRfPXRoaXMuc3RhcnRfPTAsdGhpcy5lcnJvcl89ITF9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUuZ2V0QnVmZmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnl0ZXNffSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnNldEJsb2NrPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLmJ5dGVzXz1qc3BiLnV0aWxzLmJ5dGVTb3VyY2VUb1VpbnQ4QXJyYXkoZSksdGhpcy5zdGFydF89Z29vZy5pc0RlZih0KT90OjAsdGhpcy5lbmRfPWdvb2cuaXNEZWYocik/dGhpcy5zdGFydF8rcjp0aGlzLmJ5dGVzXy5sZW5ndGgsdGhpcy5jdXJzb3JfPXRoaXMuc3RhcnRffSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmdldEVuZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZF99LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUuc2V0RW5kPWZ1bmN0aW9uKGUpe3RoaXMuZW5kXz1lfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5jdXJzb3JfPXRoaXMuc3RhcnRffSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmdldEN1cnNvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN1cnNvcl99LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUuc2V0Q3Vyc29yPWZ1bmN0aW9uKGUpe3RoaXMuY3Vyc29yXz1lfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmFkdmFuY2U9ZnVuY3Rpb24oZSl7dGhpcy5jdXJzb3JfKz1lLGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLmF0RW5kPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3Vyc29yXz09dGhpcy5lbmRffSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnBhc3RFbmQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJzb3JfPnRoaXMuZW5kX30sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5nZXRFcnJvcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVycm9yX3x8dGhpcy5jdXJzb3JfPDB8fHRoaXMuY3Vyc29yXz50aGlzLmVuZF99LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFNwbGl0VmFyaW50NjRfPWZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQscj0wLG89MDtvPDQ7bysrKWlmKHJ8PSgxMjcmKGU9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKytdKSk8PDcqbyxlPDEyOClyZXR1cm4gdGhpcy50ZW1wTG93Xz1yPj4+MCx2b2lkKHRoaXMudGVtcEhpZ2hfPTApO2lmKHJ8PSgxMjcmKGU9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKytdKSk8PDI4LHQ9MHwoMTI3JmUpPj40LGU8MTI4KXRoaXMudGVtcExvd189cj4+PjAsdGhpcy50ZW1wSGlnaF89dD4+PjA7ZWxzZXtmb3Iobz0wO288NTtvKyspaWYodHw9KDEyNyYoZT10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rK10pKTw8NypvKzMsZTwxMjgpcmV0dXJuIHRoaXMudGVtcExvd189cj4+PjAsdm9pZCh0aGlzLnRlbXBIaWdoXz10Pj4+MCk7Z29vZy5hc3NlcnRzLmZhaWwoXCJGYWlsZWQgdG8gcmVhZCB2YXJpbnQsIGVuY29kaW5nIGlzIGludmFsaWQuXCIpLHRoaXMuZXJyb3JfPSEwfX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5za2lwVmFyaW50PWZ1bmN0aW9uKCl7Zm9yKDsxMjgmdGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfXTspdGhpcy5jdXJzb3JfKys7dGhpcy5jdXJzb3JfKyt9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUudW5za2lwVmFyaW50PWZ1bmN0aW9uKGUpe2Zvcig7MTI4PGU7KXRoaXMuY3Vyc29yXy0tLGU+Pj49Nzt0aGlzLmN1cnNvcl8tLX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVW5zaWduZWRWYXJpbnQzMj1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5ieXRlc18scj0xMjcmKGU9dFt0aGlzLmN1cnNvcl8rMF0pO3JldHVybiBlPDEyOD8odGhpcy5jdXJzb3JfKz0xLGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLHIpOihyfD0oMTI3JihlPXRbdGhpcy5jdXJzb3JfKzFdKSk8PDcsZTwxMjg/KHRoaXMuY3Vyc29yXys9Mixnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuY3Vyc29yXzw9dGhpcy5lbmRfKSxyKToocnw9KDEyNyYoZT10W3RoaXMuY3Vyc29yXysyXSkpPDwxNCxlPDEyOD8odGhpcy5jdXJzb3JfKz0zLGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLHIpOihyfD0oMTI3JihlPXRbdGhpcy5jdXJzb3JfKzNdKSk8PDIxLGU8MTI4Pyh0aGlzLmN1cnNvcl8rPTQsZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLmN1cnNvcl88PXRoaXMuZW5kXykscik6KHJ8PSgxNSYoZT10W3RoaXMuY3Vyc29yXys0XSkpPDwyOCxlPDEyOD8odGhpcy5jdXJzb3JfKz01LGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLHI+Pj4wKToodGhpcy5jdXJzb3JfKz01LDEyODw9dFt0aGlzLmN1cnNvcl8rK10mJjEyODw9dFt0aGlzLmN1cnNvcl8rK10mJjEyODw9dFt0aGlzLmN1cnNvcl8rK10mJjEyODw9dFt0aGlzLmN1cnNvcl8rK10mJjEyODw9dFt0aGlzLmN1cnNvcl8rK10mJmdvb2cuYXNzZXJ0cy5hc3NlcnQoITEpLGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLHIpKSkpKX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkU2lnbmVkVmFyaW50MzI9anNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVW5zaWduZWRWYXJpbnQzMixqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRVbnNpZ25lZFZhcmludDMyU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFVuc2lnbmVkVmFyaW50MzIoKS50b1N0cmluZygpfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRTaWduZWRWYXJpbnQzMlN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRTaWduZWRWYXJpbnQzMigpLnRvU3RyaW5nKCl9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFppZ3phZ1ZhcmludDMyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkVW5zaWduZWRWYXJpbnQzMigpO3JldHVybiBlPj4+MV4tKDEmZSl9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFVuc2lnbmVkVmFyaW50NjQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkU3BsaXRWYXJpbnQ2NF8oKSxqc3BiLnV0aWxzLmpvaW5VaW50NjQodGhpcy50ZW1wTG93Xyx0aGlzLnRlbXBIaWdoXyl9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFVuc2lnbmVkVmFyaW50NjRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkU3BsaXRWYXJpbnQ2NF8oKSxqc3BiLnV0aWxzLmpvaW5VbnNpZ25lZERlY2ltYWxTdHJpbmcodGhpcy50ZW1wTG93Xyx0aGlzLnRlbXBIaWdoXyl9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFNpZ25lZFZhcmludDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFNwbGl0VmFyaW50NjRfKCksanNwYi51dGlscy5qb2luSW50NjQodGhpcy50ZW1wTG93Xyx0aGlzLnRlbXBIaWdoXyl9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFNpZ25lZFZhcmludDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFNwbGl0VmFyaW50NjRfKCksanNwYi51dGlscy5qb2luU2lnbmVkRGVjaW1hbFN0cmluZyh0aGlzLnRlbXBMb3dfLHRoaXMudGVtcEhpZ2hfKX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkWmlnemFnVmFyaW50NjQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkU3BsaXRWYXJpbnQ2NF8oKSxqc3BiLnV0aWxzLmpvaW5aaWd6YWc2NCh0aGlzLnRlbXBMb3dfLHRoaXMudGVtcEhpZ2hfKX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkWmlnemFnVmFyaW50NjRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkWmlnemFnVmFyaW50NjQoKS50b1N0cmluZygpfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRVaW50OD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuYnl0ZXNfW3RoaXMuY3Vyc29yXyswXTtyZXR1cm4gdGhpcy5jdXJzb3JfKz0xLGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLGV9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFVpbnQxNj1mdW5jdGlvbigpe3ZhciBlPXRoaXMuYnl0ZXNfW3RoaXMuY3Vyc29yXyswXSx0PXRoaXMuYnl0ZXNfW3RoaXMuY3Vyc29yXysxXTtyZXR1cm4gdGhpcy5jdXJzb3JfKz0yLGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLGU8PDB8dDw8OH0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVWludDMyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzBdLHQ9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzFdLHI9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzJdLG89dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzNdO3JldHVybiB0aGlzLmN1cnNvcl8rPTQsZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLmN1cnNvcl88PXRoaXMuZW5kXyksKGU8PDB8dDw8OHxyPDwxNnxvPDwyNCk+Pj4wfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRVaW50NjQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlYWRVaW50MzIoKSx0PXRoaXMucmVhZFVpbnQzMigpO3JldHVybiBqc3BiLnV0aWxzLmpvaW5VaW50NjQoZSx0KX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkVWludDY0U3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkVWludDMyKCksdD10aGlzLnJlYWRVaW50MzIoKTtyZXR1cm4ganNwYi51dGlscy5qb2luVW5zaWduZWREZWNpbWFsU3RyaW5nKGUsdCl9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEludDg9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMF07cmV0dXJuIHRoaXMuY3Vyc29yXys9MSxnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuY3Vyc29yXzw9dGhpcy5lbmRfKSxlPDwyND4+MjR9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEludDE2PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzBdLHQ9dGhpcy5ieXRlc19bdGhpcy5jdXJzb3JfKzFdO3JldHVybiB0aGlzLmN1cnNvcl8rPTIsZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLmN1cnNvcl88PXRoaXMuZW5kXyksKGU8PDB8dDw8OCk8PDE2Pj4xNn0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkSW50MzI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMF0sdD10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMV0scj10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rMl0sbz10aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rM107cmV0dXJuIHRoaXMuY3Vyc29yXys9NCxnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMuY3Vyc29yXzw9dGhpcy5lbmRfKSxlPDwwfHQ8PDh8cjw8MTZ8bzw8MjR9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEludDY0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkVWludDMyKCksdD10aGlzLnJlYWRVaW50MzIoKTtyZXR1cm4ganNwYi51dGlscy5qb2luSW50NjQoZSx0KX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkSW50NjRTdHJpbmc9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlYWRVaW50MzIoKSx0PXRoaXMucmVhZFVpbnQzMigpO3JldHVybiBqc3BiLnV0aWxzLmpvaW5TaWduZWREZWNpbWFsU3RyaW5nKGUsdCl9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEZsb2F0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkVWludDMyKCk7cmV0dXJuIGpzcGIudXRpbHMuam9pbkZsb2F0MzIoZSwwKX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkRG91YmxlPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5yZWFkVWludDMyKCksdD10aGlzLnJlYWRVaW50MzIoKTtyZXR1cm4ganNwYi51dGlscy5qb2luRmxvYXQ2NChlLHQpfSxqc3BiLkJpbmFyeURlY29kZXIucHJvdG90eXBlLnJlYWRCb29sPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmJ5dGVzX1t0aGlzLmN1cnNvcl8rK119LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZEVudW09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkU2lnbmVkVmFyaW50MzIoKX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuYnl0ZXNfLHI9dGhpcy5jdXJzb3JfO2U9citlO2Zvcih2YXIgbz1bXSxzPVwiXCI7cjxlOyl7aWYoKG49dFtyKytdKTwxMjgpby5wdXNoKG4pO2Vsc2V7aWYobjwxOTIpY29udGludWU7aWYobjwyMjQpe3ZhciBpPXRbcisrXTtvLnB1c2goKDMxJm4pPDw2fDYzJmkpfWVsc2UgaWYobjwyNDApe2k9dFtyKytdO3ZhciBhPXRbcisrXTtvLnB1c2goKDE1Jm4pPDwxMnwoNjMmaSk8PDZ8NjMmYSl9ZWxzZSBpZihuPDI0OCl7dmFyIG49KG49KDcmbik8PDE4fCg2MyYoaT10W3IrK10pKTw8MTJ8KDYzJihhPXRbcisrXSkpPDw2fDYzJnRbcisrXSktNjU1MzY7by5wdXNoKDU1Mjk2KyhuPj4xMCYxMDIzKSw1NjMyMCsoMTAyMyZuKSl9fTgxOTI8PW8ubGVuZ3RoJiYocys9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG8pLG8ubGVuZ3RoPTApfXJldHVybiBzKz1nb29nLmNyeXB0LmJ5dGVBcnJheVRvU3RyaW5nKG8pLHRoaXMuY3Vyc29yXz1yLHN9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFN0cmluZ1dpdGhMZW5ndGg9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnJlYWRVbnNpZ25lZFZhcmludDMyKCk7cmV0dXJuIHRoaXMucmVhZFN0cmluZyhlKX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkQnl0ZXM9ZnVuY3Rpb24oZSl7aWYoZTwwfHx0aGlzLmN1cnNvcl8rZT50aGlzLmJ5dGVzXy5sZW5ndGgpcmV0dXJuIHRoaXMuZXJyb3JfPSEwLGdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCBieXRlIGxlbmd0aCFcIiksbmV3IFVpbnQ4QXJyYXkoMCk7dmFyIHQ9dGhpcy5ieXRlc18uc3ViYXJyYXkodGhpcy5jdXJzb3JfLHRoaXMuY3Vyc29yXytlKTtyZXR1cm4gdGhpcy5jdXJzb3JfKz1lLGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5jdXJzb3JfPD10aGlzLmVuZF8pLHR9LGpzcGIuQmluYXJ5RGVjb2Rlci5wcm90b3R5cGUucmVhZFZhcmludEhhc2g2ND1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRTcGxpdFZhcmludDY0XygpLGpzcGIudXRpbHMuam9pbkhhc2g2NCh0aGlzLnRlbXBMb3dfLHRoaXMudGVtcEhpZ2hfKX0sanNwYi5CaW5hcnlEZWNvZGVyLnByb3RvdHlwZS5yZWFkRml4ZWRIYXNoNjQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmJ5dGVzXyx0PXRoaXMuY3Vyc29yXyxyPWVbdCswXSxvPWVbdCsxXSxzPWVbdCsyXSxpPWVbdCszXSxhPWVbdCs0XSxuPWVbdCs1XSxwPWVbdCs2XTtlPWVbdCs3XTtyZXR1cm4gdGhpcy5jdXJzb3JfKz04LFN0cmluZy5mcm9tQ2hhckNvZGUocixvLHMsaSxhLG4scCxlKX0sanNwYi5CaW5hcnlSZWFkZXI9ZnVuY3Rpb24oZSx0LHIpe3RoaXMuZGVjb2Rlcl89anNwYi5CaW5hcnlEZWNvZGVyLmFsbG9jKGUsdCxyKSx0aGlzLmZpZWxkQ3Vyc29yXz10aGlzLmRlY29kZXJfLmdldEN1cnNvcigpLHRoaXMubmV4dEZpZWxkXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5JTlZBTElEX0ZJRUxEX05VTUJFUix0aGlzLm5leHRXaXJlVHlwZV89anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuSU5WQUxJRCx0aGlzLmVycm9yXz0hMSx0aGlzLnJlYWRDYWxsYmFja3NfPW51bGx9LGpzcGIuQmluYXJ5UmVhZGVyLmluc3RhbmNlQ2FjaGVfPVtdLGpzcGIuQmluYXJ5UmVhZGVyLmFsbG9jPWZ1bmN0aW9uKGUsdCxyKXtpZihqc3BiLkJpbmFyeVJlYWRlci5pbnN0YW5jZUNhY2hlXy5sZW5ndGgpe3ZhciBvPWpzcGIuQmluYXJ5UmVhZGVyLmluc3RhbmNlQ2FjaGVfLnBvcCgpO3JldHVybiBlJiZvLmRlY29kZXJfLnNldEJsb2NrKGUsdCxyKSxvfXJldHVybiBuZXcganNwYi5CaW5hcnlSZWFkZXIoZSx0LHIpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuYWxsb2M9anNwYi5CaW5hcnlSZWFkZXIuYWxsb2MsanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmZyZWU9ZnVuY3Rpb24oKXt0aGlzLmRlY29kZXJfLmNsZWFyKCksdGhpcy5uZXh0RmllbGRfPWpzcGIuQmluYXJ5Q29uc3RhbnRzLklOVkFMSURfRklFTERfTlVNQkVSLHRoaXMubmV4dFdpcmVUeXBlXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5JTlZBTElELHRoaXMuZXJyb3JfPSExLHRoaXMucmVhZENhbGxiYWNrc189bnVsbCxqc3BiLkJpbmFyeVJlYWRlci5pbnN0YW5jZUNhY2hlXy5sZW5ndGg8MTAwJiZqc3BiLkJpbmFyeVJlYWRlci5pbnN0YW5jZUNhY2hlXy5wdXNoKHRoaXMpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuZ2V0RmllbGRDdXJzb3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5maWVsZEN1cnNvcl99LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5nZXRDdXJzb3I9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZWNvZGVyXy5nZXRDdXJzb3IoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmdldEJ1ZmZlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRlY29kZXJfLmdldEJ1ZmZlcigpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuZ2V0RmllbGROdW1iZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXh0RmllbGRffSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuZ2V0V2lyZVR5cGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uZXh0V2lyZVR5cGVffSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuaXNFbmRHcm91cD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkVORF9HUk9VUH0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmdldEVycm9yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXJyb3JffHx0aGlzLmRlY29kZXJfLmdldEVycm9yKCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5zZXRCbG9jaz1mdW5jdGlvbihlLHQscil7dGhpcy5kZWNvZGVyXy5zZXRCbG9jayhlLHQsciksdGhpcy5uZXh0RmllbGRfPWpzcGIuQmluYXJ5Q29uc3RhbnRzLklOVkFMSURfRklFTERfTlVNQkVSLHRoaXMubmV4dFdpcmVUeXBlXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5JTlZBTElEfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmRlY29kZXJfLnJlc2V0KCksdGhpcy5uZXh0RmllbGRfPWpzcGIuQmluYXJ5Q29uc3RhbnRzLklOVkFMSURfRklFTERfTlVNQkVSLHRoaXMubmV4dFdpcmVUeXBlXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5JTlZBTElEfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuYWR2YW5jZT1mdW5jdGlvbihlKXt0aGlzLmRlY29kZXJfLmFkdmFuY2UoZSl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5uZXh0RmllbGQ9ZnVuY3Rpb24oKXtpZih0aGlzLmRlY29kZXJfLmF0RW5kKCkpcmV0dXJuITE7aWYodGhpcy5nZXRFcnJvcigpKXJldHVybiBnb29nLmFzc2VydHMuZmFpbChcIkRlY29kZXIgaGl0IGFuIGVycm9yXCIpLCExO3RoaXMuZmllbGRDdXJzb3JfPXRoaXMuZGVjb2Rlcl8uZ2V0Q3Vyc29yKCk7dmFyIGUsdD0oZT10aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDMyKCkpPj4+MztyZXR1cm4oZT03JmUpIT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQmJmUhPWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVEMzImJmUhPWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVENjQmJmUhPWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCYmZSE9anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuU1RBUlRfR1JPVVAmJmUhPWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkVORF9HUk9VUD8oZ29vZy5hc3NlcnRzLmZhaWwoXCJJbnZhbGlkIHdpcmUgdHlwZVwiKSwhKHRoaXMuZXJyb3JfPSEwKSk6KHRoaXMubmV4dEZpZWxkXz10LHRoaXMubmV4dFdpcmVUeXBlXz1lLCEwKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnVuc2tpcEhlYWRlcj1mdW5jdGlvbigpe3RoaXMuZGVjb2Rlcl8udW5za2lwVmFyaW50KHRoaXMubmV4dEZpZWxkXzw8M3x0aGlzLm5leHRXaXJlVHlwZV8pfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuc2tpcE1hdGNoaW5nRmllbGRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5uZXh0RmllbGRfO2Zvcih0aGlzLnVuc2tpcEhlYWRlcigpO3RoaXMubmV4dEZpZWxkKCkmJnRoaXMuZ2V0RmllbGROdW1iZXIoKT09ZTspdGhpcy5za2lwRmllbGQoKTt0aGlzLmRlY29kZXJfLmF0RW5kKCl8fHRoaXMudW5za2lwSGVhZGVyKCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5za2lwVmFyaW50RmllbGQ9ZnVuY3Rpb24oKXt0aGlzLm5leHRXaXJlVHlwZV8hPWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVD8oZ29vZy5hc3NlcnRzLmZhaWwoXCJJbnZhbGlkIHdpcmUgdHlwZSBmb3Igc2tpcFZhcmludEZpZWxkXCIpLHRoaXMuc2tpcEZpZWxkKCkpOnRoaXMuZGVjb2Rlcl8uc2tpcFZhcmludCgpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuc2tpcERlbGltaXRlZEZpZWxkPWZ1bmN0aW9uKCl7aWYodGhpcy5uZXh0V2lyZVR5cGVfIT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpZ29vZy5hc3NlcnRzLmZhaWwoXCJJbnZhbGlkIHdpcmUgdHlwZSBmb3Igc2tpcERlbGltaXRlZEZpZWxkXCIpLHRoaXMuc2tpcEZpZWxkKCk7ZWxzZXt2YXIgZT10aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDMyKCk7dGhpcy5kZWNvZGVyXy5hZHZhbmNlKGUpfX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnNraXBGaXhlZDMyRmllbGQ9ZnVuY3Rpb24oKXt0aGlzLm5leHRXaXJlVHlwZV8hPWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkZJWEVEMzI/KGdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCB3aXJlIHR5cGUgZm9yIHNraXBGaXhlZDMyRmllbGRcIiksdGhpcy5za2lwRmllbGQoKSk6dGhpcy5kZWNvZGVyXy5hZHZhbmNlKDQpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUuc2tpcEZpeGVkNjRGaWVsZD1mdW5jdGlvbigpe3RoaXMubmV4dFdpcmVUeXBlXyE9anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2ND8oZ29vZy5hc3NlcnRzLmZhaWwoXCJJbnZhbGlkIHdpcmUgdHlwZSBmb3Igc2tpcEZpeGVkNjRGaWVsZFwiKSx0aGlzLnNraXBGaWVsZCgpKTp0aGlzLmRlY29kZXJfLmFkdmFuY2UoOCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5za2lwR3JvdXA9ZnVuY3Rpb24oKXt2YXIgZT1bdGhpcy5uZXh0RmllbGRfXTtkb3tpZighdGhpcy5uZXh0RmllbGQoKSl7Z29vZy5hc3NlcnRzLmZhaWwoXCJVbm1hdGNoZWQgc3RhcnQtZ3JvdXAgdGFnOiBzdHJlYW0gRU9GXCIpLHRoaXMuZXJyb3JfPSEwO2JyZWFrfWlmKHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuU1RBUlRfR1JPVVApZS5wdXNoKHRoaXMubmV4dEZpZWxkXyk7ZWxzZSBpZih0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkVORF9HUk9VUCYmdGhpcy5uZXh0RmllbGRfIT1lLnBvcCgpKXtnb29nLmFzc2VydHMuZmFpbChcIlVubWF0Y2hlZCBlbmQtZ3JvdXAgdGFnXCIpLHRoaXMuZXJyb3JfPSEwO2JyZWFrfX13aGlsZSgwPGUubGVuZ3RoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnNraXBGaWVsZD1mdW5jdGlvbigpe3N3aXRjaCh0aGlzLm5leHRXaXJlVHlwZV8pe2Nhc2UganNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UOnRoaXMuc2tpcFZhcmludEZpZWxkKCk7YnJlYWs7Y2FzZSBqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0OnRoaXMuc2tpcEZpeGVkNjRGaWVsZCgpO2JyZWFrO2Nhc2UganNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEOnRoaXMuc2tpcERlbGltaXRlZEZpZWxkKCk7YnJlYWs7Y2FzZSBqc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDMyOnRoaXMuc2tpcEZpeGVkMzJGaWVsZCgpO2JyZWFrO2Nhc2UganNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuU1RBUlRfR1JPVVA6dGhpcy5za2lwR3JvdXAoKTticmVhaztkZWZhdWx0Omdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCB3aXJlIGVuY29kaW5nIGZvciBmaWVsZC5cIil9fSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVnaXN0ZXJSZWFkQ2FsbGJhY2s9ZnVuY3Rpb24oZSx0KXtnb29nLmlzTnVsbCh0aGlzLnJlYWRDYWxsYmFja3NfKSYmKHRoaXMucmVhZENhbGxiYWNrc189e30pLGdvb2cuYXNzZXJ0cy5hc3NlcnQoIXRoaXMucmVhZENhbGxiYWNrc19bZV0pLHRoaXMucmVhZENhbGxiYWNrc19bZV09dH0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJ1blJlYWRDYWxsYmFjaz1mdW5jdGlvbihlKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydCghZ29vZy5pc051bGwodGhpcy5yZWFkQ2FsbGJhY2tzXykpLGU9dGhpcy5yZWFkQ2FsbGJhY2tzX1tlXSxnb29nLmFzc2VydHMuYXNzZXJ0KGUpLGUodGhpcyl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkQW55PWZ1bmN0aW9uKGUpe3RoaXMubmV4dFdpcmVUeXBlXz1qc3BiLkJpbmFyeUNvbnN0YW50cy5GaWVsZFR5cGVUb1dpcmVUeXBlKGUpO3ZhciB0PWpzcGIuQmluYXJ5Q29uc3RhbnRzLkZpZWxkVHlwZTtzd2l0Y2goZSl7Y2FzZSB0LkRPVUJMRTpyZXR1cm4gdGhpcy5yZWFkRG91YmxlKCk7Y2FzZSB0LkZMT0FUOnJldHVybiB0aGlzLnJlYWRGbG9hdCgpO2Nhc2UgdC5JTlQ2NDpyZXR1cm4gdGhpcy5yZWFkSW50NjQoKTtjYXNlIHQuVUlOVDY0OnJldHVybiB0aGlzLnJlYWRVaW50NjQoKTtjYXNlIHQuSU5UMzI6cmV0dXJuIHRoaXMucmVhZEludDMyKCk7Y2FzZSB0LkZJWEVENjQ6cmV0dXJuIHRoaXMucmVhZEZpeGVkNjQoKTtjYXNlIHQuRklYRUQzMjpyZXR1cm4gdGhpcy5yZWFkRml4ZWQzMigpO2Nhc2UgdC5CT09MOnJldHVybiB0aGlzLnJlYWRCb29sKCk7Y2FzZSB0LlNUUklORzpyZXR1cm4gdGhpcy5yZWFkU3RyaW5nKCk7Y2FzZSB0LkdST1VQOmdvb2cuYXNzZXJ0cy5mYWlsKFwiR3JvdXAgZmllbGQgdHlwZSBub3Qgc3VwcG9ydGVkIGluIHJlYWRBbnkoKVwiKTtjYXNlIHQuTUVTU0FHRTpnb29nLmFzc2VydHMuZmFpbChcIk1lc3NhZ2UgZmllbGQgdHlwZSBub3Qgc3VwcG9ydGVkIGluIHJlYWRBbnkoKVwiKTtjYXNlIHQuQllURVM6cmV0dXJuIHRoaXMucmVhZEJ5dGVzKCk7Y2FzZSB0LlVJTlQzMjpyZXR1cm4gdGhpcy5yZWFkVWludDMyKCk7Y2FzZSB0LkVOVU06cmV0dXJuIHRoaXMucmVhZEVudW0oKTtjYXNlIHQuU0ZJWEVEMzI6cmV0dXJuIHRoaXMucmVhZFNmaXhlZDMyKCk7Y2FzZSB0LlNGSVhFRDY0OnJldHVybiB0aGlzLnJlYWRTZml4ZWQ2NCgpO2Nhc2UgdC5TSU5UMzI6cmV0dXJuIHRoaXMucmVhZFNpbnQzMigpO2Nhc2UgdC5TSU5UNjQ6cmV0dXJuIHRoaXMucmVhZFNpbnQ2NCgpO2Nhc2UgdC5GSEFTSDY0OnJldHVybiB0aGlzLnJlYWRGaXhlZEhhc2g2NCgpO2Nhc2UgdC5WSEFTSDY0OnJldHVybiB0aGlzLnJlYWRWYXJpbnRIYXNoNjQoKTtkZWZhdWx0Omdvb2cuYXNzZXJ0cy5mYWlsKFwiSW52YWxpZCBmaWVsZCB0eXBlIGluIHJlYWRBbnkoKVwiKX1yZXR1cm4gMH0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRNZXNzYWdlPWZ1bmN0aW9uKGUsdCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCk7dmFyIHI9dGhpcy5kZWNvZGVyXy5nZXRFbmQoKSxvPXRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIoKTtvPXRoaXMuZGVjb2Rlcl8uZ2V0Q3Vyc29yKCkrbzt0aGlzLmRlY29kZXJfLnNldEVuZChvKSx0KGUsdGhpcyksdGhpcy5kZWNvZGVyXy5zZXRDdXJzb3IobyksdGhpcy5kZWNvZGVyXy5zZXRFbmQocil9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkR3JvdXA9ZnVuY3Rpb24oZSx0LHIpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5TVEFSVF9HUk9VUCksZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRGaWVsZF89PWUpLHIodCx0aGlzKSx0aGlzLmVycm9yX3x8dGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5FTkRfR1JPVVB8fChnb29nLmFzc2VydHMuZmFpbChcIkdyb3VwIHN1Ym1lc3NhZ2UgZGlkIG5vdCBlbmQgd2l0aCBhbiBFTkRfR1JPVVAgdGFnXCIpLHRoaXMuZXJyb3JfPSEwKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLmdldEZpZWxkRGVjb2Rlcj1mdW5jdGlvbigpe2dvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5ERUxJTUlURUQpO3ZhciBlPXRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIoKSx0PXRoaXMuZGVjb2Rlcl8uZ2V0Q3Vyc29yKCkscj10K2U7ZT1qc3BiLkJpbmFyeURlY29kZXIuYWxsb2ModGhpcy5kZWNvZGVyXy5nZXRCdWZmZXIoKSx0LGUpO3JldHVybiB0aGlzLmRlY29kZXJfLnNldEN1cnNvcihyKSxlfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZGVjb2Rlcl8ucmVhZFNpZ25lZFZhcmludDMyKCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkSW50MzJTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5kZWNvZGVyXy5yZWFkU2lnbmVkVmFyaW50MzJTdHJpbmcoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRJbnQ2ND1mdW5jdGlvbigpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmRlY29kZXJfLnJlYWRTaWduZWRWYXJpbnQ2NCgpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEludDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZGVjb2Rlcl8ucmVhZFNpZ25lZFZhcmludDY0U3RyaW5nKCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkVWludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRVaW50MzJTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQzMlN0cmluZygpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFVpbnQ2ND1mdW5jdGlvbigpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDY0KCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkVWludDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50NjRTdHJpbmcoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTaW50MzI9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5kZWNvZGVyXy5yZWFkWmlnemFnVmFyaW50MzIoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTaW50NjQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5kZWNvZGVyXy5yZWFkWmlnemFnVmFyaW50NjQoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTaW50NjRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZ29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLlZBUklOVCksdGhpcy5kZWNvZGVyXy5yZWFkWmlnemFnVmFyaW50NjRTdHJpbmcoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRGaXhlZDMyPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDMyKSx0aGlzLmRlY29kZXJfLnJlYWRVaW50MzIoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRGaXhlZDY0PWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KSx0aGlzLmRlY29kZXJfLnJlYWRVaW50NjQoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRGaXhlZDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KSx0aGlzLmRlY29kZXJfLnJlYWRVaW50NjRTdHJpbmcoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTZml4ZWQzMj1mdW5jdGlvbigpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMiksdGhpcy5kZWNvZGVyXy5yZWFkSW50MzIoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRTZml4ZWQzMlN0cmluZz1mdW5jdGlvbigpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQzMiksdGhpcy5kZWNvZGVyXy5yZWFkSW50MzIoKS50b1N0cmluZygpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFNmaXhlZDY0PWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KSx0aGlzLmRlY29kZXJfLnJlYWRJbnQ2NCgpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFNmaXhlZDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDY0KSx0aGlzLmRlY29kZXJfLnJlYWRJbnQ2NFN0cmluZygpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZEZsb2F0PWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5GSVhFRDMyKSx0aGlzLmRlY29kZXJfLnJlYWRGbG9hdCgpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZERvdWJsZT1mdW5jdGlvbigpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCksdGhpcy5kZWNvZGVyXy5yZWFkRG91YmxlKCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkQm9vbD1mdW5jdGlvbigpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSwhIXRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRFbnVtPWZ1bmN0aW9uKCl7cmV0dXJuIGdvb2cuYXNzZXJ0cy5hc3NlcnQodGhpcy5uZXh0V2lyZVR5cGVfPT1qc3BiLkJpbmFyeUNvbnN0YW50cy5XaXJlVHlwZS5WQVJJTlQpLHRoaXMuZGVjb2Rlcl8ucmVhZFNpZ25lZFZhcmludDY0KCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkU3RyaW5nPWZ1bmN0aW9uKCl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCk7dmFyIGU9dGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQzMigpO3JldHVybiB0aGlzLmRlY29kZXJfLnJlYWRTdHJpbmcoZSl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkQnl0ZXM9ZnVuY3Rpb24oKXtnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuREVMSU1JVEVEKTt2YXIgZT10aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDMyKCk7cmV0dXJuIHRoaXMuZGVjb2Rlcl8ucmVhZEJ5dGVzKGUpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFZhcmludEhhc2g2ND1mdW5jdGlvbigpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuVkFSSU5UKSx0aGlzLmRlY29kZXJfLnJlYWRWYXJpbnRIYXNoNjQoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRGaXhlZEhhc2g2ND1mdW5jdGlvbigpe3JldHVybiBnb29nLmFzc2VydHMuYXNzZXJ0KHRoaXMubmV4dFdpcmVUeXBlXz09anNwYi5CaW5hcnlDb25zdGFudHMuV2lyZVR5cGUuRklYRUQ2NCksdGhpcy5kZWNvZGVyXy5yZWFkRml4ZWRIYXNoNjQoKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRGaWVsZF89ZnVuY3Rpb24oZSl7Z29vZy5hc3NlcnRzLmFzc2VydCh0aGlzLm5leHRXaXJlVHlwZV89PWpzcGIuQmluYXJ5Q29uc3RhbnRzLldpcmVUeXBlLkRFTElNSVRFRCk7Zm9yKHZhciB0PXRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50MzIoKSxyPSh0PXRoaXMuZGVjb2Rlcl8uZ2V0Q3Vyc29yKCkrdCxbXSk7dGhpcy5kZWNvZGVyXy5nZXRDdXJzb3IoKTx0OylyLnB1c2goZS5jYWxsKHRoaXMuZGVjb2Rlcl8pKTtyZXR1cm4gcn0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRJbnQzMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkU2lnbmVkVmFyaW50MzIpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEludDMyU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRTaWduZWRWYXJpbnQzMlN0cmluZyl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkSW50NjQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZFNpZ25lZFZhcmludDY0KX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRJbnQ2NFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkU2lnbmVkVmFyaW50NjRTdHJpbmcpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZFVpbnQzMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQzMil9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkVWludDMyU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRVbnNpZ25lZFZhcmludDMyU3RyaW5nKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRVaW50NjQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZFVuc2lnbmVkVmFyaW50NjQpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZFVpbnQ2NFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkVW5zaWduZWRWYXJpbnQ2NFN0cmluZyl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkU2ludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRaaWd6YWdWYXJpbnQzMil9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkU2ludDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRaaWd6YWdWYXJpbnQ2NCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkU2ludDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRaaWd6YWdWYXJpbnQ2NFN0cmluZyl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkRml4ZWQzMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkVWludDMyKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRGaXhlZDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRVaW50NjQpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEZpeGVkNjRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZFVpbnQ2NFN0cmluZyl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkU2ZpeGVkMzI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZEludDMyKX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWRTZml4ZWQ2ND1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkSW50NjQpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZFNmaXhlZDY0U3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRJbnQ2NFN0cmluZyl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkRmxvYXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZEZsb2F0KX0sanNwYi5CaW5hcnlSZWFkZXIucHJvdG90eXBlLnJlYWRQYWNrZWREb3VibGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkUGFja2VkRmllbGRfKHRoaXMuZGVjb2Rlcl8ucmVhZERvdWJsZSl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkQm9vbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkQm9vbCl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkRW51bT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRQYWNrZWRGaWVsZF8odGhpcy5kZWNvZGVyXy5yZWFkRW51bSl9LGpzcGIuQmluYXJ5UmVhZGVyLnByb3RvdHlwZS5yZWFkUGFja2VkVmFyaW50SGFzaDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRWYXJpbnRIYXNoNjQpfSxqc3BiLkJpbmFyeVJlYWRlci5wcm90b3R5cGUucmVhZFBhY2tlZEZpeGVkSGFzaDY0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZFBhY2tlZEZpZWxkXyh0aGlzLmRlY29kZXJfLnJlYWRGaXhlZEhhc2g2NCl9LGpzcGIuRXhwb3J0PXt9LGV4cG9ydHMuTWFwPWpzcGIuTWFwLGV4cG9ydHMuTWVzc2FnZT1qc3BiLk1lc3NhZ2UsZXhwb3J0cy5CaW5hcnlSZWFkZXI9anNwYi5CaW5hcnlSZWFkZXIsZXhwb3J0cy5CaW5hcnlXcml0ZXI9anNwYi5CaW5hcnlXcml0ZXIsZXhwb3J0cy5FeHRlbnNpb25GaWVsZEluZm89anNwYi5FeHRlbnNpb25GaWVsZEluZm8sZXhwb3J0cy5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm89anNwYi5FeHRlbnNpb25GaWVsZEJpbmFyeUluZm8sZXhwb3J0cy5leHBvcnRTeW1ib2w9Z29vZy5leHBvcnRTeW1ib2wsZXhwb3J0cy5pbmhlcml0cz1nb29nLmluaGVyaXRzLGV4cG9ydHMub2JqZWN0PXtleHRlbmQ6Z29vZy5vYmplY3QuZXh0ZW5kfSxleHBvcnRzLnR5cGVPZj1nb29nLnR5cGVPZn0pLmNhbGwodGhpcyxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9LF9yZXF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcil9LHtidWZmZXI6Mn1dLDk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbz1lKFwiZ29vZ2xlLXByb3RvYnVmXCIpLHM9byxpPXdpbmRvdztzLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Ccm9hZGNhc3RcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkJyb2FkY2FzdEFja1wiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ2hlY2tJblwiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ2hlY2tJbkFja1wiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeVwiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0QWNrXCIsbnVsbCxpKSxzLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnlcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeVwiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhXCIsbnVsbCxpKSxzLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGFBY2tcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLkhlYXJ0YmVhdFwiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uSGVhcnRiZWF0QWNrXCIsbnVsbCxpKSxzLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5Ob3RpZnlcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlB1Ymxpc2hcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2tcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnlcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlNES0hvdGVsQ21kSURcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVBY2tcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnlcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcFwiLG51bGwsaSkscy5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wQWNrXCIsbnVsbCxpKSxzLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5TdWJzY3JpYmVcIixudWxsLGkpLHMuZXhwb3J0U3ltYm9sKFwicHJvdG8uc3RyZWFtLlN1YnNjcmliZUFja1wiLG51bGwsaSkscHJvdG8uc3RyZWFtLkNoZWNrSW49ZnVuY3Rpb24oZSl7by5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0scy5pbmhlcml0cyhwcm90by5zdHJlYW0uQ2hlY2tJbixvLk1lc3NhZ2UpLHMuREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5DaGVja0luLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkNoZWNrSW5cIiksby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5DaGVja0luLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkNoZWNrSW4udG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkNoZWNrSW4udG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLGJvb2tpZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsXCJcIiksa2V5Om8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNSxcIlwiKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uQ2hlY2tJbi5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgby5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkNoZWNrSW47cmV0dXJuIHByb3RvLnN0cmVhbS5DaGVja0luLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uQ2hlY2tJbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldFVzZXJpZChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRTdHJpbmcoKTtlLnNldEJvb2tpZChyKTticmVhaztjYXNlIDU6cj10LnJlYWRTdHJpbmcoKTtlLnNldEtleShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uQ2hlY2tJbi5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uQ2hlY2tJbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5DaGVja0luLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldEdhbWVpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLHI9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMixyKSwwIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMyxyKSwwPChyPWUuZ2V0Qm9va2lkKCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZyg0LHIpLDA8KHI9ZS5nZXRLZXkoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDUscil9LHByb3RvLnN0cmVhbS5DaGVja0luLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uQ2hlY2tJbi5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5DaGVja0luLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkNoZWNrSW4ucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uQ2hlY2tJbi5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLkNoZWNrSW4ucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uQ2hlY2tJbi5wcm90b3R5cGUuZ2V0Qm9va2lkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCxcIlwiKX0scHJvdG8uc3RyZWFtLkNoZWNrSW4ucHJvdG90eXBlLnNldEJvb2tpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uQ2hlY2tJbi5wcm90b3R5cGUuZ2V0S2V5PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSxcIlwiKX0scHJvdG8uc3RyZWFtLkNoZWNrSW4ucHJvdG90eXBlLnNldEtleT1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjaz1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLkNoZWNrSW5BY2ssby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5DaGVja0luQWNrXCIpLHByb3RvLnN0cmVhbS5DaGVja0luQWNrLnJlcGVhdGVkRmllbGRzXz1bMyw0XSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkNoZWNrSW5BY2sucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uQ2hlY2tJbkFjay50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGJvb2tpZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCJcIiksY2hlY2tpbnNMaXN0Om8uTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHQsMykscGxheWVyc0xpc3Q6by5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodCw0KSxtYXhwbGF5ZXJzOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNSwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgby5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkNoZWNrSW5BY2s7cmV0dXJuIHByb3RvLnN0cmVhbS5DaGVja0luQWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFN0YXR1cyhyKTticmVhaztjYXNlIDI6cj10LnJlYWRTdHJpbmcoKTtlLnNldEJvb2tpZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRQYWNrZWRVaW50MzIoKTtlLnNldENoZWNraW5zTGlzdChyKTticmVhaztjYXNlIDQ6cj10LnJlYWRQYWNrZWRVaW50MzIoKTtlLnNldFBsYXllcnNMaXN0KHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFVpbnQzMigpO2Uuc2V0TWF4cGxheWVycyhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5DaGVja0luQWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZVVpbnQzMigxLHIpLDA8KHI9ZS5nZXRCb29raWQoKSkubGVuZ3RoJiZ0LndyaXRlU3RyaW5nKDIsciksMDwocj1lLmdldENoZWNraW5zTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVQYWNrZWRVaW50MzIoMyxyKSwwPChyPWUuZ2V0UGxheWVyc0xpc3QoKSkubGVuZ3RoJiZ0LndyaXRlUGFja2VkVWludDMyKDQsciksMCE9PShyPWUuZ2V0TWF4cGxheWVycygpKSYmdC53cml0ZVVpbnQzMig1LHIpfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5BY2sucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5wcm90b3R5cGUuZ2V0Qm9va2lkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIlwiKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5BY2sucHJvdG90eXBlLnNldEJvb2tpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5wcm90b3R5cGUuZ2V0Q2hlY2tpbnNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsMyl9LHByb3RvLnN0cmVhbS5DaGVja0luQWNrLnByb3RvdHlwZS5zZXRDaGVja2luc0xpc3Q9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldEZpZWxkKHRoaXMsMyxlfHxbXSl9LHByb3RvLnN0cmVhbS5DaGVja0luQWNrLnByb3RvdHlwZS5hZGRDaGVja2lucz1mdW5jdGlvbihlLHQpe28uTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywzLGUsdCl9LHByb3RvLnN0cmVhbS5DaGVja0luQWNrLnByb3RvdHlwZS5jbGVhckNoZWNraW5zTGlzdD1mdW5jdGlvbigpe3RoaXMuc2V0Q2hlY2tpbnNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5BY2sucHJvdG90eXBlLmdldFBsYXllcnNMaXN0PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHRoaXMsNCl9LHByb3RvLnN0cmVhbS5DaGVja0luQWNrLnByb3RvdHlwZS5zZXRQbGF5ZXJzTGlzdD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0RmllbGQodGhpcyw0LGV8fFtdKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5BY2sucHJvdG90eXBlLmFkZFBsYXllcnM9ZnVuY3Rpb24oZSx0KXtvLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsNCxlLHQpfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5wcm90b3R5cGUuY2xlYXJQbGF5ZXJzTGlzdD1mdW5jdGlvbigpe3RoaXMuc2V0UGxheWVyc0xpc3QoW10pfSxwcm90by5zdHJlYW0uQ2hlY2tJbkFjay5wcm90b3R5cGUuZ2V0TWF4cGxheWVycz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCl9LHByb3RvLnN0cmVhbS5DaGVja0luQWNrLnByb3RvdHlwZS5zZXRNYXhwbGF5ZXJzPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0scy5pbmhlcml0cyhwcm90by5zdHJlYW0uSGVhcnRiZWF0LG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkhlYXJ0YmVhdC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5IZWFydGJlYXRcIiksby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5IZWFydGJlYXQucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uSGVhcnRiZWF0LnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXQudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5IZWFydGJlYXQuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5IZWFydGJlYXQ7cmV0dXJuIHByb3RvLnN0cmVhbS5IZWFydGJlYXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uSGVhcnRiZWF0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDMscil9LHByb3RvLnN0cmVhbS5IZWFydGJlYXQucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXQucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0LnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdC5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXQucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXQucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0QWNrPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLkhlYXJ0YmVhdEFjayxvLk1lc3NhZ2UpLHMuREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5IZWFydGJlYXRBY2suZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uSGVhcnRiZWF0QWNrXCIpLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uSGVhcnRiZWF0QWNrLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkhlYXJ0YmVhdEFjay50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0QWNrLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkhlYXJ0YmVhdEFjay5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgby5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkhlYXJ0YmVhdEFjaztyZXR1cm4gcHJvdG8uc3RyZWFtLkhlYXJ0YmVhdEFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkhlYXJ0YmVhdEFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFN0YXR1cyhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0QWNrLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgby5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5IZWFydGJlYXRBY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uSGVhcnRiZWF0QWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlVWludDMyKDEscil9LHByb3RvLnN0cmVhbS5IZWFydGJlYXRBY2sucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5IZWFydGJlYXRBY2sucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uQnJvYWRjYXN0PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Ccm9hZGNhc3Qsby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQnJvYWRjYXN0LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkJyb2FkY2FzdFwiKSxwcm90by5zdHJlYW0uQnJvYWRjYXN0LnJlcGVhdGVkRmllbGRzXz1bM10sby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uQnJvYWRjYXN0LnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17cm9vbWlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSxcIjBcIiksZmxhZzpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksZHN0dWlkc0xpc3Q6by5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodCwzKSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Ccm9hZGNhc3Q7cmV0dXJuIHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRGbGFnKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFBhY2tlZFVpbnQzMigpO2Uuc2V0RHN0dWlkc0xpc3Qocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdC5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uQnJvYWRjYXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0RmxhZygpKSYmdC53cml0ZVVpbnQzMigyLHIpLDA8KHI9ZS5nZXREc3R1aWRzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVQYWNrZWRVaW50MzIoMyxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDQscil9LHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uQnJvYWRjYXN0LnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdC5wcm90b3R5cGUuZ2V0RmxhZz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QucHJvdG90eXBlLnNldEZsYWc9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdC5wcm90b3R5cGUuZ2V0RHN0dWlkc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywzKX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdC5wcm90b3R5cGUuc2V0RHN0dWlkc0xpc3Q9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldEZpZWxkKHRoaXMsMyxlfHxbXSl9LHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QucHJvdG90eXBlLmFkZERzdHVpZHM9ZnVuY3Rpb24oZSx0KXtvLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsMyxlLHQpfSxwcm90by5zdHJlYW0uQnJvYWRjYXN0LnByb3RvdHlwZS5jbGVhckRzdHVpZHNMaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXREc3R1aWRzTGlzdChbXSl9LHByb3RvLnN0cmVhbS5Ccm9hZGNhc3QucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uQnJvYWRjYXN0LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdC5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uQnJvYWRjYXN0LnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdEFjaz1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5Ccm9hZGNhc3RBY2ssby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uQnJvYWRjYXN0QWNrLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkJyb2FkY2FzdEFja1wiKSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkJyb2FkY2FzdEFjay5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5Ccm9hZGNhc3RBY2sudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdEFjay50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5Ccm9hZGNhc3RBY2suZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Ccm9hZGNhc3RBY2s7cmV0dXJuIHByb3RvLnN0cmVhbS5Ccm9hZGNhc3RBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5Ccm9hZGNhc3RBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdEFjay5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uQnJvYWRjYXN0QWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkJyb2FkY2FzdEFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZVVpbnQzMigxLHIpfSxwcm90by5zdHJlYW0uQnJvYWRjYXN0QWNrLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uQnJvYWRjYXN0QWNrLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnk9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5DaGVja0luTm90aWZ5LG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeVwiKSxwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeS5yZXBlYXRlZEZpZWxkc189WzMsNF0sby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5DaGVja0luTm90aWZ5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17dXNlcmlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxib29raWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiXCIpLGNoZWNraW5zTGlzdDpvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0LDMpLHBsYXllcnNMaXN0Om8uTWVzc2FnZS5nZXRSZXBlYXRlZEZpZWxkKHQsNCksbWF4cGxheWVyczpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5DaGVja0luTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkU3RyaW5nKCk7ZS5zZXRCb29raWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkUGFja2VkVWludDMyKCk7ZS5zZXRDaGVja2luc0xpc3Qocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkUGFja2VkVWludDMyKCk7ZS5zZXRQbGF5ZXJzTGlzdChyKTticmVhaztjYXNlIDU6cj10LnJlYWRVaW50MzIoKTtlLnNldE1heHBsYXllcnMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRVc2VyaWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwPChyPWUuZ2V0Qm9va2lkKCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZygyLHIpLDA8KHI9ZS5nZXRDaGVja2luc0xpc3QoKSkubGVuZ3RoJiZ0LndyaXRlUGFja2VkVWludDMyKDMsciksMDwocj1lLmdldFBsYXllcnNMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVBhY2tlZFVpbnQzMig0LHIpLDAhPT0ocj1lLmdldE1heHBsYXllcnMoKSkmJnQud3JpdGVVaW50MzIoNSxyKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5DaGVja0luTm90aWZ5LnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkucHJvdG90eXBlLmdldEJvb2tpZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCJcIil9LHByb3RvLnN0cmVhbS5DaGVja0luTm90aWZ5LnByb3RvdHlwZS5zZXRCb29raWQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkucHJvdG90eXBlLmdldENoZWNraW5zTGlzdD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDMpfSxwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeS5wcm90b3R5cGUuc2V0Q2hlY2tpbnNMaXN0PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDMsZXx8W10pfSxwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeS5wcm90b3R5cGUuYWRkQ2hlY2tpbnM9ZnVuY3Rpb24oZSx0KXtvLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsMyxlLHQpfSxwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeS5wcm90b3R5cGUuY2xlYXJDaGVja2luc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldENoZWNraW5zTGlzdChbXSl9LHByb3RvLnN0cmVhbS5DaGVja0luTm90aWZ5LnByb3RvdHlwZS5nZXRQbGF5ZXJzTGlzdD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDQpfSxwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeS5wcm90b3R5cGUuc2V0UGxheWVyc0xpc3Q9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldEZpZWxkKHRoaXMsNCxlfHxbXSl9LHByb3RvLnN0cmVhbS5DaGVja0luTm90aWZ5LnByb3RvdHlwZS5hZGRQbGF5ZXJzPWZ1bmN0aW9uKGUsdCl7by5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLDQsZSx0KX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkucHJvdG90eXBlLmNsZWFyUGxheWVyc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldFBsYXllcnNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLkNoZWNrSW5Ob3RpZnkucHJvdG90eXBlLmdldE1heHBsYXllcnM9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApfSxwcm90by5zdHJlYW0uQ2hlY2tJbk5vdGlmeS5wcm90b3R5cGUuc2V0TWF4cGxheWVycz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uTm90aWZ5PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLk5vdGlmeSxvLk1lc3NhZ2UpLHMuREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5Ob3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uTm90aWZ5XCIpLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTm90aWZ5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLk5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uTm90aWZ5LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3NyY3VpZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscHJpb3JpdHk6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLk5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgby5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLk5vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLk5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLk5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFNyY3VpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFByaW9yaXR5KHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRDcHByb3RvKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5Ob3RpZnkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLk5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5Ob3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3JjdWlkKCkpJiZ0LndyaXRlVWludDMyKDEsciksMCE9PShyPWUuZ2V0UHJpb3JpdHkoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDMscil9LHByb3RvLnN0cmVhbS5Ob3RpZnkucHJvdG90eXBlLmdldFNyY3VpZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5Ob3RpZnkucHJvdG90eXBlLnNldFNyY3VpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTm90aWZ5LnByb3RvdHlwZS5nZXRQcmlvcml0eT1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5Ob3RpZnkucHJvdG90eXBlLnNldFByaW9yaXR5PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5Ob3RpZnkucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLFwiXCIpfSxwcm90by5zdHJlYW0uTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLk5vdGlmeS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uTm90aWZ5LnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZT1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uU3Vic2NyaWJlLnJlcGVhdGVkRmllbGRzXyxudWxsKX0scy5pbmhlcml0cyhwcm90by5zdHJlYW0uU3Vic2NyaWJlLG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlN1YnNjcmliZS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5TdWJzY3JpYmVcIikscHJvdG8uc3RyZWFtLlN1YnNjcmliZS5yZXBlYXRlZEZpZWxkc189WzMsNF0sby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5TdWJzY3JpYmUucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uU3Vic2NyaWJlLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5TdWJzY3JpYmUudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSxjb25maXJtc0xpc3Q6by5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodCwzKSxjYW5jZWxzTGlzdDpvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0LDQpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5TdWJzY3JpYmUuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TdWJzY3JpYmU7cmV0dXJuIHByb3RvLnN0cmVhbS5TdWJzY3JpYmUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5TdWJzY3JpYmUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkU3RyaW5nKCk7ZS5hZGRDb25maXJtcyhyKTticmVhaztjYXNlIDQ6cj10LnJlYWRTdHJpbmcoKTtlLmFkZENhbmNlbHMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uU3Vic2NyaWJlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMDwocj1lLmdldENvbmZpcm1zTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZFN0cmluZygzLHIpLDA8KHI9ZS5nZXRDYW5jZWxzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZFN0cmluZyg0LHIpfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZS5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIjBcIil9LHByb3RvLnN0cmVhbS5TdWJzY3JpYmUucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlLnByb3RvdHlwZS5nZXRDb25maXJtc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywzKX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZS5wcm90b3R5cGUuc2V0Q29uZmlybXNMaXN0PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDMsZXx8W10pfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlLnByb3RvdHlwZS5hZGRDb25maXJtcz1mdW5jdGlvbihlLHQpe28uTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywzLGUsdCl9LHByb3RvLnN0cmVhbS5TdWJzY3JpYmUucHJvdG90eXBlLmNsZWFyQ29uZmlybXNMaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXRDb25maXJtc0xpc3QoW10pfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlLnByb3RvdHlwZS5nZXRDYW5jZWxzTGlzdD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDQpfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlLnByb3RvdHlwZS5zZXRDYW5jZWxzTGlzdD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0RmllbGQodGhpcyw0LGV8fFtdKX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZS5wcm90b3R5cGUuYWRkQ2FuY2Vscz1mdW5jdGlvbihlLHQpe28uTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcyw0LGUsdCl9LHByb3RvLnN0cmVhbS5TdWJzY3JpYmUucHJvdG90eXBlLmNsZWFyQ2FuY2Vsc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldENhbmNlbHNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZUFjaz1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnJlcGVhdGVkRmllbGRzXyxudWxsKX0scy5pbmhlcml0cyhwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlN1YnNjcmliZUFjay5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5TdWJzY3JpYmVBY2tcIikscHJvdG8uc3RyZWFtLlN1YnNjcmliZUFjay5yZXBlYXRlZEZpZWxkc189WzJdLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlN1YnNjcmliZUFjay50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksZ3JvdXBzTGlzdDpvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0LDIpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5TdWJzY3JpYmVBY2suZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TdWJzY3JpYmVBY2s7cmV0dXJuIHByb3RvLnN0cmVhbS5TdWJzY3JpYmVBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5TdWJzY3JpYmVBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkU3RyaW5nKCk7ZS5hZGRHcm91cHMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZUFjay5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZUFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwPChyPWUuZ2V0R3JvdXBzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZFN0cmluZygyLHIpfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlN1YnNjcmliZUFjay5wcm90b3R5cGUuZ2V0R3JvdXBzTGlzdD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDIpfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnByb3RvdHlwZS5zZXRHcm91cHNMaXN0PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRGaWVsZCh0aGlzLDIsZXx8W10pfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnByb3RvdHlwZS5hZGRHcm91cHM9ZnVuY3Rpb24oZSx0KXtvLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsMixlLHQpfSxwcm90by5zdHJlYW0uU3Vic2NyaWJlQWNrLnByb3RvdHlwZS5jbGVhckdyb3Vwc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldEdyb3Vwc0xpc3QoW10pfSxwcm90by5zdHJlYW0uUHVibGlzaD1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxwcm90by5zdHJlYW0uUHVibGlzaC5yZXBlYXRlZEZpZWxkc18sbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLlB1Ymxpc2gsby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uUHVibGlzaC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5QdWJsaXNoXCIpLHByb3RvLnN0cmVhbS5QdWJsaXNoLnJlcGVhdGVkRmllbGRzXz1bM10sby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5QdWJsaXNoLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLlB1Ymxpc2gudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2gudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17cm9vbWlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSxcIjBcIikscHJpb3JpdHk6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGdyb3Vwc0xpc3Q6by5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodCwzKSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5QdWJsaXNoLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBvLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uUHVibGlzaDtyZXR1cm4gcHJvdG8uc3RyZWFtLlB1Ymxpc2guZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5QdWJsaXNoLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0UHJpb3JpdHkocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkU3RyaW5nKCk7ZS5hZGRHcm91cHMocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlB1Ymxpc2gucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlB1Ymxpc2guc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uUHVibGlzaC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0UHJpb3JpdHkoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwPChyPWUuZ2V0R3JvdXBzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVSZXBlYXRlZFN0cmluZygzLHIpLDA8KHI9ZS5nZXRDcHByb3RvX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoNCxyKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2gucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uUHVibGlzaC5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5QdWJsaXNoLnByb3RvdHlwZS5nZXRQcmlvcml0eT1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5QdWJsaXNoLnByb3RvdHlwZS5zZXRQcmlvcml0eT1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uUHVibGlzaC5wcm90b3R5cGUuZ2V0R3JvdXBzTGlzdD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDMpfSxwcm90by5zdHJlYW0uUHVibGlzaC5wcm90b3R5cGUuc2V0R3JvdXBzTGlzdD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0RmllbGQodGhpcywzLGV8fFtdKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2gucHJvdG90eXBlLmFkZEdyb3Vwcz1mdW5jdGlvbihlLHQpe28uTWVzc2FnZS5hZGRUb1JlcGVhdGVkRmllbGQodGhpcywzLGUsdCl9LHByb3RvLnN0cmVhbS5QdWJsaXNoLnByb3RvdHlwZS5jbGVhckdyb3Vwc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldEdyb3Vwc0xpc3QoW10pfSxwcm90by5zdHJlYW0uUHVibGlzaC5wcm90b3R5cGUuZ2V0Q3Bwcm90bz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsXCJcIil9LHByb3RvLnN0cmVhbS5QdWJsaXNoLnByb3RvdHlwZS5nZXRDcHByb3RvX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2gucHJvdG90eXBlLmdldENwcHJvdG9fYXNVOD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2gucHJvdG90eXBlLnNldENwcHJvdG89ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uUHVibGlzaEFjaz1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5QdWJsaXNoQWNrLG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2suZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uUHVibGlzaEFja1wiKSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2sucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uUHVibGlzaEFjay50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uUHVibGlzaEFjay50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLGRzdG51bTpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2suZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5QdWJsaXNoQWNrO3JldHVybiBwcm90by5zdHJlYW0uUHVibGlzaEFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXREc3RudW0ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2sucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uUHVibGlzaEFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXREc3RudW0oKSkmJnQud3JpdGVVaW50MzIoMixyKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2sucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5QdWJsaXNoQWNrLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hBY2sucHJvdG90eXBlLmdldERzdG51bT1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5QdWJsaXNoQWNrLnByb3RvdHlwZS5zZXREc3RudW09ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnk9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEscHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkucmVwZWF0ZWRGaWVsZHNfLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5QdWJsaXNoTm90aWZ5LG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeVwiKSxwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeS5yZXBlYXRlZEZpZWxkc189WzNdLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5QdWJsaXNoTm90aWZ5LnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5QdWJsaXNoTm90aWZ5LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3NyY3VpZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscHJpb3JpdHk6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGdyb3Vwc0xpc3Q6by5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodCwzKSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5QdWJsaXNoTm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBvLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5QdWJsaXNoTm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0U3JjdWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0UHJpb3JpdHkocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkU3RyaW5nKCk7ZS5hZGRHcm91cHMocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTcmN1aWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRQcmlvcml0eSgpKSYmdC53cml0ZVVpbnQzMigyLHIpLDA8KHI9ZS5nZXRHcm91cHNMaXN0KCkpLmxlbmd0aCYmdC53cml0ZVJlcGVhdGVkU3RyaW5nKDMsciksMDwocj1lLmdldENwcHJvdG9fYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcyg0LHIpfSxwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeS5wcm90b3R5cGUuZ2V0U3JjdWlkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkucHJvdG90eXBlLnNldFNyY3VpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeS5wcm90b3R5cGUuZ2V0UHJpb3JpdHk9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeS5wcm90b3R5cGUuc2V0UHJpb3JpdHk9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkucHJvdG90eXBlLmdldEdyb3Vwc0xpc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldFJlcGVhdGVkRmllbGQodGhpcywzKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkucHJvdG90eXBlLnNldEdyb3Vwc0xpc3Q9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldEZpZWxkKHRoaXMsMyxlfHxbXSl9LHByb3RvLnN0cmVhbS5QdWJsaXNoTm90aWZ5LnByb3RvdHlwZS5hZGRHcm91cHM9ZnVuY3Rpb24oZSx0KXtvLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZEZpZWxkKHRoaXMsMyxlLHQpfSxwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeS5wcm90b3R5cGUuY2xlYXJHcm91cHNMaXN0PWZ1bmN0aW9uKCl7dGhpcy5zZXRHcm91cHNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLlB1Ymxpc2hOb3RpZnkucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uUHVibGlzaE5vdGlmeS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5QdWJsaXNoTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5QdWJsaXNoTm90aWZ5LnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcD1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXAsby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcFwiKSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXAudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtnYW1laWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHJvb21pZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCIwXCIpLHByaW9yaXR5Om8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSx1c2V0aW1lc3RhbXA6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LCExKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBvLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wO3JldHVybiBwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0UHJpb3JpdHkocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkQm9vbCgpO2Uuc2V0VXNldGltZXN0YW1wKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXAucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXAuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldFByaW9yaXR5KCkpJiZ0LndyaXRlVWludDMyKDMsciksKHI9ZS5nZXRVc2V0aW1lc3RhbXAoKSkmJnQud3JpdGVCb29sKDQscil9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXAucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXAucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcC5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXAucHJvdG90eXBlLmdldFByaW9yaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcC5wcm90b3R5cGUuc2V0UHJpb3JpdHk9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcC5wcm90b3R5cGUuZ2V0VXNldGltZXN0YW1wPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwhMSl9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXAucHJvdG90eXBlLnNldFVzZXRpbWVzdGFtcD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zQm9vbGVhbkZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcEFjaz1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXBBY2ssby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wQWNrLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcEFja1wiKSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcEFjay5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXBBY2sudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcEFjay50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHRpbWVzdGFtcDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCIwXCIpfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXBBY2suZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXBBY2s7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXBBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXBBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUaW1lc3RhbXAocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcEFjay5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wQWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcEFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0VGltZXN0YW1wKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIscil9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXBBY2sucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5TZXRVc2VUaW1lU3RhbXBBY2sucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uU2V0VXNlVGltZVN0YW1wQWNrLnByb3RvdHlwZS5nZXRUaW1lc3RhbXA9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLlNldFVzZVRpbWVTdGFtcEFjay5wcm90b3R5cGUuc2V0VGltZXN0YW1wPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUsby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlXCIpLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2dhbWVpZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIikscHJpb3JpdHk6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLGZyYW1lcmF0ZTpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCksZnJhbWVpZHg6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LDApLGVuYWJsZWdzOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNiwwKSxjYWNoZWZyYW1lbXM6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw3LDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBvLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZTtyZXR1cm4gcHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0UHJpb3JpdHkocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRGcmFtZXJhdGUocik7YnJlYWs7Y2FzZSA1OnI9dC5yZWFkVWludDMyKCk7ZS5zZXRGcmFtZWlkeChyKTticmVhaztjYXNlIDY6cj10LnJlYWRVaW50MzIoKTtlLnNldEVuYWJsZWdzKHIpO2JyZWFrO2Nhc2UgNzpyPXQucmVhZEludDMyKCk7ZS5zZXRDYWNoZWZyYW1lbXMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRHYW1laWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSxyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDIsciksMCE9PShyPWUuZ2V0UHJpb3JpdHkoKSkmJnQud3JpdGVVaW50MzIoMyxyKSwwIT09KHI9ZS5nZXRGcmFtZXJhdGUoKSkmJnQud3JpdGVVaW50MzIoNCxyKSwwIT09KHI9ZS5nZXRGcmFtZWlkeCgpKSYmdC53cml0ZVVpbnQzMig1LHIpLDAhPT0ocj1lLmdldEVuYWJsZWdzKCkpJiZ0LndyaXRlVWludDMyKDYsciksMCE9PShyPWUuZ2V0Q2FjaGVmcmFtZW1zKCkpJiZ0LndyaXRlSW50MzIoNyxyKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlLnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZS5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlLnByb3RvdHlwZS5nZXRQcmlvcml0eT1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlLnByb3RvdHlwZS5zZXRQcmlvcml0eT1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZS5wcm90b3R5cGUuZ2V0RnJhbWVyYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUucHJvdG90eXBlLnNldEZyYW1lcmF0ZT1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZS5wcm90b3R5cGUuZ2V0RnJhbWVpZHg9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZS5wcm90b3R5cGUuc2V0RnJhbWVpZHg9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSxlKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUucHJvdG90eXBlLmdldEVuYWJsZWdzPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNiwwKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGUucHJvdG90eXBlLnNldEVuYWJsZWdzPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlLnByb3RvdHlwZS5nZXRDYWNoZWZyYW1lbXM9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LDApfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZS5wcm90b3R5cGUuc2V0Q2FjaGVmcmFtZW1zPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDcsZSl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlQWNrPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVBY2ssby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZUFjay5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlQWNrXCIpLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZUFjay5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlQWNrLnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlQWNrLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVBY2suZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlQWNrO3JldHVybiBwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZUFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVBY2sucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVBY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZUFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZVVpbnQzMigxLHIpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZUFjay5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVBY2sucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeT1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlTm90aWZ5LG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeVwiKSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtwcmlvcml0eTpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksZnJhbWVyYXRlOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxmcmFtZWlkeDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksdGltZXN0YW1wOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCxcIjBcIiksZW5hYmxlZ3M6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LDApLGNhY2hlZnJhbWVtczpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDYsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRQcmlvcml0eShyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldEZyYW1lcmF0ZShyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldEZyYW1laWR4KHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0VGltZXN0YW1wKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFVpbnQzMigpO2Uuc2V0RW5hYmxlZ3Mocik7YnJlYWs7Y2FzZSA2OnI9dC5yZWFkSW50MzIoKTtlLnNldENhY2hlZnJhbWVtcyhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFByaW9yaXR5KCkpJiZ0LndyaXRlVWludDMyKDEsciksMCE9PShyPWUuZ2V0RnJhbWVyYXRlKCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0RnJhbWVpZHgoKSkmJnQud3JpdGVVaW50MzIoMyxyKSxyPWUuZ2V0VGltZXN0YW1wKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDQsciksMCE9PShyPWUuZ2V0RW5hYmxlZ3MoKSkmJnQud3JpdGVVaW50MzIoNSxyKSwwIT09KHI9ZS5nZXRDYWNoZWZyYW1lbXMoKSkmJnQud3JpdGVJbnQzMig2LHIpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS5wcm90b3R5cGUuZ2V0UHJpb3JpdHk9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS5wcm90b3R5cGUuc2V0UHJpb3JpdHk9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkucHJvdG90eXBlLmdldEZyYW1lcmF0ZT1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlTm90aWZ5LnByb3RvdHlwZS5zZXRGcmFtZXJhdGU9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkucHJvdG90eXBlLmdldEZyYW1laWR4PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkucHJvdG90eXBlLnNldEZyYW1laWR4PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlTm90aWZ5LnByb3RvdHlwZS5nZXRUaW1lc3RhbXA9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiMFwiKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkucHJvdG90eXBlLnNldFRpbWVzdGFtcD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS5wcm90b3R5cGUuZ2V0RW5hYmxlZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw1LDApfSxwcm90by5zdHJlYW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeS5wcm90b3R5cGUuc2V0RW5hYmxlZ3M9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSxlKX0scHJvdG8uc3RyZWFtLlNldEZyYW1lU3luY1JhdGVOb3RpZnkucHJvdG90eXBlLmdldENhY2hlZnJhbWVtcz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsMCl9LHByb3RvLnN0cmVhbS5TZXRGcmFtZVN5bmNSYXRlTm90aWZ5LnByb3RvdHlwZS5zZXRDYWNoZWZyYW1lbXM9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNixlKX0scHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0XCIpLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3Jvb21pZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsXCIwXCIpLHByaW9yaXR5Om8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxjcHByb3RvOnQuZ2V0Q3Bwcm90b19hc0I2NCgpLG9wZXJhdGlvbjpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBvLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3Q7cmV0dXJuIHByb3RvLnN0cmVhbS5GcmFtZUJyb2FkY2FzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0UHJpb3JpdHkocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkSW50MzIoKTtlLnNldE9wZXJhdGlvbihyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwO3I9ZS5nZXRSb29taWQoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoMSxyKSwwIT09KHI9ZS5nZXRQcmlvcml0eSgpKSYmdC53cml0ZVVpbnQzMigyLHIpLDA8KHI9ZS5nZXRDcHByb3RvX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoMyxyKSwwIT09KHI9ZS5nZXRPcGVyYXRpb24oKSkmJnQud3JpdGVJbnQzMig0LHIpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsXCIwXCIpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLmdldFByaW9yaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LnByb3RvdHlwZS5zZXRQcmlvcml0eT1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLFwiXCIpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLmdldENwcHJvdG9fYXNCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmJ5dGVzQXNCNjQodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLmdldENwcHJvdG9fYXNVOD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuYnl0ZXNBc1U4KHRoaXMuZ2V0Q3Bwcm90bygpKX0scHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0LnByb3RvdHlwZS5nZXRPcGVyYXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3QucHJvdG90eXBlLnNldE9wZXJhdGlvbj1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RBY2s9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0scy5pbmhlcml0cyhwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RBY2ssby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RBY2suZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RBY2tcIiksby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5GcmFtZUJyb2FkY2FzdEFjay5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5GcmFtZUJyb2FkY2FzdEFjay50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RBY2sudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3RhdHVzOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RBY2suZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5GcmFtZUJyb2FkY2FzdEFjaztyZXR1cm4gcHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0QWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkZyYW1lQnJvYWRjYXN0QWNrLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgby5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5GcmFtZUJyb2FkY2FzdEFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5GcmFtZUJyb2FkY2FzdEFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByOzAhPT0ocj1lLmdldFN0YXR1cygpKSYmdC53cml0ZVVpbnQzMigxLHIpfSxwcm90by5zdHJlYW0uRnJhbWVCcm9hZGNhc3RBY2sucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5GcmFtZUJyb2FkY2FzdEFjay5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnk9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0scy5pbmhlcml0cyhwcm90by5zdHJlYW0uRnJhbWVEYXRhTm90aWZ5LG8uTWVzc2FnZSkscy5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnlcIiksby5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uRnJhbWVEYXRhTm90aWZ5LnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3JjdWlkOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxwcmlvcml0eTpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksY3Bwcm90bzp0LmdldENwcHJvdG9fYXNCNjQoKSx0aW1lc3RhbXA6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw0LFwiMFwiKSxmcmFtZWlkeDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgby5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFNyY3VpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldFByaW9yaXR5KHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRDcHByb3RvKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0VGltZXN0YW1wKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFVpbnQzMigpO2Uuc2V0RnJhbWVpZHgocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uRnJhbWVEYXRhTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTcmN1aWQoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRQcmlvcml0eSgpKSYmdC53cml0ZVVpbnQzMigyLHIpLDA8KHI9ZS5nZXRDcHByb3RvX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoMyxyKSxyPWUuZ2V0VGltZXN0YW1wKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDQsciksMCE9PShyPWUuZ2V0RnJhbWVpZHgoKSkmJnQud3JpdGVVaW50MzIoNSxyKX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuZ2V0U3JjdWlkPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuc2V0U3JjdWlkPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLmdldFByaW9yaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuc2V0UHJpb3JpdHk9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuZ2V0Q3Bwcm90bz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCJcIil9LHByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLmdldENwcHJvdG9fYXNCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmJ5dGVzQXNCNjQodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uRnJhbWVEYXRhTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLnNldENwcHJvdG89ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uRnJhbWVEYXRhTm90aWZ5LnByb3RvdHlwZS5nZXRUaW1lc3RhbXA9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiMFwiKX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuc2V0VGltZXN0YW1wPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5GcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLmdldEZyYW1laWR4PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKX0scHJvdG8uc3RyZWFtLkZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuc2V0RnJhbWVpZHg9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNSxlKX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeT1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5GcmFtZVN5bmNOb3RpZnksby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uRnJhbWVTeW5jTm90aWZ5LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeVwiKSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5GcmFtZVN5bmNOb3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtwcmlvcml0eTpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksbGFzdGlkeDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksbmV4dGlkeDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksc3RhcnR0czpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsXCIwXCIpLGVuZHRzOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNSxcIjBcIiksdGltZXN0YW1wOm8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNixcIjBcIil9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgby5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeTtyZXR1cm4gcHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFByaW9yaXR5KHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQzMigpO2Uuc2V0TGFzdGlkeChyKTticmVhaztjYXNlIDM6cj10LnJlYWRVaW50MzIoKTtlLnNldE5leHRpZHgocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRTdGFydHRzKHIpO2JyZWFrO2Nhc2UgNTpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0RW5kdHMocik7YnJlYWs7Y2FzZSA2OnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRUaW1lc3RhbXAocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uRnJhbWVTeW5jTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRQcmlvcml0eSgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDAhPT0ocj1lLmdldExhc3RpZHgoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwIT09KHI9ZS5nZXROZXh0aWR4KCkpJiZ0LndyaXRlVWludDMyKDMscikscj1lLmdldFN0YXJ0dHMoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoNCxyKSxyPWUuZ2V0RW5kdHMoKSwwIT09cGFyc2VJbnQociwxMCkmJnQud3JpdGVVaW50NjRTdHJpbmcoNSxyKSxyPWUuZ2V0VGltZXN0YW1wKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDYscil9LHByb3RvLnN0cmVhbS5GcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLmdldFByaW9yaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuc2V0UHJpb3JpdHk9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuZ2V0TGFzdGlkeD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5GcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLnNldExhc3RpZHg9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuZ2V0TmV4dGlkeD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5GcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLnNldE5leHRpZHg9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuZ2V0U3RhcnR0cz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsXCIwXCIpfSxwcm90by5zdHJlYW0uRnJhbWVTeW5jTm90aWZ5LnByb3RvdHlwZS5zZXRTdGFydHRzPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5GcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLmdldEVuZHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSxcIjBcIil9LHByb3RvLnN0cmVhbS5GcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLnNldEVuZHRzPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5GcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLmdldFRpbWVzdGFtcD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDYsXCIwXCIpfSxwcm90by5zdHJlYW0uRnJhbWVTeW5jTm90aWZ5LnByb3RvdHlwZS5zZXRUaW1lc3RhbXA9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsNixlKX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YT1mdW5jdGlvbihlKXtvLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxzLmluaGVyaXRzKHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGEsby5NZXNzYWdlKSxzLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YVwiKSxvLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGEudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtnYW1laWQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHJvb21pZDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsXCIwXCIpLGNhY2hlZnJhbWVtczpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YS5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgby5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YTtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldEdhbWVpZChyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50NjRTdHJpbmcoKTtlLnNldFJvb21pZChyKTticmVhaztjYXNlIDM6cj10LnJlYWRJbnQzMigpO2Uuc2V0Q2FjaGVmcmFtZW1zKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGEucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBvLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGEuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldENhY2hlZnJhbWVtcygpKSYmdC53cml0ZUludDMyKDMscil9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGEucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGEucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YS5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGEucHJvdG90eXBlLmdldENhY2hlZnJhbWVtcz1mdW5jdGlvbigpe3JldHVybiBvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGEucHJvdG90eXBlLnNldENhY2hlZnJhbWVtcz1mdW5jdGlvbihlKXtvLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhQWNrPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LHMuaW5oZXJpdHMocHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YUFjayxvLk1lc3NhZ2UpLHMuREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGFBY2suZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhQWNrXCIpLG8uTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhQWNrLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YUFjay50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhQWNrLnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3N0YXR1czpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksZnJhbWVjb3VudDpvLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksbXNnY291bnQ6by5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGFBY2suZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG8uQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGFBY2s7cmV0dXJuIHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGFBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGFBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRGcmFtZWNvdW50KHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0TXNnY291bnQocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YUFjay5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG8uQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhQWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YUFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRGcmFtZWNvdW50KCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0TXNnY291bnQoKSkmJnQud3JpdGVVaW50MzIoMyxyKX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YUFjay5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YUFjay5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGFBY2sucHJvdG90eXBlLmdldEZyYW1lY291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gby5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uR2V0Q2FjaGVEYXRhQWNrLnByb3RvdHlwZS5zZXRGcmFtZWNvdW50PWZ1bmN0aW9uKGUpe28uTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5HZXRDYWNoZURhdGFBY2sucHJvdG90eXBlLmdldE1zZ2NvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIG8uTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLkdldENhY2hlRGF0YUFjay5wcm90b3R5cGUuc2V0TXNnY291bnQ9ZnVuY3Rpb24oZSl7by5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLlNES0hvdGVsQ21kSUQ9e0lOVkFMSURTREtDTUQ6MCxDSEVDS0lOQ01ESUQ6MTQwMSxDSEVDS0lOQUNLQ01ESUQ6MTQwMixIRUFSVEJFQVRDTURJRDoxNDAzLEhFQVJUQkVBVEFDS0NNRElEOjE0MDQsQlJPQURDQVNUQ01ESUQ6MTQwNSxCUk9BRENBU1RBQ0tDTURJRDoxNDA2LE5PVElGWUNNRElEOjE0MDgsQ0hFQ0tJTk5PVElGWUNNRElEOjE0MTAsU1VCU0NSSUJFQ01ESUQ6MTQxMSxTVUJTQ1JJQkVBQ0tDTURJRDoxNDEyLFBVQkxJU0hDTURJRDoxNDEzLFBVQkxJU0hBQ0tDTURJRDoxNDE0LFBVQkxJU0hOT1RJRllDTURJRDoxNDE2LFNFVFVTRVRJTUVTVEFNUENNRElEOjE0MTcsU0VUVVNFVElNRVNUQU1QQUNLQ01ESUQ6MTQxOCxTRVRGUkFNRVNZTkNSQVRFQ01ESUQ6MTQxOSxTRVRGUkFNRVNZTkNSQVRFQUNLQ01ESUQ6MTQyMCxTRVRGUkFNRVNZTkNSQVRFTk9USUZZQ01ESUQ6MTQyMixGUkFNRUJST0FEQ0FTVENNRElEOjE0MjMsRlJBTUVCUk9BRENBU1RBQ0tDTURJRDoxNDI0LEZSQU1FREFUQU5PVElGWUNNRElEOjE0MjYsRlJBTUVTWU5DTk9USUZZQ01ESUQ6MTQyOCxHRVRDQUNIRURBVEFDTURJRDoxNDI5LEdFVENBQ0hFREFUQUNNRElEQUNLQ01ESUQ6MTQzMH0scy5vYmplY3QuZXh0ZW5kKHIscHJvdG8uc3RyZWFtKX0se1wiZ29vZ2xlLXByb3RvYnVmXCI6OH1dLDEwOltmdW5jdGlvbihlLHQscil7dmFyIHM9ZShcImdvb2dsZS1wcm90b2J1ZlwiKSxvPXMsaT13aW5kb3csYT1lKFwiLi9jb21tb25fcGIuanNcIik7by5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbUFja1wiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbU5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0QWNrXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MaXZlRnJhbWVTeW5jTm90aWZ5XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0XCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0QWNrXCIsbnVsbCxpKSxvLmV4cG9ydFN5bWJvbChcInByb3RvLnN0cmVhbS5MaXZlT3Zlck5vdGlmeVwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uU0RLV2F0Y2hDbWRJRFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldFwiLG51bGwsaSksby5leHBvcnRTeW1ib2woXCJwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldEFja1wiLG51bGwsaSkscHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb209ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21cIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20udG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20udG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApLHVzZXJwcm9maWxlOnQuZ2V0VXNlcnByb2ZpbGVfYXNCNjQoKSxib29raWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LFwiXCIpLHRpY2tldDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDYsXCJcIiksc2V0aWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw3LDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbTtyZXR1cm4gcHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRVc2VycHJvZmlsZShyKTticmVhaztjYXNlIDU6cj10LnJlYWRTdHJpbmcoKTtlLnNldEJvb2tpZChyKTticmVhaztjYXNlIDY6cj10LnJlYWRTdHJpbmcoKTtlLnNldFRpY2tldChyKTticmVhaztjYXNlIDc6cj10LnJlYWRVaW50MzIoKTtlLnNldFNldGlkKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLDA8KHI9ZS5nZXRVc2VycHJvZmlsZV9hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDQsciksMDwocj1lLmdldEJvb2tpZCgpKS5sZW5ndGgmJnQud3JpdGVTdHJpbmcoNSxyKSwwPChyPWUuZ2V0VGlja2V0KCkpLmxlbmd0aCYmdC53cml0ZVN0cmluZyg2LHIpLDAhPT0ocj1lLmdldFNldGlkKCkpJiZ0LndyaXRlVWludDMyKDcscil9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tLnByb3RvdHlwZS5nZXRHYW1laWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tLnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLFwiMFwiKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20ucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuZ2V0VXNlcmlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMywwKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20ucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuZ2V0VXNlcnByb2ZpbGU9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuZ2V0VXNlcnByb2ZpbGVfYXNCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNCNjQodGhpcy5nZXRVc2VycHJvZmlsZSgpKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20ucHJvdG90eXBlLmdldFVzZXJwcm9maWxlX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldFVzZXJwcm9maWxlKCkpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuc2V0VXNlcnByb2ZpbGU9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0J5dGVzRmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuZ2V0Qm9va2lkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSxcIlwiKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20ucHJvdG90eXBlLnNldEJvb2tpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuZ2V0VGlja2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNixcIlwiKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb20ucHJvdG90eXBlLnNldFRpY2tldD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcyw2LGUpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuZ2V0U2V0aWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw3LDApfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbS5wcm90b3R5cGUuc2V0U2V0aWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNyxlKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2s9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbUFjayxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tQWNrLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2tcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tQWNrLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2sudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2sudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcixvPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHJvb21zdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLHJlc2VydmVkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMyxcIlwiKSx3YXRoY2hpbmZvOihyPXQuZ2V0V2F0aGNoaW5mbygpKSYmYS5MaXZlV2F0Y2hJbmZvLnRvT2JqZWN0KGUscil9O3JldHVybiBlJiYoby4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxvfSkscHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2suZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tQWNrO3JldHVybiBwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbUFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTdGF0dXMocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRSb29tc3RhdHVzKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFN0cmluZygpO2Uuc2V0UmVzZXJ2ZWQocik7YnJlYWs7Y2FzZSA0OnI9bmV3IGEuTGl2ZVdhdGNoSW5mbzt0LnJlYWRNZXNzYWdlKHIsYS5MaXZlV2F0Y2hJbmZvLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciksZS5zZXRXYXRoY2hpbmZvKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tQWNrLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tQWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlVWludDMyKDEsciksMCE9PShyPWUuZ2V0Um9vbXN0YXR1cygpKSYmdC53cml0ZVVpbnQzMigyLHIpLDA8KHI9ZS5nZXRSZXNlcnZlZCgpKS5sZW5ndGgmJnQud3JpdGVTdHJpbmcoMyxyKSxudWxsIT0ocj1lLmdldFdhdGhjaGluZm8oKSkmJnQud3JpdGVNZXNzYWdlKDQscixhLkxpdmVXYXRjaEluZm8uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbUFjay5wcm90b3R5cGUuZ2V0U3RhdHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2sucHJvdG90eXBlLnNldFN0YXR1cz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbUFjay5wcm90b3R5cGUuZ2V0Um9vbXN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tQWNrLnByb3RvdHlwZS5zZXRSb29tc3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tQWNrLnByb3RvdHlwZS5nZXRSZXNlcnZlZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsXCJcIil9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tQWNrLnByb3RvdHlwZS5zZXRSZXNlcnZlZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nRmllbGQodGhpcywzLGUpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbUFjay5wcm90b3R5cGUuZ2V0V2F0aGNoaW5mbz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsYS5MaXZlV2F0Y2hJbmZvLDQpfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbUFjay5wcm90b3R5cGUuc2V0V2F0aGNoaW5mbz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0V3JhcHBlckZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21BY2sucHJvdG90eXBlLmNsZWFyV2F0aGNoaW5mbz1mdW5jdGlvbigpe3RoaXMuc2V0V2F0aGNoaW5mbyh2b2lkIDApfSxwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbUFjay5wcm90b3R5cGUuaGFzV2F0aGNoaW5mbz1mdW5jdGlvbigpe3JldHVybiBudWxsIT1zLk1lc3NhZ2UuZ2V0RmllbGQodGhpcyw0KX0scHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXRcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXQudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXQudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17Z2FtZWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSxyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLFwiMFwiKSx1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwzLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdDtyZXR1cm4gcHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigzLHIpfSxwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdC5wcm90b3R5cGUuZ2V0R2FtZWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXQucHJvdG90eXBlLnNldEdhbWVpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdC5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIjBcIil9LHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0LnByb3RvdHlwZS5zZXRSb29taWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM1N0cmluZ0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXQucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0LnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXRBY2s9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdEFjayxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0QWNrLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXRBY2tcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0QWNrLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXRBY2sudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXRBY2sudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3RhdHVzOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdEFjay5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxpdmVIZWFydGJlYXRBY2s7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0QWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdEFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFN0YXR1cyhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdEFjay5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdEFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0QWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlVWludDMyKDEscil9LHByb3RvLnN0cmVhbS5MaXZlSGVhcnRiZWF0QWNrLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uTGl2ZUhlYXJ0YmVhdEFjay5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0LnJlcGVhdGVkRmllbGRzXyxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdCxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3RcIikscHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3QucmVwZWF0ZWRGaWVsZHNfPVszXSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3QucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdC50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdC50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtyb29taWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLFwiMFwiKSxmbGFnOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMiwwKSxkc3R1aWRzTGlzdDpzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0LDMpLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3QuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0O3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3QuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRGbGFnKHIpO2JyZWFrO2Nhc2UgMzpyPXQucmVhZFBhY2tlZFVpbnQzMigpO2Uuc2V0RHN0dWlkc0xpc3Qocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkQnl0ZXMoKTtlLnNldENwcHJvdG8ocik7YnJlYWs7ZGVmYXVsdDp0LnNraXBGaWVsZCgpfX1yZXR1cm4gZX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3QucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbigpe3ZhciBlPW5ldyBzLkJpbmFyeVdyaXRlcjtyZXR1cm4gcHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3Quc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcj1mdW5jdGlvbihlLHQpe3ZhciByPXZvaWQgMDtyPWUuZ2V0Um9vbWlkKCksMCE9PXBhcnNlSW50KHIsMTApJiZ0LndyaXRlVWludDY0U3RyaW5nKDEsciksMCE9PShyPWUuZ2V0RmxhZygpKSYmdC53cml0ZVVpbnQzMigyLHIpLDA8KHI9ZS5nZXREc3R1aWRzTGlzdCgpKS5sZW5ndGgmJnQud3JpdGVQYWNrZWRVaW50MzIoMyxyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDQscil9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0LnByb3RvdHlwZS5nZXRSb29taWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLFwiMFwiKX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3QucHJvdG90eXBlLnNldFJvb21pZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zU3RyaW5nSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdC5wcm90b3R5cGUuZ2V0RmxhZz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsMCl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0LnByb3RvdHlwZS5zZXRGbGFnPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0LnByb3RvdHlwZS5nZXREc3R1aWRzTGlzdD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRGaWVsZCh0aGlzLDMpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdC5wcm90b3R5cGUuc2V0RHN0dWlkc0xpc3Q9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldEZpZWxkKHRoaXMsMyxlfHxbXSl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0LnByb3RvdHlwZS5hZGREc3R1aWRzPWZ1bmN0aW9uKGUsdCl7cy5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRGaWVsZCh0aGlzLDMsZSx0KX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3QucHJvdG90eXBlLmNsZWFyRHN0dWlkc0xpc3Q9ZnVuY3Rpb24oKXt0aGlzLnNldERzdHVpZHNMaXN0KFtdKX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3QucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LFwiXCIpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdC5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0LnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3RBY2s9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdEFjayxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0QWNrLmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3RBY2tcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0QWNrLnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3RBY2sudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3RBY2sudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17c3RhdHVzOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdEFjay5kZXNlcmlhbGl6ZUJpbmFyeT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgcy5CaW5hcnlSZWFkZXIoZSkscj1uZXcgcHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3RBY2s7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0QWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdEFjay5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXI9ZnVuY3Rpb24oZSx0KXtmb3IoO3QubmV4dEZpZWxkKCkmJiF0LmlzRW5kR3JvdXAoKTspe3N3aXRjaCh0LmdldEZpZWxkTnVtYmVyKCkpe2Nhc2UgMTp2YXIgcj10LnJlYWRVaW50MzIoKTtlLnNldFN0YXR1cyhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdEFjay5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdEFjay5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0QWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI7MCE9PShyPWUuZ2V0U3RhdHVzKCkpJiZ0LndyaXRlVWludDMyKDEscil9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0QWNrLnByb3RvdHlwZS5nZXRTdGF0dXM9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdEFjay5wcm90b3R5cGUuc2V0U3RhdHVzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXQscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldC5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0XCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldC5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0LnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2dhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIiksdXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMywwKSxvZmZzZXRtczpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXQuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0O3JldHVybiBwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXQuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRHYW1laWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDY0U3RyaW5nKCk7ZS5zZXRSb29taWQocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSA0OnI9dC5yZWFkSW50MzIoKTtlLnNldE9mZnNldG1zKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXQuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpLDAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLDAhPT0ocj1lLmdldE9mZnNldG1zKCkpJiZ0LndyaXRlSW50MzIoNCxyKX0scHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXQucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0LnByb3RvdHlwZS5zZXRHYW1laWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXQucHJvdG90eXBlLmdldFJvb21pZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCIwXCIpfSxwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldC5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0LnByb3RvdHlwZS5nZXRVc2VyaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLDApfSxwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldC5wcm90b3R5cGUuc2V0VXNlcmlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0LnByb3RvdHlwZS5nZXRPZmZzZXRtcz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDQsMCl9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0LnByb3RvdHlwZS5zZXRPZmZzZXRtcz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw0LGUpfSxwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldEFjaz1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0QWNrLHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXRBY2suZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldEFja1wiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXRBY2sucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldEFjay50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldEFjay50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtzdGF0dXM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApfTtyZXR1cm4gZSYmKHIuJGpzcGJNZXNzYWdlSW5zdGFuY2U9dCkscn0pLHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0QWNrLmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uU2V0TGl2ZU9mZnNldEFjaztyZXR1cm4gcHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXRBY2suZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKHIsdCl9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0QWNrLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0U3RhdHVzKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0QWNrLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0QWNrLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXRBY2suc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcjswIT09KHI9ZS5nZXRTdGF0dXMoKSkmJnQud3JpdGVVaW50MzIoMSxyKX0scHJvdG8uc3RyZWFtLlNldExpdmVPZmZzZXRBY2sucHJvdG90eXBlLmdldFN0YXR1cz1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5TZXRMaXZlT2Zmc2V0QWNrLnByb3RvdHlwZS5zZXRTdGF0dXM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLmluaXRpYWxpemUodGhpcyxlLDAsLTEsbnVsbCxudWxsKX0sby5pbmhlcml0cyhwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbU5vdGlmeSxzLk1lc3NhZ2UpLG8uREVCVUcmJiFDT01QSUxFRCYmKHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tTm90aWZ5LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnlcIikscy5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCYmKHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tTm90aWZ5LnByb3RvdHlwZS50b09iamVjdD1mdW5jdGlvbihlKXtyZXR1cm4gcHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkudG9PYmplY3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj17dXNlcmlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMSwwKSx1c2VycHJvZmlsZTp0LmdldFVzZXJwcm9maWxlX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uRW50ZXJMaXZlUm9vbU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRVc2VyaWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkQnl0ZXMoKTtlLnNldFVzZXJwcm9maWxlKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tTm90aWZ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0VXNlcmlkKCkpJiZ0LndyaXRlVWludDMyKDEsciksMDwocj1lLmdldFVzZXJwcm9maWxlX2FzVTgoKSkubGVuZ3RoJiZ0LndyaXRlQnl0ZXMoMixyKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tTm90aWZ5LnByb3RvdHlwZS5zZXRVc2VyaWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkucHJvdG90eXBlLmdldFVzZXJwcm9maWxlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIlwiKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkucHJvdG90eXBlLmdldFVzZXJwcm9maWxlX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0VXNlcnByb2ZpbGUoKSl9LHByb3RvLnN0cmVhbS5FbnRlckxpdmVSb29tTm90aWZ5LnByb3RvdHlwZS5nZXRVc2VycHJvZmlsZV9hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRVc2VycHJvZmlsZSgpKX0scHJvdG8uc3RyZWFtLkVudGVyTGl2ZVJvb21Ob3RpZnkucHJvdG90eXBlLnNldFVzZXJwcm9maWxlPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkV4aXRMaXZlUm9vbU5vdGlmeT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5FeGl0TGl2ZVJvb21Ob3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkV4aXRMaXZlUm9vbU5vdGlmeVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkV4aXRMaXZlUm9vbU5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5FeGl0TGl2ZVJvb21Ob3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkV4aXRMaXZlUm9vbU5vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXt1c2VyaWQ6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwxLDApLHVzZXJwcm9maWxlOnQuZ2V0VXNlcnByb2ZpbGVfYXNCNjQoKX07cmV0dXJuIGUmJihyLiRqc3BiTWVzc2FnZUluc3RhbmNlPXQpLHJ9KSxwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcihyLHQpfSxwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0VXNlcmlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZEJ5dGVzKCk7ZS5zZXRVc2VycHJvZmlsZShyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5FeGl0TGl2ZVJvb21Ob3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFVzZXJpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDA8KHI9ZS5nZXRVc2VycHJvZmlsZV9hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDIscil9LHByb3RvLnN0cmVhbS5FeGl0TGl2ZVJvb21Ob3RpZnkucHJvdG90eXBlLmdldFVzZXJpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5FeGl0TGl2ZVJvb21Ob3RpZnkucHJvdG90eXBlLnNldFVzZXJpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5LnByb3RvdHlwZS5nZXRVc2VycHJvZmlsZT1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDIsXCJcIil9LHByb3RvLnN0cmVhbS5FeGl0TGl2ZVJvb21Ob3RpZnkucHJvdG90eXBlLmdldFVzZXJwcm9maWxlX2FzQjY0PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzQjY0KHRoaXMuZ2V0VXNlcnByb2ZpbGUoKSl9LHByb3RvLnN0cmVhbS5FeGl0TGl2ZVJvb21Ob3RpZnkucHJvdG90eXBlLmdldFVzZXJwcm9maWxlX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldFVzZXJwcm9maWxlKCkpfSxwcm90by5zdHJlYW0uRXhpdExpdmVSb29tTm90aWZ5LnByb3RvdHlwZS5zZXRVc2VycHJvZmlsZT1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3ROb3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5XCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5LnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3NyY3VpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscHJpb3JpdHk6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3ROb3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3ROb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTcmN1aWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRQcmlvcml0eShyKTticmVhaztjYXNlIDM6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztkZWZhdWx0OnQuc2tpcEZpZWxkKCl9fXJldHVybiBlfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlcih0aGlzLGUpLGUuZ2V0UmVzdWx0QnVmZmVyKCl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwOzAhPT0ocj1lLmdldFNyY3VpZCgpKSYmdC53cml0ZVVpbnQzMigxLHIpLDAhPT0ocj1lLmdldFByaW9yaXR5KCkpJiZ0LndyaXRlVWludDMyKDIsciksMDwocj1lLmdldENwcHJvdG9fYXNVOCgpKS5sZW5ndGgmJnQud3JpdGVCeXRlcygzLHIpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5wcm90b3R5cGUuZ2V0U3JjdWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMSwwKX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3ROb3RpZnkucHJvdG90eXBlLnNldFNyY3VpZD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywxLGUpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5wcm90b3R5cGUuZ2V0UHJpb3JpdHk9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5wcm90b3R5cGUuc2V0UHJpb3JpdHk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMixlKX0scHJvdG8uc3RyZWFtLkxpdmVCcm9hZGNhc3ROb3RpZnkucHJvdG90eXBlLmdldENwcHJvdG89ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywzLFwiXCIpfSxwcm90by5zdHJlYW0uTGl2ZUJyb2FkY2FzdE5vdGlmeS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc0I2ND1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuYnl0ZXNBc0I2NCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvX2FzVTg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNVOCh0aGlzLmdldENwcHJvdG8oKSl9LHByb3RvLnN0cmVhbS5MaXZlQnJvYWRjYXN0Tm90aWZ5LnByb3RvdHlwZS5zZXRDcHByb3RvPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNCeXRlc0ZpZWxkKHRoaXMsMyxlKX0scHJvdG8uc3RyZWFtLkxpdmVPdmVyTm90aWZ5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkxpdmVPdmVyTm90aWZ5LHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkxpdmVPdmVyTm90aWZ5LmRpc3BsYXlOYW1lPVwicHJvdG8uc3RyZWFtLkxpdmVPdmVyTm90aWZ5XCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTGl2ZU92ZXJOb3RpZnkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTGl2ZU92ZXJOb3RpZnkudG9PYmplY3QoZSx0aGlzKX0scHJvdG8uc3RyZWFtLkxpdmVPdmVyTm90aWZ5LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2dhbWVpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscm9vbWlkOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsMixcIjBcIil9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxpdmVPdmVyTm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBzLkJpbmFyeVJlYWRlcihlKSxyPW5ldyBwcm90by5zdHJlYW0uTGl2ZU92ZXJOb3RpZnk7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlT3Zlck5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxpdmVPdmVyTm90aWZ5LmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlcj1mdW5jdGlvbihlLHQpe2Zvcig7dC5uZXh0RmllbGQoKSYmIXQuaXNFbmRHcm91cCgpOyl7c3dpdGNoKHQuZ2V0RmllbGROdW1iZXIoKSl7Y2FzZSAxOnZhciByPXQucmVhZFVpbnQzMigpO2Uuc2V0R2FtZWlkKHIpO2JyZWFrO2Nhc2UgMjpyPXQucmVhZFVpbnQ2NFN0cmluZygpO2Uuc2V0Um9vbWlkKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5MaXZlT3Zlck5vdGlmeS5wcm90b3R5cGUuc2VyaWFsaXplQmluYXJ5PWZ1bmN0aW9uKCl7dmFyIGU9bmV3IHMuQmluYXJ5V3JpdGVyO3JldHVybiBwcm90by5zdHJlYW0uTGl2ZU92ZXJOb3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcyxlKSxlLmdldFJlc3VsdEJ1ZmZlcigpfSxwcm90by5zdHJlYW0uTGl2ZU92ZXJOb3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0R2FtZWlkKCkpJiZ0LndyaXRlVWludDMyKDEscikscj1lLmdldFJvb21pZCgpLDAhPT1wYXJzZUludChyLDEwKSYmdC53cml0ZVVpbnQ2NFN0cmluZygyLHIpfSxwcm90by5zdHJlYW0uTGl2ZU92ZXJOb3RpZnkucHJvdG90eXBlLmdldEdhbWVpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5MaXZlT3Zlck5vdGlmeS5wcm90b3R5cGUuc2V0R2FtZWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDEsZSl9LHByb3RvLnN0cmVhbS5MaXZlT3Zlck5vdGlmeS5wcm90b3R5cGUuZ2V0Um9vbWlkPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMixcIjBcIil9LHByb3RvLnN0cmVhbS5MaXZlT3Zlck5vdGlmeS5wcm90b3R5cGUuc2V0Um9vbWlkPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNTdHJpbmdJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsZSwwLC0xLG51bGwsbnVsbCl9LG8uaW5oZXJpdHMocHJvdG8uc3RyZWFtLkxpdmVGcmFtZURhdGFOb3RpZnkscy5NZXNzYWdlKSxvLkRFQlVHJiYhQ09NUElMRUQmJihwcm90by5zdHJlYW0uTGl2ZUZyYW1lRGF0YU5vdGlmeS5kaXNwbGF5TmFtZT1cInByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5XCIpLHMuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QmJihwcm90by5zdHJlYW0uTGl2ZUZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUudG9PYmplY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnRvT2JqZWN0KGUsdGhpcyl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnRvT2JqZWN0PWZ1bmN0aW9uKGUsdCl7dmFyIHI9e3NyY3VpZDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCkscHJpb3JpdHk6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCwyLDApLGNwcHJvdG86dC5nZXRDcHByb3RvX2FzQjY0KCksdGltZXN0YW1wOnMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHQsNCwwKSxmcmFtZWlkeDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDUsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxpdmVGcmFtZURhdGFOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUZyYW1lRGF0YU5vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZURhdGFOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRTcmN1aWQocik7YnJlYWs7Y2FzZSAyOnI9dC5yZWFkVWludDMyKCk7ZS5zZXRQcmlvcml0eShyKTticmVhaztjYXNlIDM6cj10LnJlYWRCeXRlcygpO2Uuc2V0Q3Bwcm90byhyKTticmVhaztjYXNlIDQ6cj10LnJlYWRVaW50NjQoKTtlLnNldFRpbWVzdGFtcChyKTticmVhaztjYXNlIDU6cj10LnJlYWRVaW50MzIoKTtlLnNldEZyYW1laWR4KHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZURhdGFOb3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0U3JjdWlkKCkpJiZ0LndyaXRlVWludDMyKDEsciksMCE9PShyPWUuZ2V0UHJpb3JpdHkoKSkmJnQud3JpdGVVaW50MzIoMixyKSwwPChyPWUuZ2V0Q3Bwcm90b19hc1U4KCkpLmxlbmd0aCYmdC53cml0ZUJ5dGVzKDMsciksMCE9PShyPWUuZ2V0VGltZXN0YW1wKCkpJiZ0LndyaXRlVWludDY0KDQsciksMCE9PShyPWUuZ2V0RnJhbWVpZHgoKSkmJnQud3JpdGVVaW50MzIoNSxyKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLmdldFNyY3VpZD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDEsMCl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnByb3RvdHlwZS5zZXRTcmN1aWQ9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLmdldFByaW9yaXR5PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMiwwKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLnNldFByaW9yaXR5PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDIsZSl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnByb3RvdHlwZS5nZXRDcHByb3RvPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsMyxcIlwiKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZURhdGFOb3RpZnkucHJvdG90eXBlLmdldENwcHJvdG9fYXNCNjQ9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmJ5dGVzQXNCNjQodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuZ2V0Q3Bwcm90b19hc1U4PWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5ieXRlc0FzVTgodGhpcy5nZXRDcHByb3RvKCkpfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuc2V0Q3Bwcm90bz1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zQnl0ZXNGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnByb3RvdHlwZS5nZXRUaW1lc3RhbXA9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw0LDApfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lRGF0YU5vdGlmeS5wcm90b3R5cGUuc2V0VGltZXN0YW1wPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDQsZSl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnByb3RvdHlwZS5nZXRGcmFtZWlkeD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDUsMCl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVEYXRhTm90aWZ5LnByb3RvdHlwZS5zZXRGcmFtZWlkeD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcyw1LGUpfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeT1mdW5jdGlvbihlKXtzLk1lc3NhZ2UuaW5pdGlhbGl6ZSh0aGlzLGUsMCwtMSxudWxsLG51bGwpfSxvLmluaGVyaXRzKHByb3RvLnN0cmVhbS5MaXZlRnJhbWVTeW5jTm90aWZ5LHMuTWVzc2FnZSksby5ERUJVRyYmIUNPTVBJTEVEJiYocHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkuZGlzcGxheU5hbWU9XCJwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeVwiKSxzLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUJiYocHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLnRvT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeS50b09iamVjdChlLHRoaXMpfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeS50b09iamVjdD1mdW5jdGlvbihlLHQpe3ZhciByPXtwcmlvcml0eTpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDEsMCksbGFzdGlkeDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDIsMCksbmV4dGlkeDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDMsMCksc3RhcnR0czpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDQsMCksZW5kdHM6cy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodCw1LDApLHRpbWVzdGFtcDpzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0LDYsMCl9O3JldHVybiBlJiYoci4kanNwYk1lc3NhZ2VJbnN0YW5jZT10KSxyfSkscHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IHMuQmluYXJ5UmVhZGVyKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5MaXZlRnJhbWVTeW5jTm90aWZ5O3JldHVybiBwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIocix0KX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyPWZ1bmN0aW9uKGUsdCl7Zm9yKDt0Lm5leHRGaWVsZCgpJiYhdC5pc0VuZEdyb3VwKCk7KXtzd2l0Y2godC5nZXRGaWVsZE51bWJlcigpKXtjYXNlIDE6dmFyIHI9dC5yZWFkVWludDMyKCk7ZS5zZXRQcmlvcml0eShyKTticmVhaztjYXNlIDI6cj10LnJlYWRVaW50MzIoKTtlLnNldExhc3RpZHgocik7YnJlYWs7Y2FzZSAzOnI9dC5yZWFkVWludDMyKCk7ZS5zZXROZXh0aWR4KHIpO2JyZWFrO2Nhc2UgNDpyPXQucmVhZFVpbnQ2NCgpO2Uuc2V0U3RhcnR0cyhyKTticmVhaztjYXNlIDU6cj10LnJlYWRVaW50NjQoKTtlLnNldEVuZHRzKHIpO2JyZWFrO2Nhc2UgNjpyPXQucmVhZFVpbnQ2NCgpO2Uuc2V0VGltZXN0YW1wKHIpO2JyZWFrO2RlZmF1bHQ6dC5za2lwRmllbGQoKX19cmV0dXJuIGV9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVTeW5jTm90aWZ5LnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnk9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgcy5CaW5hcnlXcml0ZXI7cmV0dXJuIHByb3RvLnN0cmVhbS5MaXZlRnJhbWVTeW5jTm90aWZ5LnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyKHRoaXMsZSksZS5nZXRSZXN1bHRCdWZmZXIoKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj12b2lkIDA7MCE9PShyPWUuZ2V0UHJpb3JpdHkoKSkmJnQud3JpdGVVaW50MzIoMSxyKSwwIT09KHI9ZS5nZXRMYXN0aWR4KCkpJiZ0LndyaXRlVWludDMyKDIsciksMCE9PShyPWUuZ2V0TmV4dGlkeCgpKSYmdC53cml0ZVVpbnQzMigzLHIpLDAhPT0ocj1lLmdldFN0YXJ0dHMoKSkmJnQud3JpdGVVaW50NjQoNCxyKSwwIT09KHI9ZS5nZXRFbmR0cygpKSYmdC53cml0ZVVpbnQ2NCg1LHIpLDAhPT0ocj1lLmdldFRpbWVzdGFtcCgpKSYmdC53cml0ZVVpbnQ2NCg2LHIpfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuZ2V0UHJpb3JpdHk9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywxLDApfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuc2V0UHJpb3JpdHk9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsMSxlKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLmdldExhc3RpZHg9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywyLDApfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuc2V0TGFzdGlkeD1mdW5jdGlvbihlKXtzLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywyLGUpfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuZ2V0TmV4dGlkeD1mdW5jdGlvbigpe3JldHVybiBzLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLDMsMCl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVTeW5jTm90aWZ5LnByb3RvdHlwZS5zZXROZXh0aWR4PWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDMsZSl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVTeW5jTm90aWZ5LnByb3RvdHlwZS5nZXRTdGFydHRzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNCwwKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLnNldFN0YXJ0dHM9ZnVuY3Rpb24oZSl7cy5NZXNzYWdlLnNldFByb3RvM0ludEZpZWxkKHRoaXMsNCxlKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLmdldEVuZHRzPWZ1bmN0aW9uKCl7cmV0dXJuIHMuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsNSwwKX0scHJvdG8uc3RyZWFtLkxpdmVGcmFtZVN5bmNOb3RpZnkucHJvdG90eXBlLnNldEVuZHRzPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDUsZSl9LHByb3RvLnN0cmVhbS5MaXZlRnJhbWVTeW5jTm90aWZ5LnByb3RvdHlwZS5nZXRUaW1lc3RhbXA9ZnVuY3Rpb24oKXtyZXR1cm4gcy5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcyw2LDApfSxwcm90by5zdHJlYW0uTGl2ZUZyYW1lU3luY05vdGlmeS5wcm90b3R5cGUuc2V0VGltZXN0YW1wPWZ1bmN0aW9uKGUpe3MuTWVzc2FnZS5zZXRQcm90bzNJbnRGaWVsZCh0aGlzLDYsZSl9LHByb3RvLnN0cmVhbS5TREtXYXRjaENtZElEPXtJTlZBTElEV0FUQ0hDTUQ6MCxFTlRFUkxJVkVST09NQ01ESUQ6MzQwMSxFTlRFUkxJVkVST09NQUNLQ01ESUQ6MzQwMixMSVZFSEVBUlRCRUFUQ01ESUQ6MzQwMyxMSVZFSEVBUlRCRUFUQUNLQ01ESUQ6MzQwNCxMSVZFQlJPQURDQVNUQ01ESUQ6MzQwNSxMSVZFQlJPQURDQVNUQUNLQ01ESUQ6MzQwNixTRVRMSVZFT0ZGU0VUQ01ESUQ6MzQwNyxTRVRMSVZFT0ZGU0VUQUNLQ01ESUQ6MzQwOCxFTlRFUkxJVkVST09NTk9USUZZQ01ESUQ6MzQyMCxFWElUTElWRVJPT01OT1RJRllDTURJRDozNDIyLExJVkVCUk9BRENBU1ROT1RJRllDTURJRDozNDI0LExJVkVPVkVSTk9USUZZQ01ESUQ6MzQyNixMSVZFRlJBTUVEQVRBTk9USUZZQ01ESUQ6MzQyOCxMSVZFRlJBTUVTWU5DTk9USUZZQ01ESUQ6MzQzMH0sby5vYmplY3QuZXh0ZW5kKHIscHJvdG8uc3RyZWFtKX0se1wiLi9jb21tb25fcGIuanNcIjo0LFwiZ29vZ2xlLXByb3RvYnVmXCI6OH1dfSx7fSxbNl0pLGZ1bmN0aW9uKGUpe2UuRnJhbWVPcHQ9e09OTFlfQ0xJRU5UOjAsT05MWV9HUzoxLENMSUVOVF9HUzoyfSxlLk1zU2V0RnJhbWVTeW5jTm90aWZ5PWZ1bmN0aW9uKGUsdCxyLG8scyl7dGhpcy5mcmFtZVJhdGU9ZSx0aGlzLnN0YXJ0SW5kZXg9dCx0aGlzLnRpbWVzdGFtcD1yLHRoaXMuZW5hYmxlR1M9byx0aGlzLmNhY2hlRnJhbWVNUz1zfSxlLk1zV2F0Y2hTZXQ9ZnVuY3Rpb24oZSx0LHIsbyl7dGhpcy5jYWNoZU1TPWUsdGhpcy5tYXhXYXRjaD10LHRoaXMuZGVsYXlNUz1yLHRoaXMucGVyc2lzdGVudD1vfSxlLk1zTGl2ZUZyYW1lRGF0YU5vdGlmeT1mdW5jdGlvbihlLHQscixvKXt0aGlzLnNyY1VzZXJJRD1lLHRoaXMuY3BQcm90bz10LHRoaXMudGltZVN0YW1wPXIsdGhpcy5mcmFtZUlkeD1vfSxlLk1zTGl2ZUF1ZGllbmNlPWZ1bmN0aW9uKGUsdCxyKXt0aGlzLnVzZXJJRD1lLHRoaXMucHJvZmlsZT10LHRoaXMuZW50ZXJUaW1lPXJ9LGUuTXNMaXZlV2F0Y2hJbmZvPWZ1bmN0aW9uKGUsdCxyLG8scyxpLGEsbil7dGhpcy5yb29tSUQ9ZSx0aGlzLnN0YXJ0VFM9dCx0aGlzLmRlbGF5TVM9cix0aGlzLmNhY2hlTVM9byx0aGlzLm1heEF1ZGllbmNlcz1zLHRoaXMuY3VyQXVkaWVuY2VzPWksdGhpcy5wZWFrQXVkaWVuY2VzPWEsdGhpcy5sYXN0QXVkaWVuY2VzPW59LGUuTXNKb2luV2F0Y2hSb29tUnNwPWZ1bmN0aW9uKGUsdCxyLG8pe3RoaXMuc3RhdHVzPWUsdGhpcy5yb29tU3RhdHVzPXQsdGhpcy5yZXNlcnZlZD1yLHRoaXMud2F0aGNoSW5mbz1vfSxlLk1zRXhpdExpdmVSb29tTm90aWZ5PWZ1bmN0aW9uKGUsdCl7dGhpcy51c2VySUQ9ZSx0aGlzLnVzZXJQcm9maWxlPXR9LGUuTXNMaXZlT3Zlck5vdGlmeT1mdW5jdGlvbihlLHQpe3RoaXMuZ2FtZUlEPWUsdGhpcy5yb29tSUQ9dH0sZS5Nc0NoYW5nZVJvbGVSc3A9ZnVuY3Rpb24oZSx0KXt0aGlzLnN0YXR1cz1lLHRoaXMudGFyZ2V0Um9vbVR5cGU9dH0sZS5Nc0NyZWF0ZVRlYW1JbmZvPWZ1bmN0aW9uKGUsdCxyLG8scyl7dGhpcy5wYXNzd29yZD1lLHRoaXMuY2FwYWNpdHk9dCx0aGlzLm1vZGU9cix0aGlzLnZpc2liaWxpdHk9byx0aGlzLnVzZXJQcm9maWxlPXN9LGUuTXNUZWFtTWF0Y2hDb25kPWZ1bmN0aW9uKGUsdCxyLG8scyxpLGEpe3RoaXMudGVhbU51bT1lLHRoaXMudGVhbU1lbWJlck51bT10LHRoaXMudGltZW91dD1yLHRoaXMud2VpZ2h0PW8sdGhpcy53ZWlnaHRSYW5nZT1zLHRoaXMud2VpZ2h0UnVsZT1pLHRoaXMuZnVsbD1hfSxlLk1zVGVhbU1hdGNoSW5mbz1mdW5jdGlvbihlLHQscixvLHMsaSxhLG4pe3RoaXMucm9vbU5hbWU9ZSx0aGlzLm1heFBsYXllcj10LHRoaXMuY2FuV2F0Y2g9cix0aGlzLm1vZGU9byx0aGlzLnZpc2liaWxpdHk9cyx0aGlzLnJvb21Qcm9wZXJ0eT1pLHRoaXMud2F0Y2hTZXQ9bix0aGlzLmNvbmQ9YX19KE1WU3x8e30pO3ZhciBNdnNDb2RlPXtOb0xvZ2luOi0yLENPREVfMjAxOjIwMSxDT0RFXzEwMDA6MWUzLE5ldHdvcmtFcnI6MTAwMSxDT0RFXzEwMDU6MTAwNSxEYXRhUGFyc2VFcnI6MTYwNn0sTXZzRXJyTXNnPW5ldyBmdW5jdGlvbigpe3RoaXNbMTAwMV09XCJuZXR3b3JrIGVycm9yLCBwbGVhc2UgcmVmZXJlbmNlIFsgaHR0cHM6Ly9kb2MubWF0Y2h2cy5jb20vRXJyQ29kZSBdXCIsdGhpc1sxZTNdPVwibmV0d3JrIGNsb3NlZCBub3JtYWwgXCIsdGhpc1sxMDA1XT1cIm5ldHdyayBjbG9zZWQgbm8gc3RhdHVzIFwiLHRoaXNbMTYwNl09XCJ5b3UgZGF0YSBwYXJzZSBlcnJvciBcIix0aGlzWzQwMF09XCJiYWQgcmVxdWVzdCBcIix0aGlzWzQwMV09XCJpbnZhaWxkIGFwcGtleSBcIix0aGlzWzQwMl09XCJpbnZhaWxkIHNpZ24gWyBodHRwczovL2RvYy5tYXRjaHZzLmNvbS9FcnJDb2RlIF1cIix0aGlzWzQwM109XCJmb3JiaWRkZW5cIix0aGlzWzQwNF09XCJub3QgZm91bmQgYW55dGhpbmcsIHBsZWFzZSByZWZlcmVuY2UgWyBodHRwczovL2RvYy5tYXRjaHZzLmNvbS9FcnJDb2RlIF1cIix0aGlzWzQwNV09XCJyb29tIGhhdmUgZnVsbCwgcGxlYXNlIHJlZmVyZW5jZSBbIGh0dHBzOi8vZG9jLm1hdGNodnMuY29tL0VyckNvZGUgXVwiLHRoaXNbNDA2XT1cInJvb20gaGFkIGpvaW5PdmVyLCBwbGVhc2UgcmVmZXJlbmNlIFsgaHR0cHM6Ly9kb2MubWF0Y2h2cy5jb20vRXJyQ29kZSBdXCIsdGhpc1s1MDBdPVwic2VydmVyIGVycm9yLCBwbGVhc2UgcmVmZXJlbmNlIFsgaHR0cHM6Ly9kb2MubWF0Y2h2cy5jb20vRXJyQ29kZSBdXCIsdGhpc1s1MDJdPVwic2VydmljZSBzdG9wZWQsdGhlIGxpY2Vuc2UgZXhwaXJlcyBvciB0aGUgYWNjb3VudCBpcyBpbiBhcnJlYXJzLiBwbGVhc2UgcmVmZXJlbmNlIFsgaHR0cHM6Ly9kb2MubWF0Y2h2cy5jb20vUGF5bWVudEhlbHAgXVwiLHRoaXNbNTAzXT1cInRoZSBjY3UgZXhjZWVkIHRoZSBsaW1pdC4gcGxlYXNlIHJlZmVyZW5jZSBbIGh0dHBzOi8vZG9jLm1hdGNodnMuY29tL1BheW1lbnRIZWxwIF1cIix0aGlzWzUwNF09XCJ5b3VyIHRyYWZmaWMgaXMgcnVubmluZyBvdXQgdG9kYXkscGxlYXNlIHJlY2hhcmdlIFsgaHR0cHM6Ly9kb2MubWF0Y2h2cy5jb20vUGF5bWVudEhlbHAgXVwiLHRoaXNbNTA3XT1cInJvb20gZG9lcyBub3QgZXhpc3RcIix0aGlzWzUwOV09XCJub3QgaW4gdGhlIHJvb20gXCIsdGhpc1s1MjFdPVwiZ2FtZVNlcnZlciBub3QgZXhpc3QsIHBsZWFzZSBjaGVjayB5b3VyIGdhbWVzZXJ2ZXIgaXMgb2sgWyBodHRwczovL2RvYy5tYXRjaHZzLmNvbS9RdWlja1N0YXJ0L0dhbWVTZXJ2ZXItSmF2YVNjcmlwdCBdXCIsdGhpc1s1MjJdPVwiZnJhbWUgc3luYyBpcyBjbG9zZSwgcGxlYXNlIGNhbGwgdGhlIGFwaSAnc2V0RnJhbWVTeW5jJyBbIGh0dHBzOi8vZG9jLm1hdGNodnMuY29tL0VyckNvZGUgXVwiLHRoaXNbNTIzXT1cImdhbWVTZXJ2ZXIgaW50ZXJuYWwgZXJyb3IsIG5lZWQgY2hlY2sgeW91IGdhbWUgc2VydmVyIFsgaHR0cHM6Ly9kb2MubWF0Y2h2cy5jb20vRXJyQ29kZSBdIFwiLHRoaXNbNTI3XT1cInNlbmRpbmcgbWVzc2FnZSB0b28gb2Z0ZW4gLCAgY2FuJ3QgZXhjZWVkIDUwMCB0aW1lcyBwZXIgc2Vjb25kIFsgaHR0cHM6Ly9kb2MubWF0Y2h2cy5jb20vRXJyQ29kZSBdXCIsdGhpc1syMDFdPVwicmVjb25uZWN0IG5vdCBpbiByb29tIFsgaHR0cHM6Ly9kb2MubWF0Y2h2cy5jb20vRXJyQ29kZSBdXCIsdGhpc1s0MjJdPVwidGVhbSBtYXRjaCB0aW1lb3V0XCIsdGhpc1s0MjNdPVwicGFyYW1ldGVycyBpcyBpbmNvcnJlY3RcIn07ZnVuY3Rpb24gTXNDcmVhdGVSb29tSW5mbyhlLHQscixvLHMsaSl7dGhpcy5yb29tTmFtZT1lLHRoaXMubWF4UGxheWVyPXQsdGhpcy5tb2RlPXIsdGhpcy5jYW5XYXRjaD1vLHRoaXMudmlzaWJpbGl0eT1zLHRoaXMucm9vbVByb3BlcnR5PWksdGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwicm9vbU5hbWU6XCIrdGhpcy5yb29tTmFtZStcIiBtYXhQbGF5ZXI6XCIrdGhpcy5tYXhQbGF5ZXIrXCIgbW9kZTpcIit0aGlzLm1vZGUrXCIgY2FuV2F0Y2g6XCIrdGhpcy5jYW5XYXRjaCtcIiB2aXNpYmlsaXR5OlwiK3RoaXMudmlzaWJpbGl0eStcIiByb29tUHJvcGVydHk6XCIrdGhpcy5yb29tUHJvcGVydHl9LE1hdGNodnNMb2cubG9nSSh0aGlzK1wiIE1zQ3JlYXRlUm9vbUluZm86XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zRW51bSgpe31mdW5jdGlvbiBNc1Jvb21Kb2luKGUsdCxyLG8scyxpLGEsbixwLGcsdSl7dGhpcy5qb2luVHlwZT1lLHRoaXMudXNlcklEPXQsdGhpcy5yb29tSUQ9cix0aGlzLmdhbWVJRD1vLHRoaXMubWF4UGxheWVyPXMsdGhpcy5tb2RlPWksdGhpcy5jYW5XYXRjaD1hLHRoaXMudGFncz1wLHRoaXMudXNlclByb2ZpbGU9bix0aGlzLnZpc2liaWxpdHk9Zyx0aGlzLnJvb21Qcm9wZXJ0eT11LE1hdGNodnNMb2cubG9nSSh0aGlzK1wiIE1zUm9vbUpvaW46XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zSm9pbk92ZXJSc3AoZSx0KXt0aGlzLnN0YXR1cz1lLHRoaXMuY3BQcm90bz10LE1hdGNodnNMb2cubG9nSSh0aGlzK1wiIE1zSm9pbk92ZXJSc3A6XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zSm9pbk92ZXJOb3RpZnlJbmZvKGUsdCxyKXt0aGlzLnJvb21JRD1lLHRoaXMuc3JjVXNlcklEPXQsdGhpcy5jcFByb3RvPXIsTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCIgTXNKb2luT3Zlck5vdGlmeUluZm86XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zQ3JlYXRlUm9vbVJzcChlLHQscil7dGhpcy5zdGF0dXM9ZSx0aGlzLnJvb21JRD10LHRoaXMub3duZXI9cixNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc0NyZWF0ZVJvb21Sc3A6XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zQ2hlY2tJbihlLHQscixvLHMsaSl7dGhpcy5nYW1lSUQ9ZSx0aGlzLnJvb21JRD10LHRoaXMudXNlcklEPXIsdGhpcy5ib29rSUQ9byx0aGlzLmJvb2tLZXk9cyx0aGlzLmhvdGVsSW5mbz1pfWZ1bmN0aW9uIE1zTWF0Y2hJbmZvKGUsdCxyLG8scyxpKXt0aGlzLm1heFBsYXllcj1lLHRoaXMubW9kZT10LHRoaXMuY2FuV2F0Y2g9cix0aGlzLnRhZ3M9e30sdGhpcy50YWdzPW8sdGhpcy52aXNpYmlsaXR5PXMsdGhpcy5yb29tUHJvcGVydHk9aSxNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc01hdGNoSW5mbzpcIitKU09OLnN0cmluZ2lmeSh0aGlzKSl9ZnVuY3Rpb24gTXNSb29tSW5mbyhlLHQscixvLHMpe3RoaXMucm9vbUlEPWUsdGhpcy5yb29tTmFtZT1zLHRoaXMucm9vbVByb3BlcnR5PXQsdGhpcy5vd25lcklkPXIsdGhpcy5vd25lcj1yLHRoaXMuc3RhdGU9byxNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc1Jvb21JbmZvOlwiK0pTT04uc3RyaW5naWZ5KHRoaXMpKX1mdW5jdGlvbiBNc1Jvb21Vc2VySW5mbyhlLHQpe3RoaXMudXNlcklkPWUsdGhpcy51c2VySUQ9ZSx0aGlzLnVzZXJQcm9maWxlPXQsTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCIgTXNSb29tVXNlckluZm86XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zTGVhdmVSb29tUnNwKGUsdCxyLG8pe3RoaXMuc3RhdHVzPWUsdGhpcy5yb29tSUQ9dCx0aGlzLnVzZXJJZD1yLHRoaXMudXNlcklEPXIsdGhpcy5jcFByb3RvPW8sTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCIgTXNMZWF2ZVJvb21Sc3A6XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zTGVhdmVSb29tTm90aWZ5KGUsdCxyLG8pe3RoaXMudXNlcklkPXQsdGhpcy51c2VySUQ9dCx0aGlzLnJvb21JRD1lLHRoaXMub3duZXI9cix0aGlzLmNwUHJvdG89byxNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc0xlYXZlUm9vbU5vdGlmeTpcIitKU09OLnN0cmluZ2lmeSh0aGlzKSl9ZnVuY3Rpb24gTXNTdWJzY3JpYmVFdmVudEdyb3VwUnNwKGUsdCl7dGhpcy5zdGF0dXM9ZSx0aGlzLmdyb3Vwcz10fWZ1bmN0aW9uIE1zU2VuZEV2ZW50R3JvdXBOb3RpZnkoZSx0LHIpe3RoaXMuc3JjVWlkPWUsdGhpcy5zcmNVc2VySUQ9ZSx0aGlzLmdyb3Vwcz10LHRoaXMuY3BQcm90bz1yfWZ1bmN0aW9uIE1zUmVnaXN0UnNwKGUsdCxyLG8scyl7dGhpcy5zdGF0dXM9ZSx0aGlzLmlkPXQsdGhpcy51c2VySUQ9dCx0aGlzLnRva2VuPXIsdGhpcy5uYW1lPW8sdGhpcy5hdmF0YXI9cyxNYXRjaHZzTG9nLmxvZ0koXCJNc1JlZ2lzdFJzcDpcIitKU09OLnN0cmluZ2lmeSh0aGlzKSl9ZnVuY3Rpb24gTXNMb2dpblJzcChlLHQpe3RoaXMuc3RhdHVzPWUsdGhpcy5yb29tSUQ9dCxNYXRjaHZzTG9nLmxvZ0koXCJNc0xvZ2luUnNwOjpcIitKU09OLnN0cmluZ2lmeSh0aGlzKSl9ZnVuY3Rpb24gTXNDaGVja0luTm90aWZ5KGUsdCxyLG8pe3RoaXMudXNlcklEPWUsdGhpcy5jaGVja2lucz10LHRoaXMucGxheWVycz1yLHRoaXMubWF4UGxheWVycz1vLHRoaXMubWF4UGxheWVyPW8sTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCI6XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zU2VuZEV2ZW50Tm90aWZ5KGUsdCl7dGhpcy5zcmNVc2VySWQ9ZSx0aGlzLnNyY1VzZXJJRD1lLHRoaXMuY3BQcm90bz10fWZ1bmN0aW9uIE1zR2FtZVNlcnZlck5vdGlmeUluZm8oZSx0KXt0aGlzLnNyY1VzZXJJZD1lLHRoaXMuc3JjVXNlcklEPWUsdGhpcy5jcFByb3RvPXR9ZnVuY3Rpb24gTXNTZW5kRXZlbnRSc3AoZSx0KXt0aGlzLnN0YXR1cz1lLHRoaXMuc2VxdWVuY2U9dH1mdW5jdGlvbiBNc1Jvb21JbmZvRXgoZSx0LHIsbyxzLGkpe3RoaXMucm9vbUlEPWUsdGhpcy5yb29tTmFtZT10LHRoaXMubWF4UGxheWVyPXIsdGhpcy5tb2RlPW8sdGhpcy5jYW5XYXRjaD1zLHRoaXMucm9vbVByb3BlcnR5PWksTWF0Y2h2c0xvZy5sb2dJKFwiIE1zUm9vbUluZm9FeDpcIitKU09OLnN0cmluZ2lmeSh0aGlzKSl9ZnVuY3Rpb24gTXNSb29tTGlzdFJzcChlLHQpe3RoaXMuc3RhdHVzPWUsdGhpcy5yb29tSW5mb3M9dCxNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc1Jvb21MaXN0UnNwOlwiK0pTT04uc3RyaW5naWZ5KHRoaXMpKX1mdW5jdGlvbiBNc0tpY2tQbGF5ZXJOb3RpZnkoZSx0LHIsbyl7dGhpcy51c2VySWQ9ZSx0aGlzLnVzZXJJRD1lLHRoaXMuc3JjVXNlcklkPXQsdGhpcy5zcmNVc2VySUQ9dCx0aGlzLmNwUHJvdG89cix0aGlzLm93bmVyPW8sTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCIgTXNLaWNrUGxheWVyTm90aWZ5OlwiK0pTT04uc3RyaW5naWZ5KHRoaXMpKX1mdW5jdGlvbiBNc0tpY2tQbGF5ZXJSc3AoZSx0LHIpe3RoaXMuc3RhdHVzPWUsdGhpcy5vd25lcj10LHRoaXMudXNlcklEPXIsTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCIgTXNLaWNrUGxheWVyUnNwOlwiK0pTT04uc3RyaW5naWZ5KHRoaXMpKX1mdW5jdGlvbiBNc1NldENoYW5uZWxGcmFtZVN5bmNSc3AoZSl7dGhpcy5zdGF0dXM9ZX1mdW5jdGlvbiBNc1NlbmRGcmFtZUV2ZW50UnNwKGUpe3RoaXMuc3RhdHVzPWV9ZnVuY3Rpb24gTXNSb29tRmlsdGVyKGUsdCxyLG8pe3RoaXMubWF4UGxheWVyPWUsdGhpcy5tb2RlPXQsdGhpcy5jYW5XYXRjaD1yLHRoaXMucm9vbVByb3BlcnR5PW8sTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCIgTXNSb29tRmlsdGVyOlwiK0pTT04uc3RyaW5naWZ5KHRoaXMpKX1mdW5jdGlvbiBNc1Jvb21GaWx0ZXJFeChlLHQscixvLHMsaSxhLG4scCxnKXt0aGlzLm1heFBsYXllcj1lLHRoaXMubW9kZT10LHRoaXMuY2FuV2F0Y2g9cix0aGlzLnJvb21Qcm9wZXJ0eT1vLHRoaXMuZnVsbD1zLHRoaXMuc3RhdGU9aSx0aGlzLnNvcnQ9YSx0aGlzLm9yZGVyPW4sdGhpcy5wYWdlTm89cCx0aGlzLnBhZ2VTaXplPWd8fDEwLE1hdGNodnNMb2cubG9nSSh0aGlzK1wiIE1zUm9vbUZpbHRlckV4OlwiK0pTT04uc3RyaW5naWZ5KHRoaXMpKX1mdW5jdGlvbiBNc0dldFJvb21EZXRhaWxSc3AoZSx0LHIsbyxzLGksYSxuLHAsZyx1KXt0aGlzLnN0YXR1cz1lLHRoaXMuc3RhdGU9dCx0aGlzLm1heFBsYXllcj1yLHRoaXMubW9kZT1vLHRoaXMuY2FuV2F0Y2g9cyx0aGlzLnJvb21Qcm9wZXJ0eT1pLHRoaXMub3duZXI9YSx0aGlzLmNyZWF0ZUZsYWc9bix0aGlzLnVzZXJJbmZvcz1bXSx0aGlzLnVzZXJJbmZvcz1wLHRoaXMud2F0Y2hpbmZvPWcsdGhpcy5icmlnYWRlcz11LE1hdGNodnNMb2cubG9nSSh0aGlzK1wiIE1zR2V0Um9vbURldGFpbFJzcDpcIitKU09OLnN0cmluZ2lmeSh0aGlzKSl9ZnVuY3Rpb24gTXNSb29tQXR0cmlidXRlKGUsdCxyLG8scyxpLGEsbixwLGcsdSxsKXt0aGlzLnJvb21JRD1lLHRoaXMucm9vbU5hbWU9dCx0aGlzLm1heFBsYXllcj1yLHRoaXMuZ2FtZVBsYXllcj1vLHRoaXMud2F0Y2hQbGF5ZXI9cyx0aGlzLm1vZGU9aSx0aGlzLmNhbldhdGNoPWEsdGhpcy5yb29tUHJvcGVydHk9bix0aGlzLm93bmVyPXAsdGhpcy5zdGF0ZT1nLHRoaXMuY3JlYXRlVGltZT11LHRoaXMud2F0Y2hTZXQ9bCxNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc1Jvb21BdHRyaWJ1dGU6XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zR2V0Um9vbUxpc3RFeFJzcChlLHQscil7dGhpcy5zdGF0dXM9ZSx0aGlzLnRvdGFsPXQsdGhpcy5yb29tQXR0cnM9cixNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc0dldFJvb21MaXN0RXhSc3A6XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zRnJhbWVJdGVtKGUsdCxyKXt0aGlzLnNyY1VzZXJJRD1lLHRoaXMuY3BQcm90bz10LHRoaXMudGltZXN0YW1wPXJ9ZnVuY3Rpb24gTXNGcmFtZURhdGEoZSx0LHIpe3RoaXMuZnJhbWVJbmRleD1lLHRoaXMuZnJhbWVJdGVtcz10LHRoaXMuZnJhbWVXYWl0Q291bnQ9cn1mdW5jdGlvbiBNc05ldHdvcmtTdGF0ZU5vdGlmeShlLHQscixvKXt0aGlzLnJvb21JRD1lLHRoaXMudXNlcklEPXQsdGhpcy5zdGF0ZT1yLHRoaXMub3duZXI9b31mdW5jdGlvbiBNc1NldFJvb21Qcm9wZXJ0eVJzcEluZm8oZSx0LHIsbyl7dGhpcy5zdGF0dXM9ZSx0aGlzLnJvb21JRD10LHRoaXMudXNlcklEPXIsdGhpcy5yb29tUHJvcGVydHk9byxNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc1NldFJvb21Qcm9wZXJ0eVJzcEluZm86XCIrSlNPTi5zdHJpbmdpZnkodGhpcykpfWZ1bmN0aW9uIE1zUm9vbVByb3BlcnR5Tm90aWZ5SW5mbyhlLHQscil7dGhpcy5yb29tSUQ9ZSx0aGlzLnVzZXJJRD10LHRoaXMucm9vbVByb3BlcnR5PXIsTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCIgTXNSb29tUHJvcGVydHlOb3RpZnlJbmZvOlwiK0pTT04uc3RyaW5naWZ5KHRoaXMpKX1mdW5jdGlvbiBNc0hlYXJ0QmVhdFJlc3BvbnNlKGUsdCl7dGhpcy5nYW1lSUQ9ZSx0aGlzLmdzRXhpc3Q9dH1mdW5jdGlvbiBNc0dhdGV3YXlTcGVlZFJlc3BvbnNlKGUsdCl7dGhpcy5zdGF0dXM9ZSx0aGlzLnNlcT10fWZ1bmN0aW9uIE1zUmVvcGVuUm9vbVJlc3BvbnNlKGUsdCl7dGhpcy5zdGF0dXM9ZSx0aGlzLmNwUHJvdG89dCxNYXRjaHZzTG9nLmxvZ0kodGhpcytcIiBNc1Jlb3BlblJvb21SZXNwb25zZTpcIitKU09OLnN0cmluZ2lmeSh0aGlzKSl9ZnVuY3Rpb24gTXNSZW9wZW5Sb29tTm90aWZ5KGUsdCxyKXt0aGlzLnJvb21JRD1lLHRoaXMudXNlcklEPXQsdGhpcy5jcFByb3RvPXIsTWF0Y2h2c0xvZy5sb2dJKHRoaXMrXCIgTXNSZW9wZW5Sb29tTm90aWZ5OlwiK0pTT04uc3RyaW5naWZ5KHRoaXMpKX1Nc0VudW0uSm9pblJvb21UeXBlPXtOb0pvaW46MCxqb2luU3BlY2lhbFJvb206MSxqb2luUm9vbVdpdGhQcm9wZXJ0eToyLGpvaW5SYW5kb21Sb29tOjMscmVjb25uZWN0OjR9LGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSl7dGhpcy5tQ2FsbGJhY2s9ZTt2YXIgcj1mdW5jdGlvbihlLHQscixvKXt2YXIgcz1uZXcgWE1MSHR0cFJlcXVlc3Q7cy5vcGVuKHI/XCJQT1NUXCI6XCJHRVRcIixlLCEwKSxzLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIixcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSxzLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1zLnJlYWR5U3RhdGUmJigyMDA9PT1zLnN0YXR1cz8odC5vbk1zZyhzLnJlc3BvbnNlVGV4dCksTWF0Y2h2c0xvZy5sb2dJKFwiW0hUVFA6XShcIitlK1wiKStcIitzLnJlc3BvbnNlVGV4dCkpOnQub25FcnIocy5zdGF0dXMscy5zdGF0dXNUZXh0KSl9LHI/cy5zZW5kKG8pOnMuc2VuZChudWxsKX07dGhpcy5nZXQ9ZnVuY3Rpb24oZSl7cihlLHRoaXMubUNhbGxiYWNrLCExLG51bGwpfSx0aGlzLnBvc3Q9ZnVuY3Rpb24oZSx0KXtyKGUsdGhpcy5tQ2FsbGJhY2ssITAsdCl9fXRyeXtlLk1hdGNodnNOZXRXb3JrPWZ1bmN0aW9uKGUsdCl7dGhpcy5zb2NrZXQ9bnVsbCx0aGlzLm1DYWxsQmFjaz10LHRoaXMubUhvc3Q9ZTt2YXIgcj0hMSxvPVtdO3RoaXMuc2VuZD1mdW5jdGlvbihlKXtpZih3aW5kb3cuV2ViU29ja2V0KXtpZihpc0lFKCkpe2Zvcih2YXIgdD1uZXcgVWludDhBcnJheShlLmJ1ZmZlci5ieXRlTGVuZ3RoKSxyPTA7cjx0Lmxlbmd0aDtyKyspdFtyXT1lLmdldFVpbnQ4KHIpO2U9dH10aGlzLnNvY2tldC5yZWFkeVN0YXRlPT09V2ViU29ja2V0Lk9QRU4/dGhpcy5zb2NrZXQuc2VuZChlLmJ1ZmZlcik6by51bnNoaWZ0KGUpfX0sdGhpcy5jbG9zZT1mdW5jdGlvbigpe3RoaXMuc29ja2V0JiYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNjJiZ2b2lkIDAhPT1jYy5Db21wb25lbnQ/KHI9ITAsdGhpcy5zb2NrZXQuY2xvc2UoKSk6dGhpcy5zb2NrZXQuY2xvc2UoMWUzLFwiXCIpKX0sd2luZG93LldlYlNvY2tldHx8KHdpbmRvdy5XZWJTb2NrZXQ9d2luZG93Lk1veldlYlNvY2tldCksd2luZG93LldlYlNvY2tldD8odGhpcy5zb2NrZXQ9bmV3IFdlYlNvY2tldChlKSx0aGlzLnNvY2tldC5iaW5hcnlUeXBlPVwiYXJyYXlidWZmZXJcIix0aGlzLnNvY2tldC5oYXNoY29kZT0obmV3IERhdGUpLmdldE1pbGxpc2Vjb25kcygpLE1hdGNodnNMb2cubG9nSShcInRyeSB0byBjcmVhdGUgYSBzb2NrZXQ6XCIrdGhpcy5tSG9zdCtcIiBzb2NrZXQgaXMgXCIrdGhpcy5zb2NrZXQuaGFzaGNvZGUpLHRoaXMuc29ja2V0Lm9ubWVzc2FnZT1mdW5jdGlvbihlKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlciYmZS5kYXRhIGluc3RhbmNlb2YgQmxvYil7Y29uc29sZS5sb2coXCJ3ZWJzb2NrZXQgb25tZXNzYWdlIEZpbGVSZWFkZXI6XCIsRGF0ZS5ub3coKSk7dmFyIHI9bmV3IEZpbGVSZWFkZXI7ci5yZWFkQXNBcnJheUJ1ZmZlcihlLmRhdGEpLHIub25sb2FkPWZ1bmN0aW9uKGUpe2lmKGUudGFyZ2V0LnJlYWR5U3RhdGU9PT1GaWxlUmVhZGVyLkRPTkUpe2NvbnNvbGUubG9nKFwid2Vic29ja2V0IG9ubWVzc2FnZSByZWFkeVN0YXRlOlwiLERhdGUubm93KCkpO3ZhciB0PW5ldyBEYXRhVmlldyhyLnJlc3VsdCk7dGhpcy5tQ2FsbEJhY2sub25Nc2codCl9ZWxzZSB0aGlzLm1DYWxsQmFjay5vbkVycihNdnNDb2RlLkRhdGFQYXJzZUVycixcIltlcnJdcGFyc2UgZmFpbFwiKX0uYmluZCh0aGlzKX1lbHNlIGlmKGUuZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXt2YXIgdD1uZXcgRGF0YVZpZXcoZS5kYXRhKTt0aGlzLm1DYWxsQmFjay5vbk1zZyYmdGhpcy5tQ2FsbEJhY2sub25Nc2codCl9ZWxzZSBjb25zb2xlLmxvZyhcIltlcnJvcl0gdW5rbm93biBldmVudCA6XCIrZStcIiA9PiBcIitKU09OLnN0cmluZ2lmeShlKSksdGhpcy5tQ2FsbEJhY2sub25FcnImJnRoaXMubUNhbGxCYWNrLm9uRXJyKE12c0NvZGUuRGF0YVBhcnNlRXJyLFwiW2Vycl1wYXJzZSBmYWlsXCIpfS5iaW5kKHRoaXMpLHRoaXMuc29ja2V0Lm9ub3Blbj1mdW5jdGlvbihlKXtmb3Iocj0hMSxNYXRjaHZzTG9nLmxvZ0koXCJDcmVhdGUgdGhlIHNvY2tldCBpcyBzdWNjZXNzIDpcIit0aGlzLm1Ib3N0K1wiIHNvY2tldCBpcyBcIit0aGlzLnNvY2tldC5oYXNoY29kZSk7MDxvLmxlbmd0aDspdGhpcy5zZW5kKG8ucG9wKCkpO3RoaXMubUNhbGxCYWNrLm9uQ29ubmVjdCYmdGhpcy5tQ2FsbEJhY2sub25Db25uZWN0KHRoaXMubUhvc3QpfS5iaW5kKHRoaXMpLHRoaXMuc29ja2V0Lm9uY2xvc2U9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNjJiZ2b2lkIDAhPT1jYy5Db21wb25lbnQmJihlPXI/e2NvZGU6MWUzLHJlYXNvbjpcImpzYiBmcmllbmQgY2xvc2UgXCJ9Ontjb2RlOjEwMDYscmVhc29uOlwiZXJyb3IgY2xvc2UgXCJ9KSxNYXRjaHZzTG9nLmxvZ0koXCJzb2NrZXQgb24gY2xvc2VkICxjb2RlOlwiKyhlJiZlLmNvZGUpK1wiKDEwMDA6Tk9STUFMLDEwMDU6Q0xPU0VfTk9fU1RBVFVTLDEwMDY6UkVTRVQsMTAwOTpDTE9TRV9UT09fTEFSR0UpIGVycjpcIitKU09OLnN0cmluZ2lmeShlKSksdGhpcy5tQ2FsbEJhY2sub25EaXNDb25uZWN0JiZ0aGlzLm1DYWxsQmFjay5vbkRpc0Nvbm5lY3QodGhpcy5tSG9zdCxlKX0uYmluZCh0aGlzKSx0aGlzLnNvY2tldC5vbmVycm9yPWZ1bmN0aW9uKGUpe01hdGNodnNMb2cubG9nSShcInNvY2tldCBvbiBlcnJvciAsZXZlbnQ6XCIrSlNPTi5zdHJpbmdpZnkoZSkpLHRoaXMubUNhbGxCYWNrLm9uRGlzQ29ubmVjdCYmdGhpcy5tQ2FsbEJhY2sub25EaXNDb25uZWN0KHRoaXMubUhvc3QsZSl9LmJpbmQodGhpcykpOmFsZXJ0KFwiTm90IFN1cHBvcnQgdGhlIFdlYlNvY2tldO+8gVwiKX0sZS5NYXRjaHZzSHR0cD10LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBlZ3JldCYmKGNvbnNvbGUubG9nKFwibmV0d29yayBhcGkgLT4gZWdyZXRcIiksZS5NYXRjaHZzTmV0V29yaz1mdW5jdGlvbihlLHQpe3ZhciBzPW51bGwsaT0hMSxhPVtdLG49dCxyPWUsbz0hMSxwPXRoaXM7dGhpcy5jbG9zZT1mdW5jdGlvbigpe3MmJihvPSEwLHMuY2xvc2UoKSl9LHRoaXMuc2VuZD1mdW5jdGlvbihlKXtpZihpKXt2YXIgdD1uZXcgZWdyZXQuQnl0ZUFycmF5O3QucG9zaXRpb249MDtmb3IodmFyIHI9ZS5idWZmZXIuYnl0ZUxlbmd0aCxvPTA7bzxyO28rKyl0LndyaXRlQnl0ZShlLmdldFVpbnQ4KG8pKTtzLndyaXRlQnl0ZXModCwwLHQuYnl0ZXNBdmFpbGFibGUpfWVsc2UgYS5sZW5ndGg8MTAwJiZhLnVuc2hpZnQoZSl9O3ZhciBnPWZ1bmN0aW9uKGUpe2ZvcihvPSExLE1hdGNodnNMb2cubG9nSShcIltlZ3JldC5XZWJTb2NrZXRdW2Nvbm5lY3RdOlwiK2UpLGk9ITA7MDxhLmxlbmd0aDspcC5zZW5kKGEucG9wKCkpO24ub25Db25uZWN0JiZuLm9uQ29ubmVjdChyKX0sdT1mdW5jdGlvbihlKXtlPW8/e2NvZGU6MWUzfTp7Y29kZToxMDAxfSxpPSExLG4ub25EaXNDb25uZWN0JiZuLm9uRGlzQ29ubmVjdChyLGUpLE1hdGNodnNMb2cubG9nSShcIltlZ3JldC5XZWJTb2NrZXRdIFtvbkNsb3NlXSBjYXNlOlwiK0pTT04uc3RyaW5naWZ5KGUpKX0sbD1mdW5jdGlvbigpe3ZhciBlPW5ldyBlZ3JldC5CeXRlQXJyYXk7cy5yZWFkQnl0ZXMoZSk7Zm9yKHZhciB0PW5ldyBBcnJheUJ1ZmZlcihlLnJlYWRBdmFpbGFibGUpLHI9bmV3IERhdGFWaWV3KHQpLG89MDtvPHQuYnl0ZUxlbmd0aDtvKyspci5zZXRVaW50OChvLGUucmVhZFVuc2lnbmVkQnl0ZSgpKTtuLm9uTXNnKHIpfSxtPWZ1bmN0aW9uKGUpe24ub25EaXNDb25uZWN0JiZuLm9uRGlzQ29ubmVjdChyLGU9e2NvZGU6XCIxMDA2XCJ9KSxNYXRjaHZzTG9nLmxvZ0koXCJbZWdyZXQuV2ViU29ja2V0XSBbb25FcnJvcl0gY2FzZTpcIitKU09OLnN0cmluZ2lmeShlKSl9OyFmdW5jdGlvbigpeyhzPW5ldyBlZ3JldC5XZWJTb2NrZXQpLnR5cGU9ZWdyZXQuV2ViU29ja2V0LlRZUEVfQklOQVJZLHMuYWRkRXZlbnRMaXN0ZW5lcihlZ3JldC5Qcm9ncmVzc0V2ZW50LlNPQ0tFVF9EQVRBLGwsdGhpcykscy5hZGRFdmVudExpc3RlbmVyKGVncmV0LkV2ZW50LkNPTk5FQ1QsZyx0aGlzKSxzLmFkZEV2ZW50TGlzdGVuZXIoZWdyZXQuRXZlbnQuQ0xPU0UsdSx0aGlzKSxzLmFkZEV2ZW50TGlzdGVuZXIoZWdyZXQuSU9FcnJvckV2ZW50LklPX0VSUk9SLG0sdGhpcykscy5jb25uZWN0QnlVcmwoZSl9KCl9LGUuTWF0Y2h2c0h0dHA9dCksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHd4Pyhjb25zb2xlLmxvZyhcIm5ldHdvcmsgYXBpLT53eFwiKSxlLk1hdGNodnNOZXRXb3JrPWZ1bmN0aW9uKGUsdCl7dGhpcy5zb2NrZXQ9d3guY29ubmVjdFNvY2tldCh7dXJsOmUsaGVhZGVyOntlbmdpbmU6XCJXZWlYaW5HYW1lXCJ9fSksdGhpcy5zb2NrZXRPcGVuPSExO3ZhciByPVtdLG89dCxzPWUsaT10aGlzO3RoaXMuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLnNvY2tldCYmdGhpcy5zb2NrZXQuY2xvc2Uoe2NvZGU6MWUzLHJlYXNvbjpcIm5vcm1hbFwifSl9LHRoaXMuc2VuZD1mdW5jdGlvbihlKXt0aGlzLnNvY2tldE9wZW4/dGhpcy5zb2NrZXQuc2VuZCh7ZGF0YTplLmJ1ZmZlcn0pOnIubGVuZ3RoPDEwMCYmci51bnNoaWZ0KGUpfSx0aGlzLnNvY2tldC5vbk9wZW4oZnVuY3Rpb24oZSl7Zm9yKE1hdGNodnNMb2cubG9nSShcIlt3eC5XZWJTb2NrZXRdW2Nvbm5lY3RdOlwiK2UpLGkuc29ja2V0T3Blbj0hMDswPHIubGVuZ3RoOylpLnNlbmQoci5wb3AoKSk7by5vbkNvbm5lY3QmJm8ub25Db25uZWN0KHMpfSksdGhpcy5zb2NrZXQub25DbG9zZShmdW5jdGlvbihlKXtpLnNvY2tldE9wZW49ITEsZS5yZWFzb24mJlwiaW50ZXJydXB0ZWRcIj09PWUucmVhc29uJiYoZS5jb2RlPTEwMDEpLG8ub25EaXNDb25uZWN0JiZvLm9uRGlzQ29ubmVjdChzLGUpLE1hdGNodnNMb2cubG9nSShcIlt3eC5XZWJTb2NrZXRdIFtvbkNsb3NlXSBjYXNlOlwiK0pTT04uc3RyaW5naWZ5KGUpKX0pLHRoaXMuc29ja2V0Lm9uTWVzc2FnZShmdW5jdGlvbihlKXt2YXIgdD1uZXcgRGF0YVZpZXcoZS5kYXRhKTtvLm9uTXNnKHQpfSksdGhpcy5zb2NrZXQub25FcnJvcihmdW5jdGlvbihlKXtvLm9uRGlzQ29ubmVjdCYmby5vbkRpc0Nvbm5lY3QocyxlKSxNYXRjaHZzTG9nLmxvZ0koXCJbd3guV2ViU29ja2V0XSBbb25FcnJvcl0gY2FzZTpcIitKU09OLnN0cmluZ2lmeShlKSl9KX0sZS5NYXRjaHZzSHR0cD1mdW5jdGlvbihlKXt0aGlzLm1DYWxsYmFjaz1lO3ZhciByPWZ1bmN0aW9uKGUscix0LG8pe3ZhciBzPXQ/XCJhcHBsaWNhdGlvbi9qc29uXCI6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjt3eC5yZXF1ZXN0KHt1cmw6ZSxkYXRhOm8saGVhZGVyOntcImNvbnRlbnQtdHlwZVwiOnN9LHN1Y2Nlc3M6ZnVuY3Rpb24oZSl7dmFyIHQ9SlNPTi5zdHJpbmdpZnkoZS5kYXRhKTtNYXRjaHZzTG9nLmxvZ0koXCJodHRwIHN1Y2Nlc3M6XCIrdCksci5vbk1zZyh0KX0sZmFpbDpmdW5jdGlvbihlKXtNYXRjaHZzTG9nLmxvZ0koXCJodHRwIGZhaWw6XCIrZS5lcnJNc2cpLHIub25FcnIoMCxlLmVyck1zZyl9fSl9O3RoaXMuZ2V0PWZ1bmN0aW9uKGUpe3IoZSx0aGlzLm1DYWxsYmFjaywhMSxudWxsKX0sdGhpcy5wb3N0PWZ1bmN0aW9uKGUsdCl7cihlLHRoaXMubUNhbGxiYWNrLCEwLHQpfX0pOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBCSyYmKGNvbnNvbGUubG9nKFwibmV0d29yayBhcGktPkJLXCIpLGUuTWF0Y2h2c05ldFdvcms9ZnVuY3Rpb24oZSx0KXt2YXIgaT10LHI9ZSxvPVtdLHM9ITEsYT1uZXcgQksuV2ViU29ja2V0KGUpLG49dGhpczt0aGlzLnNlbmQ9ZnVuY3Rpb24oZSl7cz9hLnNlbmQoZS5idWZmZXIpOm8ubGVuZ3RoPDEwMCYmby51bnNoaWZ0KGUpfSx0aGlzLmNsb3NlPWZ1bmN0aW9uKCl7Y29uc29sZS5sb2coXCJbbWF0Y2h2cyBzZGtdd2Vic29ja2V0IGNsb3NlXCIpLGEmJmEuY2xvc2UoKX0sYS5vbk9wZW49ZnVuY3Rpb24oZSl7Zm9yKHM9ITAsY29uc29sZS5sb2coXCJbQksuV2ViU29ja2V0XVtjb25uZWN0XVtNYXRjaHZzXTpcIixlKTswPG8ubGVuZ3RoOyluLnNlbmQoby5wb3AoKSk7aS5vbkNvbm5lY3QmJmkub25Db25uZWN0KHIpfSxhLm9uQ2xvc2U9ZnVuY3Rpb24oZSl7cz0hMSxjb25zb2xlLmxvZyhcIltCSy5XZWJTb2NrZXRdW29uQ2xvc2VdW01hdGNodnNdIGNhc2U6XCIsSlNPTi5zdHJpbmdpZnkoZSkpLGkub25EaXNDb25uZWN0JiZpLm9uRGlzQ29ubmVjdChyLHtjb2RlOjFlMyxtZXNzYWdlOlwiIGNsb3NlIG5vcm1hbFwifSl9LGEub25FcnJvcj1mdW5jdGlvbihlKXthJiZzJiYocz0hMSxhLmNsb3NlKCkpO3ZhciB0PXtjb2RlOmUuZ2V0RXJyb3JDb2RlKCksbWVzc2FnZTplLmdldEVycm9yU3RyaW5nKCl9OzY1NTM1PT09dC5jb2RlJiYodC5jb2RlPTFlMyksaS5vbkRpc0Nvbm5lY3QmJmkub25EaXNDb25uZWN0KHIsdCksTWF0Y2h2c0xvZy5sb2dJKFwiW0JLLldlYlNvY2tldF0gW29uRXJyb3JdW01hdGNodnNdIGNhc2U6XCIrSlNPTi5zdHJpbmdpZnkoZSkpfSxhLm9uTWVzc2FnZT1mdW5jdGlvbihlLHQpe3ZhciByPXQuZGF0YTtyLnJld2luZCgpO2Zvcih2YXIgbz1uZXcgQXJyYXlCdWZmZXIoci5sZW5ndGgpLHM9bmV3IERhdGFWaWV3KG8pOyFyLmVvZjspcy5zZXRVaW50OChyLnBvaW50ZXIsci5yZWFkVWludDhCdWZmZXIoKSk7aS5vbk1zZyYmaS5vbk1zZyhzKX0sYSYmYS5jb25uZWN0KCl9LGUuTWF0Y2h2c0h0dHA9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gcihvLHMsZSx0KXt2YXIgcj1uZXcgQksuSHR0cFV0aWwobyk7ci5zZXRIdHRwTWV0aG9kKGU/XCJwb3N0XCI6XCJnZXRcIiksci5zZXRIdHRwSGVhZGVyKFwiQ29udGVudC10eXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiksci5yZXF1ZXN0QXN5bmMoZnVuY3Rpb24oZSx0KXtpZigyMDA9PT10KXt2YXIgcj1lLnJlYWRBc1N0cmluZyghMCk7cy5vbk1zZyhyKSxNYXRjaHZzTG9nLmxvZ0koXCJbSFRUUDpdKFwiK28rXCIpK1wiK3IpfWVsc2Ugcy5vbkVycih0LGUucmVhZEFzU3RyaW5nKCEwKSl9KSxlP3Iuc2V0SHR0cFBvc3REYXRhKHQpOnIuc2V0SHR0cFVybChvKX10aGlzLm1DYWxsYmFjaz1lLHRoaXMuZ2V0PWZ1bmN0aW9uKGUpe3IoZSx0aGlzLm1DYWxsYmFjaywhMSxudWxsKX0sdGhpcy5wb3N0PWZ1bmN0aW9uKGUsdCl7cihlLHRoaXMubUNhbGxiYWNrLCEwLHQpfX0pfWNhdGNoKGUpe2NvbnNvbGUud2FybihcIm5ldHdvcmsgYWRhcHRlciB3YXJuaW5nOlwiK2UubWVzc2FnZSl9ZS5NYXRjaHZzTmV0V29ya0NhbGxCYWNrPWZ1bmN0aW9uKCl7dGhpcy5vbk1zZz1mdW5jdGlvbihlKXt9LHRoaXMub25FcnI9ZnVuY3Rpb24oZSx0KXt9fX0oTVZTfHx7fSk7dmFyIEZJWEVEX0hFQURfU0laRT0xNixWRVJTSU9OPTI7ZnVuY3Rpb24gUGFja2V0KCl7fWZ1bmN0aW9uIE1hdGNodnNIZWFkZXIoKXt0aGlzLnNpemU9MCx0aGlzLnNlcT0wLHRoaXMuY21kPTAsdGhpcy52ZXJzaW9uPTAsdGhpcy51c2VySUQ9MCx0aGlzLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIgdGhpcy5zaXplICAgXCIrdGhpcy5zaXplK1wiIHRoaXMuc2VxICAgIFwiK3RoaXMuc2VxK1wiIHRoaXMuY21kICAgIFwiK3RoaXMuY21kK1wiIHRoaXMudmVyc2lvblwiK3RoaXMudmVyc2lvbitcIiB0aGlzLnVzZXJJRCBcIit0aGlzLnVzZXJJRH19IWZ1bmN0aW9uKGUpe3ZhciBtPXByb3RvLnN0cmVhbSxjPXtHVFdfU1BFRURfUlNQOjEwMDIsTE9HSU5fUkVROjExMDEsTE9HSU5fUlNQOjExMDIsR1RXX0hFQVJUX0JFQVRfUkVROjExMDMsR1RXX0hFQVJUX0JFQVRfUlNQOjExMDMsTE9HT1VUX1JFUToxMTA1LExPR09VVF9SU1A6MTEwNixESVNDT05ORUNUX1JFUToxMTA3LERJU0NPTk5FQ1RfUlNQOjExMDgsTkVUV09SS19TVEFURV9OT1RJRlk6MTEyMixDUkVBVEVfUk9PTV9SRVE6MTIwMyxDUkVBVEVfUk9PTV9SU1A6MTIwNCxKT0lOX1JPT01fUkVROjEyMDEsSk9JTl9ST09NX1JTUDoxMjAyLEpPSU5fUk9PTV9OT1RJRlk6MTMwMSxDSEVDS19JTl9SRVE6MTQwMSxDSEVDS19JTl9SU1A6MTQwMixDSEVDS19JTl9OT1RJRlk6MTQxMCxKT0lOX09WRVJfUkVROjEyMTMsSk9JTl9PVkVSX1JTUDoxMjE0LEpPSU5fT1ZFUl9OT1RJRlk6MTMwNixTRVRfUk9PTV9QUk9QRVJUWV9SRVE6MTIxOSxTRVRfUk9PTV9QUk9QRVJUWV9SU1A6MTIyMCxTRVRfUk9PTV9QUk9QRVJUWV9OT1RJRlk6MTMwNyxKT0lOX09QRU5fUkVROjEyMjEsSk9JTl9PUEVOX1JTUDoxMjIyLEpPSU5fT1BFTl9OT1RJRlk6MTMwOCxIT1RFTF9IRUFSVF9CRUFUX1JFUToxNDAzLEhPVEVMX0hFQVJUX0JFQVRfUlNQOjE0MDQsQlJPQURDQVNUX1JFUToxNDA1LEJST0FEQ0FTVF9SU1A6MTQwNixCUk9BRENBU1RfTk9USUZZOjE0MDgsS0lDS19QTEFZRVJfUkVROjEzMDMsS0lDS19QTEFZRVJfUlNQOjEzMDQsS0lDS19QTEFZRVJfTk9USUZZOjEzMDUsTEVBVkVfUk9PTV9SRVE6MTIwNSxMRUFWRV9ST09NX1JTUDoxMjA2LExFQVZFX1JPT01fTk9USUZZOjEzMDIsR0VUX1JPT01MSVNUX1JFUToxMjA3LEdFVF9ST09NTElTVF9SU1A6MTIwOCxHRVRfUk9PTV9ERVRBSUxfUkVROjEyMDksR0VUX1JPT01fREVUQUlMX1JTUDoxMjEwLFNFVF9GUkFNRVNZTkNfUkVROjE0MTksU0VUX0ZSQU1FU1lOQ19SU1A6MTQyMCxTRVRfRlJBTUVTWU5DX05PVElGWToxNDIyLFNFTkRfRlJBTUVfREFUQV9SRVE6MTQyMyxTRU5EX0ZSQU1FX0RBVEFfUlNQOjE0MjQsRlJBTUVfREFUQV9OT1RJRlk6MTQyNixGUkFNRV9TWU5DX05PVElGWToxNDI4LFNVQlNDUklCRV9SRVE6MTQxMSxTVUJTQ1JJQkVfUlNQOjE0MTIsU1VCU0NSSUJFX0RBVEFfUkVROjE0MTMsU1VCU0NSSUJFX0RBVEFfUlNQOjE0MTQsU1VCU0NSSUJFX0RBVEFfTk9USUZZOjE0MTYsR0VUX1JPT01MSVNUX0VYX1JFUToxMjE1LEdFVF9ST09NTElTVF9FWF9SU1A6MTIxNixTRVRfUkVDT05ORUNUX1RJTUVPVVRfUkVROjExMDksU0VUX1JFQ09OTkVDVF9USU1FT1VUX1JTUDoxMTEwLEpPSU5fV0FUQ0hST09NX1JFUToxMjI1LEpPSU5fV0FUQ0hST09NX1JTUDoxMjI2LExFQVZFX1dBVENIUk9PTV9SRVE6MTIyNyxMRUFWRV9XQVRDSFJPT01fUlNQOjEyMjgsR0VUX1dBVENIUk9PTV9SRVE6MTIyOSxHRVRfV0FUQ0hST09NX1JTUDoxMjMwLENIQU5HRV9ST0xFX1JFUToxMjMxLENIQU5HRV9ST0xFX1JTUDoxMjMyLEVOVEVSX0xJVkVST09NX1JFUTozNDAxLEVOVEVSX0xJVkVST09NX1JTUDozNDAyLEVOVEVSX0xJVkVST09NX05PVElGWTozNDIwLExJVkVfSEVBUlRCRUFUX1JFUTozNDAzLExJVkVfSEVBUlRCRUFUX1JTUDozNDA0LExJVkVfQlJPQURDQVNUX1JFUTozNDA1LExJVkVfQlJPQURDQVNUX1JTUDozNDA2LExJVkVfQlJPQURDQVNUX05PVElGWTozNDI0LFNFVF9MSVZFT0ZGU0VUX1JFUTozNDA3LFNFVF9MSVZFT0ZGU0VUX1JTUDozNDA4LEVYSVRfTElWRVJPT01fTk9USUZZOjM0MjIsTElWRV9PVkVSX05PVElGWTozNDI2LExJVkVfRlJBTUVEQVRBX05PVElGWTozNDI4LExJVkVfRlJBTUVTWU5DX05PVElGWTozNDMwLENSRUFURV9URUFNX1JFUToxMjMzLENSRUFURV9URUFNX1JTUDoxMjM0LEpPSU5fVEVBTV9SRVE6MTIzNSxKT0lOX1RFQU1fUlNQOjEyMzYsSk9JTl9URUFNX05PVElGWToxMzA5LExFQVZFX1RFQU1fUkVROjEyMzcsTEVBVkVfVEVBTV9SU1A6MTIzOCxMRUFWRV9URUFNX05PVElGWToxMzEwLFRFQU1fTUFUQ0hfUkVROjEyMzksVEVBTV9NQVRDSF9SU1A6MTI0MCxURUFNX01BVENIX1JFU1VMVF9OT1RJRlk6MTMxMSxURUFNX01BVENIX1NUQVJUX05PVElGWToxMzEyLEdFVF9DQUNIRURBVEFfUkVROjE0MjksR0VUX0NBQ0hFREFUQV9SU1A6MTQzMCxDQU5DRUxfVEVBTU1BVENIX1JFUToxMjQxLENBTkNFTF9URUFNTUFUQ0hfUlNQOjEyNDIsQ0FOQ0VMX1RFQU1NQVRDSF9OT1RJRlk6MTMxMyxTRU5EX1RFQU1FVkVOVF9SRVE6MTI0MyxTRU5EX1RFQU1FVkVOVF9SU1A6MTI0NCxTRU5EX1RFQU1FVkVOVF9OT1RJRlk6MTMxNCxLSUNLX1RFQU1NRU1CRVJfUkVROjEyNDUsS0lDS19URUFNTUVNQkVSX1JTUDoxMjQ2LEtJQ0tfVEVBTU1FTUJFUl9OT1RJRlk6MTMxNX07ZS5QdG9DbWQ9Yzt2YXIgbj1uZXcgZnVuY3Rpb24gZSgpe3JldHVybiBlLnByb3RvdHlwZX07bltjLkxPR0lOX1JTUF09bS5Mb2dpblJzcCxuW2MuSk9JTl9ST09NX1JTUF09bS5Kb2luUm9vbVJzcCxuW2MuQ0hFQ0tfSU5fUlNQXT1tLkNoZWNrSW5BY2ssbltjLkNSRUFURV9ST09NX1JTUF09bS5DcmVhdGVSb29tUnNwLG5bYy5DSEVDS19JTl9OT1RJRlldPW0uQ2hlY2tJbk5vdGlmeSxuW2MuSk9JTl9PVkVSX1JTUF09bS5Kb2luT3ZlclJzcCxuW2MuTEVBVkVfUk9PTV9SU1BdPW0uTGVhdmVSb29tUnNwLG5bYy5KT0lOX1JPT01fTk9USUZZXT1tLk5vdGljZUpvaW4sbltjLkhPVEVMX0hFQVJUX0JFQVRfUlNQXT1tLkhlYXJ0YmVhdEFjayxuW2MuTEVBVkVfUk9PTV9OT1RJRlldPW0uTm90aWNlTGVhdmUsbltjLkJST0FEQ0FTVF9SU1BdPW0uQnJvYWRjYXN0QWNrLG5bYy5CUk9BRENBU1RfTk9USUZZXT1tLk5vdGlmeSxuW2MuU1VCU0NSSUJFX1JTUF09bS5TdWJzY3JpYmVBY2ssbltjLlNVQlNDUklCRV9EQVRBX1JTUF09bS5QdWJsaXNoQWNrLG5bYy5TVUJTQ1JJQkVfREFUQV9OT1RJRlldPW0uUHVibGlzaE5vdGlmeSxuW2MuR1RXX0hFQVJUX0JFQVRfUlNQXT1tLkhlYXJ0YmVhdFJzcCxuW2MuR0VUX1JPT01MSVNUX1JTUF09bS5HZXRSb29tTGlzdFJzcCxuW2MuTE9HT1VUX1JTUF09bS5Mb2dvdXRSc3AsbltjLkRJU0NPTk5FQ1RfUlNQXT1tLkRpc2Nvbm5lY3RSc3AsbltjLktJQ0tfUExBWUVSX05PVElGWV09bS5LaWNrUGxheWVyTm90aWZ5LG5bYy5LSUNLX1BMQVlFUl9SU1BdPW0uS2lja1BsYXllclJzcCxuW2MuU0VUX0ZSQU1FU1lOQ19SU1BdPW0uU2V0RnJhbWVTeW5jUmF0ZUFjayxuW2MuU0VORF9GUkFNRV9EQVRBX1JTUF09bS5GcmFtZUJyb2FkY2FzdEFjayxuW2MuU0VUX0ZSQU1FU1lOQ19OT1RJRlldPW0uU2V0RnJhbWVTeW5jUmF0ZU5vdGlmeSxuW2MuRlJBTUVfREFUQV9OT1RJRlldPW0uRnJhbWVEYXRhTm90aWZ5LG5bYy5ORVRXT1JLX1NUQVRFX05PVElGWV09bS5OZXR3b3JrU3RhdGVOb3RpZnksbltjLkZSQU1FX1NZTkNfTk9USUZZXT1tLkZyYW1lU3luY05vdGlmeSxuW2MuR0VUX1JPT01MSVNUX0VYX1JTUF09bS5HZXRSb29tTGlzdEV4UnNwLG5bYy5KT0lOX09WRVJfTk9USUZZXT1tLkpvaW5PdmVyTm90aWZ5LG5bYy5HRVRfUk9PTV9ERVRBSUxfUlNQXT1tLkdldFJvb21EZXRhaWxSc3AsbltjLlNFVF9ST09NX1BST1BFUlRZX1JTUF09bS5TZXRSb29tUHJvcGVydHlSc3AsbltjLlNFVF9ST09NX1BST1BFUlRZX05PVElGWV09bS5Ob3RpY2VSb29tUHJvcGVydHksbltjLkpPSU5fT1BFTl9SU1BdPW0uSm9pbk9wZW5Sc3AsbltjLkpPSU5fT1BFTl9OT1RJRlldPW0uSm9pbk9wZW5Ob3RpZnksbltjLkpPSU5fV0FUQ0hST09NX1JTUF09bS5Kb2luV2F0Y2hSb29tUnNwLG5bYy5FTlRFUl9MSVZFUk9PTV9SU1BdPW0uRW50ZXJMaXZlUm9vbUFjayxuW2MuRU5URVJfTElWRVJPT01fTk9USUZZXT1tLkVudGVyTGl2ZVJvb21Ob3RpZnksbltjLkxJVkVfSEVBUlRCRUFUX1JTUF09bS5MaXZlSGVhcnRiZWF0QWNrLG5bYy5MSVZFX0JST0FEQ0FTVF9SU1BdPW0uTGl2ZUJyb2FkY2FzdEFjayxuW2MuTElWRV9CUk9BRENBU1RfTk9USUZZXT1tLkxpdmVCcm9hZGNhc3ROb3RpZnksbltjLlNFVF9MSVZFT0ZGU0VUX1JTUF09bS5TZXRMaXZlT2Zmc2V0QWNrLG5bYy5FWElUX0xJVkVST09NX05PVElGWV09bS5FeGl0TGl2ZVJvb21Ob3RpZnksbltjLkxJVkVfT1ZFUl9OT1RJRlldPW0uTGl2ZU92ZXJOb3RpZnksbltjLkxJVkVfRlJBTUVEQVRBX05PVElGWV09bS5MaXZlRnJhbWVEYXRhTm90aWZ5LG5bYy5MSVZFX0ZSQU1FU1lOQ19OT1RJRlldPW0uTGl2ZUZyYW1lU3luY05vdGlmeSxuW2MuTEVBVkVfV0FUQ0hST09NX1JTUF09bS5MZWF2ZVdhdGNoUm9vbVJzcCxuW2MuR0VUX1dBVENIUk9PTV9SU1BdPW0uR2V0V2F0Y2hSb29tc1JzcCxuW2MuQ0hBTkdFX1JPTEVfUlNQXT1tLkNoYW5nZVJvbGVSc3AsbltjLlNFVF9SRUNPTk5FQ1RfVElNRU9VVF9SU1BdPW0uU2V0UmVjb25uZWN0VGltZW91dFJzcCxuW2MuQ1JFQVRFX1RFQU1fUlNQXT1tLkNyZWF0ZVRlYW1Sc3AsbltjLkpPSU5fVEVBTV9SU1BdPW0uSm9pblRlYW1Sc3AsbltjLkpPSU5fVEVBTV9OT1RJRlldPW0uSm9pblRlYW1Ob3RpZnksbltjLkxFQVZFX1RFQU1fUlNQXT1tLkxlYXZlVGVhbVJzcCxuW2MuTEVBVkVfVEVBTV9OT1RJRlldPW0uTGVhdmVUZWFtTm90aWZ5LG5bYy5URUFNX01BVENIX1JTUF09bS5UZWFtTWF0Y2hSc3AsbltjLlRFQU1fTUFUQ0hfUkVTVUxUX05PVElGWV09bS5UZWFtTWF0Y2hSZXN1bHROb3RpZnksbltjLlRFQU1fTUFUQ0hfU1RBUlRfTk9USUZZXT1tLlRlYW1NYXRjaFN0YXJ0Tm90aWZ5LG5bYy5HRVRfQ0FDSEVEQVRBX1JTUF09bS5HZXRDYWNoZURhdGFBY2ssbltjLkNBTkNFTF9URUFNTUFUQ0hfUlNQXT1tLkNhbmNlbFRlYW1NYXRjaFJzcCxuW2MuQ0FOQ0VMX1RFQU1NQVRDSF9OT1RJRlldPW0uQ2FuY2VsVGVhbU1hdGNoTm90aWZ5LG5bYy5LSUNLX1RFQU1NRU1CRVJfUlNQXT1tLktpY2tUZWFtTWVtYmVyUnNwLG5bYy5LSUNLX1RFQU1NRU1CRVJfTk9USUZZXT1tLktpY2tUZWFtTWVtYmVyTm90aWZ5LG5bYy5TRU5EX1RFQU1FVkVOVF9SU1BdPW0uU2VuZFRlYW1FdmVudFJzcCxuW2MuU0VORF9URUFNRVZFTlRfTk9USUZZXT1tLlNlbmRUZWFtRXZlbnROb3RpZnksZS5NYXRjaHZzUHJvdG9jb2w9ZnVuY3Rpb24oKXt0aGlzLnNlcT0xO3ZhciB1PTAsbD0hMTt0aGlzLmZpbGxIZWFkZXI9ZnVuY3Rpb24oZSx0KXtNVlMubXRhUmVwb3J0JiZNVlMubXRhUmVwb3J0LlJlcG9ydCh0KTt2YXIgcj1uZXcgQXJyYXlCdWZmZXIoRklYRURfSEVBRF9TSVpFK2UubGVuZ3RoKSxvPW5ldyBEYXRhVmlldyhyKTtvLnNldEludDMyKDAsci5ieXRlTGVuZ3RoLCEwKSxvLnNldEludDMyKDQsdGhpcy5zZXErKywhMCksby5zZXRJbnQxNig4LHQsITApLGw/KGw9ITEsby5zZXRJbnQxNigxMCwzLCEwKSk6by5zZXRJbnQxNigxMCxWRVJTSU9OLCEwKSxvLnNldEludDMyKDEyLE51bWJlcih1KSwhMCk7Zm9yKHZhciBzPWUubGVuZ3RoLGk9MDtpPHM7aSsrKW8uc2V0VWludDgoaStGSVhFRF9IRUFEX1NJWkUsZVtpXSk7cmV0dXJuIG99LHRoaXMucGFyc2VIZWFkZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZSxyPW5ldyBNYXRjaHZzSGVhZGVyO3JldHVybiByLnNpemU9dC5nZXRJbnQzMigwLCEwKSxyLnNlcT10LmdldEludDMyKDQsITApLHIuY21kPXQuZ2V0SW50MTYoOCwhMCksci52ZXJzaW9uPXQuZ2V0SW50MTYoMTAsITApLHIudXNlcklEPXQuZ2V0SW50MzIoMTIsITApLHJ9LHRoaXMuaGFuZGxlTXNnPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLHI9dGhpcy5wYXJzZUhlYWRlcihlKSxvPW5ldyBVaW50OEFycmF5KHIuc2l6ZS1GSVhFRF9IRUFEX1NJWkUpLHM9MDtzPG8ubGVuZ3RoO3MrKylvW3NdPWUuZ2V0VWludDgoRklYRURfSEVBRF9TSVpFK3MpO3ZhciBpPW5bci5jbWRdLGE9bmV3IFBhY2tldDtyZXR1cm4gYS5oZWFkZXI9cixhLmJ1Zj10LGk/YS5wYXlsb2FkPWkuZGVzZXJpYWxpemVCaW5hcnkmJmkuZGVzZXJpYWxpemVCaW5hcnkoZS5idWZmZXIuc2xpY2UoRklYRURfSEVBRF9TSVpFLGUuYnVmZmVyLmJ5dGVMZW5ndGgpKTpNYXRjaHZzTG9nLmxvZ0koXCJbV0FSTl11bmtub3duIG1zZyxIZWFkOlwiK3IpLGF9LHRoaXMuaW5pdD1mdW5jdGlvbigpe30sdGhpcy5sb2dpbj1mdW5jdGlvbihlLHQscixvLHMpe3ZhciBpPWhleF9tZDUodCksYT1mb3JtYXQoXCIlcyZVc2VySUQ9JXMmR2FtZUlEPSVzJlZlcnNpb25TZGs9JWQmJXNcIixvLGUsciwzLGkpO3U9ZTt2YXIgbj1oZXhfbWQ1KGEpO01hdGNodnNMb2cubG9nSShcIltTaWduXVwiK2ErXCItPlwiK24pO3ZhciBwPW5ldyBtLkxvZ2luUmVxO3Auc2V0R2FtZWlkKE51bWJlcihyKSkscC5zZXRBcHBrZXkobykscC5zZXRUb2tlbihpKSxwLnNldFNka3ZlcihcIjNcIikscC5zZXREZXZpY2VpZChzKSxwLnNldFNpZ24obik7dmFyIGc9cC5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gTWF0Y2h2c0xvZy5sb2dJKFwiW1JFUV1sb2dpbi4uLnVzZXJJRDpcIitlKSxsPSEwLHRoaXMuZmlsbEhlYWRlcihnLGMuTE9HSU5fUkVRKX0sdGhpcy5yb29tQ3JlYXRlPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBzPW5ldyBtLkNyZWF0ZVJvb21SZXE7cy5zZXRHYW1laWQoTnVtYmVyKGUpKTt2YXIgaT1uZXcgbS5QbGF5ZXJJbmZvO2kuc2V0VXNlcmlkKHIudXNlcklEKSxpLnNldFVzZXJwcm9maWxlKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShyLnVzZXJQcm9maWxlKSkscy5zZXRQbGF5ZXJpbmZvKGkpO3ZhciBhPW5ldyBtLlJvb21JbmZvO2lmKGEuc2V0TWF4cGxheWVyKE51bWJlcih0Lm1heFBsYXllcikpLGEuc2V0Q2Fud2F0Y2godC5jYW5XYXRjaCksYS5zZXRNb2RlKHQubW9kZSksYS5zZXRWaXNpYmlsaXR5KHQudmlzaWJpbGl0eSksYS5zZXRSb29tbmFtZSh0LnJvb21OYW1lKSxhLnNldFJvb21wcm9wZXJ0eShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkodC5yb29tUHJvcGVydHkpKSxzLnNldFJvb21pbmZvKGEpLG8pe3ZhciBuPW5ldyBtLldhdGNoU2V0dGluZztuLnNldENhY2hldGltZShvLmNhY2hlTVMpLG4uc2V0TWF4d2F0Y2goby5tYXhXYXRjaCksbi5zZXRXYXRjaGRlbGF5bXMoby5kZWxheU1TKSxuLnNldFdhdGNocGVyc2lzdGVudChvLnBlcnNpc3RlbnQpLHMuc2V0V2F0Y2hzZXR0aW5nKG4pfXZhciBwPXMuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihwLGMuQ1JFQVRFX1JPT01fUkVRKX0sdGhpcy5qb2luUmFuZG9tUm9vbT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgbS5Kb2luUm9vbVJlcTt0LnNldEdhbWVpZChOdW1iZXIoZS5nYW1lSUQpKSx0LnNldEpvaW50eXBlKG0uSm9pblJvb21UeXBlLkpPSU5SQU5ET01ST09NKSx0LnNldENwcHJvdG8oc3RyaW5nVG9VdGY4Qnl0ZUFycmF5KGUudXNlclByb2ZpbGUpKTt2YXIgcj1uZXcgbS5QbGF5ZXJJbmZvO3Iuc2V0VXNlcmlkKGUudXNlcklEKSxyLnNldFVzZXJwcm9maWxlKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShlLnVzZXJQcm9maWxlKSksdC5zZXRQbGF5ZXJpbmZvKHIpO3ZhciBvPW5ldyBtLlJvb21JbmZvO28uc2V0TWF4cGxheWVyKGUubWF4UGxheWVyKSxvLnNldENhbndhdGNoKGUuY2FuV2F0Y2gpLG8uc2V0TW9kZShlLm1vZGUpLG8uc2V0VmlzaWJpbGl0eSgwKSx0LnNldFJvb21pbmZvKG8pO3ZhciBzPXQuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihzLGMuSk9JTl9ST09NX1JFUSl9LHRoaXMuam9pblJvb21TcGVjaWFsPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBtLkpvaW5Sb29tUmVxO3Quc2V0R2FtZWlkKE51bWJlcihlLmdhbWVJRCkpLHQuc2V0Sm9pbnR5cGUoZS5qb2luVHlwZSksdC5zZXRDcHByb3RvKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShlLnVzZXJQcm9maWxlKSk7dmFyIHI9bmV3IG0uUGxheWVySW5mbztyLnNldFVzZXJpZChlLnVzZXJJRCksci5zZXRVc2VycHJvZmlsZShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoZS51c2VyUHJvZmlsZSkpLHQuc2V0UGxheWVyaW5mbyhyKTt2YXIgbz1uZXcgbS5Sb29tSW5mbztvLnNldE1heHBsYXllcihlLm1heFBsYXllciksby5zZXRDYW53YXRjaChlLmNhbldhdGNoKSxvLnNldE1vZGUoZS5tb2RlKSxvLnNldFZpc2liaWxpdHkoMCksby5zZXRSb29taWQoZS5yb29tSUQpLHQuc2V0Um9vbWluZm8obyk7dmFyIHM9dC5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKHMsYy5KT0lOX1JPT01fUkVRKX0sdGhpcy5qb2luUm9vbVdpdGhQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IG0uSm9pblJvb21SZXEsbz1bXSxzPWUudGFncyxpPTA7Zm9yKHZhciBhIGluIHMpe3ZhciBuPW5ldyBtLmtleVZhbHVlO24uc2V0S2V5KGEpLG4uc2V0VmFsdWUoc1thXSksb1tpKytdPW59ci5zZXRUYWdzTGlzdChvKSxyLnNldEdhbWVpZChlLmdhbWVJRCksci5zZXRKb2ludHlwZShtLkpvaW5Sb29tVHlwZS5KT0lOUk9PTVdJVEhQUk9QRVJUWSksci5zZXRDcHByb3RvKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShlLnVzZXJQcm9maWxlKSk7dmFyIHA9bmV3IG0uUGxheWVySW5mbztwLnNldFVzZXJpZChlLnVzZXJJRCkscC5zZXRVc2VycHJvZmlsZShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoZS51c2VyUHJvZmlsZSkpLHIuc2V0UGxheWVyaW5mbyhwKTt2YXIgZz1uZXcgbS5Sb29tSW5mbztpZihnLnNldE1heHBsYXllcihlLm1heFBsYXllciksZy5zZXRDYW53YXRjaChlLmNhbldhdGNoKSxnLnNldE1vZGUoZS5tb2RlKSxnLnNldFZpc2liaWxpdHkoZS52aXNpYmlsaXR5KSxnLnNldFJvb21wcm9wZXJ0eShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoZS5yb29tUHJvcGVydHkpKSxnLnNldFJvb21pZChlLnJvb21JRCksci5zZXRSb29taW5mbyhnKSx0KXt2YXIgdT1uZXcgbS5XYXRjaFNldHRpbmc7dS5zZXRDYWNoZXRpbWUodC5jYWNoZU1TKSx1LnNldE1heHdhdGNoKHQubWF4V2F0Y2gpLHUuc2V0V2F0Y2hkZWxheW1zKHQuZGVsYXlNUyksdS5zZXRXYXRjaHBlcnNpc3RlbnQodC5wZXJzaXN0ZW50KSxyLnNldFdhdGNoc2V0dGluZyh1KX12YXIgbD1yLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIobCxjLkpPSU5fUk9PTV9SRVEpfSx0aGlzLnJvb21DaGVja0luPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBzPW5ldyBtLkNoZWNrSW47cy5zZXRHYW1laWQoTnVtYmVyKG8pKSxzLnNldFJvb21pZCh0LmdldFJvb21pZCgpKSxzLnNldFVzZXJpZChOdW1iZXIocikpLHMuc2V0Qm9va2lkKGUuZ2V0Qm9va2lkKCkpLHMuc2V0S2V5KGUuZ2V0Qm9va2tleSgpKTt2YXIgaT1zLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIoaSxjLkNIRUNLX0lOX1JFUSl9LHRoaXMuZ2V0Um9vbUxpc3Q9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgbS5HZXRSb29tTGlzdFJlcSxvPW5ldyBtLlJvb21GaWx0ZXI7by5zZXRDYW53YXRjaCh0LmNhbldhdGNoKSxvLnNldE1heHBsYXllcih0Lm1heFBsYXllciksby5zZXRNb2RlKE51bWJlcih0Lm1vZGUpKSxvLnNldFJvb21wcm9wZXJ0eShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkodC5yb29tUHJvcGVydHkpKSxyLnNldEdhbWVpZChlKSxyLnNldFJvb21maWx0ZXIobyk7dmFyIHM9ci5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKHMsYy5HRVRfUk9PTUxJU1RfUkVRKX0sdGhpcy5nZXRSb29tTGlzdEV4PWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IG0uR2V0Um9vbUxpc3RFeFJlcSxvPW5ldyBtLlJvb21GaWx0ZXI7by5zZXRNYXhwbGF5ZXIodC5tYXhQbGF5ZXIpLG8uc2V0TW9kZShOdW1iZXIodC5tb2RlKSksby5zZXRGdWxsKHQuZnVsbCksby5zZXRDYW53YXRjaCh0LmNhbldhdGNoKSxvLnNldFJvb21wcm9wZXJ0eShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkodC5yb29tUHJvcGVydHkpKSxvLnNldFN0YXRlKHQuc3RhdGUpLHIuc2V0R2FtZWlkKGUpLHIuc2V0Um9vbWZpbHRlcihvKSxyLnNldFNvcnQodC5zb3J0KSxyLnNldE9yZGVyKHQub3JkZXIpLHIuc2V0UGFnZW5vKHQucGFnZU5vKSxyLnNldFBhZ2VzaXplKHQucGFnZVNpemUpO3ZhciBzPXIuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihzLGMuR0VUX1JPT01MSVNUX0VYX1JFUSl9LHRoaXMuZ2V0Um9vbURldGFpbD1mdW5jdGlvbihlLHQpe3ZhciByPW5ldyBtLkdldFJvb21EZXRhaWxSZXE7ci5zZXRHYW1laWQoZSksci5zZXRSb29taWQodCk7dmFyIG89ci5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKG8sYy5HRVRfUk9PTV9ERVRBSUxfUkVRKX0sdGhpcy5qb2luT3Zlcj1mdW5jdGlvbihlLHQscixvKXt2YXIgcz1uZXcgbS5Kb2luT3ZlclJlcTtzLnNldEdhbWVpZChlKSxzLnNldFJvb21pZCh0KSxzLnNldENwcHJvdG8ocikscy5zZXRVc2VyaWQobyk7dmFyIGk9cy5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKGksYy5KT0lOX09WRVJfUkVRKX0sdGhpcy5sZWF2ZVJvb209ZnVuY3Rpb24oZSx0LHIsbyl7dmFyIHM9bmV3IG0uTGVhdmVSb29tUmVxO3Muc2V0R2FtZWlkKGUpLHMuc2V0VXNlcmlkKHQpLHMuc2V0Um9vbWlkKHIpLHMuc2V0Q3Bwcm90byhzdHJpbmdUb1V0ZjhCeXRlQXJyYXkobykpO3ZhciBpPXMuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihpLGMuTEVBVkVfUk9PTV9SRVEpfSx0aGlzLmhlYXJ0QmVhdD1mdW5jdGlvbihlLHQpe3ZhciByPW5ldyBtLkhlYXJ0YmVhdFJlcTtyLnNldEdhbWVpZChlKSxyLnNldFJvb21pZCh0KTt2YXIgbz1yLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIobyxjLkdUV19IRUFSVF9CRUFUX1JFUSl9LHRoaXMubG9nb3V0PWZ1bmN0aW9uKGUpe3ZhciB0PXN0cmluZ1RvVXRmOEJ5dGVBcnJheShlKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKHQsYy5MT0dPVVRfUkVRKX0sdGhpcy5icm9hZENhc3Q9ZnVuY3Rpb24oZSx0LHIsbyxzKXt2YXIgaT1uZXcgbS5Ccm9hZGNhc3Q7aS5zZXRSb29taWQoZSksaS5zZXREc3R1aWRzTGlzdCh0KSxpLnNldENwcHJvdG8ocyk7dmFyIGE9MzIrKCgzJnIpPDwyKSsoMyZvKTtpLnNldEZsYWcoYSk7dmFyIG49aS5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKG4sYy5CUk9BRENBU1RfUkVRKX0sdGhpcy5zdWJzY3JpYmVFdmVudEdyb3VwPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBzPW5ldyBtLlN1YnNjcmliZTtzLnNldFJvb21pZCh0KSxzLnNldEdhbWVpZChlKSxzLnNldENhbmNlbHNMaXN0KG8pLHMuc2V0Q29uZmlybXNMaXN0KHIpO3ZhciBpPXMuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihpLGMuU1VCU0NSSUJFX1JFUSl9LHRoaXMuc2VuZEV2ZW50R3JvdXA9ZnVuY3Rpb24oZSx0LHIsbyxzKXt2YXIgaT1uZXcgbS5QdWJsaXNoO2kuc2V0Um9vbWlkKHQpLGkuc2V0UHJpb3JpdHkociksaS5zZXRDcHByb3RvKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShzKSksaS5zZXRHcm91cHNMaXN0KG8pO3ZhciBhPWkuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihhLGMuU1VCU0NSSUJFX0RBVEFfUkVRKX0sdGhpcy5ob3RlbEhlYXJ0QmVhdD1mdW5jdGlvbihlLHQscil7dmFyIG89bmV3IG0uSGVhcnRiZWF0O28uc2V0R2FtZWlkKGUpLG8uc2V0Um9vbWlkKHQpLG8uc2V0VXNlcmlkKHIpO3ZhciBzPW8uc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihzLGMuSE9URUxfSEVBUlRfQkVBVF9SRVEpfSx0aGlzLmRpc0Nvbm5lY3Q9ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPW5ldyBtLkRpc2Nvbm5lY3RSZXE7by5zZXRHYW1laWQodCksby5zZXRSb29taWQociksby5zZXRVc2VyaWQoZSk7dmFyIHM9by5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKHMsYy5ESVNDT05ORUNUX1JFUSl9LHRoaXMua2lja1BsYXllcj1mdW5jdGlvbihlLHQscixvKXt2YXIgcz1uZXcgbS5LaWNrUGxheWVyUmVxO3Muc2V0Um9vbWlkKHIpLHMuc2V0U3JjdXNlcmlkKHQpLHMuc2V0VXNlcmlkKGUpLHMuc2V0Q3Bwcm90byhzdHJpbmdUb1V0ZjhCeXRlQXJyYXkobykpO3ZhciBpPXMuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihpLGMuS0lDS19QTEFZRVJfUkVRKX0sdGhpcy5zZXRGcmFtZVN5bmM9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG0uU2V0RnJhbWVTeW5jUmF0ZTtNVlMuREVCVUcmJmNvbnNvbGUubG9nKFwiU2V0RnJhbWVTeW5jUmF0ZSA6XCIrSlNPTi5zdHJpbmdpZnkoZSkpLHQuc2V0R2FtZWlkKGUuZ2FtZUlEKSx0LnNldFJvb21pZChlLnJvb21JRCksdC5zZXRQcmlvcml0eShlLnByaW9yaXR5KSx0LnNldEZyYW1lcmF0ZShlLmZyYW1lUmF0ZSksdC5zZXRGcmFtZWlkeChlLmZyYW1laWR4KSx0LnNldEVuYWJsZWdzKGUuZW5hYmxlR1MpLHQuc2V0Q2FjaGVmcmFtZW1zKGUuY2FjaGVNcyk7dmFyIHI9dC5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKHIsYy5TRVRfRlJBTUVTWU5DX1JFUSl9LHRoaXMuc2VuZEZyYW1lRXZlbnQ9ZnVuY3Rpb24oZSx0LHIsbyl7dmFyIHM9bmV3IG0uRnJhbWVCcm9hZGNhc3Q7cy5zZXRSb29taWQoZSkscy5zZXRQcmlvcml0eSh0KSxzLnNldE9wZXJhdGlvbihvKSxzLnNldENwcHJvdG8oc3RyaW5nVG9VdGY4Qnl0ZUFycmF5KHIpKTt2YXIgaT1zLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIoaSxjLlNFTkRfRlJBTUVfREFUQV9SRVEpfSx0aGlzLnNldFJvb21Qcm9wZXJ0eT1mdW5jdGlvbihlLHQscixvKXt2YXIgcz1uZXcgbS5TZXRSb29tUHJvcGVydHlSZXE7cy5zZXRHYW1laWQoZSkscy5zZXRSb29taWQocikscy5zZXRVc2VyaWQodCkscy5zZXRSb29tcHJvcGVydHkoc3RyaW5nVG9VdGY4Qnl0ZUFycmF5KG8pKTt2YXIgaT1zLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIoaSxjLlNFVF9ST09NX1BST1BFUlRZX1JFUSl9LHRoaXMuam9pbk9wZW49ZnVuY3Rpb24oZSx0LHIsbyl7dmFyIHM9bmV3IG0uSm9pbk9wZW5SZXE7cy5zZXRSb29taWQocikscy5zZXRHYW1laWQoZSkscy5zZXRVc2VyaWQodCkscy5zZXRDcHByb3RvKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShvKSk7dmFyIGk9cy5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKGksYy5KT0lOX09QRU5fUkVRKX0sdGhpcy5qb2luV2F0Y2hSb29tPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBzPW5ldyBtLkpvaW5XYXRjaFJvb21SZXE7cy5zZXRHYW1laWQoZSkscy5zZXRSb29taWQocikscy5zZXRVc2VyaWQodCkscy5zZXRVc2VycHJvZmlsZShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkobykpO3ZhciBpPXMuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihpLG0uQ21kSWQuSk9JTldBVENIUk9PTVJFUSl9LHRoaXMuZW50ZXJMaXZlUm9vbT1mdW5jdGlvbihlLHQscixvLHMpe3ZhciBpPW5ldyBtLkVudGVyTGl2ZVJvb207aS5zZXRCb29raWQoZS5nZXRCb29raWQoKSksaS5zZXRUaWNrZXQoZS5nZXRCb29ra2V5KCkpLGkuc2V0R2FtZWlkKHQpLGkuc2V0VXNlcmlkKHIpLGkuc2V0U2V0aWQocyksaS5zZXRVc2VycHJvZmlsZShcIlwiKSxpLnNldFJvb21pZChvKTt2YXIgYT1pLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIoYSxtLlNES1dhdGNoQ21kSUQuRU5URVJMSVZFUk9PTUNNRElEKX0sdGhpcy5sZWF2ZVdhdGNoUm9vbT1mdW5jdGlvbihlLHQscixvKXt2YXIgcz1uZXcgbS5MZWF2ZVdhdGNoUm9vbVJlcTtzLnNldENwcHJvdG8oc3RyaW5nVG9VdGY4Qnl0ZUFycmF5KG8pKSxzLnNldEdhbWVpZChlKSxzLnNldFVzZXJpZCh0KSxzLnNldFJvb21pZChyKTt2YXIgaT1zLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIoaSxtLkNtZElkLkxFQVZFV0FUQ0hST09NUkVRKX0sdGhpcy5nZXRXYXRjaFJvb21zPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IG0uR2V0V2F0Y2hSb29tc1JlcSxvPW5ldyBtLlJvb21GaWx0ZXI7by5zZXRNYXhwbGF5ZXIodC5tYXhQbGF5ZXIpLG8uc2V0TW9kZShOdW1iZXIodC5tb2RlKSksby5zZXRGdWxsKHQuZnVsbCksby5zZXRDYW53YXRjaCh0LmNhbldhdGNoKSxvLnNldFJvb21wcm9wZXJ0eShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkodC5yb29tUHJvcGVydHkpKSxvLnNldFN0YXRlKHQuc3RhdGUpLHIuc2V0R2FtZWlkKGUpLHIuc2V0Um9vbWZpbHRlcihvKSxyLnNldFNvcnQodC5zb3J0KSxyLnNldE9yZGVyKHQub3JkZXIpLHIuc2V0UGFnZW5vKHQucGFnZU5vKSxyLnNldFBhZ2VzaXplKHQucGFnZVNpemUpO3ZhciBzPXIuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihzLG0uQ21kSWQuR0VUV0FUQ0hST09NU1JFUSl9LHRoaXMubGl2ZUhlYXJ0QmVhdD1mdW5jdGlvbihlLHQscil7dmFyIG89bmV3IG0uTGl2ZUhlYXJ0YmVhdDtvLnNldEdhbWVpZChOdW1iZXIoZSkpLG8uc2V0Um9vbWlkKHQpLG8uc2V0VXNlcmlkKE51bWJlcihyKSk7dmFyIHM9by5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKHMsbS5TREtXYXRjaENtZElELkxJVkVIRUFSVEJFQVRDTURJRCl9LHRoaXMuYnJvYWRDYXN0V2F0Y2g9ZnVuY3Rpb24oZSx0LHIsbyxzKXt2YXIgaT1uZXcgbS5MaXZlQnJvYWRjYXN0O2kuc2V0Um9vbWlkKGUpLGkuc2V0RHN0dWlkc0xpc3QodCksaS5zZXRDcHByb3RvKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShzKSk7dmFyIGE9MzIrKCgzJnIpPDwyKSsoMyZvKTtpLnNldEZsYWcoYSk7dmFyIG49aS5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKG4sbS5TREtXYXRjaENtZElELkxJVkVCUk9BRENBU1RDTURJRCl9LHRoaXMuc2V0TGl2ZU9mZnNldD1mdW5jdGlvbihlLHQscixvKXt2YXIgcz1uZXcgbS5TZXRMaXZlT2Zmc2V0O3Muc2V0R2FtZWlkKGUpLHMuc2V0Um9vbWlkKHQpLHMuc2V0VXNlcmlkKHIpLHMuc2V0T2Zmc2V0bXMobyk7dmFyIGk9cy5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKGksTVZTLlB0b0NtZC5TRVRfTElWRU9GRlNFVF9SRVEpfSx0aGlzLmNoYW5nZVJvbGVQcm90bz1mdW5jdGlvbihlLHQscixvLHMpe3ZhciBpPW5ldyBtLkNoYW5nZVJvbGVSZXE7aS5zZXRHYW1laWQodCksaS5zZXRSb29taWQociksaS5zZXRVc2VyaWQoZSksaS5zZXRVc2VycHJvZmlsZShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkocykpO3ZhciBhPTA9PT1vP20uUm9vbVR5cGUuR0FNRVJPT006bS5Sb29tVHlwZS5XQVRDSFJPT01UWVBFO2kuc2V0VGFyZ2V0cm9vbXR5cGUoYSk7dmFyIG49aS5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKG4sTVZTLlB0b0NtZC5DSEFOR0VfUk9MRV9SRVEpfSx0aGlzLnNldFJlY29ubmVjdFRpbWVvdXQ9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgbS5TZXRSZWNvbm5lY3RUaW1lb3V0UmVxO3Iuc2V0VGltZW91dChOdW1iZXIodCkpLHIuc2V0VXNlcmlkKE51bWJlcihlKSk7dmFyIG89ci5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKG8sTVZTLlB0b0NtZC5TRVRfUkVDT05ORUNUX1RJTUVPVVRfUkVRKX0sdGhpcy5DcmVhdGVUZWFtPWZ1bmN0aW9uKGUsdCxyKXtNVlMuREVCVUcmJmNvbnNvbGUubG9nKFwiQ3JlYXRlVGVhbSBnYW1lSUQ6XCIsZSxcIiB0ZWFtSW5mbzpcIix0KTt2YXIgbz1uZXcgbS5UZWFtSW5mbztvLnNldENhcGFjaXR5KHQuY2FwYWNpdHkpLG8uc2V0VGVhbWlkKHQudGVhbUlEKSxvLnNldFBhc3N3b3JkKHQucGFzc3dvcmQpLG8uc2V0TW9kZSh0Lm1vZGUpLG8uc2V0T3duZXIodC5vd25lciksby5zZXRWaXNpYmlsaXR5KHQudmlzaWJpbGl0eSk7dmFyIHM9bmV3IG0uUGxheWVySW5mbztzLnNldFVzZXJpZChyLnVzZXJJRCkscy5zZXRVc2VycHJvZmlsZShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoci51c2VyUHJvZmlsZSkpO3ZhciBpPW5ldyBtLkNyZWF0ZVRlYW1SZXE7aS5zZXRHYW1laWQoTnVtYmVyKGUpKSxpLnNldFBsYXllcmluZm8ocyksaS5zZXRUZWFtaW5mbyhvKTt2YXIgYT1pLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIoYSxNVlMuUHRvQ21kLkNSRUFURV9URUFNX1JFUSl9LHRoaXMuSm9pblRlYW09ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG0uUGxheWVySW5mbzt0LnNldFVzZXJpZChlLnBsYXllci51c2VySUQpLHQuc2V0VXNlcnByb2ZpbGUoc3RyaW5nVG9VdGY4Qnl0ZUFycmF5KGUucGxheWVyLnVzZXJQcm9maWxlKSk7dmFyIHI9bmV3IG0uSm9pblRlYW1SZXE7ci5zZXRHYW1laWQoZS5nYW1lSUQpLHIuc2V0VGVhbWlkKGUudGVhbUlEKSxyLnNldFBsYXllcmluZm8odCksci5zZXRQYXNzd29yZChlLnBhc3N3b3JkKTt2YXIgbz1yLnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIobyxNVlMuUHRvQ21kLkpPSU5fVEVBTV9SRVEpfSx0aGlzLkxlYXZlVGVhbT1mdW5jdGlvbihlKXtNVlMuREVCVUcmJmNvbnNvbGUubG9nKFwiTGVhdmVUZWFtIGFyZ3M6XCIsZSk7dmFyIHQ9bmV3IG0uTGVhdmVUZWFtUmVxO3Quc2V0R2FtZWlkKE51bWJlcihlLmdhbWVJRCkpLHQuc2V0VGVhbWlkKGUudGVhbUlEKSx0LnNldFVzZXJpZChOdW1iZXIoZS51c2VySUQpKTt2YXIgcj10LnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIocixNVlMuUHRvQ21kLkxFQVZFX1RFQU1fUkVRKX0sdGhpcy5UZWFtTWF0Y2g9ZnVuY3Rpb24oZSl7TVZTLkRFQlVHJiZjb25zb2xlLmxvZyhcIlRlYW1NYXRjaCBhcmdzOlwiLGUpO3ZhciB0PW5ldyBtLlRlYW1NYXRjaENvbmQ7dC5zZXRGdWxsKGUuY29uZC5mdWxsKSx0LnNldFRlYW1tZW1iZXJudW0oZS5jb25kLnRlYW1NZW1iZXJOdW0pLHQuc2V0VGVhbW51bShlLmNvbmQudGVhbU51bSksdC5zZXRUaW1lb3V0KGUuY29uZC50aW1lb3V0KSx0LnNldFdlaWdodChlLmNvbmQud2VpZ2h0KSx0LnNldFdlaWdodHJhbmdlKGUuY29uZC53ZWlnaHRSYW5nZSksdC5zZXRXZWlnaHRydWxlKGUuY29uZC53ZWlnaHRSdWxlKTt2YXIgcj1uZXcgbS5XYXRjaFNldHRpbmc7ci5zZXRXYXRjaHBlcnNpc3RlbnQoZS53YXRjaFNldC5wZXJzaXN0ZW50KSxyLnNldFdhdGNoZGVsYXltcyhlLndhdGNoU2V0LmRlbGF5TVMpLHIuc2V0TWF4d2F0Y2goZS53YXRjaFNldC5tYXhXYXRjaCksci5zZXRDYWNoZXRpbWUoZS53YXRjaFNldC5jYWNoZU1TKTt2YXIgbz1uZXcgbS5Sb29tSW5mbztvLnNldFJvb21wcm9wZXJ0eShzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoZS5yb29tSW5mby5yb29tUHJvcGVydHkpKSxvLnNldENhbndhdGNoKGUucm9vbUluZm8uY2FuV2F0Y2gpLG8uc2V0TWF4cGxheWVyKGUucm9vbUluZm8ubWF4UGxheWVyKSxvLnNldE1vZGUoZS5yb29tSW5mby5tb2RlKSxvLnNldE93bmVyKDApLG8uc2V0Um9vbWlkKFwiXCIpLG8uc2V0Um9vbW5hbWUoZS5yb29tSW5mby5yb29tTmFtZSksby5zZXRWaXNpYmlsaXR5KGUucm9vbUluZm8udmlzaWJpbGl0eSk7dmFyIHM9bmV3IG0uVGVhbU1hdGNoUmVxO3Muc2V0R2FtZWlkKGUuZ2FtZUlEKSxzLnNldFRlYW1pZChlLnRlYW1JRCkscy5zZXRVc2VyaWQoZS51c2VySUQpLHMuc2V0Q29uZCh0KSxzLnNldFJvb21pbmZvKG8pLHMuc2V0V2F0Y2hzZXR0aW5nKHIpO3ZhciBpPXMuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihpLGMuVEVBTV9NQVRDSF9SRVEpfSx0aGlzLkdldE9mZkxpbmVEYXRhPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBtLkdldENhY2hlRGF0YTt0LnNldENhY2hlZnJhbWVtcyhlLmNhY2hlRnJhbWVNUyksdC5zZXRSb29taWQoZS5yb29tSUQpLHQuc2V0R2FtZWlkKGUuZ2FtZUlEKTt2YXIgcj10LnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIocixjLkdFVF9DQUNIRURBVEFfUkVRKX0sdGhpcy5DYW5jZWxUZWFtTWF0Y2g9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IG0uQ2FuY2VsVGVhbU1hdGNoUmVxO3Quc2V0R2FtZWlkKGUuZ2FtZUlEKSx0LnNldFRlYW1pZChlLnRlYW1JRCksdC5zZXRDcHByb3RvKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShlLmNwUHJvdG8pKSx0LnNldFVzZXJpZChlLnVzZXJJRCk7dmFyIHI9dC5zZXJpYWxpemVCaW5hcnkoKTtyZXR1cm4gdGhpcy5maWxsSGVhZGVyKHIsYy5DQU5DRUxfVEVBTU1BVENIX1JFUSl9LHRoaXMuU2VuZFRlYW1FdmVudD1mdW5jdGlvbihlKXt2YXIgdD1uZXcgbS5TZW5kVGVhbUV2ZW50UmVxO3Quc2V0Q3Bwcm90byhzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoZS5jcFByb3RvKSksdC5zZXRVc2VyaWQoZS51c2VySUQpLHQuc2V0R2FtZWlkKGUuZ2FtZUlEKSx0LnNldERzdHR5cGUoZS5kc3RUeXBlKSx0LnNldE1zZ3R5cGUoZS5tc2dUeXBlKSx0LnNldFRlYW1pZChlLnRlYW1JRCksdC5zZXREc3R1aWRzTGlzdChlLmRzdFVpZHMpO3ZhciByPXQuc2VyaWFsaXplQmluYXJ5KCk7cmV0dXJuIHRoaXMuZmlsbEhlYWRlcihyLGMuU0VORF9URUFNRVZFTlRfUkVRKX0sdGhpcy5LaWNrVGVhbU1lbWJlcj1mdW5jdGlvbihlKXt2YXIgdD1uZXcgbS5LaWNrVGVhbU1lbWJlclJlcTt0LnNldERzdHVzZXJpZChlLmRzdHVzZXJJRCksdC5zZXRHYW1laWQoZS5nYW1lSUQpLHQuc2V0VGVhbWlkKGUudGVhbUlEKSx0LnNldFVzZXJpZChlLnVzZXJJRCksdC5zZXRDcHByb3RvKHN0cmluZ1RvVXRmOEJ5dGVBcnJheShlLmNwUHJvdG8pKTt2YXIgcj10LnNlcmlhbGl6ZUJpbmFyeSgpO3JldHVybiB0aGlzLmZpbGxIZWFkZXIocixjLktJQ0tfVEVBTU1FTUJFUl9SRVEpfX19KE1WU3x8e30pO3ZhciBOZXRXb3JrQ2FsbEJhY2tJbXA9ZnVuY3Rpb24oaSl7TVNFeHRlbmQodGhpcyxNVlMuTWF0Y2h2c05ldFdvcmspLHRoaXMuZW5naW5lV29ya01hcD1uZXcgTVZTLkVuZ2luZU5ldHdvcmtNYXAsdGhpcy5ndHdUaW1lcj0wLHRoaXMud2F0Y2hUaW1lcj0wLHRoaXMubUhvdGVsVGltZXI9MCx0aGlzLmZyYW1lQ2FjaGU9W10sdGhpcy5oYlRpbWVycz1bXSx0aGlzLmNsZWFyQWxsQmVhdFRpbWVyPWZ1bmN0aW9uKCl7Zm9yKDswPHRoaXMuaGJUaW1lcnMubGVuZ3RoOylNVlMudGlja2VyLmNsZWFySW50ZXJ2YWwodGhpcy5oYlRpbWVycy5wb3AoKSl9LHRoaXMub25Nc2c9ZnVuY3Rpb24oZSl7dmFyIHQ9aS5tUHJvdG9jb2wuaGFuZGxlTXNnKGUpLHI9bmV3IHByb3RvLnN0cmVhbS5Sb29tSW5mbyxvPXtob3RlbFRpbWVyOnRoaXMubUhvdGVsVGltZXIsd2F0Y2hUaW1lcjp0aGlzLndhdGNoVGltZXIscGF5bG9hZDp0LnBheWxvYWQsc2VxOnQuaGVhZGVyLnNlcSxyb29tSW5mbzpyLGZyYW1lQ2FjaGU6dGhpcy5mcmFtZUNhY2hlLHRlYW1Ob3RpZnlJbmZvOnRoaXMudGVhbU5vdGlmeUluZm99LHM9dGhpcy5lbmdpbmVXb3JrTWFwW3QuaGVhZGVyLmNtZF07TVZTLm10YVJlcG9ydCYmTVZTLm10YVJlcG9ydC5SZXBvcnQodC5oZWFkZXIuY21kKSxzP3MuZG9TdWJIYW5kbGUobyxpKTpNYXRjaHZzTG9nLmxvZ0UoXCJubyB0aGUgY21kOiBcIix0LmhlYWRlci5jbWQpfSx0aGlzLm9uRXJyPWZ1bmN0aW9uKGUsdCl7TVZTLkVycm9yUnNwV29yayhpLm1Sc3AuZXJyb3JSZXNwb25zZSxlLHQpfSx0aGlzLm9uQ29ubmVjdD1mdW5jdGlvbihlKXtcIlwiIT09TVZTLkhvc3QuSE9TVF9IT1RFTF9BRERSJiYwPD1lLmluZGV4T2YoTVZTLkhvc3QuSE9TVF9IT1RFTF9BRERSKT8odGhpcy5tSG90ZWxUaW1lcj1NVlMudGlja2VyLnNldEludGVydmFsKGkuaG90ZWxIZWFydEJlYXQsTVZTLkNvbmZpZy5IRUFSVF9CRUFUX0lOVEVSVkFMKSx0aGlzLmhiVGltZXJzLnB1c2godGhpcy5tSG90ZWxUaW1lcikpOlwiXCIhPT1NVlMuSG9zdC5IT1NUX1dBVENIX0FERFImJjA8PWUuaW5kZXhPZihNVlMuSG9zdC5IT1NUX1dBVENIX0FERFIpPyh0aGlzLndhdGNoVGltZXI9TVZTLnRpY2tlci5zZXRJbnRlcnZhbChpLmxpdmVIZWFydEJlYXQsTVZTLkNvbmZpZy5IRUFSVF9CRUFUX0lOVEVSVkFMKSx0aGlzLmhiVGltZXJzLnB1c2godGhpcy53YXRjaFRpbWVyKSk6XCJcIiE9PU1WUy5Ib3N0LkhPU1RfR0FUV0FZX0FERFImJjA8PWUuaW5kZXhPZihNVlMuSG9zdC5IT1NUX0dBVFdBWV9BRERSKSYmKHRoaXMuZ3R3VGltZXI9TVZTLnRpY2tlci5zZXRJbnRlcnZhbChpLmhlYXJ0QmVhdCxNVlMuQ29uZmlnLkhFQVJUX0JFQVRfSU5URVJWQUwpLHRoaXMuaGJUaW1lcnMucHVzaCh0aGlzLmd0d1RpbWVyKSksaS5tUnNwLm9uQ29ubmVjdCYmaS5tUnNwLm9uQ29ubmVjdChlKX0sdGhpcy5vbkRpc0Nvbm5lY3Q9ZnVuY3Rpb24oZSx0KXtpLm1DbnRSb29tVHlwZT1NVlMuVGdSb29tVHlwZS5OUm9vbSxpLm1Sc3Aub25EaXNDb25uZWN0JiZpLm1Sc3Aub25EaXNDb25uZWN0KGUpLGUuZW5kc1dpdGgoTVZTLkhvc3QuSE9TVF9HQVRXQVlfQUREUik/KGkubVN0YXRlLlNldEluaXQoKSxNYXRjaHZzTG9nLmxvZ0koXCJnYXRld2F5IGRpc2Nvbm5lY3RcIiksdCYmdC5jb2RlJiYodC5jb2RlPT09TXZzQ29kZS5DT0RFXzEwMDB8fHQuY29kZT09PU12c0NvZGUuQ09ERV8xMDA1KT9NYXRjaHZzTG9nLmxvZ0koXCJnYXRld2F5IGNsb3NlIGlzIGZyaWVuZFwiKToodGhpcy5jbGVhckFsbEJlYXRUaW1lcigpLGkubUhvdGVsTmV0V29yayYmaS5tSG90ZWxOZXRXb3JrLmNsb3NlKCksTVZTLkVycm9yUnNwV29yayhpLm1Sc3AuZXJyb3JSZXNwb25zZSxNdnNDb2RlLk5ldHdvcmtFcnIsXCIoXCIrdC5jb2RlK1wiKSBnYXRld2F5IG5ldHdvcmsgZXJyb3JcIikpLE1WUy50aWNrZXIuY2xlYXJJbnRlcnZhbCh0aGlzLmd0d1RpbWVyKSk6XCJcIiE9PU1WUy5Ib3N0LkhPU1RfV0FUQ0hfQUREUiYmZS5lbmRzV2l0aChNVlMuSG9zdC5IT1NUX1dBVENIX0FERFIpPyhNYXRjaHZzTG9nLmxvZ0koXCJsaXZlIGRpc2Nvbm5lY3RcIiksdCYmdC5jb2RlJiYodC5jb2RlPT09TXZzQ29kZS5DT0RFXzEwMDB8fHQuY29kZT09PU12c0NvZGUuQ09ERV8xMDA1KT9NYXRjaHZzTG9nLmxvZ0koXCJsaXZlIGNsb3NlIGlzIGZyaWVuZFwiKTooaS5tU3RhdGUuU2V0SW5pdCgpLHRoaXMuY2xlYXJBbGxCZWF0VGltZXIoKSxpLm1XYXRjaE5ldHdyb2smJmkubVdhdGNoTmV0d3Jvay5jbG9zZSgpLE1WUy5FcnJvclJzcFdvcmsoaS5tUnNwLmVycm9yUmVzcG9uc2UsTXZzQ29kZS5OZXR3b3JrRXJyLFwiKFwiK3QuY29kZStcIikgd2F0Y2ggbmV0d29yayBlcnJvclwiKSksTVZTLnRpY2tlci5jbGVhckludGVydmFsKHRoaXMud2F0Y2hUaW1lciksaS5tU3RhdGUuRGVsSW5Sb29tKCkpOlwiXCIhPT1NVlMuSG9zdC5IT1NUX0hPVEVMX0FERFImJmUuZW5kc1dpdGgoTVZTLkhvc3QuSE9TVF9IT1RFTF9BRERSKSYmKE1hdGNodnNMb2cubG9nSShcImhvdGVsIGRpc2Nvbm5lY3RcIiksdCYmdC5jb2RlJiYodC5jb2RlPT09TXZzQ29kZS5DT0RFXzEwMDB8fHQuY29kZT09PU12c0NvZGUuQ09ERV8xMDA1KT9NYXRjaHZzTG9nLmxvZ0koXCJob3RlbCBjbG9zZSBpcyBmcmllbmRcIik6KGkubVN0YXRlLlNldEluaXQoKSx0aGlzLmNsZWFyQWxsQmVhdFRpbWVyKCksaS5tR1RXTmV0d29yayYmaS5tR1RXTmV0d29yay5jbG9zZSgpLE1WUy5FcnJvclJzcFdvcmsoaS5tUnNwLmVycm9yUmVzcG9uc2UsTXZzQ29kZS5OZXR3b3JrRXJyLFwiKFwiK3QuY29kZStcIikgaG90ZWwgbmV0d29yayBlcnJvclwiKSksTVZTLnRpY2tlci5jbGVhckludGVydmFsKHRoaXMubUhvdGVsVGltZXIpLGkubVN0YXRlLkRlbEluUm9vbSgpKX19O2Z1bmN0aW9uIE1hdGNodnNSZXNwb25zZSgpe3RoaXMucmVnaXN0ZXJVc2VyUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmxvZ2luUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmxvZ291dFJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5jcmVhdGVSb29tUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmdldFJvb21MaXN0UmVzcG9uc2U9ZnVuY3Rpb24oZSx0KXt9LHRoaXMuam9pblJvb21SZXNwb25zZT1mdW5jdGlvbihlLHQscil7fSx0aGlzLmpvaW5Sb29tTm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5qb2luT3ZlclJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5qb2luT3Zlck5vdGlmeT1mdW5jdGlvbihlKXt9LHRoaXMubGVhdmVSb29tUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmxlYXZlUm9vbU5vdGlmeT1mdW5jdGlvbihlKXt9LHRoaXMua2lja1BsYXllclJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5raWNrUGxheWVyTm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5zZW5kRXZlbnRSZXNwb25zZT1mdW5jdGlvbihlKXt9LHRoaXMuc2VuZEV2ZW50Tm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5nYW1lU2VydmVyTm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5lcnJvclJlc3BvbnNlPWZ1bmN0aW9uKGUsdCl7fSx0aGlzLmluaXRSZXNwb25zZT1mdW5jdGlvbihlKXt9LHRoaXMubmV0d29ya1N0YXRlTm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5zdWJzY3JpYmVFdmVudEdyb3VwUmVzcG9uc2U9ZnVuY3Rpb24oZSx0KXt9LHRoaXMuc2VuZEV2ZW50R3JvdXBSZXNwb25zZT1mdW5jdGlvbihlLHQpe30sdGhpcy5zZW5kRXZlbnRHcm91cE5vdGlmeT1mdW5jdGlvbihlLHQscil7fSx0aGlzLnNldEZyYW1lU3luY1Jlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5zZXRGcmFtZVN5bmNOb3RpZnk9ZnVuY3Rpb24oZSl7fSx0aGlzLnNlbmRGcmFtZUV2ZW50UmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmZyYW1lVXBkYXRlPWZ1bmN0aW9uKGUpe30sdGhpcy5ob3RlbEhlYXJ0QmVhdFJzcD1mdW5jdGlvbihlKXt9LHRoaXMuZ2F0ZXdheVNwZWVkUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmhlYXJ0QmVhdFJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5kaXNDb25uZWN0UmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmdldFJvb21EZXRhaWxSZXNwb25zZT1mdW5jdGlvbihlKXt9LHRoaXMuZ2V0Um9vbUxpc3RFeFJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5zZXRSb29tUHJvcGVydHlSZXNwb25zZT1mdW5jdGlvbihlKXt9LHRoaXMuc2V0Um9vbVByb3BlcnR5Tm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5yZWNvbm5lY3RSZXNwb25zZT1mdW5jdGlvbihlLHQscil7fSx0aGlzLmpvaW5PcGVuTm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5qb2luT3BlblJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5qb2luV2F0Y2hSb29tUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmpvaW5XYXRjaFJvb21Ob3RpZnk9ZnVuY3Rpb24oZSl7fSx0aGlzLmxlYXZlV2F0Y2hSb29tUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmxlYXZlV2F0Y2hSb29tTm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5nZXRXYXRjaFJvb21zUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLndhdGNoSGVhcnRCZWF0PWZ1bmN0aW9uKGUpe30sdGhpcy5saXZlQnJvYWRjYXN0UmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmxpdmVCcm9hZGNhc3ROb3RpZnk9ZnVuY3Rpb24oZSl7fSx0aGlzLnNldExpdmVPZmZzZXRSZXNwb25zZT1mdW5jdGlvbihlKXt9LHRoaXMubGl2ZU92ZXJOb3RpZnk9ZnVuY3Rpb24oZSl7fSx0aGlzLmxpdmVGcmFtZVVwZGF0ZT1mdW5jdGlvbihlKXt9LHRoaXMuY2hhbmdlUm9sZVJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5zZXRSZWNvbm5lY3RUaW1lb3V0UmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmNyZWF0ZVRlYW1SZXNwb25zZT1mdW5jdGlvbihlKXt9LHRoaXMuam9pblRlYW1SZXNwb25zZT1mdW5jdGlvbihlKXt9LHRoaXMuam9pblRlYW1Ob3RpZnk9ZnVuY3Rpb24oZSl7fSx0aGlzLmxlYXZlVGVhbVJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5sZWF2ZVRlYW1Ob3RpZnk9ZnVuY3Rpb24oZSl7fSx0aGlzLnRlYW1NYXRjaFJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy50ZWFtTWF0Y2hSZXN1bHROb3RpZnk9ZnVuY3Rpb24oZSl7fSx0aGlzLnRlYW1NYXRjaFN0YXJ0Tm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5nZXRPZmZMaW5lRGF0YVJlc3BvbnNlPWZ1bmN0aW9uKGUpe30sdGhpcy5jYW5jZWxUZWFtTWF0Y2hSZXNwb25zZT1mdW5jdGlvbihlKXt9LHRoaXMuY2FuY2VsVGVhbU1hdGNoTm90aWZ5PWZ1bmN0aW9uKGUpe30sdGhpcy5zZW5kVGVhbUV2ZW50UmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLnNlbmRUZWFtRXZlbnROb3RpZnk9ZnVuY3Rpb24oZSl7fSx0aGlzLmtpY2tUZWFtTWVtYmVyUmVzcG9uc2U9ZnVuY3Rpb24oZSl7fSx0aGlzLmtpY2tUZWFtTWVtYmVyTm90aWZ5PWZ1bmN0aW9uKGUpe319IWZ1bmN0aW9uKGUpe2UuRW5naW5lTmV0d29ya01hcD1mdW5jdGlvbigpe3RoaXNbTVZTLlB0b0NtZC5MT0dJTl9SU1BdPW5ldyB0LHRoaXNbTVZTLlB0b0NtZC5KT0lOX1JPT01fUlNQXT1uZXcgcix0aGlzW01WUy5QdG9DbWQuSk9JTl9ST09NX05PVElGWV09bmV3IG8sdGhpc1tNVlMuUHRvQ21kLkNIRUNLX0lOX1JTUF09bmV3IGksdGhpc1tNVlMuUHRvQ21kLkNSRUFURV9ST09NX1JTUF09bmV3IHMsdGhpc1tNVlMuUHRvQ21kLkNIRUNLX0lOX05PVElGWV09bmV3IGEsdGhpc1tNVlMuUHRvQ21kLkpPSU5fT1ZFUl9SU1BdPW5ldyBwLHRoaXNbTVZTLlB0b0NtZC5KT0lOX09WRVJfTk9USUZZXT1uZXcgZyx0aGlzW01WUy5QdG9DbWQuTEVBVkVfUk9PTV9SU1BdPW5ldyBuLHRoaXNbTVZTLlB0b0NtZC5MRUFWRV9ST09NX05PVElGWV09bmV3IGwsdGhpc1tNVlMuUHRvQ21kLkdUV19IRUFSVF9CRUFUX1JTUF09bmV3IE0sdGhpc1tNVlMuUHRvQ21kLkhPVEVMX0hFQVJUX0JFQVRfUlNQXT1uZXcgbSx0aGlzW01WUy5QdG9DbWQuQlJPQURDQVNUX1JTUF09bmV3IGMsdGhpc1tNVlMuUHRvQ21kLkJST0FEQ0FTVF9OT1RJRlldPW5ldyBkLHRoaXNbTVZTLlB0b0NtZC5TVUJTQ1JJQkVfUlNQXT1uZXcgZix0aGlzW01WUy5QdG9DbWQuU1VCU0NSSUJFX0RBVEFfUlNQXT1uZXcgaCx0aGlzW01WUy5QdG9DbWQuU1VCU0NSSUJFX0RBVEFfTk9USUZZXT1uZXcgeSx0aGlzW01WUy5QdG9DbWQuR1RXX1NQRUVEX1JTUF09bmV3IFIsdGhpc1tNVlMuUHRvQ21kLkdFVF9ST09NTElTVF9SU1BdPW5ldyBTLHRoaXNbTVZTLlB0b0NtZC5MT0dPVVRfUlNQXT1uZXcgYix0aGlzW01WUy5QdG9DbWQuRElTQ09OTkVDVF9SU1BdPW5ldyBFLHRoaXNbTVZTLlB0b0NtZC5LSUNLX1BMQVlFUl9OT1RJRlldPW5ldyB2LHRoaXNbTVZTLlB0b0NtZC5LSUNLX1BMQVlFUl9SU1BdPW5ldyBULHRoaXNbTVZTLlB0b0NtZC5TRVRfRlJBTUVTWU5DX1JTUF09bmV3IF8sdGhpc1tNVlMuUHRvQ21kLlNFTkRfRlJBTUVfREFUQV9SU1BdPW5ldyBGLHRoaXNbTVZTLlB0b0NtZC5TRVRfRlJBTUVTWU5DX05PVElGWV09bmV3IEksdGhpc1tNVlMuUHRvQ21kLkZSQU1FX0RBVEFfTk9USUZZXT1uZXcgQix0aGlzW01WUy5QdG9DbWQuRlJBTUVfU1lOQ19OT1RJRlldPW5ldyBPLHRoaXNbTVZTLlB0b0NtZC5ORVRXT1JLX1NUQVRFX05PVElGWV09bmV3IEQsdGhpc1tNVlMuUHRvQ21kLkdFVF9ST09NTElTVF9FWF9SU1BdPW5ldyB3LHRoaXNbTVZTLlB0b0NtZC5HRVRfUk9PTV9ERVRBSUxfUlNQXT1uZXcgVyx0aGlzW01WUy5QdG9DbWQuU0VUX1JPT01fUFJPUEVSVFlfUlNQXT1uZXcgQyx0aGlzW01WUy5QdG9DbWQuU0VUX1JPT01fUFJPUEVSVFlfTk9USUZZXT1uZXcgTix0aGlzW01WUy5QdG9DbWQuSk9JTl9PUEVOX1JTUF09bmV3IEEsdGhpc1tNVlMuUHRvQ21kLkpPSU5fT1BFTl9OT1RJRlldPW5ldyBrLHRoaXNbTVZTLlB0b0NtZC5KT0lOX1dBVENIUk9PTV9SU1BdPW5ldyBQLHRoaXNbTVZTLlB0b0NtZC5MRUFWRV9XQVRDSFJPT01fUlNQXT1uZXcgTCx0aGlzW01WUy5QdG9DbWQuR0VUX1dBVENIUk9PTV9SU1BdPW5ldyBVLHRoaXNbTVZTLlB0b0NtZC5DSEFOR0VfUk9MRV9SU1BdPW5ldyBZLHRoaXNbTVZTLlB0b0NtZC5FTlRFUl9MSVZFUk9PTV9SU1BdPW5ldyBqLHRoaXNbTVZTLlB0b0NtZC5FTlRFUl9MSVZFUk9PTV9OT1RJRlldPW5ldyBHLHRoaXNbTVZTLlB0b0NtZC5MSVZFX0hFQVJUQkVBVF9SU1BdPW5ldyB4LHRoaXNbTVZTLlB0b0NtZC5MSVZFX0JST0FEQ0FTVF9SU1BdPW5ldyB6LHRoaXNbTVZTLlB0b0NtZC5MSVZFX0JST0FEQ0FTVF9OT1RJRlldPW5ldyBWLHRoaXNbTVZTLlB0b0NtZC5TRVRfTElWRU9GRlNFVF9SU1BdPW5ldyBILHRoaXNbTVZTLlB0b0NtZC5FWElUX0xJVkVST09NX05PVElGWV09bmV3IHEsdGhpc1tNVlMuUHRvQ21kLkxJVkVfT1ZFUl9OT1RJRlldPW5ldyBKLHRoaXNbTVZTLlB0b0NtZC5MSVZFX0ZSQU1FREFUQV9OT1RJRlldPW5ldyAkLHRoaXNbTVZTLlB0b0NtZC5MSVZFX0ZSQU1FU1lOQ19OT1RJRlldPW5ldyBLLHRoaXNbTVZTLlB0b0NtZC5TRVRfUkVDT05ORUNUX1RJTUVPVVRfUlNQXT1uZXcgUSx0aGlzW01WUy5QdG9DbWQuQ1JFQVRFX1RFQU1fUlNQXT1uZXcgWCx0aGlzW01WUy5QdG9DbWQuSk9JTl9URUFNX1JTUF09bmV3IFosdGhpc1tNVlMuUHRvQ21kLkpPSU5fVEVBTV9OT1RJRlldPW5ldyBlZSx0aGlzW01WUy5QdG9DbWQuTEVBVkVfVEVBTV9SU1BdPW5ldyB0ZSx0aGlzW01WUy5QdG9DbWQuTEVBVkVfVEVBTV9OT1RJRlldPW5ldyByZSx0aGlzW01WUy5QdG9DbWQuVEVBTV9NQVRDSF9SU1BdPW5ldyBvZSx0aGlzW01WUy5QdG9DbWQuVEVBTV9NQVRDSF9SRVNVTFRfTk9USUZZXT1uZXcgc2UsdGhpc1tNVlMuUHRvQ21kLlRFQU1fTUFUQ0hfU1RBUlRfTk9USUZZXT1uZXcgaWUsdGhpc1tNVlMuUHRvQ21kLkdFVF9DQUNIRURBVEFfUlNQXT1uZXcgYWUsdGhpc1tNVlMuUHRvQ21kLkNBTkNFTF9URUFNTUFUQ0hfUlNQXT1uZXcgbmUsdGhpc1tNVlMuUHRvQ21kLkNBTkNFTF9URUFNTUFUQ0hfTk9USUZZXT1uZXcgcGUsdGhpc1tNVlMuUHRvQ21kLktJQ0tfVEVBTU1FTUJFUl9SU1BdPW5ldyBsZSx0aGlzW01WUy5QdG9DbWQuS0lDS19URUFNTUVNQkVSX05PVElGWV09bmV3IG1lLHRoaXNbTVZTLlB0b0NtZC5TRU5EX1RFQU1FVkVOVF9SU1BdPW5ldyBnZSx0aGlzW01WUy5QdG9DbWQuU0VORF9URUFNRVZFTlRfTk9USUZZXT1uZXcgdWV9O3ZhciB1PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbz1cIlwiO289dm9pZCAwIT09TXZzRXJyTXNnW3RdP3IrXCIuIFwiK012c0Vyck1zZ1t0XTpyLE1hdGNodnNMb2cubG9nSShcIltlcnJvciBjb2RlOlwiK3QrXCJdIFwiK28pLGUmJmUodCxvKX07ZnVuY3Rpb24gdCgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7aWYoTVZTLmNjUmVwb3J0JiZNVlMuY2NSZXBvcnQubG9naW5Sc3AociksMjAwPT09cilpZih0Lm1TdGF0ZS5TZXRMb2dpbigpLHQubVJlY250Um9vbUlEPWUucGF5bG9hZC5nZXRSb29taWQoKSwwIT09dC5tU3RhdGUuSXNSZWNvbm5lY3RpbmcoKSlpZihcIjBcIiE9PXQubVJlY250Um9vbUlEKXt2YXIgbz1uZXcgTXNSb29tSm9pbihNc0VudW0uSm9pblJvb21UeXBlLnJlY29ubmVjdCx0Lm1Vc2VySUQsdC5tUmVjbnRSb29tSUQsTVZTLkdhbWUuaWQsMCwwLDAsXCJyZWNvbm5lY3RcIixbe25hbWU6XCJNYXRjaFZTXCJ9XSkscz10Lm1Qcm90b2NvbCYmdC5tUHJvdG9jb2wuam9pblJvb21TcGVjaWFsKG8pO3QubUdUV05ldHdvcmsmJnQubUdUV05ldHdvcmsuc2VuZChzKX1lbHNlIHQubVN0YXRlLkRlbFJlY29ubmVjdGluZygpLHQubVJzcC5yZWNvbm5lY3RSZXNwb25zZSYmdC5tUnNwLnJlY29ubmVjdFJlc3BvbnNlKE12c0NvZGUuQ09ERV8yMDEsW10se30pO2Vsc2UgdC5tUnNwLmxvZ2luUmVzcG9uc2UobmV3IE1zTG9naW5Sc3Aocix0Lm1SZWNudFJvb21JRCkpO2Vsc2UgdC5tU3RhdGUuU2V0SW5pdCgpLHUodC5tUnNwLmVycm9yUmVzcG9uc2UscixcImxvZ2luIG9yIHJlY29ubmVjdCBpcyBmYWlsXCIpfX1mdW5jdGlvbiByKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHIpe3ZhciB0PWUucGF5bG9hZC5nZXRTdGF0dXMoKTtpZigyMDA9PT10KXt2YXIgbz1lLnBheWxvYWQuZ2V0Qm9va2luZm8oKTtyLm1Sb29tSW5mbz1lLnBheWxvYWQuZ2V0Um9vbWluZm8oKSxlLnBheWxvYWQuZ2V0VXNlcnNMaXN0KCkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLmdldFVzZXJpZCgpO3Iuam9pblJvb21Ob3RpZnlJbmZvW3RdPW5ldyBNc1Jvb21Vc2VySW5mbyh0LHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhlLmdldFVzZXJwcm9maWxlKCkpKX0pLE1WUy5Ib3N0LkhPU1RfSE9URUxfQUREUj1NVlMuTXNVdGlsLmdldEhvdGVsVXJsKG8pLHIucm9vbUNoZWNrSW4oZS5wYXlsb2FkLmdldEJvb2tpbmZvKCksZS5wYXlsb2FkLmdldFJvb21pbmZvKCkpfWVsc2Ugci5tU3RhdGUuRGVsSm9pblJvb21pbmcoKSx1KHIubVJzcC5lcnJvclJlc3BvbnNlLHQsXCJqb2luIHJvb20gZmFpbGVkIFwiKSxyLm1Sc3Auam9pblJvb21SZXNwb25zZSYmci5tUnNwLmpvaW5Sb29tUmVzcG9uc2UodCxudWxsLG51bGwpfX1mdW5jdGlvbiBvKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3ZhciByPWUucGF5bG9hZC5nZXRVc2VyKCkuZ2V0VXNlcmlkKCk7dC5qb2luUm9vbU5vdGlmeUluZm9bcl09bmV3IE1zUm9vbVVzZXJJbmZvKHIsdXRmOEJ5dGVBcnJheVRvU3RyaW5nKGUucGF5bG9hZC5nZXRVc2VyKCkuZ2V0VXNlcnByb2ZpbGUoKSkpfX1mdW5jdGlvbiBzKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe2lmKDIwMD09PWUucGF5bG9hZC5nZXRTdGF0dXMoKSl7dmFyIHI9ZS5wYXlsb2FkLmdldEJvb2tpbmZvKCk7ZS5yb29tSW5mby5zZXRSb29taWQoZS5wYXlsb2FkLmdldFJvb21pZCgpKSxlLnJvb21JbmZvLnNldE93bmVyKGUucGF5bG9hZC5nZXRPd25lcigpKSx0Lm1Sb29tSW5mbz1lLnJvb21JbmZvLE1WUy5Ib3N0LkhPU1RfSE9URUxfQUREUj1NVlMuTXNVdGlsLmdldEhvdGVsVXJsKHIpLHQucm9vbUNoZWNrSW4oZS5wYXlsb2FkLmdldEJvb2tpbmZvKCksZS5yb29tSW5mbyl9ZWxzZSB0Lm1TdGF0ZS5EZWxDcmVhdGVSb29tKCksdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxlLnBheWxvYWQuZ2V0U3RhdHVzKCksXCJcIiksdC5tUnNwLmNyZWF0ZVJvb21SZXNwb25zZSYmdC5tUnNwLmNyZWF0ZVJvb21SZXNwb25zZShuZXcgTXNDcmVhdGVSb29tUnNwKGUucGF5bG9hZC5nZXRTdGF0dXMoKSxcIlwiLDApKX19ZnVuY3Rpb24gaSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0Q2hlY2tpbnNMaXN0KCksbz1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7aWYoMjAwIT09byl0Lm1TdGF0ZS5TZXRMb2dpbigpLHUodC5tUnNwLmVycm9yUmVzcG9uc2UsbyxcImNoZWNrIGluIGVycm9yXCIpLHQubUhvdGVsTmV0V29yayYmdC5tSG90ZWxOZXRXb3JrLmNsb3NlKCk7ZWxzZXt0Lm1DbnRSb29tVHlwZT1NVlMuVGdSb29tVHlwZS5QUm9vbSx0Lm1SZWNudFJvb21JRD10Lm1Sb29tSW5mby5nZXRSb29taWQoKSx0Lm1BbGxQbGF5ZXJzPWUucGF5bG9hZC5nZXRDaGVja2luc0xpc3QoKTt2YXIgcz1bXTtyLmZvckVhY2goZnVuY3Rpb24oZSl7ZSBpbiB0LmpvaW5Sb29tTm90aWZ5SW5mbyYmKHMucHVzaCh0LmpvaW5Sb29tTm90aWZ5SW5mb1tlXSksZGVsZXRlIHQuam9pblJvb21Ob3RpZnlJbmZvW2VdKX0pO3ZhciBpPW5ldyBNc1Jvb21JbmZvKHQubVJvb21JbmZvLmdldFJvb21pZCgpLHV0ZjhCeXRlQXJyYXlUb1N0cmluZyh0Lm1Sb29tSW5mby5nZXRSb29tcHJvcGVydHkoKSksdC5tUm9vbUluZm8uZ2V0T3duZXIoKSx0Lm1Sb29tSW5mby5nZXRTdGF0ZSgpKTt0Lm1TdGF0ZS5TZXRJblJvb20oKSx0Lm1TdGF0ZS5Jc0NyZWF0ZVJvb20oKT8odC5tU3RhdGUuRGVsQ3JlYXRlUm9vbSgpLHQubVJzcC5jcmVhdGVSb29tUmVzcG9uc2UmJnQubVJzcC5jcmVhdGVSb29tUmVzcG9uc2UobmV3IE1zQ3JlYXRlUm9vbVJzcChvLHQubVJvb21JbmZvLmdldFJvb21pZCgpLHQubVJvb21JbmZvLmdldE93bmVyKCkpKSk6dC5tU3RhdGUuSXNKb2luUm9vbWluZygpPyh0Lm1TdGF0ZS5EZWxKb2luUm9vbWluZygpLHQubVJzcC5qb2luUm9vbVJlc3BvbnNlJiZ0Lm1Sc3Auam9pblJvb21SZXNwb25zZShvLHMsaSkpOjAhPT10Lm1TdGF0ZS5Jc1JlY29ubmVjdGluZygpPyh0Lm1TdGF0ZS5EZWxSZWNvbm5lY3RpbmcoKSx0Lm1Sc3AucmVjb25uZWN0UmVzcG9uc2UmJnQubVJzcC5yZWNvbm5lY3RSZXNwb25zZShvLHMsaSkpOnQubVN0YXRlLklzVGVhbU1hdGNoaW5nKCkmJih0Lm1TdGF0ZS5EZWxUZWFtTWF0Y2hpbmcoKSx0Lm1TdGF0ZS5EZWxJblRlYW0oKSx0LnRlYW1Ob3RpZnlJbmZvLnJvb21JbmZvPWksdC5tUnNwLnRlYW1NYXRjaFJlc3VsdE5vdGlmeSh0LnRlYW1Ob3RpZnlJbmZvKSl9fX1mdW5jdGlvbiBhKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3QubUFsbFBsYXllcnM9ZS5wYXlsb2FkLmdldENoZWNraW5zTGlzdCgpO3ZhciByPWUucGF5bG9hZC5nZXRVc2VyaWQoKTtyIGluIHQuam9pblJvb21Ob3RpZnlJbmZvJiYodC5tUnNwLmpvaW5Sb29tTm90aWZ5JiZ0Lm1Sc3Auam9pblJvb21Ob3RpZnkodC5qb2luUm9vbU5vdGlmeUluZm9bcl0pLGRlbGV0ZSB0LmpvaW5Sb29tTm90aWZ5SW5mb1tyXSl9fWZ1bmN0aW9uIG4oKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dC5tU3RhdGUuRGVsSW5Sb29tKCksMjAwIT09ZS5wYXlsb2FkLmdldFN0YXR1cygpJiZ1KHQubVJzcC5lcnJvclJlc3BvbnNlLGUucGF5bG9hZC5nZXRTdGF0dXMoKSxcImxlYXZlIHJvb20gZmFpbFwiKSxlLnJvb21JbmZvLnNldFJvb21pZChcIjBcIiksdC5tUm9vbUluZm89ZS5yb29tSW5mbzt2YXIgcj1uZXcgTXNMZWF2ZVJvb21Sc3AoZS5wYXlsb2FkLmdldFN0YXR1cygpLGUucGF5bG9hZC5nZXRSb29taWQoKSxlLnBheWxvYWQuZ2V0VXNlcmlkKCksZS5wYXlsb2FkLmdldENwcHJvdG8oKSk7dC5tUnNwLmxlYXZlUm9vbVJlc3BvbnNlJiZ0Lm1Sc3AubGVhdmVSb29tUmVzcG9uc2Uocil9fWZ1bmN0aW9uIHAoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7MjAwIT09ZS5wYXlsb2FkLmdldFN0YXR1cygpJiZ1KHQubVJzcC5lcnJvclJlc3BvbnNlLGUucGF5bG9hZC5nZXRTdGF0dXMoKSxcImpvaW4gb3ZlciBmYWlsXCIpLHQubVJzcC5qb2luT3ZlclJlc3BvbnNlJiZ0Lm1Sc3Auam9pbk92ZXJSZXNwb25zZShuZXcgTXNKb2luT3ZlclJzcChlLnBheWxvYWQuZ2V0U3RhdHVzKCksdXRmOEJ5dGVBcnJheVRvU3RyaW5nKGUucGF5bG9hZC5nZXRDcHByb3RvKCkpKSl9fWZ1bmN0aW9uIGcoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9bmV3IE1zSm9pbk92ZXJOb3RpZnlJbmZvKGUucGF5bG9hZC5nZXRSb29taWQoKSxlLnBheWxvYWQuZ2V0U3JjdXNlcmlkKCksdXRmOEJ5dGVBcnJheVRvU3RyaW5nKGUucGF5bG9hZC5nZXRDcHByb3RvKCkpKTt0Lm1Sc3Auam9pbk92ZXJOb3RpZnkmJnQubVJzcC5qb2luT3Zlck5vdGlmeShyKX19ZnVuY3Rpb24gbCgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgTXNMZWF2ZVJvb21Ob3RpZnkoZS5wYXlsb2FkLmdldFJvb21pZCgpLGUucGF5bG9hZC5nZXRVc2VyaWQoKSxlLnBheWxvYWQuZ2V0T3duZXIoKSx1dGY4Qnl0ZUFycmF5VG9TdHJpbmcoZS5wYXlsb2FkLmdldENwcHJvdG8oKSkpO3QubVJzcC5sZWF2ZVJvb21Ob3RpZnkmJnQubVJzcC5sZWF2ZVJvb21Ob3RpZnkocil9fWZ1bmN0aW9uIG0oKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dC5tUnNwLmhvdGVsSGVhcnRCZWF0UnNwJiZ0Lm1Sc3AuaG90ZWxIZWFydEJlYXRSc3AoZS5wYXlsb2FkLmdldFN0YXR1cygpKSxNYXRjaHZzTG9nLmxvZ0koXCJob3RlbEhlYXJ0QmVhdFJzcFwiKX19ZnVuY3Rpb24gYygpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXsyMDAhPT1lLnBheWxvYWQuZ2V0U3RhdHVzKCkmJnUodC5tUnNwLmVycm9yUmVzcG9uc2UsZS5wYXlsb2FkLmdldFN0YXR1cygpLFwic2VuZCBldmVudCBmYWlsXCIpLHQubVJzcC5zZW5kRXZlbnRSZXNwb25zZSYmdC5tUnNwLnNlbmRFdmVudFJlc3BvbnNlKG5ldyBNc1NlbmRFdmVudFJzcChlLnBheWxvYWQuZ2V0U3RhdHVzKCksZS5zZXEpKX19ZnVuY3Rpb24gZCgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXswPT09ZS5wYXlsb2FkLmdldFNyY3VpZCgpP3QubVJzcC5nYW1lU2VydmVyTm90aWZ5JiZ0Lm1Sc3AuZ2FtZVNlcnZlck5vdGlmeShuZXcgTXNHYW1lU2VydmVyTm90aWZ5SW5mbyhlLnBheWxvYWQuZ2V0U3JjdWlkKCksdXRmOEJ5dGVBcnJheVRvU3RyaW5nKGUucGF5bG9hZC5nZXRDcHByb3RvKCkpKSk6dC5tUnNwLnNlbmRFdmVudE5vdGlmeSYmdC5tUnNwLnNlbmRFdmVudE5vdGlmeShuZXcgTXNTZW5kRXZlbnROb3RpZnkoZS5wYXlsb2FkLmdldFNyY3VpZCgpLHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhlLnBheWxvYWQuZ2V0Q3Bwcm90bygpKSkpfX1mdW5jdGlvbiBmKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3QubVJzcC5zdWJzY3JpYmVFdmVudEdyb3VwUmVzcG9uc2UmJnQubVJzcC5zdWJzY3JpYmVFdmVudEdyb3VwUmVzcG9uc2UoZS5wYXlsb2FkLmdldFN0YXR1cygpLGUucGF5bG9hZC5nZXRHcm91cHNMaXN0KCkpfX1mdW5jdGlvbiBoKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3QubVJzcC5zZW5kRXZlbnRHcm91cFJlc3BvbnNlJiZ0Lm1Sc3Auc2VuZEV2ZW50R3JvdXBSZXNwb25zZShlLnBheWxvYWQuZ2V0U3RhdHVzKCksZS5wYXlsb2FkLmdldERzdG51bSgpKX19ZnVuY3Rpb24geSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt0Lm1Sc3Auc2VuZEV2ZW50R3JvdXBOb3RpZnkmJnQubVJzcC5zZW5kRXZlbnRHcm91cE5vdGlmeShlLnBheWxvYWQuZ2V0U3JjdWlkKCksZS5wYXlsb2FkLmdldEdyb3Vwc0xpc3QoKSx1dGY4Qnl0ZUFycmF5VG9TdHJpbmcoZS5wYXlsb2FkLmdldENwcHJvdG8oKSkpfX1mdW5jdGlvbiBSKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3ZhciByPWUucGF5bG9hZC5nZXRTdGF0dXMoKSxvPWUucGF5bG9hZC5nZXRTZXEoKTt0Lm1Sc3AuZ2F0ZXdheVNwZWVkUmVzcG9uc2UmJnQubVJzcC5nYXRld2F5U3BlZWRSZXNwb25zZShuZXcgTXNHYXRld2F5U3BlZWRSZXNwb25zZShyLG8pKX19ZnVuY3Rpb24gTSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0R2FtZWlkKCksbz1lLnBheWxvYWQuZ2V0R3NleGlzdCgpO3QubVJzcC5oZWFydEJlYXRSZXNwb25zZSYmdC5tUnNwLmhlYXJ0QmVhdFJlc3BvbnNlKG5ldyBNc0hlYXJ0QmVhdFJlc3BvbnNlKHIsbykpLE1hdGNodnNMb2cubG9nSShcImdhdGV3YXlIZWFydEJlYXRSZXNwb25zZVwiKX19ZnVuY3Rpb24gYigpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt0Lm1HVFdOZXR3b3JrLmNsb3NlKCksdC5tUnNwLmxvZ291dFJlc3BvbnNlJiZ0Lm1Sc3AubG9nb3V0UmVzcG9uc2UoZS5wYXlsb2FkLmdldFN0YXR1cygpKX19ZnVuY3Rpb24gUygpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7MjAwIT09ciYmKHQubVJzcC5nZXRSb29tTGlzdFJlc3BvbnNlJiZ0Lm1Sc3AuZ2V0Um9vbUxpc3RSZXNwb25zZShlLnBheWxvYWQuZ2V0U3RhdHVzKCksbnVsbCksdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxlLnBheWxvYWQuZ2V0U3RhdHVzKCksXCJnZXQgcm9vbSBsaXN0IGVycm9yIFwiKSk7Zm9yKHZhciBvPWUucGF5bG9hZC5nZXRSb29taW5mb0xpc3QoKSxzPVtdLGk9MDtpPG8ubGVuZ3RoO2krKylzW2ldPW5ldyBNc1Jvb21JbmZvRXgob1tpXS5nZXRSb29taWQoKSxvW2ldLmdldFJvb21uYW1lKCksb1tpXS5nZXRNYXhwbGF5ZXIoKSxvW2ldLmdldE1vZGUoKSxvW2ldLmdldENhbndhdGNoKCksdXRmOEJ5dGVBcnJheVRvU3RyaW5nKG9baV0uZ2V0Um9vbXByb3BlcnR5KCkpKTt0Lm1Sc3AuZ2V0Um9vbUxpc3RSZXNwb25zZSYmdC5tUnNwLmdldFJvb21MaXN0UmVzcG9uc2UocixzKX19ZnVuY3Rpb24gRSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt0Lm1Sc3AuZGlzQ29ubmVjdFJlc3BvbnNlJiZ0Lm1Sc3AuZGlzQ29ubmVjdFJlc3BvbnNlKGUucGF5bG9hZC5nZXRTdGF0dXMoKSl9fWZ1bmN0aW9uIFQoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7MjAwIT1lLnBheWxvYWQuZ2V0U3RhdHVzKCkmJnUodC5tUnNwLmVycm9yUmVzcG9uc2UsZS5wYXlsb2FkLmdldFN0YXR1cygpLFwia2ljayBwbGF5ZXIgZXJyb3IgXCIpLHQubVJzcC5raWNrUGxheWVyUmVzcG9uc2UmJnQubVJzcC5raWNrUGxheWVyUmVzcG9uc2UobmV3IE1zS2lja1BsYXllclJzcChlLnBheWxvYWQuZ2V0U3RhdHVzKCksZS5wYXlsb2FkLmdldE93bmVyKCksZS5wYXlsb2FkLmdldFVzZXJpZCgpKSl9fWZ1bmN0aW9uIHYoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7ZS5wYXlsb2FkLmdldFVzZXJpZCgpLnRvU3RyaW5nKCk9PT1cIlwiK3QubVVzZXJJRCYmbnVsbCE9ZS5ob3RlbFRpbWVyJiYoTVZTLnRpY2tlci5jbGVhckludGVydmFsKGUuaG90ZWxUaW1lciksdC5tU3RhdGUuU2V0TG9naW4oKSx0Lm1Ib3RlbE5ldFdvcmsuY2xvc2UoKSksdC5tUnNwLmtpY2tQbGF5ZXJOb3RpZnkmJnQubVJzcC5raWNrUGxheWVyTm90aWZ5KG5ldyBNc0tpY2tQbGF5ZXJOb3RpZnkoZS5wYXlsb2FkLmdldFVzZXJpZCgpLGUucGF5bG9hZC5nZXRTcmN1c2VyaWQoKSx1dGY4Qnl0ZUFycmF5VG9TdHJpbmcoZS5wYXlsb2FkLmdldENwcHJvdG8oKSksZS5wYXlsb2FkLmdldE93bmVyKCkpKX19ZnVuY3Rpb24gXygpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXtNYXRjaHZzTG9nLmxvZ0koXCJTZXRGcmFtZVN5bmNSYXRlQWNrOlwiK2UucGF5bG9hZCksdC5tUnNwLnNldEZyYW1lU3luY1Jlc3BvbnNlJiZ0Lm1Sc3Auc2V0RnJhbWVTeW5jUmVzcG9uc2UobmV3IE1zU2V0Q2hhbm5lbEZyYW1lU3luY1JzcChlLnBheWxvYWQuZ2V0U3RhdHVzKCkpKX19ZnVuY3Rpb24gSSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1uZXcgTVZTLk1zU2V0RnJhbWVTeW5jTm90aWZ5KGUucGF5bG9hZC5nZXRGcmFtZXJhdGUoKSxlLnBheWxvYWQuZ2V0RnJhbWVpZHgoKSxlLnBheWxvYWQuZ2V0VGltZXN0YW1wKCksZS5wYXlsb2FkLmdldEVuYWJsZWdzKCksZS5wYXlsb2FkLmdldENhY2hlZnJhbWVtcygpKTt0Lm1Sc3Auc2V0RnJhbWVTeW5jTm90aWZ5JiZ0Lm1Sc3Auc2V0RnJhbWVTeW5jTm90aWZ5KHIpfX1mdW5jdGlvbiBGKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3QubVJzcC5zZW5kRnJhbWVFdmVudFJlc3BvbnNlJiZ0Lm1Sc3Auc2VuZEZyYW1lRXZlbnRSZXNwb25zZShuZXcgTXNTZW5kRnJhbWVFdmVudFJzcChlLnBheWxvYWQuZ2V0U3RhdHVzKCkpKX19ZnVuY3Rpb24gQigpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXtlLmZyYW1lQ2FjaGUudW5zaGlmdChuZXcgTXNGcmFtZUl0ZW0oZS5wYXlsb2FkLmdldFNyY3VpZCgpLHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhlLnBheWxvYWQuZ2V0Q3Bwcm90bygpKSxlLnBheWxvYWQuZ2V0VGltZXN0YW1wKCkpKX19ZnVuY3Rpb24gTygpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9W107MDxlLmZyYW1lQ2FjaGUubGVuZ3RoOylyLnB1c2goZS5mcmFtZUNhY2hlLnBvcCgpKTt2YXIgbz1uZXcgTXNGcmFtZURhdGEoZS5wYXlsb2FkLmdldExhc3RpZHgoKSxyLHIubGVuZ3RoKTt0Lm1Sc3AuZnJhbWVVcGRhdGUmJnQubVJzcC5mcmFtZVVwZGF0ZShvKX19ZnVuY3Rpb24gRCgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt0Lm1Sc3AubmV0d29ya1N0YXRlTm90aWZ5JiZ0Lm1Sc3AubmV0d29ya1N0YXRlTm90aWZ5KG5ldyBNc05ldHdvcmtTdGF0ZU5vdGlmeShlLnBheWxvYWQuZ2V0Um9vbWlkKCksZS5wYXlsb2FkLmdldFVzZXJpZCgpLGUucGF5bG9hZC5nZXRTdGF0ZSgpLGUucGF5bG9hZC5nZXRPd25lcigpKSl9fWZ1bmN0aW9uIHcoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkLmdldFJvb21pbmZvZXhMaXN0KCkscz1bXTtyLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5nZXRXYXRjaGluZm8oKS5nZXRXYXRjaHNldHRpbmcoKSxyPW5ldyBNVlMuTXNXYXRjaFNldCh0LmdldENhY2hldGltZSgpLHQuZ2V0TWF4d2F0Y2goKSx0LmdldFdhdGNoZGVsYXltcygpLHQuZ2V0V2F0Y2hwZXJzaXN0ZW50KCkpLG89bmV3IE1zUm9vbUF0dHJpYnV0ZShlLmdldFJvb21pZCgpLGUuZ2V0Um9vbW5hbWUoKSxlLmdldE1heHBsYXllcigpLGUuZ2V0R2FtZXBsYXllcigpLGUuZ2V0V2F0Y2hwbGF5ZXIoKSxlLmdldE1vZGUoKSxlLmdldENhbndhdGNoKCksdXRmOEJ5dGVBcnJheVRvU3RyaW5nKGUuZ2V0Um9vbXByb3BlcnR5KCkpLGUuZ2V0T3duZXIoKSxlLmdldFN0YXRlKCksZS5nZXRDcmVhdGV0aW1lKCkudG9TdHJpbmcoKSxyKTtzLnB1c2gobyl9KTt2YXIgbz1uZXcgTXNHZXRSb29tTGlzdEV4UnNwKGUucGF5bG9hZC5nZXRTdGF0dXMoKSxlLnBheWxvYWQuZ2V0VG90YWwoKSxzKTt0Lm1Sc3AuZ2V0Um9vbUxpc3RFeFJlc3BvbnNlJiZ0Lm1Sc3AuZ2V0Um9vbUxpc3RFeFJlc3BvbnNlKG8pfX1mdW5jdGlvbiBXKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpezIwMCE9PWUucGF5bG9hZC5nZXRTdGF0dXMoKSYmKHQubVJzcC5nZXRSb29tRGV0YWlsUmVzcG9uc2UmJnQubVJzcC5nZXRSb29tRGV0YWlsUmVzcG9uc2UobmV3IE1zR2V0Um9vbURldGFpbFJzcChlLnBheWxvYWQuZ2V0U3RhdHVzKCkpKSx1KHQubVJzcC5lcnJvclJlc3BvbnNlLGUucGF5bG9hZC5nZXRTdGF0dXMoKSxcIlwiKSk7dmFyIHI9ZS5wYXlsb2FkLmdldFJvb21kZXRhaWwoKSxvPVtdO3IuZ2V0UGxheWVyaW5mb3NMaXN0KCkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1uZXcgTXNSb29tVXNlckluZm8oZS5nZXRVc2VyaWQoKSx1dGY4Qnl0ZUFycmF5VG9TdHJpbmcoZS5nZXRVc2VycHJvZmlsZSgpKSk7by5wdXNoKHQpfSk7dmFyIHM9ci5nZXRXYXRjaHJvb20oKSxpPXMuZ2V0V2F0Y2hpbmZvKCkuZ2V0V2F0Y2hzZXR0aW5nKCksYT17c3RhdGU6cy5nZXRXYXRjaGluZm8oKS5nZXRTdGF0ZSgpLGN1cldhdGNoOnMuZ2V0V2F0Y2hpbmZvKCkuZ2V0Q3Vyd2F0Y2goKSxwZXJzaXN0ZW50OmkuZ2V0V2F0Y2hwZXJzaXN0ZW50KCksbWF4V2F0Y2g6aS5nZXRNYXh3YXRjaCgpLGRlbGF5TVM6aS5nZXRXYXRjaGRlbGF5bXMoKSxjYWNoZVRpbWU6aS5nZXRDYWNoZXRpbWUoKX0sbj1yLmdldEJyaWdhZGVzTGlzdCgpLHA9W107bi5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBhPVtdO2UuZ2V0VGVhbXNMaXN0KCkuZm9yRWFjaChmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5nZXRUZWFtaW5mbygpLHI9ZS5nZXRQbGF5ZXJMaXN0KCksbz1bXSxzPTA7czxyLmxlbmd0aDtzKyspb1tzXT17dXNlcklEOnJbc10uZ2V0VXNlcmlkKCksdXNlclByb2ZpbGU6dXRmOEJ5dGVBcnJheVRvU3RyaW5nKHJbc10uZ2V0VXNlcnByb2ZpbGUoKSl9O3ZhciBpPXt0ZWFtSUQ6dC5nZXRUZWFtaWQoKSxjYXBhY2l0eTp0LmdldENhcGFjaXR5KCksbW9kZTp0LmdldE1vZGUoKSxvd25lcjp0LmdldE93bmVyKCkscGxheWVyTGlzdDpvfTthLnB1c2goaSl9KTt2YXIgdD17YnJpZ2FkZUlEOmUuZ2V0QnJpZ2FkZWlkKCksdGVhbUxpc3Q6YX07cC5wdXNoKHQpfSk7dmFyIGc9bmV3IE1zR2V0Um9vbURldGFpbFJzcChlLnBheWxvYWQuZ2V0U3RhdHVzKCksci5nZXRTdGF0ZSgpLHIuZ2V0TWF4cGxheWVyKCksci5nZXRNb2RlKCksci5nZXRDYW53YXRjaCgpLHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhyLmdldFJvb21wcm9wZXJ0eSgpKSxyLmdldE93bmVyKCksci5nZXRDcmVhdGVmbGFnKCksbyxhLHApO3QubVJzcC5nZXRSb29tRGV0YWlsUmVzcG9uc2UmJnQubVJzcC5nZXRSb29tRGV0YWlsUmVzcG9uc2UoZyl9fWZ1bmN0aW9uIEMoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7MjAwIT09ZS5wYXlsb2FkLmdldFN0YXR1cygpJiZ1KHQubVJzcC5lcnJvclJlc3BvbnNlLGUucGF5bG9hZC5nZXRTdGF0dXMoKSxcInNldCByb29tIHByb3BlcnR5IGZhaWxcIiksdC5tUnNwLnNldFJvb21Qcm9wZXJ0eVJlc3BvbnNlJiZ0Lm1Sc3Auc2V0Um9vbVByb3BlcnR5UmVzcG9uc2UobmV3IE1zU2V0Um9vbVByb3BlcnR5UnNwSW5mbyhlLnBheWxvYWQuZ2V0U3RhdHVzKCksZS5wYXlsb2FkLmdldFJvb21pZCgpLGUucGF5bG9hZC5nZXRVc2VyaWQoKSx1dGY4Qnl0ZUFycmF5VG9TdHJpbmcoZS5wYXlsb2FkLmdldFJvb21wcm9wZXJ0eSgpKSkpfX1mdW5jdGlvbiBOKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3QubVJzcC5zZXRSb29tUHJvcGVydHlOb3RpZnkmJnQubVJzcC5zZXRSb29tUHJvcGVydHlOb3RpZnkobmV3IE1zUm9vbVByb3BlcnR5Tm90aWZ5SW5mbyhlLnBheWxvYWQuZ2V0Um9vbWlkKCksZS5wYXlsb2FkLmdldFVzZXJpZCgpLHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhlLnBheWxvYWQuZ2V0Um9vbXByb3BlcnR5KCkpKSl9fWZ1bmN0aW9uIEEoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dC5tUnNwLmpvaW5PcGVuUmVzcG9uc2UmJnQubVJzcC5qb2luT3BlblJlc3BvbnNlKG5ldyBNc1Jlb3BlblJvb21SZXNwb25zZShlLnBheWxvYWQuZ2V0U3RhdHVzKCksdXRmOEJ5dGVBcnJheVRvU3RyaW5nKGUucGF5bG9hZC5nZXRDcHByb3RvKCkpKSl9fWZ1bmN0aW9uIGsoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dC5tUnNwLmpvaW5PcGVuTm90aWZ5JiZ0Lm1Sc3Auam9pbk9wZW5Ob3RpZnkobmV3IE1zUmVvcGVuUm9vbU5vdGlmeShlLnBheWxvYWQuZ2V0Um9vbWlkKCksZS5wYXlsb2FkLmdldFVzZXJpZCgpLHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhlLnBheWxvYWQuZ2V0Q3Bwcm90bygpKSkpfX1mdW5jdGlvbiBQKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3ZhciByPWUucGF5bG9hZCxvPXIuZ2V0U3RhdHVzKCk7aWYoMjAwIT09bylyZXR1cm4gdC5tU3RhdGUuRGVsSm9pbldhdGNoaW5nKCksdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxvLFwiam9pbiB3YXRjaCByb29tIGVycm9yIFwiKSx2b2lkKHQubVJzcC5qb2luV2F0Y2hSb29tJiZ0Lm1Sc3Auam9pbldhdGNoUm9vbShvKSk7dmFyIHM9ci5nZXRCb29raW5mbygpO01WUy5ERUJVRyYmY29uc29sZS5sb2coXCJKb2luV2F0Y2hSb29tUnNwV29yayBib29rSW5mb1wiLHMpLE1WUy5Ib3N0LkhPU1RfV0FUQ0hfQUREUj1NVlMuTXNVdGlsLmdldExpdmVVcmwocyxNVlMuR2FtZS5pZCxyLmdldFJvb21pZCgpLHIuZ2V0U2V0aWQoKSksdC5lbnRlckxpdmVSb29tKHIuZ2V0Qm9va2luZm8oKSxyLmdldFJvb21pZCgpKX19ZnVuY3Rpb24gTCgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt0Lm1XYXRjaE5ldHdyb2smJnQubVdhdGNoTmV0d3Jvay5jbG9zZSgpO3ZhciByPWUucGF5bG9hZDtNVlMuREVCVUcmJmNvbnNvbGUubG9nKE1WUy5MZ0Zvcm1hdChcIkxlYXZlV2F0Y2hSb29tUnNwV29ya1wiKSxyKSwyMDAhPT1yLmdldFN0YXR1cygpJiZ1KHQubVJzcC5lcnJvclJlc3BvbnNlKHIuZ2V0U3RhdHVzKCksXCIgbGVhdmUgd2F0Y2ggcm9vbSBlcnJvciBcIikpLHQubVdhdGNoUm9vbUlEPVwiMFwiLHQubVJzcC5sZWF2ZVdhdGNoUm9vbVJlc3BvbnNlJiZ0Lm1Sc3AubGVhdmVXYXRjaFJvb21SZXNwb25zZShyLmdldFN0YXR1cygpKX19ZnVuY3Rpb24gVSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQ7aWYoMjAwIT09ci5nZXRTdGF0dXMoKSlyZXR1cm4gdC5tUnNwLmdldFJvb21MaXN0RXhSZXNwb25zZSYmdC5tUnNwLmdldFJvb21MaXN0RXhSZXNwb25zZShuZXcgTXNHZXRSb29tTGlzdEV4UnNwKHIuZ2V0U3RhdHVzKCksMCxbXSkpLHZvaWQgdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLmdldFN0YXR1cygpLFwiZ2V0IHdhdGNoIHJvb20gbGlzdCBlcnJvciBcIik7dmFyIG89ci5nZXRSb29taW5mb2V4TGlzdCgpLHM9W107by5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0V2F0Y2hpbmZvKCkuZ2V0V2F0Y2hzZXR0aW5nKCkscj1uZXcgTVZTLk1zV2F0Y2hTZXQodC5nZXRDYWNoZXRpbWUoKSx0LmdldE1heHdhdGNoKCksdC5nZXRXYXRjaGRlbGF5bXMoKSx0LmdldFdhdGNocGVyc2lzdGVudCgpKSxvPW5ldyBNc1Jvb21BdHRyaWJ1dGUoZS5nZXRSb29taWQoKSxlLmdldFJvb21uYW1lKCksZS5nZXRNYXhwbGF5ZXIoKSxlLmdldEdhbWVwbGF5ZXIoKSxlLmdldFdhdGNocGxheWVyKCksZS5nZXRNb2RlKCksZS5nZXRDYW53YXRjaCgpLHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhlLmdldFJvb21wcm9wZXJ0eSgpKSxlLmdldE93bmVyKCksZS5nZXRTdGF0ZSgpLGUuZ2V0Q3JlYXRldGltZSgpLnRvU3RyaW5nKCkscik7cy5wdXNoKG8pfSk7dmFyIGk9bmV3IE1zR2V0Um9vbUxpc3RFeFJzcChyLmdldFN0YXR1cygpLHIuZ2V0VG90YWwoKSxzKTt0Lm1Sc3AuZ2V0V2F0Y2hSb29tc1Jlc3BvbnNlJiZ0Lm1Sc3AuZ2V0V2F0Y2hSb29tc1Jlc3BvbnNlKGkpfX1mdW5jdGlvbiBqKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3QubVN0YXRlLkRlbEpvaW5XYXRjaGluZygpO3ZhciByPWUucGF5bG9hZCxvPXt9O2lmKDIwMCE9PXIuZ2V0U3RhdHVzKCkpdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLmdldFN0YXR1cygpLFwiZW50ZXIgbGl2ZSByb29tIGVycm9yXCIpLG89bmV3IE1WUy5Nc0pvaW5XYXRjaFJvb21Sc3Aoci5nZXRTdGF0dXMoKSwwLFwiXCIse30pO2Vsc2V7dC5tU3RhdGUuU2V0SW5XYXRjaCgpO3ZhciBzPXIuZ2V0V2F0aGNoaW5mbygpLGk9W107dC5tQ250Um9vbVR5cGU9TVZTLlRnUm9vbVR5cGUuV1Jvb20sdC5tV2F0Y2hSb29tSUQ9cy5nZXRSb29taWQoKSxzLmdldExhc3RhdWRpZW5jZXNMaXN0KCkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1uZXcgTVZTLk1zTGl2ZUF1ZGllbmNlKGUuZ2V0VXNlcmlkKCksdXRmOEJ5dGVBcnJheVRvU3RyaW5nKGUuZ2V0UHJvZmlsZSgpKSxlLmdldEVudGVydGltZSgpKTtpLnB1c2godCl9KTt2YXIgYT1uZXcgTVZTLk1zTGl2ZVdhdGNoSW5mbyhzLmdldFJvb21pZCgpLHMuZ2V0U3RhcnR0cygpLHMuZ2V0RGVsYXltcygpLHMuZ2V0Q2FjaGVtcygpLHMuZ2V0TWF4YXVkaWVuY2VzKCkscy5nZXRDdXJhdWRpZW5jZXMoKSxzLmdldFBlYWthdWRpZW5jZXMoKSxpKTtvPW5ldyBNVlMuTXNKb2luV2F0Y2hSb29tUnNwKHIuZ2V0U3RhdHVzKCksci5nZXRSb29tc3RhdHVzKCksci5nZXRSZXNlcnZlZCgpLGEpfXQubVJzcC5qb2luV2F0Y2hSb29tUmVzcG9uc2UmJnQubVJzcC5qb2luV2F0Y2hSb29tUmVzcG9uc2Uobyl9fWZ1bmN0aW9uIEcoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkLG89bmV3IE1zUm9vbVVzZXJJbmZvKHIuZ2V0VXNlcmlkKCksdXRmOEJ5dGVBcnJheVRvU3RyaW5nKHIuZ2V0VXNlcnByb2ZpbGUoKSkpO01WUy5ERUJVRyYmY29uc29sZS5sb2coTVZTLkxnRm9ybWF0KFwiRW50ZXJMaXZlUm9vbU5vdGlmeVdvcmtcIiksciksdC5tUnNwLmpvaW5XYXRjaFJvb21Ob3RpZnkmJnQubVJzcC5qb2luV2F0Y2hSb29tTm90aWZ5KG8pfX1mdW5jdGlvbiB4KCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3QubVJzcC53YXRjaEhlYXJ0QmVhdCYmdC5tUnNwLndhdGNoSGVhcnRCZWF0KGUucGF5bG9hZC5nZXRTdGF0dXMoKSl9fWZ1bmN0aW9uIHooKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkOzIwMCE9PXIuZ2V0U3RhdHVzKCkmJnUodC5tUnNwLmVycm9yUmVzcG9uc2Usci5nZXRTdGF0dXMoKSxcIiB3YXRjaCBzZW5kIG1lc3NhZ2UgZXJyb3IgXCIpLHQubVJzcC5saXZlQnJvYWRjYXN0UmVzcG9uc2UmJnQubVJzcC5saXZlQnJvYWRjYXN0UmVzcG9uc2Uoci5nZXRTdGF0dXMoKSl9fWZ1bmN0aW9uIFYoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkO3QubVJzcC5saXZlQnJvYWRjYXN0Tm90aWZ5JiZ0Lm1Sc3AubGl2ZUJyb2FkY2FzdE5vdGlmeShuZXcgTXNTZW5kRXZlbnROb3RpZnkoci5nZXRTcmN1aWQoKSx1dGY4Qnl0ZUFycmF5VG9TdHJpbmcoci5nZXRDcHByb3RvKCkpKSl9fWZ1bmN0aW9uIEgoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkO3QubVJzcC5zZXRMaXZlT2Zmc2V0UmVzcG9uc2UmJnQubVJzcC5zZXRMaXZlT2Zmc2V0UmVzcG9uc2Uoci5nZXRTdGF0dXMoKSl9fWZ1bmN0aW9uIHEoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkLG89bmV3IE1WUy5Nc0V4aXRMaXZlUm9vbU5vdGlmeShyLmdldFVzZXJpZCgpLHV0ZjhCeXRlQXJyYXlUb1N0cmluZyhyLmdldFVzZXJwcm9maWxlKCkpKTtNVlMuREVCVUcmJmNvbnNvbGUubG9nKE1WUy5MZ0Zvcm1hdChcIkV4aXRMaXZlUm9vbU5vdGlmeVdvcmtcIiksbyksdC5tUnNwLmxlYXZlV2F0Y2hSb29tTm90aWZ5JiZ0Lm1Sc3AubGVhdmVXYXRjaFJvb21Ob3RpZnkobyl9fWZ1bmN0aW9uIEooKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkO01WUy5ERUJVRyYmY29uc29sZS5sb2coTVZTLkxnRm9ybWF0KFwiTGl2ZU92ZXJOb3RpZnlXb3JrXCIpLHIpLHQubVJzcC5saXZlT3Zlck5vdGlmeSYmdC5tUnNwLmxpdmVPdmVyTm90aWZ5KG5ldyBNVlMuTXNMaXZlT3Zlck5vdGlmeShyLmdldEdhbWVpZCgpLHIuZ2V0Um9vbWlkKCkpKX19ZnVuY3Rpb24gJCgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQsbz11dGY4Qnl0ZUFycmF5VG9TdHJpbmcoci5nZXRDcHByb3RvKCkpO2UuZnJhbWVDYWNoZS51bnNoaWZ0KG5ldyBNc0ZyYW1lSXRlbShyLmdldFNyY3VpZCgpLG8sci5nZXRUaW1lc3RhbXAoKSkpfX1mdW5jdGlvbiBLKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj1bXTswPGUuZnJhbWVDYWNoZS5sZW5ndGg7KXIucHVzaChlLmZyYW1lQ2FjaGUucG9wKCkpO3ZhciBvPW5ldyBNc0ZyYW1lRGF0YShlLnBheWxvYWQuZ2V0TGFzdGlkeCgpLHIsci5sZW5ndGgpO3QubVJzcC5saXZlRnJhbWVVcGRhdGUmJnQubVJzcC5saXZlRnJhbWVVcGRhdGUobyl9fWZ1bmN0aW9uIFkoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkO2lmKDIwMCE9PXIuZ2V0U3RhdHVzKCkpdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLmdldFN0YXR1cygpLFwiIHdhdGNoIHNlbmQgbWVzc2FnZSBlcnJvciBcIik7ZWxzZXt2YXIgbz1yLmdldEJvb2tpbmZvKCk7aWYoci5nZXRUYXJnZXRyb29tdHlwZSgpPT1NVlMuVGdSb29tVHlwZS5QUm9vbSl7TVZTLnRpY2tlci5jbGVhckludGVydmFsKGUud2F0Y2hUaW1lciksdC5tV2F0Y2hOZXR3cm9rJiZ0Lm1XYXRjaE5ldHdyb2suY2xvc2UoKTt2YXIgcz1yLmdldFBsYXlyb29tKCkuZ2V0Um9vbWluZm8oKTt0Lm1Sb29tSW5mbz1zLE1WUy5Ib3N0LkhPU1RfSE9URUxfQUREUj1NVlMuTXNVdGlsLmdldEhvdGVsVXJsKG8pLHQucm9vbUNoZWNrSW4obyxzKX1lbHNlIHIuZ2V0VGFyZ2V0cm9vbXR5cGUoKT09TVZTLlRnUm9vbVR5cGUuV1Jvb20mJihNVlMudGlja2VyLmNsZWFySW50ZXJ2YWwoZS5ob3RlbFRpbWVyKSx0Lm1TdGF0ZS5TZXRMb2dpbigpLHQubUhvdGVsTmV0V29yayYmdC5tSG90ZWxOZXRXb3JrLmNsb3NlKCksTVZTLkhvc3QuSE9TVF9XQVRDSF9BRERSPU1WUy5Nc1V0aWwuZ2V0TGl2ZVVybChvLE1WUy5HYW1lLmlkLHIuZ2V0Um9vbWlkKCksci5nZXRTZXRpZCgpKSx0LmVudGVyTGl2ZVJvb20oci5nZXRCb29raW5mbygpLHIuZ2V0Um9vbWlkKCkpKX10Lm1Sc3AuY2hhbmdlUm9sZVJlc3BvbnNlKG5ldyBNVlMuTXNDaGFuZ2VSb2xlUnNwKHIuZ2V0U3RhdHVzKCksci5nZXRUYXJnZXRyb29tdHlwZSgpKSl9fWZ1bmN0aW9uIFEoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkLmdldFN0YXR1cygpOzIwMCE9PXImJnUodC5tUnNwLmVycm9yUmVzcG9uc2UscixcIiBzZXQgcmVjb25uZWN0IHRpbWVvdXQgdmFsdWUgcmVzcG9uc2UgZXJyb3JcIiksdC5tUnNwLnNldFJlY29ubmVjdFRpbWVvdXRSZXNwb25zZSYmdC5tUnNwLnNldFJlY29ubmVjdFRpbWVvdXRSZXNwb25zZShyKX19ZnVuY3Rpb24gWCgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7MjAwIT09cj8odC5tU3RhdGUuRGVsSW5UZWFtKCksdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLFwiY3JlYXRlIHRlYW0gcmVzcG9uc2UgZXJyb3JcIikpOnQubVN0YXRlLlNldEluVGVhbSgpLHQubVRlYW1JRD1lLnBheWxvYWQuZ2V0VGVhbWlkKCk7dmFyIG89e3N0YXR1czpyLHRlYW1JRDplLnBheWxvYWQuZ2V0VGVhbWlkKCksb3duZXI6ZS5wYXlsb2FkLmdldE93bmVyKCl9O3QubVJzcC5jcmVhdGVUZWFtUmVzcG9uc2UmJnQubVJzcC5jcmVhdGVUZWFtUmVzcG9uc2Uobyl9fWZ1bmN0aW9uIFooKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkLmdldFN0YXR1cygpOzIwMCE9PXI/KHQubVN0YXRlLkRlbEluVGVhbSgpLHUodC5tUnNwLmVycm9yUmVzcG9uc2UscixcImpvaW4gdGVhbSByZXNwb25zZSBlcnJvclwiKSk6dC5tU3RhdGUuU2V0SW5UZWFtKCk7dmFyIG89ZS5wYXlsb2FkLmdldFRlYW1pbmZvKCkscz1lLnBheWxvYWQuZ2V0VXNlcnNMaXN0KCksaT1bXTtzLmZvckVhY2goZnVuY3Rpb24oZSl7aS5wdXNoKHt1c2VySUQ6ZS5nZXRVc2VyaWQoKSx1c2VyUHJvZmlsZTp1dGY4Qnl0ZUFycmF5VG9TdHJpbmcoZS5nZXRVc2VycHJvZmlsZSgpKX0pfSk7dmFyIGE9e3RlYW06e30sc3RhdHVzOnIsdXNlckxpc3Q6aX07byYmKGEudGVhbT17dGVhbUlEOm8uZ2V0VGVhbWlkKCl8fFwiMFwiLHBhc3N3b3JkOm8uZ2V0UGFzc3dvcmQoKXx8XCJcIixjYXBhY2l0eTpvLmdldENhcGFjaXR5KCl8fDAsbW9kZTpvLmdldE1vZGUoKXx8MCxvd25lcjpvLmdldE93bmVyKCl8fDB9KSx0Lm1Sc3Auam9pblRlYW1SZXNwb25zZSYmdC5tUnNwLmpvaW5UZWFtUmVzcG9uc2UoYSl9fWZ1bmN0aW9uIGVlKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3ZhciByPWUucGF5bG9hZC5nZXRVc2VyKCksbz17dXNlcjp7dXNlcklEOnIuZ2V0VXNlcmlkKCksdXNlclByb2ZpbGU6dXRmOEJ5dGVBcnJheVRvU3RyaW5nKHIuZ2V0VXNlcnByb2ZpbGUoKSl9fTt0Lm1Sc3Auam9pblRlYW1Ob3RpZnkmJnQubVJzcC5qb2luVGVhbU5vdGlmeShvKX19ZnVuY3Rpb24gdGUoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkLmdldFN0YXR1cygpOzIwMCE9PXImJnUodC5tUnNwLmVycm9yUmVzcG9uc2UscixcImxlYXZlIHRlYW0gcmVzcG9uc2UgZXJyb3JcIik7dmFyIG89e3N0YXR1czpyLHRlYW1JRDplLnBheWxvYWQuZ2V0VGVhbWlkKCl8fFwiMFwiLHVzZXJJRDplLnBheWxvYWQuZ2V0VXNlcmlkKCl8fDB9O3QubVJzcC5sZWF2ZVRlYW1SZXNwb25zZSYmdC5tUnNwLmxlYXZlVGVhbVJlc3BvbnNlKG8pfX1mdW5jdGlvbiByZSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj17dGVhbUlEOmUucGF5bG9hZC5nZXRUZWFtaWQoKXx8XCJcIix1c2VySUQ6ZS5wYXlsb2FkLmdldFVzZXJpZCgpfHwwLG93bmVyOmUucGF5bG9hZC5nZXRPd25lcigpfHwwfTt0Lm1Sc3AubGVhdmVUZWFtTm90aWZ5JiZ0Lm1Sc3AubGVhdmVUZWFtTm90aWZ5KHIpfX1mdW5jdGlvbiBvZSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7MjAwIT09ciYmdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLFwidGVhbSBtYXRjaCByZXNwb25zZSBlcnJvclwiKTt2YXIgbz17c3RhdHVzOnJ9O3QubVJzcC50ZWFtTWF0Y2hSZXNwb25zZSYmdC5tUnNwLnRlYW1NYXRjaFJlc3BvbnNlKG8pfX1mdW5jdGlvbiBzZSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7aWYoMjAwIT09cilyZXR1cm4gdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLFwidGVhbSBtYXRjaCBlcnJvclwiKSx0Lm1TdGF0ZS5EZWxUZWFtTWF0Y2hpbmcoKSx0Lm1Sc3AudGVhbU1hdGNoUmVzdWx0Tm90aWZ5JiZ0Lm1Sc3AudGVhbU1hdGNoUmVzdWx0Tm90aWZ5KHtzdGF0dXM6cixicmlnYWRlczp7fSxyb29tSW5mbzp7fX0pLDA7dmFyIG89ZS5wYXlsb2FkLmdldEJvb2tpbmZvKCk7dC5tUm9vbUluZm89ZS5wYXlsb2FkLmdldFJvb21pbmZvKCk7dmFyIHM9ZS5wYXlsb2FkLmdldEJyaWdhZGVzTGlzdCgpLGk9W107cmV0dXJuIHMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLmdldFRlYW1zTGlzdCgpLG89W107dC5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmdldFBsYXllckxpc3QoKSxyPTA7cjx0Lmxlbmd0aDtyKyspby5wdXNoKHt1c2VySUQ6dFtyXS5nZXRVc2VyaWQoKSx1c2VyUHJvZmlsZTp1dGY4Qnl0ZUFycmF5VG9TdHJpbmcodFtyXS5nZXRVc2VycHJvZmlsZSgpKX0pfSk7dmFyIHI9e2JyaWdhZGVJRDplLmdldEJyaWdhZGVpZCgpLHBsYXllckxpc3Q6b307aS5wdXNoKHIpfSksdC50ZWFtTm90aWZ5SW5mbz17c3RhdHVzOnIsYnJpZ2FkZXM6aSxyb29tSW5mbzp7fX0sTVZTLkRFQlVHJiZjb25zb2xlLmxvZyhNVlMuTGdGb3JtYXQoXCJUZWFtTWF0Y2hSZXN1bHROb3RpZnlXb3JrXCIpLHQudGVhbU5vdGlmeUluZm8pLE1WUy5Ib3N0LkhPU1RfSE9URUxfQUREUj1NVlMuTXNVdGlsLmdldEhvdGVsVXJsKG8pLHQubVN0YXRlLlNldFRlYW1NYXRjaGluZygpLHQucm9vbUNoZWNrSW4oZS5wYXlsb2FkLmdldEJvb2tpbmZvKCksZS5wYXlsb2FkLmdldFJvb21pbmZvKCkpLDB9fWZ1bmN0aW9uIGllKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3QubVN0YXRlLlNldFRlYW1NYXRjaGluZygpO3ZhciByPXt0ZWFtSUQ6ZS5wYXlsb2FkLmdldFRlYW1pZCgpLHVzZXJJRDplLnBheWxvYWQuZ2V0VXNlcmlkKCl9O3QubVJzcC50ZWFtTWF0Y2hTdGFydE5vdGlmeSYmdC5tUnNwLnRlYW1NYXRjaFN0YXJ0Tm90aWZ5KHIpfX1mdW5jdGlvbiBhZSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7MjAwIT09ciYmdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLFwiZ2V0IG9mZiBsaW5lIGRhdGEgcmVzcG9uc2UgZXJyb3JcIik7dmFyIG89e3N0YXR1czpyLGZyYW1lQ291bnQ6ZS5wYXlsb2FkLmdldEZyYW1lY291bnQoKXx8MCxtc2dDb3VudDplLnBheWxvYWQuZ2V0TXNnY291bnQoKXx8MH07dC5tUnNwLmdldE9mZkxpbmVEYXRhUmVzcG9uc2UmJnQubVJzcC5nZXRPZmZMaW5lRGF0YVJlc3BvbnNlKG8pfX1mdW5jdGlvbiBuZSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7MjAwIT09ciYmdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLFwiY2FuY2VsIHRlYW0gbWF0Y2ggZmFpbGVkXCIpLHQubVN0YXRlLkRlbFRlYW1NYXRjaGluZygpLHQubVJzcC5jYW5jZWxUZWFtTWF0Y2hSZXNwb25zZSYmdC5tUnNwLmNhbmNlbFRlYW1NYXRjaFJlc3BvbnNlKHtzdGF0dXM6cn0pfX1mdW5jdGlvbiBwZSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt0Lm1TdGF0ZS5EZWxUZWFtTWF0Y2hpbmcoKTt2YXIgcj1lLnBheWxvYWQsbz17dGVhbUlEOnIuZ2V0VGVhbWlkKCksdXNlcklEOnIuZ2V0VXNlcmlkKCksY3BQcm90bzp1dGY4Qnl0ZUFycmF5VG9TdHJpbmcoci5nZXRDcHByb3RvKCkpfTt0Lm1Sc3AuY2FuY2VsVGVhbU1hdGNoTm90aWZ5JiZ0Lm1Sc3AuY2FuY2VsVGVhbU1hdGNoTm90aWZ5KG8pfX1mdW5jdGlvbiBnZSgpe3RoaXMuZG9TdWJIYW5kbGU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnBheWxvYWQuZ2V0U3RhdHVzKCk7MjAwIT09ciYmdSh0Lm1Sc3AuZXJyb3JSZXNwb25zZSxyLFwic2VuZCB0ZWFtIGV2ZW50IGZhaWxlZFwiKTt2YXIgbz17c3RhdHVzOnIsZHN0VXNlcklEczplLnBheWxvYWQuZ2V0RHN0dXNlcmlkc0xpc3QoKXx8W119O3QubVJzcC5zZW5kVGVhbUV2ZW50UmVzcG9uc2UmJnQubVJzcC5zZW5kVGVhbUV2ZW50UmVzcG9uc2Uobyl9fWZ1bmN0aW9uIHVlKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3ZhciByPWUucGF5bG9hZCxvPXt0ZWFtSUQ6ci5nZXRUZWFtaWQoKSx1c2VySUQ6ci5nZXRVc2VyaWQoKSxjcFByb3RvOnV0ZjhCeXRlQXJyYXlUb1N0cmluZyhyLmdldENwcHJvdG8oKSl9O3QubVJzcC5zZW5kVGVhbUV2ZW50Tm90aWZ5JiZ0Lm1Sc3Auc2VuZFRlYW1FdmVudE5vdGlmeShvKX19ZnVuY3Rpb24gbGUoKXt0aGlzLmRvU3ViSGFuZGxlPWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5wYXlsb2FkLmdldFN0YXR1cygpOzIwMCE9PXImJnUodC5tUnNwLmVycm9yUmVzcG9uc2UscixcImtpY2sgdGVhbSBtZW1iZXIgZmFpbGVkXCIpO3ZhciBvPXtzdGF0dXM6cixtZW1iZXJzOmUucGF5bG9hZC5nZXRNZW1iZXJzTGlzdCgpfHxbXSxvd25lcjplLnBheWxvYWQuZ2V0T3duZXIoKSx0ZWFtSUQ6ZS5wYXlsb2FkLmdldFRlYW1pZCgpfTt0Lm1Sc3Aua2lja1RlYW1NZW1iZXJSZXNwb25zZSYmdC5tUnNwLmtpY2tUZWFtTWVtYmVyUmVzcG9uc2Uobyl9fWZ1bmN0aW9uIG1lKCl7dGhpcy5kb1N1YkhhbmRsZT1mdW5jdGlvbihlLHQpe3ZhciByPWUucGF5bG9hZCxvPXIuZ2V0RHN0dXNlcmlkKCk7bz09PU51bWJlcih0Lm1Vc2VySUQpJiZ0Lm1TdGF0ZS5EZWxJblRlYW0oKTt2YXIgcz17dGVhbUlEOnIuZ2V0VGVhbWlkKCksdXNlcklEOnIuZ2V0VXNlcmlkKCksZHN0VXNlcklEOm8sb3duZXI6ci5nZXRPd25lcigpLG1lbWJlcnM6ci5nZXRNZW1iZXJzTGlzdCgpLGNwUHJvdG86dXRmOEJ5dGVBcnJheVRvU3RyaW5nKHIuZ2V0Q3Bwcm90bygpKX07dC5tUnNwLmtpY2tUZWFtTWVtYmVyTm90aWZ5JiZ0Lm1Sc3Aua2lja1RlYW1NZW1iZXJOb3RpZnkocyl9fWUuRXJyb3JSc3BXb3JrPXV9KE1WU3x8e30pLGZ1bmN0aW9uKGcpe3ZhciBvLG49e0lEOjAsdG9rZW46XCJcIn0sdT17Z2FtZUlEOjAsYXBwa2V5OlwiXCIsY2hhbm5lbDpcIlwiLHBsYXRmb3JtOlwiXCIsZGV2aWNlSUQ6XCJcIixnVmVyc2lvbjpcIlwifSxzPWZ1bmN0aW9uKGUpe2U9U3RyaW5nKGUpO2Zvcih2YXIgdD0wLHI9MDtyPGUubGVuZ3RoO3IrKyl7dmFyIG89ZS5jaGFyQ29kZUF0KHIpO3QrPW88MTI4PzE6bzwyMDQ4PzI6bzw2NTUzNj8zOm88MTw8MjE/NDpvPDE8PDI2PzU6bzwxPDwzMT82Ok51bWJlci5OYU59cmV0dXJuIHR9O2Z1bmN0aW9uIGUoKXsobz10aGlzKS5tU3RhdGU9bmV3IE1WUy5NdnNTdGF0ZSx0aGlzLm1BbGxQbGF5ZXJzPVtdLHRoaXMubVJlY250Um9vbUlEPTAsdGhpcy5tV2F0Y2hSb29tSUQ9MCx0aGlzLm1UZWFtSUQ9XCJcIix0aGlzLm1OZXRXb3JrQ2FsbEJhY2tJbXA9bnVsbCx0aGlzLm1Vc2VyTGlzdEZvckpvaW5Sb29tUnNwPVtdLHRoaXMuam9pblJvb21Ob3RpZnlJbmZvPXt9LHRoaXMudGVhbU5vdGlmeUluZm89bnVsbCx0aGlzLm1DbnRSb29tVHlwZT1NVlMuVGdSb29tVHlwZS5OUm9vbSx0aGlzLm1HVFdOZXR3b3JrPW51bGwsdGhpcy5tSG90ZWxOZXRXb3JrPW51bGwsdGhpcy5tV2F0Y2hOZXR3cm9rPW51bGwsdGhpcy5tUHJvdG9jb2w9bmV3IGcuTWF0Y2h2c1Byb3RvY29sLHRoaXMuaW5pdD1mdW5jdGlvbihlLHQscixvLHMsaSl7cmV0dXJuIE1WUy5HYW1lLmlkPW8sTVZTLm10YVJlcG9ydCYmTVZTLm10YVJlcG9ydC5SZXBvcnQoXCJpbml0XCIpLHRoaXMubVJzcD1lLHUuY2hhbm5lbD10LHUucGxhdGZvcm09cix1LmdWZXJzaW9uPWksdS5hcHBrZXk9cyx1LmdhbWVJRD1vLHRoaXMubVN0YXRlLlNldEluaXRpbmcoKSx0aGlzLm1Qcm90b2NvbC5pbml0KCksdGhpcy5nZXRIb3N0TGlzdCgpLDB9LHRoaXMucHJlbWlzZUluaXQ9ZnVuY3Rpb24oZSx0LHIsbyl7cmV0dXJuIHZvaWQgMD09PXR8fFwiXCI9PT10Py0xOih0aGlzLm1Sc3A9ZSxNVlMuR2FtZS5pZD1yLHUuZ2FtZUlEPXIsdS5hcHBrZXk9byxNVlMuSG9zdC5IT1NUX0dBVFdBWV9BRERSPVwid3M6Ly9cIit0LHRoaXMubVN0YXRlLlNldEluaXQoKSx0aGlzLm1Sc3AuaW5pdFJlc3BvbnNlKDIwMCksMCl9LHRoaXMucmVjb25uZWN0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5tU3RhdGUuUmVjb25uZWN0Q2hlY2soKTtpZigwIT09ZSlyZXR1cm4gZTtpZihcIjBcIiE9PXRoaXMubVJlY250Um9vbUlEJiYwPT09dGhpcy5tU3RhdGUuSGF2ZUxvZ2luKCkpe3RoaXMubVN0YXRlLlNldFJlY29ubmVjdGluZygpO3ZhciB0PW5ldyBNc1Jvb21Kb2luKE1zRW51bS5Kb2luUm9vbVR5cGUucmVjb25uZWN0LG4uSUQsdGhpcy5tUmVjbnRSb29tSUQsdS5nYW1lSUQsMCwwLDAsXCJyZWNvbm5lY3RcIixbe25hbWU6XCJNYXRjaFZTXCJ9XSkscj10aGlzLm1Qcm90b2NvbC5qb2luUm9vbVNwZWNpYWwodCk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChyKSx0aGlzLm1SZWNudFJvb21JRD1cIjBcIiwwfXJldHVybiAwPT09dS5nYW1lSUR8fFwiXCI9PT11LmFwcGtleT8tMToodm9pZCAwIT09dGhpcy5tR1RXTmV0d29yayYmbnVsbCE9PXRoaXMubUdUV05ldHdvcmsmJnRoaXMubUdUV05ldHdvcmsuY2xvc2UoKSx0aGlzLm1TdGF0ZS5TZXRSZWNvbm5lY3RpbmcoKSx0aGlzLmxvZ2luKG4uSUQsbi50b2tlbix1LmRldmljZUlEKSl9LHRoaXMubG9naW49ZnVuY3Rpb24oZSx0LHIpe3ZhciBvPXRoaXMubVN0YXRlLkxvZ2luQ2hlY2soKTtpZigwIT09bylyZXR1cm4gbztpZighKG5ldyBNVlMuQXBwS2V5Q2hlY2spLmlzSW52YWlsZWQodS5hcHBrZXkpKXJldHVybi0yNjtNVlMuY2NSZXBvcnQmJk1WUy5jY1JlcG9ydC5pbml0KCksTVZTLmNjUmVwb3J0JiZNVlMuY2NSZXBvcnQubG9naW4odS5nYW1lSUQpLHZvaWQgMCE9PXRoaXMubUdUV05ldHdvcmsmJm51bGwhPT10aGlzLm1HVFdOZXR3b3JrJiZ0aGlzLm1HVFdOZXR3b3JrLmNsb3NlKCksdGhpcy5tTmV0V29ya0NhbGxCYWNrSW1wPW5ldyBOZXRXb3JrQ2FsbEJhY2tJbXAodGhpcyksdGhpcy5tR1RXTmV0d29yaz1uZXcgTVZTLk1hdGNodnNOZXRXb3JrKE1WUy5Ib3N0LkhPU1RfR0FUV0FZX0FERFIsdGhpcy5tTmV0V29ya0NhbGxCYWNrSW1wKSxuLklEPWUsdGhpcy5tVXNlcklEPWUsbi50b2tlbj10LHUuZGV2aWNlSUQ9cjt2YXIgcz10aGlzLm1Qcm90b2NvbC5sb2dpbihlLHQsdS5nYW1lSUQsdS5hcHBrZXkscik7cmV0dXJuIHRoaXMubVN0YXRlLlNldExvZ2luaW5nKCksdGhpcy5tR1RXTmV0d29yay5zZW5kKHMpLE1hdGNodnNMb2cubG9nSShcImxvZ2luLHVzZXJJRFwiK2UrXCIsIHRva2VuOlwiK3QpLDB9LHRoaXMuY3JlYXRlUm9vbT1mdW5jdGlvbihlLHQscil7dmFyIG89dGhpcy5tU3RhdGUuSW5Sb29tQ2hlY2soKTtpZihvPDApcmV0dXJuIG87aWYoNTEyPHQubGVuZ3RoKXJldHVybi0yMTtpZihlLm1heFBsYXllcj5NVlMuQ29uZmlnLk1BWFBMQVlFUl9MSU1JVHx8ZS5tYXhQbGF5ZXI8TVZTLkNvbmZpZy5NSU5QTEFZRVJfTElNSVQpcmV0dXJuLTIwO3ZhciBzPXtyb29tSUQ6MCxyb29tTmFtZTplLnJvb21OYW1lLG1heFBsYXllcjplLm1heFBsYXllcixtb2RlOmUubW9kZSxjYW5XYXRjaDplLmNhbldhdGNoLHZpc2liaWxpdHk6ZS52aXNpYmlsaXR5LHJvb21Qcm9wZXJ0eTplLnJvb21Qcm9wZXJ0eSxvd25lcjowfSxpPXt1c2VySUQ6bi5JRCx1c2VyUHJvZmlsZTp0fSxhPXRoaXMubVByb3RvY29sLnJvb21DcmVhdGUodS5nYW1lSUQscyxpLHIpO3JldHVybiAxMDI0PGEuYnl0ZUxlbmd0aHx8NTEyPHQubGVuZ3RoPy0yMToodGhpcy5tU3RhdGUuU2V0Q3JlYXRlUm9vbSgpLHRoaXMubUdUV05ldHdvcmsuc2VuZChhKSxNYXRjaHZzTG9nLmxvZ0koXCJjcmVhdGUgcm9vbVwiKSwwKX0sdGhpcy51bmluaXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tU3RhdGUuUmVTZXQoKSx0aGlzLm1Sc3A9bnVsbCxNYXRjaHZzTG9nLmxvZ0koXCJ1bkluaXQgXCIpLDB9LHRoaXMuZ2V0Um9vbUxpc3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5tU3RhdGUuSW5Sb29tQ2hlY2soKTtpZigwIT09dClyZXR1cm4gdDt2YXIgcj10aGlzLm1Qcm90b2NvbC5nZXRSb29tTGlzdCh1LmdhbWVJRCxlKTtyZXR1cm4gMTAyNDxyLmJ5dGVMZW5ndGg/LTIxOih0aGlzLm1HVFdOZXR3b3JrLnNlbmQociksMCl9LHRoaXMucm9vbUNoZWNrSW49ZnVuY3Rpb24oZSx0KXt0aGlzLm1OZXRXb3JrQ2FsbEJhY2tJbXAuZnJhbWVDYWNoZT1bXSx0aGlzLm1Ib3RlbE5ldFdvcms9bmV3IE1WUy5NYXRjaHZzTmV0V29yayhNVlMuSG9zdC5IT1NUX0hPVEVMX0FERFIsdGhpcy5tTmV0V29ya0NhbGxCYWNrSW1wKTt2YXIgcj10aGlzLm1Qcm90b2NvbC5yb29tQ2hlY2tJbihlLHQsbi5JRCx1LmdhbWVJRCk7cmV0dXJuIHRoaXMubUhvdGVsTmV0V29yay5zZW5kKHIpLDB9LHRoaXMuam9pblJhbmRvbVJvb209ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLm1TdGF0ZS5JblJvb21DaGVjaygpO2lmKHI8MClyZXR1cm4gcjtpZihlPk1WUy5Db25maWcuTUFYUExBWUVSX0xJTUlUfHxlPE1WUy5Db25maWcuTUlOUExBWUVSX0xJTUlUKXJldHVybi0yMDtpZig1MTI8dC5sZW5ndGgpcmV0dXJuLTIxO3ZhciBvPW5ldyBNc1Jvb21Kb2luKE1zRW51bS5Kb2luUm9vbVR5cGUuam9pblJhbmRvbVJvb20sbi5JRCwwLHUuZ2FtZUlELGUsMCwwLHQsW3tuYW1lOlwibWF0Y2h2c1wifV0pLHM9dGhpcy5tUHJvdG9jb2wuam9pblJhbmRvbVJvb20obyk7cmV0dXJuIHRoaXMubVN0YXRlLlNldEpvaW5Sb29taW5nKCksdGhpcy5tR1RXTmV0d29yay5zZW5kKHMpLDB9LHRoaXMuam9pblJvb21XaXRoUHJvcGVydGllcz1mdW5jdGlvbihlLHQscil7dmFyIG89dGhpcy5tU3RhdGUuSW5Sb29tQ2hlY2soKTtpZihvPDApcmV0dXJuIG87aWYoNTEyPHQubGVuZ3RoKXJldHVybi0yMTtpZihcIm9iamVjdFwiIT10eXBlb2YgZSlyZXR1cm4tMTtpZihcInN0cmluZ1wiIT10eXBlb2YgdClyZXR1cm4tMTtpZihlLm1heFBsYXllcj5NVlMuQ29uZmlnLk1BWFBMQVlFUl9MSU1JVHx8ZS5tYXhQbGF5ZXI8TVZTLkNvbmZpZy5NSU5QTEFZRVJfTElNSVQpcmV0dXJuLTIwO3ZhciBzPW5ldyBNc1Jvb21Kb2luKE1zRW51bS5Kb2luUm9vbVR5cGUuam9pblJvb21XaXRoUHJvcGVydHksbi5JRCwxLHUuZ2FtZUlELGUubWF4UGxheWVyLGUubW9kZSxlLmNhbldhdGNoLHQsZS50YWdzLGUudmlzaWJpbGl0eSxlLnJvb21Qcm9wZXJ0eSksaT10aGlzLm1Qcm90b2NvbC5qb2luUm9vbVdpdGhQcm9wZXJ0aWVzKHMscik7cmV0dXJuIHRoaXMubVN0YXRlLlNldEpvaW5Sb29taW5nKCksdGhpcy5tR1RXTmV0d29yay5zZW5kKGkpLDB9LHRoaXMuam9pblJvb209ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLm1TdGF0ZS5JblJvb21DaGVjaygpO2lmKHI8MClyZXR1cm4gcjtpZighL15bMC05XSskLy50ZXN0KGUpKXJldHVybi0xO3ZhciBvPVN0cmluZyhlKS50cmltKCk7aWYoMD09PW98fFwiXCI9PT1vKXJldHVybi0xO3ZhciBzPW5ldyBNc1Jvb21Kb2luKE1zRW51bS5Kb2luUm9vbVR5cGUuam9pblNwZWNpYWxSb29tLG4uSUQsZSx1LmdhbWVJRCwwLDAsMCx0LFt7bmFtZTpcIk1hdGNoVlNcIn1dKSxpPXRoaXMubVByb3RvY29sLmpvaW5Sb29tU3BlY2lhbChzKTtyZXR1cm4gdGhpcy5tU3RhdGUuU2V0Sm9pblJvb21pbmcoKSx0aGlzLm1HVFdOZXR3b3JrLnNlbmQoaSksTWF0Y2h2c0xvZy5sb2dJKFwiam9pbiByb29tXCIpLDB9LHRoaXMuam9pbk92ZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5tU3RhdGUuSGF2ZUluUm9vbSgpO2lmKHQ8MClyZXR1cm4gdDtpZigxMDI0PGUubGVuZ3RoKXJldHVybi0yMTt2YXIgcj10aGlzLm1Qcm90b2NvbC5qb2luT3Zlcih1LmdhbWVJRCx0aGlzLm1Sb29tSW5mby5nZXRSb29taWQoKSxzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoZSksbi5JRCk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChyKSwwfSx0aGlzLmxlYXZlUm9vbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm1TdGF0ZS5MZWF2ZVJvb21DaGVjaygpO2lmKDAhPT10KXJldHVybiB0O3ZhciByPXRoaXMubVJlY250Um9vbUlEO2lmKHRoaXMubVJvb21JbmZvJiZ0aGlzLm1Sb29tSW5mby5nZXRSb29taWQmJihyPXRoaXMubVJvb21JbmZvLmdldFJvb21pZCgpKSwxMDI0PGUubGVuZ3RoKXJldHVybi0yMTt2YXIgbz10aGlzLm1Qcm90b2NvbC5sZWF2ZVJvb20odS5nYW1lSUQsbi5JRCxyLGUpO3JldHVybiB0aGlzLm1HVFdOZXR3b3JrLnNlbmQobyksdGhpcy5tU3RhdGUuU2V0TGVhdmVSb29taW5nKCksdGhpcy5tSG90ZWxOZXRXb3JrJiZ0aGlzLm1Ib3RlbE5ldFdvcmsuY2xvc2UoKSxNYXRjaHZzTG9nLmxvZ0koXCJsZWF2ZVJvb21cIiksMH0sdGhpcy5raWNrUGxheWVyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5tU3RhdGUuSGF2ZUluUm9vbSgpO2lmKHI8MClyZXR1cm4gcjtpZigxMDI0PHQubGVuZ3RoKXJldHVybi0yMTt2YXIgbz10aGlzLm1Qcm90b2NvbC5raWNrUGxheWVyKGUsbi5JRCx0aGlzLm1Sb29tSW5mby5nZXRSb29taWQoKSx0KTtyZXR1cm4gdGhpcy5tR1RXTmV0d29yay5zZW5kKG8pLDB9LHRoaXMuc2V0RnJhbWVTeW5jPWZ1bmN0aW9uKGUsdCxyKXt2b2lkIDA9PT1yJiYocj17Y2FjaGVGcmFtZU1TOjB9KTt2YXIgbz10aGlzLm1TdGF0ZS5IYXZlSW5Sb29tKCk7aWYobzwwKXJldHVybiBvO2lmKDIwPGV8fGU8MClyZXR1cm4tMjA7aWYoNmU1PHIuY2FjaGVGcmFtZU1TKXJldHVybi0yNTt2YXIgcz17Z2FtZUlEOnUuZ2FtZUlELHJvb21JRDp0aGlzLm1Sb29tSW5mby5nZXRSb29taWQoKSxwcmlvcml0eTowLGZyYW1lUmF0ZTplLGZyYW1laWR4OjEsZW5hYmxlR1M6dCxjYWNoZU1zOnIuY2FjaGVGcmFtZU1TfSxpPXRoaXMubVByb3RvY29sLnNldEZyYW1lU3luYyhzKTtyZXR1cm4gdGhpcy5tSG90ZWxOZXRXb3JrLnNlbmQoaSksMH0sdGhpcy5zZW5kRnJhbWVFdmVudD1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMubVN0YXRlLkhhdmVJblJvb20oKTtpZihyPDApcmV0dXJuIHI7aWYoMTAyNDxlLmxlbmd0aClyZXR1cm4tMjE7dmFyIG89dGhpcy5tUHJvdG9jb2wuc2VuZEZyYW1lRXZlbnQodGhpcy5tUm9vbUluZm8uZ2V0Um9vbWlkKCksMCxlLHR8fDIpO3JldHVybiB0aGlzLm1Ib3RlbE5ldFdvcmsuc2VuZChvKSwwfSx0aGlzLmpvaW5PcGVuPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubVN0YXRlLkhhdmVJblJvb20oKTtpZih0PDApcmV0dXJuIHQ7dmFyIHI9dGhpcy5tUHJvdG9jb2wuam9pbk9wZW4odS5nYW1lSUQsbi5JRCx0aGlzLm1Sb29tSW5mby5nZXRSb29taWQoKSxlKTtyZXR1cm4gdGhpcy5tR1RXTmV0d29yay5zZW5kKHIpLDB9fWUucHJvdG90eXBlLmxvZ291dD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm1TdGF0ZS5IYXZlTG9naW4oKTtpZigwIT09dClyZXR1cm4gdDswPT09dGhpcy5tU3RhdGUuSGF2ZUluUm9vbSgpJiYodGhpcy5tU3RhdGUuU2V0TGVhdmVSb29taW5nKCksdGhpcy5sZWF2ZVJvb20oXCJ1c2VyIGxvZ291dFwiKSx0aGlzLm1Ib3RlbE5ldFdvcmsmJnRoaXMubUhvdGVsTmV0V29yay5jbG9zZSgpKSxNVlMuY2NSZXBvcnQmJk1WUy5jY1JlcG9ydC5sb2dvdXQoKTt2YXIgcj10aGlzLm1Qcm90b2NvbC5sb2dvdXQoZSk7cmV0dXJuIHRoaXMubVN0YXRlLlNldExvZ2luT3V0aW5nKCksdGhpcy5tR1RXTmV0d29yay5zZW5kKHIpLDB9LGUucHJvdG90eXBlLmhlYXJ0QmVhdD1mdW5jdGlvbigpe3ZhciBlO2lmKHZvaWQgMCE9PXUuZ2FtZUlEJiZcIlwiIT09dS5nYW1lSUQmJjAhPT11LmdhbWVJRCYmKGU9dm9pZCAwPT09by5tUm9vbUluZm8/MDpvLm1Sb29tSW5mby5nZXRSb29taWQoKSwhby5tU3RhdGUuSXNMb2dpbk91dGluZygpKSl7dmFyIHQ9by5tUHJvdG9jb2wuaGVhcnRCZWF0KHUuZ2FtZUlELGUpO28ubUdUV05ldHdvcmsuc2VuZCh0KSxNYXRjaHZzTG9nLmxvZ0koXCJnYXRld2F5IGhlYXJ0QmVhdDpcIil9fSxlLnByb3RvdHlwZS5zZW5kRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5tU3RhdGUuSGF2ZUluUm9vbSgpO2lmKDAhPT10KXJldHVybntzZXF1ZW5jZTp0aGlzLm1Qcm90b2NvbC5zZXEtMSxyZXN1bHQ6dH07aWYoMTAyNDxlLmxlbmd0aClyZXR1cm4tMjE7dmFyIHI9dGhpcy5tUHJvdG9jb2wuYnJvYWRDYXN0KHRoaXMubVJvb21JbmZvLmdldFJvb21pZCgpLFt0aGlzLm1Vc2VySURdLDEsMCxzdHJpbmdUb1V0ZjhCeXRlQXJyYXkoZSkpO3JldHVybiB0aGlzLm1Ib3RlbE5ldFdvcmsuc2VuZChyKSx7c2VxdWVuY2U6dGhpcy5tUHJvdG9jb2wuc2VxLTEscmVzdWx0OjB9fSxlLnByb3RvdHlwZS5zZW5kRXZlbnRFeD1mdW5jdGlvbihlLHQscixvKXt2YXIgcz10aGlzLm1TdGF0ZS5IYXZlSW5Sb29tKCk7aWYoMCE9PXMpcmV0dXJue3NlcXVlbmNlOnRoaXMubVByb3RvY29sLnNlcS0xLHJlc3VsdDpzfTtpZihcInN0cmluZ1wiIT10eXBlb2YgdClyZXR1cm57c2VxdWVuY2U6dGhpcy5tUHJvdG9jb2wuc2VxLTEscmVzdWx0Oi0xfTtpZigwIT09ZSYmMSE9PWUmJjIhPT1lKXJldHVybntzZXF1ZW5jZTp0aGlzLm1Qcm90b2NvbC5zZXEtMSxyZXN1bHQ6LTIzfTtpZigwIT09ciYmMSE9PXIpcmV0dXJue3NlcXVlbmNlOnRoaXMubVByb3RvY29sLnNlcS0xLHJlc3VsdDotMjR9O2lmKDEwMjQ8dC5sZW5ndGgpcmV0dXJuLTIxO3ZhciBpPXRoaXMubVByb3RvY29sLmJyb2FkQ2FzdCh0aGlzLm1Sb29tSW5mby5nZXRSb29taWQoKSxvLHIsZSxzdHJpbmdUb1V0ZjhCeXRlQXJyYXkodCkpO3JldHVybiB0aGlzLm1Ib3RlbE5ldFdvcmsuc2VuZChpKSx7c2VxdWVuY2U6dGhpcy5tUHJvdG9jb2wuc2VxLTEscmVzdWx0OjB9fSxlLnByb3RvdHlwZS5zdWJzY3JpYmVFdmVudEdyb3VwPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5tU3RhdGUuSGF2ZUluUm9vbSgpO2lmKDAhPT1yKXJldHVybiByO2lmKDA9PT1lLmxlbmd0aCYmMD09PXQubGVuZ3RoKXJldHVybi0yMDt2YXIgbz10aGlzLm1Qcm90b2NvbC5zdWJzY3JpYmVFdmVudEdyb3VwKHUuZ2FtZUlELHRoaXMubVJvb21JbmZvLmdldFJvb21pZCgpLGUsdCk7cmV0dXJuIHRoaXMubUhvdGVsTmV0V29yay5zZW5kKG8pLDB9LGUucHJvdG90eXBlLnNlbmRFdmVudEdyb3VwPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5tU3RhdGUuSGF2ZUluUm9vbSgpO2lmKDAhPT1yKXJldHVybiByO2lmKHQubGVuZ3RoPD0wKXJldHVybi0yMDtpZigxMDI0PGUubGVuZ3RoKXJldHVybi0yMTt2YXIgbz10aGlzLm1Qcm90b2NvbC5zZW5kRXZlbnRHcm91cCh1LmdhbWVJRCx0aGlzLm1Sb29tSW5mby5nZXRSb29taWQoKSwxLHQsZSk7cmV0dXJuIHRoaXMubUhvdGVsTmV0V29yay5zZW5kKG8pLDB9LGUucHJvdG90eXBlLmhvdGVsSGVhcnRCZWF0PWZ1bmN0aW9uKCl7aWYoby5tU3RhdGUuSXNMZWF2ZVJvb21pbmcoKSlyZXR1cm4gMDtvLm1TdGF0ZS5TZXRMb2dpbigpLG8ubVN0YXRlLlNldEluUm9vbSgpO3ZhciBlPW8ubVByb3RvY29sLmhvdGVsSGVhcnRCZWF0KHUuZ2FtZUlELG8ubVJvb21JbmZvLmdldFJvb21pZCgpLG4uSUQpO28ubUhvdGVsTmV0V29yay5zZW5kKGUpLE1hdGNodnNMb2cubG9nSShcImhvdGVsIGhlYXJ0QmVhdDpcIil9LGUucHJvdG90eXBlLnJlZ2lzdGVyVXNlcj1mdW5jdGlvbigpe01WUy5tdGFSZXBvcnQmJk1WUy5tdGFSZXBvcnQuUmVwb3J0KFwicmVnaXN0ZXJVc2VyXCIpO3ZhciBlPXRoaXMubVN0YXRlLkhhdmVJbml0KCk7aWYoMCE9PWUpcmV0dXJuIGU7dmFyIHQ9dS5jaGFubmVsLHI9XCJyZWdVc2VySW5mb1wiK3QrdS5wbGF0Zm9ybSxvPXUuZ1ZlcnNpb24scz1Mb2NhbFN0b3JlX0xvYWQocik7aWYocyl7dmFyIGk9SlNPTi5wYXJzZShzKTtyZXR1cm4gdGhpcy5tUnNwLnJlZ2lzdGVyVXNlclJlc3BvbnNlKG5ldyBNc1JlZ2lzdFJzcChpLnN0YXR1cyxpLmRhdGEudXNlcmlkLGkuZGF0YS50b2tlbixpLmRhdGEubmlja25hbWUsaS5kYXRhLmF2YXRhcikpLE1hdGNodnNMb2cubG9nSShcImxvYWQgdXNlciBpbmZvIGZyb20gY2FjaGU6XCIraSksMH12YXIgYT1nLkFQSVBBVEguUkVHSVNURVJVU0VSLG49TVZTLkhvc3QuVlNfVVNFUl9VUkwrYStcIj9tYWM9MCZkZXZpY2VpZD1qYXZhc2NyaXB0JmNoYW5uZWw9XCIrdCtcIiZwaWQ9MTMmdmVyc2lvbj1cIitvLHA9e3JzcDp0aGlzLm1Sc3AucmVnaXN0ZXJVc2VyUmVzcG9uc2Usb25Nc2c6ZnVuY3Rpb24oZSl7dmFyIHQ9SlNPTi5wYXJzZShlKTswPT09dC5zdGF0dXM/KExvY2FsU3RvcmVfU2F2ZShyLGUpLHRoaXMucnNwKG5ldyBNc1JlZ2lzdFJzcCh0LnN0YXR1cyx0LmRhdGEudXNlcmlkLHQuZGF0YS50b2tlbix0LmRhdGEubmlja25hbWUsdC5kYXRhLmF2YXRhcikpKTp0aGlzLnJzcChuZXcgTXNSZWdpc3RSc3AodC5zdGF0dXMsMCxcImVyclwiLGUsXCJlcnJcIikpLE1WUy5tdGFSZXBvcnQmJk1WUy5tdGFSZXBvcnQuUmVwb3J0KFwicmVnaXN0ZXJVc2VyUmVzcG9uc2VcIil9LG9uRXJyOmZ1bmN0aW9uKCl7dGhpcy5yc3AobmV3IE1zUmVnaXN0UnNwKDA9PT1lcnJDb2RlPy0xOmVyckNvZGUsMCxcImVyclwiLGVyck1zZyxcImVyclwiKSl9fTtyZXR1cm4gbmV3IE1WUy5NYXRjaHZzSHR0cChwKS5nZXQobiksMH0sZS5wcm90b3R5cGUuZ2V0SG9zdExpc3Q9ZnVuY3Rpb24oKXt2YXIgZT11LmdhbWVJRCx0PXUuY2hhbm5lbCxyPXUucGxhdGZvcm0sbz1nLkFQSVBBVEguSE9TVExJU1Qscz1NVlMuTXNVdGlsLmlzTmVlZFVzZVdTUygpLGk9TVZTLkhvc3QuTUFJTl9VUkwrbytcIj9tYWM9MCZnYW1laWQ9XCIrZStcIiZjaGFubmVsPVwiK3QrXCImcGxhdGZvcm09XCIrcisocz9cIiZ1c2VXU1NQcm94eT0xXCI6XCJcIiksYT10aGlzLG49e29uTXNnOmZ1bmN0aW9uKGUpe3ZhciB0PUpTT04ucGFyc2UoZSk7aWYoMjAwPT09dC5zdGF0dXMpe2EubVN0YXRlLlNldEluaXQoKTt2YXIgcj1cImh0dHBzOi8vXCI7TVZTLkhvc3QuVlNfVVNFUl9VUkw9cit0LmRhdGEudnN1c2VyLE1WUy5Ib3N0LkhPU1RfR0FUV0FZX0FERFI9KHM/XCJ3c3M6Ly9cIjpcIndzOi8vXCIpKyhzP3QuZGF0YS53c3NQcm94eTp0LmRhdGEuZW5naW5lK1wiOjcwMDFcIiksTVZTLkhvc3QuQ01TTlNfVVJMPXIrdC5kYXRhLmNtc25zLE1WUy5Ib3N0LlZTX09QRU5fVVJMPXIrdC5kYXRhLnZzb3BlbixNVlMuSG9zdC5WU19QQVlfVVJMPXIrdC5kYXRhLnZzcGF5LE1WUy5Ib3N0LlZTX1BST0RVQ1RfVVJMPXIrdC5kYXRhLlZTX1BST0RVQ1RfVVJMfU1WUy5tdGFSZXBvcnQmJk1WUy5tdGFSZXBvcnQuUmVwb3J0KFwiaW5pdFJlc3BvbnNlXCIpLGEubVJzcC5pbml0UmVzcG9uc2UodC5zdGF0dXMpfSxvbkVycjpmdW5jdGlvbihlLHQpe2NvbnNvbGUuZXJyb3IoXCJnZXRIb3N0TGlzdEVyckNvZGVcIitlK1wiIGdldEhvc3RMaXN0RXJyTXNnXCIrdCksYS5tUnNwLmVycm9yUmVzcG9uc2UoZSx0KX19O3JldHVybiBuZXcgTVZTLk1hdGNodnNIdHRwKG4pLmdldChpKSwwfSxlLnByb3RvdHlwZS5nZXRSb29tTGlzdEV4PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubVN0YXRlLkhhdmVMb2dpbigpO2lmKDAhPT10KXJldHVybiB0O3ZhciByPXRoaXMubVByb3RvY29sLmdldFJvb21MaXN0RXgodS5nYW1lSUQsZSk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChyKSwwfSxlLnByb3RvdHlwZS5nZXRSb29tRGV0YWlsPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubVN0YXRlLkhhdmVMb2dpbigpO2lmKDAhPT10KXJldHVybiB0O3ZhciByPXRoaXMubVByb3RvY29sLmdldFJvb21EZXRhaWwodS5nYW1lSUQsZSk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChyKSwwfSxlLnByb3RvdHlwZS5zZXRSb29tUHJvcGVydHk9ZnVuY3Rpb24oZSx0KXtpZigwPT09dC5sZW5ndGgpcmV0dXJuLTE7aWYoMTAyNDx0Lmxlbmd0aClyZXR1cm4tMjE7dmFyIHI9dGhpcy5tU3RhdGUuSGF2ZUluUm9vbSgpO2lmKDAhPT1yKXJldHVybiByO3ZhciBvPXRoaXMubVByb3RvY29sLnNldFJvb21Qcm9wZXJ0eSh1LmdhbWVJRCxuLklELGUsdCk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChvKSwwfSxlLnByb3RvdHlwZS5qb2luV2F0Y2hSb29tPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5tU3RhdGUuSW5Sb29tQ2hlY2soKTtpZigwIT09cilyZXR1cm4gcjtpZig1MTI8dC5sZW5ndGgpcmV0dXJuLTIxO3RoaXMubVdhdGNoUm9vbUlEPWU7dmFyIG89dGhpcy5tUHJvdG9jb2wuam9pbldhdGNoUm9vbSh1LmdhbWVJRCxuLklELHRoaXMubVdhdGNoUm9vbUlELHQpO3JldHVybiB0aGlzLm1TdGF0ZS5TZXRKb2luV2F0Y2hpbmcoKSx0aGlzLm1HVFdOZXR3b3JrLnNlbmQobykscn0sZS5wcm90b3R5cGUuZW50ZXJMaXZlUm9vbT1mdW5jdGlvbihlLHQpe3RoaXMubU5ldFdvcmtDYWxsQmFja0ltcC5mcmFtZUNhY2hlPVtdLHQmJih0aGlzLm1XYXRjaFJvb21JRD10KSx0aGlzLm1XYXRjaE5ldHdyb2s9bmV3IE1WUy5NYXRjaHZzTmV0V29yayhNVlMuSG9zdC5IT1NUX1dBVENIX0FERFIsdGhpcy5tTmV0V29ya0NhbGxCYWNrSW1wKTt2YXIgcj10aGlzLm1Qcm90b2NvbC5lbnRlckxpdmVSb29tKGUsdS5nYW1lSUQsbi5JRCx0aGlzLm1XYXRjaFJvb21JRCwwKTtyZXR1cm4gdGhpcy5tV2F0Y2hOZXR3cm9rLnNlbmQociksMH0sZS5wcm90b3R5cGUubGl2ZUhlYXJ0QmVhdD1mdW5jdGlvbigpe3ZhciBlPW8sdD1lLm1SZWNudFJvb21JRCxyPWUubVByb3RvY29sLmxpdmVIZWFydEJlYXQodS5nYW1lSUQsdCxuLklEKTtyZXR1cm4gZS5tV2F0Y2hOZXR3cm9rLnNlbmQociksTWF0Y2h2c0xvZy5sb2dJKFwibGl2ZSBoZWFydEJlYXRcIiksMH0sZS5wcm90b3R5cGUubGVhdmVXYXRjaFJvb209ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5tU3RhdGUuSGF2ZUxvZ2luKCk7aWYoMCE9PXQpcmV0dXJuIHQ7dmFyIHI9dGhpcy5tV2F0Y2hSb29tSUQsbz10aGlzLm1Qcm90b2NvbC5sZWF2ZVdhdGNoUm9vbSh1LmdhbWVJRCxuLklELHIsZSk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChvKSxNYXRjaHZzTG9nLmxvZ0koXCJsZWF2ZVdhdGNoUm9vbVwiKSwwfSxlLnByb3RvdHlwZS5zZW5kV2F0Y2hFdmVudD1mdW5jdGlvbihlLHQscixvKXt2YXIgcz10aGlzLm1SZWNudFJvb21JRDtpZigxMDI0PG8ubGVuZ3RoKXJldHVybi0yMTt2YXIgaT10aGlzLm1Qcm90b2NvbC5icm9hZENhc3RXYXRjaChzLGUscix0LG8pO3JldHVybiB0aGlzLm1XYXRjaE5ldHdyb2suc2VuZChpKSwwfSxlLnByb3RvdHlwZS5zZXRMaXZlT2Zmc2V0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubVN0YXRlLkhhdmVJbldhdGNoKCk7aWYoMCE9PXQpcmV0dXJuIHQ7dmFyIHI9dGhpcy5tV2F0Y2hSb29tSUQsbz10aGlzLm1Qcm90b2NvbC5zZXRMaXZlT2Zmc2V0KHUuZ2FtZUlELHIsbi5JRCxlKTtyZXR1cm4gdGhpcy5tV2F0Y2hOZXR3cm9rLnNlbmQobyksMH0sZS5wcm90b3R5cGUuZ2V0V2F0Y2hSb29tTGlzdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm1TdGF0ZS5IYXZlTG9naW4oKTtpZigwIT09dClyZXR1cm4gdDt2YXIgcj10aGlzLm1Qcm90b2NvbC5nZXRXYXRjaFJvb21zKHUuZ2FtZUlELGUpO3JldHVybiB0aGlzLm1HVFdOZXR3b3JrLnNlbmQociksMH0sZS5wcm90b3R5cGUuY2hhbmdlUm9sZT1mdW5jdGlvbihlLHQpe3ZhciByPXRoaXMubVdhdGNoUm9vbUlELG89MCxzPXRoaXMubVN0YXRlLkhhdmVMb2dpbigpO2lmKDAhPT1zKXJldHVybiBzO2lmKE1hdGNodnNMb2cubG9nSShcInRhcmdldFJvb21UeXBlOlwiK3QrXCIgbUNudFJvb21UeXBlOlwiK3RoaXMubUNudFJvb21UeXBlK1wiIHJvb21JRDpcIit0aGlzLm1SZWNudFJvb21JRCksdGhpcy5tQ250Um9vbVR5cGU9PT1NVlMuVGdSb29tVHlwZS5QUm9vbSl7aWYocz10aGlzLm1TdGF0ZS5IYXZlSW5Sb29tKCksdGhpcy5tQ250Um9vbVR5cGU9PT10KXJldHVybi0zMDtyPXRoaXMubVJlY250Um9vbUlELG89TVZTLlRnUm9vbVR5cGUuV1Jvb219ZWxzZXtpZih0aGlzLm1DbnRSb29tVHlwZSE9PU1WUy5UZ1Jvb21UeXBlLldSb29tKXJldHVybi0xO2lmKHM9dGhpcy5tU3RhdGUuSGF2ZUluV2F0Y2goKSx0aGlzLm1DbnRSb29tVHlwZT09PXQpcmV0dXJuLTMwO3I9dGhpcy5tV2F0Y2hSb29tSUQsbz1NVlMuVGdSb29tVHlwZS5QUm9vbX1pZigwIT09cylyZXR1cm4gczt2YXIgaT10aGlzLm1Qcm90b2NvbC5jaGFuZ2VSb2xlUHJvdG8obi5JRCx1LmdhbWVJRCxyLG8sZSk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChpKSwwfSxlLnByb3RvdHlwZS5zZXRSZWNvbm5lY3RUaW1lb3V0PWZ1bmN0aW9uKGUpe3ZhciB0PU51bWJlcihlKSxyPXRoaXMubVN0YXRlLkhhdmVMb2dpbigpO2lmKDAhPT1yKXJldHVybiByO2lmKHQ8LTF8fDYwMDx0KXJldHVybi0yNzt2YXIgbz10aGlzLm1Qcm90b2NvbC5zZXRSZWNvbm5lY3RUaW1lb3V0KG4uSUQsZSk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChvKSwwfSxlLnByb3RvdHlwZS5jcmVhdGVUZWFtPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubVN0YXRlLkluUm9vbUNoZWNrKCk7aWYoMCE9PXQpcmV0dXJuIHQ7aWYoNTEyPGUudXNlclByb2ZpbGUubGVuZ3RoKXJldHVybi0yMTtpZig1MDxOdW1iZXIoZS5jYXBhY2l0eSl8fE51bWJlcihlLmNhcGFjaXR5KTwxKXJldHVybi0yMDt2YXIgcj17dGVhbUlEOlwiMFwiLHBhc3N3b3JkOmUucGFzc3dvcmQsY2FwYWNpdHk6ZS5jYXBhY2l0eSxtb2RlOmUubW9kZSxvd25lcjowLHZpc2liaWxpdHk6ZS52aXNpYmlsaXR5fSxvPXt1c2VySUQ6bi5JRCx1c2VyUHJvZmlsZTplLnVzZXJQcm9maWxlfSxzPXRoaXMubVByb3RvY29sLkNyZWF0ZVRlYW0odS5nYW1lSUQscixvKTtyZXR1cm4gdGhpcy5tR1RXTmV0d29yay5zZW5kKHMpLDB9LGUucHJvdG90eXBlLmpvaW5UZWFtPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMubVN0YXRlLkluUm9vbUNoZWNrKCk7aWYoMCE9PXQpcmV0dXJuIHQ7aWYoNTEyPGUudXNlclByb2ZpbGUubGVuZ3RoKXJldHVybi0yMTt0aGlzLm1UZWFtSUQ9ZS50ZWFtSUQ7dmFyIHI9e2dhbWVJRDp1LmdhbWVJRCx0ZWFtSUQ6ZS50ZWFtSUQscGFzc3dvcmQ6ZS5wYXNzd29yZCxwbGF5ZXI6e3VzZXJJRDpuLklELHVzZXJQcm9maWxlOmUudXNlclByb2ZpbGV9fSxvPXRoaXMubVByb3RvY29sLkpvaW5UZWFtKHIpO3JldHVybiB0aGlzLm1HVFdOZXR3b3JrLnNlbmQobyksMH0sZS5wcm90b3R5cGUubGVhdmVUZWFtPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5tU3RhdGUuSGF2ZUxvZ2luKCk7aWYoMCE9PWUpcmV0dXJuIGU7dmFyIHQ9e2dhbWVJRDp1LmdhbWVJRCx1c2VySUQ6bi5JRCx0ZWFtSUQ6dGhpcy5tVGVhbUlEfSxyPXRoaXMubVByb3RvY29sLkxlYXZlVGVhbSh0KTtyZXR1cm4gdGhpcy5tR1RXTmV0d29yay5zZW5kKHIpLDB9LGUucHJvdG90eXBlLnRlYW1NYXRjaD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm1TdGF0ZS5JblJvb21DaGVjaygpO2lmKDAhPT10KXJldHVybiB0O2lmKDUxMjxlLnJvb21Qcm9wZXJ0eS5sZW5ndGgpcmV0dXJuLTIxO2lmKDEwMDxlLm1heFBsYXllcnx8ZS5tYXhQbGF5ZXI8MClyZXR1cm4tMjA7dmFyIHI9e2dhbWVJRDp1LmdhbWVJRCx0ZWFtSUQ6dGhpcy5tVGVhbUlELHVzZXJJRDpuLklELGNvbmQ6ZS5jb25kLHdhdGNoU2V0OmUud2F0Y2hTZXQscm9vbUluZm86e3Jvb21OYW1lOmUucm9vbU5hbWUsbW9kZTplLm1vZGUsbWF4UGxheWVyOmUubWF4UGxheWVyLGNhbldhdGNoOmUuY2FuV2F0Y2gsdmlzaWJpbGl0eTplLnZpc2liaWxpdHkscm9vbVByb3BlcnR5OmUucm9vbVByb3BlcnR5fX0sbz10aGlzLm1Qcm90b2NvbC5UZWFtTWF0Y2gocik7cmV0dXJuIHRoaXMubVN0YXRlLlNldFRlYW1NYXRjaGluZygpLHRoaXMubUdUV05ldHdvcmsuc2VuZChvKSwwfSxlLnByb3RvdHlwZS5nZXRPZmZMaW5lRGF0YT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLm1TdGF0ZS5IYXZlSW5Sb29tKCk7aWYoMCE9PXQpcmV0dXJuIHQ7dmFyIHI9e2dhbWVJRDp1LmdhbWVJRCxyb29tSUQ6dGhpcy5tUmVjbnRSb29tSUQrXCJcIixjYWNoZUZyYW1lTVM6ZX0sbz10aGlzLm1Qcm90b2NvbC5HZXRPZmZMaW5lRGF0YShyKTtyZXR1cm4gdGhpcy5tSG90ZWxOZXRXb3JrLnNlbmQobyksMH0sZS5wcm90b3R5cGUuY2FuY2VsVGVhbU1hdGNoPWZ1bmN0aW9uKGUpe2lmKDEwMjQ8cyhlLmNwUHJvdG8pKXJldHVybi0yMTtpZighdGhpcy5tU3RhdGUuSXNUZWFtTWF0Y2hpbmcoKSlyZXR1cm4tMTtpZihcIlwiPT09dGhpcy5tVGVhbUlEKXJldHVybi0xO3ZhciB0PXtnYW1lSUQ6dS5nYW1lSUQsdGVhbUlEOnRoaXMubVRlYW1JRCx1c2VySUQ6bi5JRCxjcFByb3RvOmUuY3BQcm90b30scj10aGlzLm1Qcm90b2NvbC5DYW5jZWxUZWFtTWF0Y2godCk7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChyKSwwfSxlLnByb3RvdHlwZS5zZW5kVGVhbUV2ZW50PWZ1bmN0aW9uKGUpe2lmKDEwMjQ8cyhlLmRhdGEpKXJldHVybi0yMTt2YXIgdD10aGlzLm1TdGF0ZS5IYXZlSW5UZWFtKCk7aWYoMCE9PXQpcmV0dXJuIHQ7dmFyIHI9e2dhbWVJRDp1LmdhbWVJRCx0ZWFtSUQ6dGhpcy5tVGVhbUlELHVzZXJJRDpuLklELGRzdFR5cGU6ZS5kc3RUeXBlLG1zZ1R5cGU6ZS5tc2dUeXBlLGNwUHJvdG86ZS5kYXRhLGRzdFVpZHM6ZS5kc3RVc2VySURzfSxvPXRoaXMubVByb3RvY29sLlNlbmRUZWFtRXZlbnQocik7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChvKSwwfSxlLnByb3RvdHlwZS5raWNrVGVhbU1lbWJlcj1mdW5jdGlvbihlKXtpZigxMDI0PHMoZS5jcFByb3RvKSlyZXR1cm4tMjE7dmFyIHQ9dGhpcy5tU3RhdGUuSGF2ZUluVGVhbSgpO2lmKDAhPT10KXJldHVybiB0O3ZhciByPXtnYW1lSUQ6dS5nYW1lSUQsdGVhbUlEOnRoaXMubVRlYW1JRCx1c2VySUQ6bi5JRCxkc3R1c2VySUQ6ZS51c2VySUQsY3BQcm90bzplLmNwUHJvdG99LG89dGhpcy5tUHJvdG9jb2wuS2lja1RlYW1NZW1iZXIocik7cmV0dXJuIHRoaXMubUdUV05ldHdvcmsuc2VuZChvKSwwfSx3aW5kb3cuTWF0Y2h2c0VuZ2luZT1lLGcuTWF0Y2h2c0VuZ2luZT1lfShNVlN8fHt9KTt0cnl7bW9kdWxlJiZtb2R1bGUuZXhwb3J0cyYmKG1vZHVsZS5leHBvcnRzPXtNVlM6TVZTLE1hdGNodnNMb2c6TWF0Y2h2c0xvZyxNYXRjaHZzRW5naW5lOk1WUy5NYXRjaHZzRW5naW5lLE1hdGNodnNSZXNwb25zZTpNYXRjaHZzUmVzcG9uc2UsTXNNYXRjaEluZm86TXNNYXRjaEluZm8sTXNDcmVhdGVSb29tSW5mbzpNc0NyZWF0ZVJvb21JbmZvLE1zUm9vbUZpbHRlcjpNc1Jvb21GaWx0ZXIsTXNSb29tRmlsdGVyRXg6TXNSb29tRmlsdGVyRXgsTG9jYWxTdG9yZV9DbGVhcjpMb2NhbFN0b3JlX0NsZWFyLE1zUmVvcGVuUm9vbVJlc3BvbnNlOk1zUmVvcGVuUm9vbVJlc3BvbnNlLE1zUmVvcGVuUm9vbU5vdGlmeTpNc1Jlb3BlblJvb21Ob3RpZnksTWF0Y2h2c0h0dHA6TVZTLk1hdGNodnNIdHRwfSl9Y2F0Y2goZSl7Y29uc29sZS5sb2coZSl9d2luZG93Lk1WUz1NVlMsd2luZG93Lk1hdGNodnNMb2c9TWF0Y2h2c0xvZyx3aW5kb3cuTWF0Y2h2c0VuZ2luZT1NYXRjaHZzRW5naW5lLHdpbmRvdy5NYXRjaHZzUmVzcG9uc2U9TWF0Y2h2c1Jlc3BvbnNlLHdpbmRvdy5Nc01hdGNoSW5mbz1Nc01hdGNoSW5mbyx3aW5kb3cuTXNDcmVhdGVSb29tSW5mbz1Nc0NyZWF0ZVJvb21JbmZvLHdpbmRvdy5Nc1Jvb21GaWx0ZXI9TXNSb29tRmlsdGVyLHdpbmRvdy5Nc1Jvb21GaWx0ZXJFeD1Nc1Jvb21GaWx0ZXJFeCx3aW5kb3cuTG9jYWxTdG9yZV9DbGVhcj1Mb2NhbFN0b3JlX0NsZWFyLHdpbmRvdy5Nc1Jlb3BlblJvb21SZXNwb25zZT1Nc1Jlb3BlblJvb21SZXNwb25zZSx3aW5kb3cuTXNSZW9wZW5Sb29tTm90aWZ5PU1zUmVvcGVuUm9vbU5vdGlmeSx3aW5kb3cuTWF0Y2h2c0h0dHA9TVZTLk1hdGNodnNIdHRwOyJdfQ==